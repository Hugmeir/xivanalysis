{"version":3,"file":"assets/jobs-blu.aa6f174f.js","mappings":"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","sources":["webpack://@xivanalysis/client/./node_modules/@babel/runtime-corejs3/core-js-stable/instance/flat.js","webpack://@xivanalysis/client/./src/parser/core/modules/AlwaysBeCasting.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/Death.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/LucidDreaming.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/StatusTimeline.ts","webpack://@xivanalysis/client/./src/parser/core/modules/Weaving.tsx","webpack://@xivanalysis/client/./src/parser/jobs/blu/modules/ActionTimeline.tsx","webpack://@xivanalysis/client/./src/parser/jobs/blu/modules/AlwaysBeCasting.tsx","webpack://@xivanalysis/client/./src/parser/jobs/blu/modules/BLURaidBuffs.tsx","webpack://@xivanalysis/client/./src/parser/jobs/blu/modules/DISPLAY_ORDER.ts","webpack://@xivanalysis/client/./src/parser/jobs/blu/modules/ColdFog.tsx","webpack://@xivanalysis/client/./src/parser/jobs/blu/modules/Death.tsx","webpack://@xivanalysis/client/./src/parser/jobs/blu/modules/Defensives.tsx","webpack://@xivanalysis/client/./src/parser/jobs/blu/modules/DoTs.tsx","webpack://@xivanalysis/client/./src/parser/jobs/blu/modules/DroppedBuffs.tsx","webpack://@xivanalysis/client/./src/parser/jobs/blu/modules/GeneralCDDowntime.ts","webpack://@xivanalysis/client/./src/parser/jobs/blu/modules/Interrupts.tsx","webpack://@xivanalysis/client/./src/parser/jobs/blu/modules/MoonFlute.tsx","webpack://@xivanalysis/client/./src/parser/jobs/blu/modules/Overheal.tsx","webpack://@xivanalysis/client/./src/parser/jobs/blu/modules/RevengeBlast.tsx","webpack://@xivanalysis/client/./src/parser/jobs/blu/modules/Swiftcast.tsx","webpack://@xivanalysis/client/./src/parser/jobs/blu/modules/TripleTrident.tsx","webpack://@xivanalysis/client/./src/parser/jobs/blu/modules/Weaving.tsx","webpack://@xivanalysis/client/./src/parser/jobs/blu/modules/StatusTimeline.ts","webpack://@xivanalysis/client/./src/parser/jobs/blu/modules/index.tsx","webpack://@xivanalysis/client/./node_modules/core-js-pure/es/array/virtual/flat.js","webpack://@xivanalysis/client/./node_modules/core-js-pure/es/instance/flat.js","webpack://@xivanalysis/client/./node_modules/core-js-pure/modules/es.array.flat.js","webpack://@xivanalysis/client/./node_modules/core-js-pure/modules/es.array.unscopables.flat.js","webpack://@xivanalysis/client/./node_modules/core-js-pure/stable/instance/flat.js"],"sourcesContent":["module.exports = require(\"core-js-pure/stable/instance/flat\");","import {Trans} from '@lingui/react'\nimport {Action} from 'data/ACTIONS'\nimport {ANIMATION_LOCK} from 'data/CONSTANTS'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport CastTime from 'parser/core/modules/CastTime'\nimport Checklist, {Requirement, Rule} from 'parser/core/modules/Checklist'\nimport {Data} from 'parser/core/modules/Data'\nimport Downtime from 'parser/core/modules/Downtime'\nimport {GlobalCooldown} from 'parser/core/modules/GlobalCooldown'\nimport {SpeedAdjustments} from 'parser/core/modules/SpeedAdjustments'\nimport React from 'react'\n\nconst UPTIME_TARGET = 98\n\nexport class AlwaysBeCasting extends Analyser {\n\tstatic override handle = 'abc'\n\tstatic override debug = false\n\n\t@dependency protected castTime!: CastTime\n\t@dependency protected checklist!: Checklist\n\t@dependency protected data!: Data\n\t@dependency protected downtime!: Downtime\n\t@dependency protected globalCooldown!: GlobalCooldown\n\t@dependency protected speedAdjustments!: SpeedAdjustments\n\n\tprotected gcdUptime: number = 0\n\tprotected gcdsCounted: number = 0\n\n\tprivate lastBeginCast?: Events['prepare']\n\n\toverride initialise() {\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>().source(this.parser.actor.id).type('prepare'),\n\t\t\tthis.onBeginCast\n\t\t)\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>().source(this.parser.actor.id).type('action'),\n\t\t\tthis.onCast\n\t\t)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onBeginCast(event: Events['prepare']) {\n\t\tthis.lastBeginCast = event\n\t}\n\n\tprivate onCast(event: Events['action']) {\n\t\tconst action = this.data.getAction(event.action)\n\n\t\tif (action == null || action.onGcd == null || !action.onGcd) {\n\t\t\treturn\n\t\t}\n\n\t\tlet castTime = this.castTime.forEvent(event) ?? 0\n\t\tconst adjustedBaseGCD = this.globalCooldown.getDuration()\n\t\tif (castTime >= adjustedBaseGCD) {\n\t\t\t// Account for \"caster tax\" - animation lock on spells with cast time equal to or greater than the GCD that prevents starting the next spell until the animation finishes\n\t\t\tcastTime += ANIMATION_LOCK\n\t\t}\n\t\tconst recastTime = this.castTime.recastForEvent(event) ?? 0\n\n\t\tconst castStart = (this.lastBeginCast != null && this.lastBeginCast.action === event.action) ? this.lastBeginCast.timestamp : event.timestamp\n\t\tif (this.considerCast(action, castStart)) {\n\t\t\tconst relativeTimestamp = event.timestamp - this.parser.pull.timestamp\n\t\t\tif (castTime > relativeTimestamp) {\n\t\t\t\tthis.debug(`GCD Uptime for precast ${action.name} at ${this.parser.formatEpochTimestamp(event.timestamp, 1)} - Cast time: ${castTime} | Recast time: ${recastTime} | Time of completion: ${relativeTimestamp}`)\n\t\t\t\tthis.gcdUptime += Math.max(0, relativeTimestamp)\n\t\t\t} else {\n\t\t\t\tthis.debug(`GCD Uptime for ${action.name} at ${this.parser.formatEpochTimestamp(event.timestamp, 1)} - Cast time: ${castTime} | Recast time: ${recastTime}`)\n\t\t\t\tthis.gcdUptime += Math.max(castTime, recastTime)\n\t\t\t}\n\t\t\tthis.gcdsCounted += 1\n\t\t} else {\n\t\t\tthis.debug(`Excluding cast of ${action.name} at ${this.parser.formatEpochTimestamp(event.timestamp, 1)}`)\n\t\t}\n\t\tthis.lastBeginCast = undefined\n\t}\n\n\t/**\n\t * Implementing modules MAY override this to return false and exclude certain events from GCD uptime calculations.\n\t * By default, returns true if the cast did not start during downtime\n\t * @param action Action being considered for GCD uptime\n\t * @param timestamp Timestamp the action occurred at\n\t * @param castTime Calculated cast time of the action (adjusted by speed modifiers, if any active)\n\t */\n\tprotected considerCast(_action: Action, castStart: number) {\n\t\treturn !this.downtime.isDowntime(castStart)\n\t}\n\n\tprotected getUptimePercent(): number {\n\t\tthis.debug(`Observed ${this.gcdsCounted} GCDs for a total of ${this.gcdUptime} ms of uptime`)\n\t\tconst fightDuration = this.parser.currentDuration - this.downtime.getDowntime()\n\t\tconst uptime = this.gcdUptime / fightDuration * 100\n\t\tthis.debug(`Total fight duration: ${this.parser.currentDuration} - Downtime: ${this.downtime.getDowntime()} - Uptime percentage ${uptime}`)\n\t\treturn uptime\n\t}\n\n\tprotected onComplete() {\n\t\tif (this.gcdUptime === 0) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.checklist.add(new Rule({\n\t\t\tname: <Trans id=\"core.always-cast.title\">Always be casting</Trans>,\n\t\t\tdescription: <Trans id=\"core.always-cast.description\">\n\t\t\t\tMake sure you're always doing something. It's often better to make small\n\t\t\t\tmistakes while keeping the GCD rolling than it is to perform the correct\n\t\t\t\trotation slowly.\n\t\t\t</Trans>,\n\t\t\tdisplayOrder: -1,\n\t\t\trequirements: [\n\t\t\t\tnew Requirement({\n\t\t\t\t\tname: <Trans id=\"core.always-cast.gcd-uptime\">GCD Uptime</Trans>,\n\t\t\t\t\tpercent: this.getUptimePercent(),\n\t\t\t\t}),\n\t\t\t],\n\t\t\ttarget: UPTIME_TARGET,\n\t\t}))\n\t}\n}\n","import {Plural, Trans} from '@lingui/react'\nimport {Event, Events, FieldsBase, Resource} from 'event'\nimport React from 'react'\nimport {Actor} from 'report'\nimport {Analyser} from '../Analyser'\nimport {EventHook} from '../Dispatcher'\nimport {filter} from '../filter'\nimport {dependency} from '../Injectable'\nimport {Data} from './Data'\nimport Suggestions, {SEVERITY, Suggestion} from './Suggestions'\nimport {SimpleItem, Timeline} from './Timeline'\n\ninterface EventDeath extends FieldsBase {\n\t/** Actor that died. */\n\tactor: Actor['id'],\n\t/**\n\t * Whether or not the death should be counted.\n\t * @see `Death#shouldCountDeath`\n\t */\n\tcounted: boolean\n}\n\ninterface EventRaise extends FieldsBase {\n\t/** Actor that was raised. */\n\tactor: Actor['id']\n}\n\ndeclare module 'event' {\n\tinterface EventTypeRepository {\n\t\tdeath: EventDeath\n\t\traise: EventRaise\n\t}\n}\n\ninterface ActorInfo {\n\ttimestampDeath?: Event['timestamp']\n\ttimestampTranscendent?: Event['timestamp']\n\tcount: number\n\tduration: number\n\traiseHook?: EventHook<Events['actorUpdate']>\n}\n\nexport class Death extends Analyser {\n\tstatic override handle = 'death'\n\tstatic override debug = true\n\n\t@dependency private data!: Data\n\t@dependency private suggestions!: Suggestions\n\t@dependency private timeline!: Timeline\n\n\t/** Accumulated time the parsed actor has spent dead over the course of the fight. */\n\tget deadTime() {\n\t\treturn this.getDuration(this.parser.actor.id)\n\t}\n\n\tprivate info = new Map<Actor['id'], ActorInfo>()\n\n\tgetCount(actorId: Actor['id']) {\n\t\treturn this.getActorInfo(actorId).count\n\t}\n\n\tgetDuration(actorId: Actor['id']) {\n\t\tconst actorInfo = this.getActorInfo(actorId)\n\t\tconst timestamp = this.parser.currentEpochTimestamp\n\t\tconst currentDeadTime = timestamp - (actorInfo.timestampDeath ?? timestamp)\n\t\treturn actorInfo.duration + currentDeadTime\n\t}\n\n\toverride initialise() {\n\t\t// An actor hitting 0 HP is a sign of a death.\n\t\tthis.addEventHook({\n\t\t\ttype: 'actorUpdate',\n\t\t\thp: {current: 0},\n\t\t}, this.onDeath)\n\n\t\t// An actor gaining transcendent is a sign of a raise.\n\t\tthis.addEventHook({\n\t\t\ttype: 'statusApply',\n\t\t\tstatus: this.data.statuses.TRANSCENDENT.id,\n\t\t}, this.onTranscendentApply)\n\n\t\t// Any possible death events before transcendent falls off are flakes\n\t\tthis.addEventHook({\n\t\t\ttype: 'statusRemove',\n\t\t\tstatus: this.data.statuses.TRANSCENDENT.id,\n\t\t}, this.onTranscendentRemove)\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate getActorInfo(actorId: Actor['id']): ActorInfo {\n\t\tlet actorInfo = this.info.get(actorId)\n\t\tif (actorInfo == null) {\n\t\t\tactorInfo = {count: 0, duration: 0}\n\t\t\tthis.info.set(actorId, actorInfo)\n\t\t}\n\t\treturn actorInfo\n\t}\n\n\tprivate onDeath(event: Events['actorUpdate']) {\n\t\tconst actorInfo = this.getActorInfo(event.actor)\n\n\t\t// If we already have a death being tracked, or the player is still\n\t\t// transcendent, it's likely duplicate info, noop\n\t\tif (\n\t\t\tactorInfo.timestampDeath != null\n\t\t\t|| actorInfo.timestampTranscendent != null\n\t\t) { return }\n\n\t\tconst counted = this.shouldCountDeath(event)\n\n\t\t// Queue an event for the death\n\t\tthis.parser.queueEvent({\n\t\t\ttype: 'death',\n\t\t\ttimestamp: event.timestamp,\n\t\t\tactor: event.actor,\n\t\t\tcounted,\n\t\t})\n\n\t\t// If we're not counting, can stop here\n\t\tif (!counted) { return }\n\n\t\tactorInfo.timestampDeath = event.timestamp\n\t\tactorInfo.count++\n\n\t\t// Keep an eye out for the actor gaining health post-death - it signals that it has resurrected in some\n\t\t// manner that bypassed the transcendent check. Transcendent itself is applied before any HP gain, so\n\t\t// player actors will likely not trigger this hook.\n\t\tactorInfo.raiseHook = this.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.type('actorUpdate')\n\t\t\t\t.actor(event.actor)\n\t\t\t\t.hp(filter<Resource>()\n\t\t\t\t\t.current((value): value is number => value > 0)),\n\t\t\tevent => this.onRaise(event.actor, event.timestamp),\n\t\t)\n\t}\n\n\t/**\n\t * Determine if an event presumed to represent an actor's death should\n\t * be counted as such. Override and provide custom logic for cases where\n\t * a death is forced by fights or otherwise cannot be avoided.\n\t * @param _event ActorUpdate event marking the actor's death.\n\t */\n\tprotected shouldCountDeath(_event: Events['actorUpdate']) {\n\t\treturn true\n\t}\n\n\tprivate onTranscendentApply(event: Events['statusApply']) {\n\t\tconst actorInfo = this.getActorInfo(event.target)\n\t\tactorInfo.timestampTranscendent = event.timestamp\n\t\tthis.onRaise(event.target, event.timestamp)\n\t}\n\n\tprivate onTranscendentRemove(event: Events['statusRemove']) {\n\t\tconst actorInfo = this.getActorInfo(event.target)\n\t\tactorInfo.timestampTranscendent = undefined\n\t}\n\n\tprivate onRaise(actorId: Actor['id'], timestamp: Event['timestamp']) {\n\t\tconst actorInfo = this.getActorInfo(actorId)\n\n\t\t// If there's no current death, likely duplicate info, noop\n\t\tif (actorInfo.timestampDeath == null) { return }\n\n\t\t// We only show the parsed player's deaths on the timeline itself\n\t\tif (actorId === this.parser.actor.id) {\n\t\t\tthis.addDeathToTimeline(actorInfo.timestampDeath, timestamp)\n\t\t}\n\n\t\tactorInfo.duration += timestamp - actorInfo.timestampDeath\n\t\tactorInfo.timestampDeath = undefined\n\n\t\tif (actorInfo.raiseHook != null) {\n\t\t\tthis.removeEventHook(actorInfo.raiseHook)\n\t\t\tactorInfo.raiseHook = undefined\n\t\t}\n\n\t\t// Queue the raise notification.\n\t\tthis.parser.queueEvent({\n\t\t\ttype: 'raise',\n\t\t\ttimestamp,\n\t\t\tactor: actorId,\n\t\t})\n\t}\n\n\tprivate onComplete(event: Events['complete']) {\n\t\tfor (const [actorId, actorInfo] of this.info) {\n\t\t\t// If the actor was dead on completion, and the pull was a wipe, refund the\n\t\t\t// death. It's pretty meaningless to complain about the wipe itself.\n\t\t\tif (\n\t\t\t\t(this.parser.pull.progress ?? 0) < 100\n\t\t\t\t&& actorInfo.timestampDeath != null\n\t\t\t) {\n\t\t\t\tactorInfo.count = Math.max(actorInfo.count - 1, 0)\n\t\t\t}\n\n\t\t\t// Run raise cleanup in case the actor was dead on completion\n\t\t\tthis.onRaise(actorId, event.timestamp)\n\t\t}\n\n\t\tconst playerInfo = this.getActorInfo(this.parser.actor.id)\n\t\tif (playerInfo.count === 0) { return }\n\n\t\t// Deaths are pretty morbid\n\t\tthis.suggestions.add(new Suggestion({\n\t\t\ticon: this.data.actions.RAISE.icon,\n\t\t\tcontent: <Trans id=\"core.deaths.content\">\n\t\t\t\tDon't die. Between downtime, lost gauge resources, and resurrection debuffs, dying is absolutely <em>crippling</em> to damage output.\n\t\t\t</Trans>,\n\t\t\tseverity: SEVERITY.MORBID,\n\t\t\twhy: <Plural\n\t\t\t\tid=\"core.deaths.why\"\n\t\t\t\tvalue={playerInfo.count}\n\t\t\t\t_1=\"# death\"\n\t\t\t\tother=\"# deaths\"\n\t\t\t/>,\n\t\t}))\n\t}\n\n\tprivate addDeathToTimeline(start: number, end: number) {\n\t\tthis.timeline.addItem(new SimpleItem({\n\t\t\tstart: start - this.parser.pull.timestamp,\n\t\t\tend: end - this.parser.pull.timestamp,\n\t\t\t// TODO: Improve?\n\t\t\tcontent: <div style={{\n\t\t\t\twidth: '100%',\n\t\t\t\theight: '100%',\n\t\t\t\tbackgroundColor: '#ce909085',\n\t\t\t}}/>,\n\t\t}))\n\t}\n}\n","import {Plural, Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Data} from 'parser/core/modules/Data'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React, {Fragment} from 'react'\n\n//assumptions listed after each severity\nconst SEVERITIES = {\n\tUSE_PERCENT_THRESHOLD: {\n\t\t0.8: SEVERITY.MAJOR, //less than 20% of the available time is close to not using it at all or barely\n\t\t0.4: SEVERITY.MEDIUM, //60% is not using it enough -- risks not having enough mana throughout the fight, but with cards, this may not be as applicable\n\t\t0.2: SEVERITY.MINOR, //80% of the time is used to keep it on the radar, but not punish\n\t},\n}\n\nexport class LucidDreaming extends Analyser {\n\tstatic override handle = 'lucid'\n\tstatic override dependencies = [\n\t\t'suggestions',\n\t]\n\n\t@dependency private data!: Data\n\t@dependency private suggestions!: Suggestions\n\n\tprivate lastUse = 0\n\tprivate uses = 0\n\tprivate totalHeld = 0\n\n\toverride initialise() {\n\n\t\tthis.addEventHook(filter<Event>()\n\t\t\t.source(this.parser.actor.id)\n\t\t\t.type('action')\n\t\t\t.action(this.data.actions.LUCID_DREAMING.id), this.onCastLucid)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onCastLucid(event: Events['action']) {\n\t\tthis.uses++\n\n\t\tif (this.lastUse === 0) { this.lastUse = this.parser.pull.timestamp }\n\n\t\tlet _held = 0\n\n\t\tif (this.uses === 1) {\n\t\t\t// The first use, take holding as from the first minute of the fight\n\t\t\t_held = event.timestamp - this.parser.pull.timestamp\n\t\t} else {\n\t\t\t// Take holding as from the time it comes off cooldown\n\t\t\t_held = event.timestamp - this.lastUse - this.data.actions.LUCID_DREAMING.cooldown\n\t\t}\n\n\t\tif (_held > 0) {\n\t\t\tthis.totalHeld += _held\n\t\t}\n\t\t//update the last use\n\t\tthis.lastUse = event.timestamp\n\t}\n\n\tprotected suggestionContent: JSX.Element = <Fragment>\n\t\t<Trans id=\"core.lucid-dreaming.suggestion.content\">\n\t\t\tTry to keep <DataLink action=\"LUCID_DREAMING\" /> on cooldown for better MP management.\n\t\t</Trans>\n\t</Fragment>\n\n\tprotected suggestionWhy(usesMissed: number, holdDuration: number): JSX.Element {\n\t\treturn <Fragment>\n\t\t\t<Trans id=\"core.lucid-dreaming.suggestion.why\">\n\t\t\t\t<Plural value={usesMissed} one=\"# use\" other=\"# uses\" /> of Lucid Dreaming <Plural value={usesMissed} one=\"was\" other=\"were\" /> missed by holding it for at least a total of {this.parser.formatDuration(holdDuration)}.\n\t\t\t</Trans>\n\t\t</Fragment>\n\t}\n\n\tprivate onComplete() {\n\t\t//uses missed reported in 1 decimal\n\t\tconst holdDuration = this.uses === 0 ? this.parser.pull.duration : this.totalHeld\n\t\tconst usesMissed = Math.floor(holdDuration / this.data.actions.LUCID_DREAMING.cooldown)\n\t\tconst notUsesPercent = usesMissed === 0 ? 0 : holdDuration/this.parser.pull.duration\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.LUCID_DREAMING.icon,\n\t\t\tcontent: this.suggestionContent,\n\t\t\ttiers: SEVERITIES.USE_PERCENT_THRESHOLD,\n\t\t\twhy: this.suggestionWhy(usesMissed, holdDuration),\n\t\t\tvalue: notUsesPercent,\n\t\t}))\n\t}\n}\n","import {Action} from 'data/ACTIONS'\nimport {Status} from 'data/STATUSES'\nimport {Event, Events} from 'event'\nimport _ from 'lodash'\nimport {Analyser} from '../Analyser'\nimport {filter, noneOf, oneOf} from '../filter'\nimport {dependency} from '../Injectable'\nimport {ActionTimeline} from './ActionTimeline'\nimport {Actor, Actors} from './Actors'\nimport {Data} from './Data'\nimport {SimpleRow, StatusItem} from './Timeline'\n\ninterface Usage {\n\tstart: number\n\tend?: number\n}\n\ninterface StatusTarget {\n\tusages: Usage[]\n\trow: SimpleRow\n}\n\nexport class StatusTimeline extends Analyser {\n\tstatic override handle = 'statusTimeline'\n\n\tstatic statusesStackMapping: Record<number, number> = {}\n\n\t@dependency private actionTimeline!: ActionTimeline;\n\t@dependency private actors!: Actors;\n\t@dependency private data!: Data\n\n\tprivate statusActionMap = new Map<Status['id'], Action>();\n\tprivate usages = new Map<Status['id'], Map<Actor['id'], StatusTarget>>()\n\tprivate rows = new Map<string, SimpleRow>()\n\n\toverride initialise() {\n\t\t// Hook status events\n\t\tconst playerPetIds = this.parser.pull.actors\n\t\t\t.filter(actor => actor.owner === this.parser.actor)\n\t\t\t.map(pet => pet.id)\n\n\t\tconst allPetIds = this.parser.pull.actors\n\t\t\t.filter(actor => actor.owner?.playerControlled === true)\n\t\t\t.map(pet => pet.id)\n\n\t\tconst actorFilter = filter<Event>()\n\t\t\t.source(oneOf([this.parser.actor.id, ...playerPetIds]))\n\t\t\t.target(noneOf(allPetIds))\n\n\t\tthis.addEventHook(actorFilter.type('statusApply'), this.onApply)\n\t\tthis.addEventHook(actorFilter.type('statusRemove'), this.onRemove)\n\t\tthis.addEventHook('complete', this.onComplete)\n\n\t\t// Pre-cache status->action mappings\n\t\tfor (const action of Object.values(this.data.actions)) {\n\t\t\tif (action.statusesApplied == null) { continue }\n\t\t\tfor (const status of action.statusesApplied) {\n\t\t\t\tconst statusId = this.data.statuses[status].id\n\t\t\t\tthis.statusActionMap.set(statusId, action)\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onApply(event: Events['statusApply']) {\n\t\tlet statusUsages = this.usages.get(event.status)\n\t\tif (statusUsages == null) {\n\t\t\tstatusUsages = new Map()\n\t\t\tthis.usages.set(event.status, statusUsages)\n\t\t}\n\n\t\tlet statusTarget = statusUsages.get(event.target)\n\t\tif (statusTarget == null) {\n\t\t\tconst row = this.createStatusTargetRow(event.status, event.target)\n\t\t\tif (row == null) { return }\n\t\t\tstatusTarget = {\n\t\t\t\tusages: [],\n\t\t\t\trow,\n\t\t\t}\n\t\t\tstatusUsages.set(event.target, statusTarget)\n\t\t}\n\n\t\t// If there's an existing usage on the target, this can be considered to be a refresh\n\t\tconst lastUsage = _.last(statusTarget.usages)\n\t\tif (lastUsage != null && lastUsage.end == null) {\n\t\t\treturn\n\t\t}\n\n\t\tstatusTarget.usages.push({\n\t\t\tstart: event.timestamp,\n\t\t})\n\t}\n\n\tprivate onRemove(event: Events['statusRemove']) {\n\t\tconst lastUsage = _.last(this.usages.get(event.status)?.get(event.target)?.usages)\n\t\tif (lastUsage == null) { return }\n\n\t\tlastUsage.end = event.timestamp\n\t}\n\n\tprivate onComplete() {\n\t\tfor (const [statusId, statusUsages] of this.usages) {\n\t\t\tconst status = this.data.getStatus(statusId)\n\t\t\tif (status == null) { continue }\n\n\t\t\tfor (const statusTarget of statusUsages.values()) {\n\t\t\t\tfor (const usage of statusTarget.usages) {\n\t\t\t\t\tstatusTarget.row.addItem(new StatusItem({\n\t\t\t\t\t\tstatus,\n\t\t\t\t\t\tstart: usage.start - this.parser.pull.timestamp,\n\t\t\t\t\t\tend: (usage.end ?? this.parser.pull.timestamp + this.parser.pull.duration) - this.parser.pull.timestamp,\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate createStatusTargetRow(statusId: Status['id'], targetId: Actor['id']) {\n\t\tconst mapping = (this.constructor as typeof StatusTimeline).statusesStackMapping\n\t\tconst remappedStatusId = mapping[statusId] ?? statusId\n\n\t\tconst rowKey = this.getRowKey(remappedStatusId, targetId)\n\n\t\tconst cachedRow = this.rows.get(rowKey)\n\t\tif (cachedRow != null) { return cachedRow }\n\n\t\tconst statusRow = this.createStatusRow(remappedStatusId)\n\t\tif (statusRow == null) { return }\n\n\t\tconst actor = this.actors.get(targetId)\n\n\t\tconst row = statusRow.addRow(new SimpleRow({\n\t\t\tlabel: actor.name,\n\t\t}))\n\n\t\tthis.rows.set(rowKey, row)\n\t\treturn row\n\t}\n\n\tprivate createStatusRow(statusId: Status['id']) {\n\t\tconst rowKey = this.getRowKey(statusId)\n\n\t\tconst cachedRow = this.rows.get(rowKey)\n\t\tif (cachedRow != null) { return cachedRow }\n\n\t\tconst action = this.statusActionMap.get(statusId)\n\t\tif (action == null) { return }\n\n\t\tconst row = this.actionTimeline.getRow(action).addRow(new SimpleRow({\n\t\t\tlabel: this.data.getStatus(statusId)?.name ?? statusId,\n\t\t\thideCollapsed: true,\n\t\t\tcollapse: true,\n\t\t}))\n\n\t\tthis.rows.set(rowKey, row)\n\t\treturn row\n\t}\n\n\tprivate getRowKey = (statusId: Status['id'], targetId?: Actor['id']) =>\n\t\t`${statusId}:${targetId}`\n}\n","import {t} from '@lingui/macro'\nimport {Trans, Plural} from '@lingui/react'\nimport NormalisedMessage from 'components/ui/NormalisedMessage'\nimport Rotation from 'components/ui/Rotation'\nimport {Action} from 'data/ACTIONS'\nimport {BASE_GCD} from 'data/CONSTANTS'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport CastTime from 'parser/core/modules/CastTime'\nimport {Data} from 'parser/core/modules/Data'\nimport {Invulnerability} from 'parser/core/modules/Invulnerability'\nimport Suggestions, {TieredSuggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport React, {ReactNode} from 'react'\nimport {Accordion} from 'semantic-ui-react'\nimport {matchClosestLower} from 'utilities'\n\nconst CAST_TIME_MAX_WEAVES = {\n\t0: 2,\n\t1000: 1,\n\t2500: 0,\n}\nconst REDUCE_MAX_WEAVES_RECAST_BELOW = 1800\nconst DEFAULT_MAX_WEAVES = 2\n\nconst WEAVING_SEVERITY = {\n\t1: SEVERITY.MEDIUM,\n\t5: SEVERITY.MAJOR,\n}\n\nexport interface Weave {\n\tleadingGcdEvent?: Events['action'],\n\ttrailingGcdEvent: Events['action'],\n\tgcdTimeDiff: number,\n\tweaves: Array<Events['action']>,\n}\n\nexport class Weaving extends Analyser {\n\tstatic override handle = 'weaving'\n\n\t@dependency protected castTime!: CastTime\n\t@dependency protected data!: Data\n\t@dependency private invulnerability!: Invulnerability\n\t@dependency protected suggestions!: Suggestions\n\n\tstatic override title = t('core.weaving.title')`Weaving Issues`\n\n\tprotected suggestionIcon: string = 'https://xivapi.com/i/001000/001785.png' // WVR Focused Synth\n\n\tprotected moduleLink = (\n\t\t<a style={{cursor: 'pointer'}} onClick={() => this.parser.scrollTo(Weaving.handle)}>\n\t\t\t<NormalisedMessage message={Weaving.title}/>\n\t\t</a>\n\t)\n\tprotected suggestionContent: ReactNode = <Trans id=\"core.weaving.content\">\n\t\tAvoid weaving more actions than you have time for in a single GCD window. Doing so will delay your next GCD, reducing possible uptime. Check the {this.moduleLink} module below for more detailed analysis.\n\t</Trans>\n\n\tprotected severity = WEAVING_SEVERITY\n\n\tprivate weaves: Array<Events['action']> = []\n\tprivate ongoingCastEvent?: Events['prepare']\n\tprivate leadingGcdEvent?: Events['action']\n\tprivate trailingGcdEvent?: Events['action']\n\tprivate badWeaves: Weave[] = []\n\n\toverride initialise() {\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\n\t\tthis.addEventHook(playerFilter.type('prepare'), this.onBeginCast)\n\t\tthis.addEventHook(playerFilter.type('action'), this.onCast)\n\t\tthis.addEventHook(filter<Event>().type('complete'), this.onComplete)\n\t\tthis.addEventHook(filter<Event>().type('death'), this.clearWeave)\n\t}\n\n\tprivate onBeginCast(event: Events['prepare']) {\n\t\tthis.ongoingCastEvent = event\n\t}\n\n\tprivate onCast(event: Events['action']) {\n\t\tconst action = this.data.getAction(event.action)\n\n\t\t// If the action is an auto, just ignore it\n\t\tif (!action || action.autoAttack) {\n\t\t\treturn\n\t\t}\n\n\t\t// If it's not a GCD, just bump the weave count\n\t\tif (this.isOgcd(action)) {\n\t\t\tthis.weaves.push(event)\n\t\t\treturn\n\t\t}\n\n\t\tif (this.ongoingCastEvent && this.ongoingCastEvent.action === action.id) {\n\t\t\t// This event is the end of a GCD cast\n\t\t\tthis.trailingGcdEvent = {\n\t\t\t\t...event,\n\t\t\t\t// Override the timestamp of the GCD with when its cast began\n\t\t\t\ttimestamp: this.ongoingCastEvent.timestamp,\n\t\t\t}\n\t\t} else {\n\t\t\t// This event was an instant GCD (or log missed the cast starting)\n\t\t\tthis.trailingGcdEvent = event\n\t\t}\n\n\t\t// Always reset the ongoing cast\n\t\tthis.ongoingCastEvent = undefined\n\n\t\t// Throw the current state onto the history\n\t\tthis.saveIfBad()\n\n\t\t// Reset\n\t\tthis.leadingGcdEvent = this.trailingGcdEvent\n\t\tthis.weaves = []\n\t}\n\n\tprivate onComplete() {\n\t\t// If there's been at least one gcd, run a cleanup on any remnant data\n\t\tif (this.leadingGcdEvent) {\n\t\t\tthis.saveIfBad()\n\t\t}\n\n\t\t// Few triples is medium, any more is major\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.suggestionIcon,\n\t\t\tcontent: this.suggestionContent,\n\t\t\twhy: <Plural\n\t\t\t\tid=\"core.weaving.why\"\n\t\t\t\tvalue={this.badWeaves.length}\n\t\t\t\t_1=\"# instance of incorrect weaving\"\n\t\t\t\tother=\"# instances of incorrect weaving\"\n\t\t\t/>,\n\t\t\ttiers: this.severity,\n\t\t\tvalue: this.badWeaves.length,\n\t\t}))\n\t}\n\n\tprivate saveIfBad() {\n\t\tif (this.trailingGcdEvent == null) { return }\n\n\t\tconst leadingTimestamp = this.leadingGcdEvent?.timestamp ?? this.parser.pull.timestamp\n\t\tconst gcdTimeDiff = this.trailingGcdEvent.timestamp\n\t\t\t- leadingTimestamp\n\t\t\t- this.invulnerability.getDuration({\n\t\t\t\tstart: leadingTimestamp,\n\t\t\t\tend: this.trailingGcdEvent.timestamp,\n\t\t\t})\n\n\t\tconst weave: Weave = {\n\t\t\tleadingGcdEvent: this.leadingGcdEvent,\n\t\t\ttrailingGcdEvent: this.trailingGcdEvent,\n\t\t\tgcdTimeDiff,\n\t\t\tweaves: this.weaves,\n\t\t}\n\n\t\tif (weave.weaves.length === 0) {\n\t\t\treturn\n\t\t}\n\n\t\tif (this.isBadWeave(weave)) {\n\t\t\tthis.badWeaves.push(weave)\n\t\t}\n\t}\n\n\tprivate isOgcd(action: Action) {\n\t\treturn !action.onGcd && !action.autoAttack\n\t}\n\n\tprivate isBadWeave(weave: Weave) {\n\t\t// Calc. the no. of weaves - we're ignoring any made while the boss is untargetable, and events that happened before the pull\n\t\tconst weaveCount = weave.weaves.filter(\n\t\t\tevent => true\n\t\t\t\t&& !this.invulnerability.isActive({timestamp: event.timestamp, types: ['untargetable']})\n\t\t\t\t&& event.timestamp >= this.parser.pull.timestamp,\n\t\t).length\n\n\t\tconst recast = ((weave.leadingGcdEvent != null) ? this.castTime.recastForEvent(weave.leadingGcdEvent) : undefined) ?? BASE_GCD\n\t\t// Check the downtime-adjusted GCD time difference for this weave - do not treat multiple weaves during downtime as bad weaves\n\t\treturn weave.gcdTimeDiff > recast && weaveCount > this.getMaxWeaves(weave)\n\t}\n\n\tprivate clearWeave() {\n\t\t// prompts saving any existing weaves if they're bad, and reset\n\t\tif (this.weaves.length > 0) {\n\t\t\tthis.saveIfBad()\n\t\t}\n\n\t\t// remove existing weaves and pretend the next leadingGcdEvent is like a fresh start (which I guess it is)\n\t\tthis.weaves = []\n\t\tthis.leadingGcdEvent = undefined\n\t}\n\n\t/**\n\t * Implementing classes MAY override this in order to provide custom logic for determining the number of max weaves, given the leading GCD Event\n\t * @param event The Action Event of the leading GCD.  Will be undefined for the first GCD of the pull - default behavior is to allow 2 weaves in case of missing pre-pull action\n\t * @returns number of allowed weaves after the leading GCD before flagging as bad weaving\n\t */\n\tprotected getMaxWeaves(weave: Weave): number {\n\t\tif (weave.leadingGcdEvent == null) {\n\t\t\treturn DEFAULT_MAX_WEAVES\n\t\t}\n\n\t\tconst castTime = this.castTime.forEvent(weave.leadingGcdEvent)\n\t\tif (castTime == null)  {\n\t\t\treturn DEFAULT_MAX_WEAVES\n\t\t}\n\n\t\tconst maxWeaves = matchClosestLower(CAST_TIME_MAX_WEAVES, castTime) ?? DEFAULT_MAX_WEAVES\n\t\tconst recastTime = this.castTime.recastForEvent(weave.leadingGcdEvent) ?? BASE_GCD\n\n\t\treturn maxWeaves - (recastTime < REDUCE_MAX_WEAVES_RECAST_BELOW ? 1 : 0)\n\t}\n\n\toverride output() {\n\t\tif (this.badWeaves.length === 0) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst panels = this.badWeaves.map(item => ({\n\t\t\tkey: item.leadingGcdEvent?.timestamp ?? this.parser.pull.timestamp,\n\t\t\ttitle: {\n\t\t\t\tcontent: <>\n\t\t\t\t\t<strong>{this.parser.formatEpochTimestamp(item.leadingGcdEvent?.timestamp ?? this.parser.pull.timestamp)}</strong>\n\t\t\t\t\t&nbsp;-&nbsp;\n\t\t\t\t\t<Plural\n\t\t\t\t\t\tid=\"core.weaving.panel-count\"\n\t\t\t\t\t\tvalue={item.weaves.length}\n\t\t\t\t\t\t_1=\"# weave\"\n\t\t\t\t\t\tother=\"# weaves\"\n\t\t\t\t\t/>\n\t\t\t\t\t&nbsp;(\n\t\t\t\t\t{this.parser.formatDuration(item.gcdTimeDiff)}\n\t\t\t\t\t&nbsp;\n\t\t\t\t\t<Trans id=\"core.weaving.between-gcds\">between GCDs</Trans>\n\t\t\t\t\t)\n\t\t\t\t</>,\n\t\t\t},\n\t\t\tcontent: {\n\t\t\t\tcontent: <Rotation events={[\n\t\t\t\t\t...(item.leadingGcdEvent != null ? [item.leadingGcdEvent] : []),\n\t\t\t\t\t...item.weaves,\n\t\t\t\t]}/>,\n\t\t\t},\n\t\t}))\n\n\t\treturn <Accordion\n\t\t\texclusive={false}\n\t\t\tpanels={panels}\n\t\t\tstyled\n\t\t\tfluid\n\t\t/>\n\t}\n}\n","import {ActionRow, ActionTimeline as CoreActionTimeline} from 'parser/core/modules/ActionTimeline'\n\n// TODO: Would be really nice if ActionTimeline picked the name of the first\n// one used, instead of the first one in the array.\nexport class ActionTimeline extends CoreActionTimeline {\n\tstatic override rows: ActionRow[] = [\n\t\t...CoreActionTimeline.rows,\n\t\t'NIGHTBLOOM',\n\t\t'TRIPLE_TRIDENT',\n\t\t'THE_ROSE_OF_DESTRUCTION',\n\t\t'SHOCK_STRIKE',\n\t\t'BLU_MOUNTAIN_BUSTER',\n\t\t'GLASS_DANCE',\n\t\t'SURPANAKHA',\n\t\t['MATRA_MAGIC', 'DRAGON_FORCE', 'ANGELS_SNACK'],\n\t\t'FEATHER_RAIN',\n\t\t'ERUPTION',\n\t\t['PHANTOM_FLURRY', 'PHANTOM_FLURRY_KICK'],\n\t\t['QUASAR', 'J_KICK'],\n\t\t{\n\t\t\tlabel: 'Raid Buffs',\n\t\t\tcontent: [\n\t\t\t\t'PECULIAR_LIGHT',\n\t\t\t\t'OFF_GUARD',\n\t\t\t],\n\t\t},\n\t\t'COLD_FOG',\n\n\t\t// Standard role actions\n\t\t'LUCID_DREAMING',\n\t\t'SWIFTCAST',\n\n\t\t// Mit\n\t\t'ADDLE',\n\t\t'MAGIC_HAMMER',\n\n\t\t// Ressurect\n\t\t'ANGEL_WHISPER',\n\n\t\t// Tanking CDs\n\t\t'DEVOUR',\n\t\t'CHELONIAN_GATE',\n\t]\n}\n","import {Plural, Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Action} from 'data/ACTIONS'\nimport {Event, Events} from 'event'\nimport {EventHook} from 'parser/core/Dispatcher'\nimport {filter, noneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport {AlwaysBeCasting as CoreAlwaysBeCasting} from 'parser/core/modules/AlwaysBeCasting'\nimport Suggestions, {TieredSuggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\nconst PHANTOM_FLURRY_CHANNEL_DURATION_MAX_MS = 5000\nconst PHANTOM_FLURRY_CHANNEL_WITH_KICK_DURATION_MS = 4000\n\nconst SURPANAKHA_ANIMATION_LOCK_MS = 1000\n\n// Essentially a carbon copy of the MCH extension to ABC -- we want to treat\n// Phantom Flurry as a Flamethrower-like.\n\n// This also removes the time under Waning Nocturne (the second half of Moon Flute)\n// from the ABC report.  Can't cast, am waning.\n\ninterface PhantomFlurryWindow {\n\tstart: number\n\tend: number\n\tmanualKick: boolean\n\tinMoonFlute: boolean\n}\n\nexport class AlwaysBeCasting extends CoreAlwaysBeCasting {\n\tprivate phantomFlurryHistory: PhantomFlurryWindow[] = []\n\tprivate currentPhantomFlurry: PhantomFlurryWindow | undefined = undefined\n\tprivate phantomFlurryInterruptingActionHook?: EventHook<Events['action']>\n\tprivate surpanakhas: number = 0\n\n\t@dependency private suggestions!: Suggestions\n\t@dependency private actors!: Actors\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\t\tconst phantomFlurryCastFilter = playerFilter\n\t\t\t.action(this.data.actions.PHANTOM_FLURRY.id)\n\t\t\t.type('action')\n\t\tconst phantomFlurryStatusFilter = playerFilter\n\t\t\t.status(this.data.statuses.PHANTOM_FLURRY.id)\n\t\t\t.type('statusRemove')\n\t\tconst phantomFlurryKick = playerFilter\n\t\t\t.action(this.data.actions.PHANTOM_FLURRY_KICK.id)\n\t\t\t.type('action')\n\n\t\tconst surpanakhaCastFilter = playerFilter\n\t\t\t.action(this.data.actions.SURPANAKHA.id)\n\t\t\t.type('action')\n\n\t\tthis.addEventHook(phantomFlurryCastFilter, this.onApplyPhantomFlurry)\n\t\tthis.addEventHook(phantomFlurryStatusFilter, this.onRemovePhantomFlurry)\n\t\tthis.addEventHook(phantomFlurryKick, this.onPhantomFlurryFinalKick)\n\t\tthis.addEventHook(surpanakhaCastFilter, this.onCastSurpanakha)\n\t}\n\n\tprivate onCastSurpanakha() {\n\t\tthis.surpanakhas++\n\t}\n\n\tprivate onPhantomFlurryFinalKick() {\n\t\t// We go in here when someone uses Phantom Flurry and, instead of channeling\n\t\t// the entire effect, instead presses the button a second time.\n\t\t// For DPSes this is always bad, since you want Phantom Flurry to finish\n\t\t// off your Moon Flute.  For tank/healer, pressing this button at the last\n\t\t// possible moment is a DPS gain.\n\t\t//\n\t\t// So let's just use a very simple heuristic.  We'll say that we expect\n\t\t// the full 5000ms channel, BUT, if they used the kick, then they should\n\t\t// have waited at least 4000ms for most of the channel to have happened.\n\n\t\tconst currentFlurry = this.currentPhantomFlurry ?? this.phantomFlurryHistory[this.phantomFlurryHistory.length - 1]\n\t\tif (currentFlurry === null) { return }\n\t\tcurrentFlurry.manualKick = true\n\t}\n\n\tprivate onApplyPhantomFlurry(event: Events['action']) {\n\t\tif (this.currentPhantomFlurry != null) { return }\n\n\t\tthis.currentPhantomFlurry = {\n\t\t\tstart: event.timestamp,\n\t\t\tend: event.timestamp + this.data.statuses.PHANTOM_FLURRY.duration,\n\t\t\tmanualKick: false,\n\t\t\tinMoonFlute: this.actors.current.hasStatus(this.data.statuses.WAXING_NOCTURNE.id),\n\t\t}\n\t\tconst anyActionFilter = filter<Event>()\n\t\t\t.source(this.parser.actor.id)\n\t\t\t.action(noneOf([this.data.actions.PHANTOM_FLURRY.id]))\n\t\t\t.type('action')\n\t\tthis.phantomFlurryInterruptingActionHook = this.addEventHook(anyActionFilter, this.onRemovePhantomFlurry)\n\n\t\tthis.phantomFlurryHistory.push(this.currentPhantomFlurry)\n\t}\n\n\tprivate onRemovePhantomFlurry(event: Events['statusRemove'] | Events['action']) {\n\t\tif (this.currentPhantomFlurry == null) {\n\t\t\treturn\n\t\t}\n\t\tif (this.phantomFlurryInterruptingActionHook == null) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.currentPhantomFlurry.end = event.timestamp\n\t\tthis.removeEventHook(this.phantomFlurryInterruptingActionHook)\n\n\t\tthis.currentPhantomFlurry = undefined\n\t\tthis.phantomFlurryInterruptingActionHook = undefined\n\n\t}\n\n\toverride considerCast(action: Action, castStart: number): boolean {\n\t\tif (action === this.data.actions.PHANTOM_FLURRY) {\n\t\t\tthis.debug(`Phantom Flurry began channeling at ${this.parser.formatEpochTimestamp(castStart)}`)\n\t\t\treturn false\n\t\t}\n\n\t\treturn super.considerCast(action, castStart)\n\t}\n\n\toverride getUptimePercent(): number {\n\t\tconst fightDuration = this.parser.currentDuration - this.downtime.getDowntime()\n\t\tconst flurryDuration = this.phantomFlurryHistory.reduce((acc, flurry) => {\n\t\t\tconst downtime = this.downtime.getDowntime(\n\t\t\t\tflurry.start,\n\t\t\t\tflurry.end,\n\t\t\t)\n\t\t\tconst phantomFlurryDurationOrGCD = Math.max(flurry.end - flurry.start, this.globalCooldown.getDuration())\n\t\t\treturn acc + phantomFlurryDurationOrGCD - downtime\n\t\t}, 0)\n\t\tconst surpanakhaDuration = this.surpanakhas * SURPANAKHA_ANIMATION_LOCK_MS\n\t\tconst uptime = (this.gcdUptime + flurryDuration + surpanakhaDuration) / (fightDuration) * 100\n\n\t\treturn uptime\n\t}\n\n\toverride onComplete() {\n\t\tsuper.onComplete()\n\n\t\t// Since we were already tracking Phantom Flurry, go ahead and take\n\t\t// the chance to track if they dropped any damage ticks.\n\t\tconst missingFlurryTicks = this.phantomFlurryHistory\n\t\t\t.reduce((acc, flurry) => {\n\t\t\t\tconst flurryChannelMs = flurry.end - flurry.start\n\t\t\t\tconst expectedFlurryChannel = (flurry.manualKick ? PHANTOM_FLURRY_CHANNEL_WITH_KICK_DURATION_MS : PHANTOM_FLURRY_CHANNEL_DURATION_MAX_MS)\n\t\t\t\tconst missingFlurryChannelMs = expectedFlurryChannel - flurryChannelMs\n\t\t\t\tif (missingFlurryChannelMs <= 0) { return acc }\n\n\t\t\t\tconst missingTicks = Math.ceil(missingFlurryChannelMs / 1000)\n\t\t\t\treturn acc + missingTicks\n\t\t\t}, 0)\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.PHANTOM_FLURRY.icon,\n\t\t\tcontent: <Trans id=\"blu.phantom_flurry.dropped_ticks.content\">\n\t\t\t\tDropping out of <DataLink action=\"PHANTOM_FLURRY\" /> too early will lose damage ticks.  If you are in a <DataLink action=\"MOON_FLUTE\" /> window you want to wait out the entire channel; if you are using it outside of a window and activating the final kick, wait until the last second the <DataLink status=\"PHANTOM_FLURRY\" /> effect is active.\n\t\t\t</Trans>,\n\t\t\twhy: <Trans id=\"blu.phantom_flurry.dropped_ticks.why\">\n\t\t\t\t<Plural value={missingFlurryTicks ?? 0} one=\"# Phantom Flurry tick was\" other=\"# Phantom Flurry ticks were\" /> dropped due to cancelling the channel too early.\n\t\t\t</Trans>,\n\t\t\ttiers: {\n\t\t\t\t1: SEVERITY.MINOR,  // 200/300 potency\n\t\t\t\t2: SEVERITY.MEDIUM, // 400/600 potency\n\t\t\t\t3: SEVERITY.MAJOR,  // 600/900 potency\n\t\t\t},\n\t\t\tvalue: missingFlurryTicks,\n\t\t}))\n\n\t\t// If they weren't in a Moon Flute, then they should have kicked!\n\t\tconst missingFlurryKicks = this.phantomFlurryHistory\n\t\t\t.filter(flurry => !flurry.inMoonFlute && !flurry.manualKick)\n\t\t\t.length\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.PHANTOM_FLURRY_KICK.icon,\n\t\t\tcontent: <Trans id=\"blu.phantom_flurry.dropped_kicks.content\">\n\t\t\t\tWhile the channel from <DataLink action=\"PHANTOM_FLURRY\" /> is active, it becomes <DataLink action=\"PHANTOM_FLURRY_KICK\" />, a 600 potency button.  If you are using <DataLink action=\"PHANTOM_FLURRY\" /> outside of a <DataLink action=\"MOON_FLUTE\" showIcon={false} /> window, then you should use the 600 potency button before the channel runs out.  Use this even if it means dropping the last tick of the channel.\n\t\t\t</Trans>,\n\t\t\twhy: <Trans id=\"blu.phantom_flurry.dropped_kicks.why\">\n\t\t\t\t<Plural value={missingFlurryKicks ?? 0} one=\"# Phantom Flurry big kick was\" other=\"# Phantom Flurry big kicks were\" /> dropped by not pressing the button again before the effect ran out.\n\t\t\t</Trans>,\n\t\t\ttiers: {\n\t\t\t\t1: SEVERITY.MEDIUM, // 390 potency\n\t\t\t\t2: SEVERITY.MAJOR, // 780 potency\n\t\t\t},\n\t\t\tvalue: missingFlurryKicks,\n\t\t}))\n\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Plural, Trans} from '@lingui/react'\nimport {ActionLink, DataLink, StatusLink} from 'components/ui/DbLink'\nimport {BlueAction} from 'data/ACTIONS/root/BLU'\nimport {Status} from 'data/STATUSES'\nimport {Event, Events, DamageType} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {EventHook} from 'parser/core/Dispatcher'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {History} from 'parser/core/modules/ActionWindow/History'\nimport {Actor, Actors} from 'parser/core/modules/Actors'\nimport {Data} from 'parser/core/modules/Data'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport {Timeline} from 'parser/core/modules/Timeline'\nimport React, {Fragment} from 'react'\nimport {Team} from 'report'\nimport {Message, Button, Table} from 'semantic-ui-react'\nimport {DISPLAY_ORDER} from './DISPLAY_ORDER'\n\n// BLU has *five* raid buffs.  All of them behave essentially\n// like a NIN's Mug, applying a debuff on the boss that\n// increases damage, however, four of them actually have a\n// catch to them:\n//\n//  Off-guard:            Increases all damage taken by 5%\n//  Peculiar Light:       Increases magical damage taken by 5%\n//  Physical Attenuation: Increases all physical damage taken by 5%\n//  Astral Attenuation:   Increases damage taken (but only for certain spells) by 5%\n//  Umbral Attenuation:   Increases damage taken (but only for certain spells) by 5%\n//\n// Besides Off-guard, the others have specific conditions, so their\n// effect varies wildly based on spell loadouts and bursts windows.\n//\n// In addition to that, the three Attenuation effects from\n// Condensed Libra are random, and overwrite eachother.\n//\n// While all three of the buffs stack, they all also behave like\n// Addle / Feint / Reprisal -- you can only have one instance of\n// the buff on the boss, and re-applying it overwrites the current one.\n//\n// So for Off-guard and Peculiar Light, we want to look into two things:\n//\n//      1. Check that people aren't overwriting eachother's buffs\n//      2. Check that the buffs are actually a DPS gain; for example\n//         using Peculiar Light during a Revenge Blast window is\n//         just lost damage, since Revenge Blast is physical.\n//\n// For the Libra effects, we should never check for overwrites,\n// since fishing for Physical Libra is common and a DPS gain\n// in some situations (long revenge blast windows, or before stinging)\n\ninterface BuffedEvent {\n\taction: number, // action ID\n\tunderPL: boolean,\n\tunderOG: boolean,\n\tunderLibra: boolean,\n}\n\ninterface BuffWindow {\n\tbuffAction: BlueAction,\n\tbuffId: Status['id'],\n\tisBuffedAction(arg0: BlueAction, arg1: number): boolean,\n\tevents: BuffedEvent[],\n\toverwritten: boolean,\n\tours: boolean,\n}\n\n// TODO: export these\nconst UMBRAL = 1\nconst ASTRAL = 2\n\nconst allowedBuffOverwriteMs = 2000 // Probably too high?\nconst dupedEventThresholdMs = 100\nconst fallbackBuffDuration  = 15000\n\nexport class BLURaidBuffs extends Analyser {\n\tstatic override handle = 'buffwindows'\n\tstatic override title = t('blu.buffs.title')`Buff Windows`\n\tstatic override displayOrder = DISPLAY_ORDER.RAID_BUFFS\n\n\t@dependency private actors!: Actors\n\t@dependency private data!: Data\n\t@dependency private suggestions!: Suggestions\n\t@dependency private timeline!: Timeline\n\n\tprivate inOffGuard = false\n\tprivate inPeculiarLight = false\n\tprivate inLibra = false\n\n\tprivate buffHistory: {[key: number]: History<BuffWindow>} = {}\n\tprivate buffActionHook?: EventHook<Events['action']>\n\n\tprivate PECULIAR_LIGHT_ID = this.data.statuses.PECULIAR_LIGHT.id\n\tprivate OFF_GUARD_ID      = this.data.statuses.OFF_GUARD.id\n\tprivate CONDENSED_LIBRA_ASTRAL_ID = this.data.statuses.CONDENSED_LIBRA_ASTRAL.id\n\tprivate CONDENSED_LIBRA_UMBRAL_ID = this.data.statuses.CONDENSED_LIBRA_UMBRAL.id\n\tprivate CONDENSED_LIBRA_PHYSICAL_ID = this.data.statuses.CONDENSED_LIBRA_PHYSICAL.id\n\n\tprivate newBuffHistory(st: BlueAction, fn: (arg0: BlueAction, arg1: number) => boolean) {\n\t\treturn new History<BuffWindow>(\n\t\t\t() => ({\n\t\t\t\tbuffAction: st,\n\t\t\t\tisBuffedAction: fn,\n\t\t\t\tbuffId: 0,\n\t\t\t\tevents: [],\n\t\t\t\toverwritten: false,\n\t\t\t\tours: false,\n\t\t\t})\n\t\t)\n\t}\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tthis.buffHistory[this.data.statuses.OFF_GUARD.id] = this.newBuffHistory(\n\t\t\tthis.data.actions.OFF_GUARD,\n\t\t\t() => { return true }, // buffs everything\n\t\t)\n\t\tthis.buffHistory[this.data.statuses.PECULIAR_LIGHT.id] = this.newBuffHistory(\n\t\t\tthis.data.actions.PECULIAR_LIGHT,\n\t\t\t(action) => {\n\t\t\t\treturn action.damageType === DamageType.MAGICAL\n\t\t\t},\n\t\t)\n\n\t\tconst CONDENSED_LIBRA_ASTRAL_ID = this.CONDENSED_LIBRA_ASTRAL_ID\n\t\tconst CONDENSED_LIBRA_UMBRAL_ID = this.CONDENSED_LIBRA_UMBRAL_ID\n\t\tconst CONDENSED_LIBRA_PHYSICAL_ID = this.CONDENSED_LIBRA_PHYSICAL_ID\n\t\tconst libraIsBuffed = function(action: BlueAction, buffId: Status['id']): boolean {\n\t\t\tif (buffId === CONDENSED_LIBRA_PHYSICAL_ID) {\n\t\t\t\tconst damageType = action.damageType ?? DamageType.MAGICAL\n\t\t\t\treturn damageType === DamageType.PHYSICAL\n\t\t\t}\n\n\t\t\tconst attackElement = action.elementType\n\t\t\tif (attackElement === undefined) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tswitch (buffId) {\n\t\t\tcase CONDENSED_LIBRA_ASTRAL_ID:\n\t\t\t\treturn attackElement === ASTRAL\n\t\t\t\tbreak\n\t\t\tcase CONDENSED_LIBRA_UMBRAL_ID:\n\t\t\t\treturn attackElement === UMBRAL\n\t\t\t\tbreak\n\t\t\t}\n\t\t\treturn false\n\t\t}\n\t\tconst libraAction = this.data.actions.CONDENSED_LIBRA\n\t\tthis.buffHistory[CONDENSED_LIBRA_ASTRAL_ID] = this.newBuffHistory(libraAction, libraIsBuffed)\n\t\tthis.buffHistory[CONDENSED_LIBRA_UMBRAL_ID] = this.newBuffHistory(libraAction, libraIsBuffed)\n\t\tthis.buffHistory[CONDENSED_LIBRA_PHYSICAL_ID] = this.newBuffHistory(libraAction, libraIsBuffed)\n\n\t\tconst statusFilter = filter<Event>()\n\t\t\t.status(oneOf(Object.keys(this.buffHistory).map(Number)))\n\t\t\t.target((target: Actor['id']): target is Actor['id'] => {\n\t\t\t\t// Match all foes, but only the parsed actor of the friends.\n\t\t\t\tconst actor = this.actors.get(target)\n\t\t\t\tif (actor.team === Team.FRIEND) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t\treturn true\n\t\t\t})\n\t\tthis.addEventHook(statusFilter.type('statusApply'), this.onApplyRaidBuff)\n\t\tthis.addEventHook(statusFilter.type('statusRemove'), this.onRemoveRaidBuff)\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate isDupedEvent(cur: Events['statusApply'] | Events['statusRemove'], prev?: Events['statusApply'] | Events['statusRemove']): boolean {\n\t\tif (prev === undefined) {\n\t\t\treturn false\n\t\t}\n\t\t// Duped event, seems to happen for BLU debuffs applied to the boss,\n\t\t// like the effects from Bad Breath, Magic Hammer, Off-guard, and\n\t\t// Peculiar Light.\n\t\t// There's a note deduplicateStatus.ts which seems to explain this.\n\t\t// Just do a basic dedup here:\n\t\tif (\n\t\t\tcur.status === prev.status\n\t\t\t&& cur.source === prev.source\n\t\t) {\n\t\t\tconst timestampDelta = cur.timestamp - prev.timestamp\n\t\t\tif (timestampDelta >= -dupedEventThresholdMs && timestampDelta <= dupedEventThresholdMs) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n\n\tprivate previousApply?: Events['statusApply']\n\tprivate onApplyRaidBuff(event: Events['statusApply']) {\n\t\tif (this.isDupedEvent(event, this.previousApply)) {\n\t\t\t// Duped event, skip it\n\t\t\treturn\n\t\t}\n\t\tthis.previousApply = event\n\n\t\tconst appliedBuffHistory = this.buffHistory[event.status]\n\t\tconst currentBuff = appliedBuffHistory.getCurrent()\n\t\tif (currentBuff !== undefined) {\n\t\t\t// This is overwriting the current Off-guard/Peculiar Light. This *might* be fine -- let's see\n\t\t\t// how much time was left on the buff\n\t\t\tconst timeLeftMs = currentBuff.start - event.timestamp\n\t\t\tif (timeLeftMs > allowedBuffOverwriteMs) {\n\t\t\t\tcurrentBuff.data.overwritten = true\n\t\t\t}\n\t\t\tappliedBuffHistory.closeCurrent(event.timestamp)\n\t\t}\n\n\t\tswitch (event.status) {\n\t\tcase (this.OFF_GUARD_ID):\n\t\t\tthis.inOffGuard = true\n\t\t\tbreak\n\t\tcase (this.PECULIAR_LIGHT_ID):\n\t\t\tthis.inPeculiarLight = true\n\t\t\tbreak\n\t\tcase (this.CONDENSED_LIBRA_ASTRAL_ID):\n\t\tcase (this.CONDENSED_LIBRA_UMBRAL_ID):\n\t\tcase (this.CONDENSED_LIBRA_PHYSICAL_ID):\n\t\t\tthis.inLibra = true\n\t\t\tbreak\n\t\t}\n\n\t\tconst newBuff = appliedBuffHistory.openNew(event.timestamp)\n\t\tnewBuff.data.buffId = event.status\n\t\tif (event.source === this.actors.current.id) {\n\t\t\tnewBuff.data.ours = true\n\t\t}\n\n\t\tif (this.buffActionHook !== undefined) {\n\t\t\t// There's already a hook installed, likely due to an overwrite.\n\t\t\t// The hooks are identical, so we can just return early\n\t\t\treturn\n\t\t}\n\n\t\t// No hook installed, so put in our own:\n\t\tconst playerTargets = this.parser.pull.actors\n\t\t\t.filter(actor => actor.team === Team.FRIEND)\n\t\t\t.map(actor => actor.id)\n\n\t\tconst playerActionFilter = filter<Event>().source(oneOf(playerTargets)).type('action')\n\t\tthis.buffActionHook = this.addEventHook(playerActionFilter, this.onActionDuringBuff)\n\t}\n\n\tprivate previousRemove?: Events['statusRemove']\n\tprivate onRemoveRaidBuff(event: Events['statusRemove']) {\n\t\tif (this.isDupedEvent(event, this.previousRemove)) {\n\t\t\t// Duped event, skip it\n\t\t\treturn\n\t\t}\n\t\tthis.previousRemove = event\n\n\t\tconst removedBuff = this.data.getStatus(event.status)\n\t\tif (removedBuff === undefined) { return }\n\n\t\tconst removedBuffHistory = this.buffHistory[event.status]\n\n\t\t// Was this an overwrite, or did it run its full course?\n\t\tconst currentBuff = removedBuffHistory.getCurrent()\n\t\tif (currentBuff !== undefined && removedBuff !== undefined) {\n\t\t\tconst buffExpectedDuration = (removedBuff.duration ?? fallbackBuffDuration) - allowedBuffOverwriteMs\n\t\t\tconst buffActualDuration = event.timestamp - currentBuff.start\n\t\t\tif (buffExpectedDuration > buffActualDuration) {\n\t\t\t\tcurrentBuff.data.overwritten = true\n\t\t\t\t// An overwrite...\n\t\t\t} else {\n\t\t\t\t// Not an overwrite, this was the buff expiring\n\t\t\t\tswitch (event.status) {\n\t\t\t\tcase this.OFF_GUARD_ID:\n\t\t\t\t\tthis.inOffGuard = false\n\t\t\t\t\tbreak\n\t\t\t\tcase this.PECULIAR_LIGHT_ID:\n\t\t\t\t\tthis.inPeculiarLight = false\n\t\t\t\t\tbreak\n\t\t\t\tcase (this.CONDENSED_LIBRA_ASTRAL_ID):\n\t\t\t\tcase (this.CONDENSED_LIBRA_UMBRAL_ID):\n\t\t\t\tcase (this.CONDENSED_LIBRA_PHYSICAL_ID):\n\t\t\t\t\tthis.inLibra = false\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tremovedBuffHistory.closeCurrent(event.timestamp)\n\t\tconst canRemoveHook = !this.inPeculiarLight && !this.inOffGuard && !this.inLibra\n\n\t\tif (this.buffActionHook != null && canRemoveHook) {\n\t\t\tthis.removeEventHook(this.buffActionHook)\n\t\t\tthis.buffActionHook = undefined\n\t\t}\n\t}\n\n\tprivate onActionDuringBuff(event: Events['action']) {\n\t\tObject.values(this.buffHistory).forEach(history => {\n\t\t\tconst buffCurrent = history.getCurrent()\n\t\t\tif (buffCurrent === undefined) { return }\n\t\t\tbuffCurrent.data.events.push({\n\t\t\t\taction: event.action,\n\t\t\t\tunderPL: this.inPeculiarLight,\n\t\t\t\tunderOG: this.inOffGuard,\n\t\t\t\tunderLibra: this.inLibra,\n\t\t\t})\n\t\t})\n\t}\n\n\tprivate onComplete() {\n\t\tObject.values(this.buffHistory).forEach(history => {\n\t\t\thistory.closeCurrent(this.parser.pull.timestamp + this.parser.pull.duration)\n\t\t})\n\n\t\t// We should not report overwrites for Condensed Libra since it's quite common to fish\n\t\t// for physical libra\n\t\tconst reportOverwrite = [\n\t\t\tthis.data.statuses.PECULIAR_LIGHT,\n\t\t\tthis.data.statuses.OFF_GUARD,\n\t\t]\n\t\treportOverwrite.forEach(buff => {\n\t\t\tconst history = this.buffHistory[buff.id]\n\t\t\tconst ourOverwritten = history.entries\n\t\t\t\t.filter(b => b.data.overwritten && b.data.ours)\n\t\t\t\t.length\n\n\t\t\t// TODO best to show seconds overwritten rather than just the count tbh\n\t\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\t\ticon: buff.icon,\n\t\t\t\tcontent: <Trans id=\"blu.buffs.overwritten.content\" >\n\t\t\t\t\tYour <StatusLink {...buff} /> was overwritten by someone else before it ran out.  This might be reasonable depending on the fight, but worth examining and figuring out if your team needs to coordinate buffs.\n\t\t\t\t</Trans>,\n\t\t\t\ttiers: {1: SEVERITY.MEDIUM},\n\t\t\t\tvalue: ourOverwritten,\n\t\t\t\twhy: <Trans id=\"blu.buffs.overwritten.why\" >\n\t\t\t\t\t<Plural value={ourOverwritten ?? 0} one=\"# application was \" other=\"# applications were\" /> overwritten by someone else\n\t\t\t\t</Trans>,\n\t\t\t}))\n\t\t})\n\t}\n\n\toverride output() {\n\t\tconst allBuffs = Object.values(this.buffHistory).map(e => e.entries).flat()\n\t\t\t.sort((a, b) => {\n\t\t\t\treturn a.start - b.start\n\t\t\t})\n\t\tif (allBuffs.length === 0) { return undefined }\n\n\t\tconst ourBuffs = allBuffs.filter(pl => pl.data.ours)\n\t\tif (ourBuffs.length === 0) { return undefined }\n\n\t\tconst rotationData = ourBuffs.map(buffWindow => {\n\t\t\tconst buffStart = buffWindow.start - this.parser.pull.timestamp\n\t\t\tconst buffEnd   = (buffWindow.end ?? buffWindow.start) - this.parser.pull.timestamp\n\n\t\t\tconst buffId         = buffWindow.data.buffId\n\t\t\tconst isBuffedAction = buffWindow.data.isBuffedAction\n\t\t\tconst relevantActionsBuffed = buffWindow.data.events.filter(e => {\n\t\t\t\tconst action     = this.data.getAction(e.action)\n\t\t\t\tif (action === undefined) { return }\n\t\t\t\tconst damageType = action?.damageType\n\t\t\t\tif (damageType === undefined) {\n\t\t\t\t\t// This filters out all the non-damaging actions, ala Bristle or Whistle\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif (isBuffedAction(action, buffId)) {\n\t\t\t\t\t// This buff covers this action\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t})\n\n\t\t\tlet ogBuffed = 0\n\t\t\tlet plBuffed = 0\n\t\t\tlet libraBuffed = 0\n\t\t\trelevantActionsBuffed.forEach(e => {\n\t\t\t\tif (e.underPL) {\n\t\t\t\t\tplBuffed++\n\t\t\t\t}\n\t\t\t\tif (e.underOG) {\n\t\t\t\t\togBuffed++\n\t\t\t\t}\n\t\t\t\tif (e.underLibra) {\n\t\t\t\t\tlibraBuffed++\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t})\n\t\t\treturn {\n\t\t\t\tstart: buffStart,\n\t\t\t\tend: buffEnd,\n\t\t\t\tbuffAction: buffWindow.data.buffAction,\n\t\t\t\tbuffStatus: this.data.getStatus(buffId),\n\t\t\t\togBuffed: ogBuffed,\n\t\t\t\tplBuffed: plBuffed,\n\t\t\t\tlibraBuffed: libraBuffed,\n\t\t\t}\n\t\t}).filter(e => e !== undefined)\n\n\t\tif (rotationData.length === 0) { return }\n\n\t\treturn <Fragment>\n\t\t\t<Message>\n\t\t\t\t<Trans id=\"blu.buffs.table.message\">\n\t\t\t\tBlue Mages can keep both <ActionLink action=\"OFF_GUARD\"/> and <ActionLink action=\"PECULIAR_LIGHT\"/> up for the entire duration of the fight, and may opt to have the <ActionLink action=\"CONDENSED_LIBRA\"/> buffs running as well.\n\t\t\t\t\t<br />\n\t\t\t\tThe table below shows when you used your buffs, as well as how many damaging party actions the buff covered; it also shows how many of those actions were also covered by the other two buffs.  Ideally your team should coordinate to have <ActionLink action=\"OFF_GUARD\" showIcon={false} /> and <ActionLink action=\"PECULIAR_LIGHT\" showIcon={false} /> running all the time, making both numbers below equal.\n\t\t\t\t</Trans>\n\t\t\t</Message>\n\t\t\t<Table compact unstackable celled collapsing>\n\t\t\t\t<Table.Header>\n\t\t\t\t\t<Table.Row>\n\t\t\t\t\t\t<Table.HeaderCell><Trans id=\"blu.buffs.buff_time\">Time</Trans></Table.HeaderCell>\n\t\t\t\t\t\t<Table.HeaderCell><Trans id=\"blu.buffs.buff_yours\">Your Buff</Trans></Table.HeaderCell>\n\t\t\t\t\t\t<Table.HeaderCell><DataLink action=\"OFF_GUARD\" /></Table.HeaderCell>\n\t\t\t\t\t\t<Table.HeaderCell><DataLink action=\"PECULIAR_LIGHT\" /></Table.HeaderCell>\n\t\t\t\t\t\t<Table.HeaderCell><DataLink action=\"CONDENSED_LIBRA\" /></Table.HeaderCell>\n\t\t\t\t\t</Table.Row>\n\t\t\t\t</Table.Header>\n\t\t\t\t<Table.Body>\n\t\t\t\t\t{rotationData.map(a => {\n\t\t\t\t\t\treturn <Table.Row key={a.start}>\n\t\t\t\t\t\t\t<Table.Cell textAlign=\"center\">\n\t\t\t\t\t\t\t\t<span style={{marginRight: 5}}>{this.parser.formatEpochTimestamp(a.start + this.parser.pull.timestamp)}</span>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tcircular\n\t\t\t\t\t\t\t\t\tcompact\n\t\t\t\t\t\t\t\t\tsize=\"mini\"\n\t\t\t\t\t\t\t\t\ticon=\"time\"\n\t\t\t\t\t\t\t\t\tonClick={() => this.timeline.show(a.start, a.end)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t<Table.Cell> <StatusLink {...a.buffStatus} />\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t<Table.Cell>{a.ogBuffed}</Table.Cell>\n\t\t\t\t\t\t\t<Table.Cell>{a.plBuffed}</Table.Cell>\n\t\t\t\t\t\t\t<Table.Cell>{a.libraBuffed}</Table.Cell>\n\t\t\t\t\t\t</Table.Row>\n\t\t\t\t\t})}\n\t\t\t\t</Table.Body>\n\t\t\t</Table>\n\t\t</Fragment>\n\t}\n}\n\n","export const DISPLAY_ORDER = {\n\tINTERRUPTED_CASTS: 1,\n\tMOON_FLUTE: 2,\n\tREVENGE_BLAST: 3,\n\tRAID_BUFFS: 4,\n}\n","import {t} from '@lingui/macro'\nimport {Plural, Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {EventHook} from 'parser/core/Dispatcher'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {History} from 'parser/core/modules/ActionWindow/History'\nimport {Actors} from 'parser/core/modules/Actors'\nimport {Data} from 'parser/core/modules/Data'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\n// Tiered suggestion severities\nconst COLD_SEVERITY = {\n\tDROPPED_COLD_FOG: {\n\t\t1: SEVERITY.MAJOR,\n\t},\n\tDROPPED_WHITE_DEATH_CASTS: {\n\t\t1: SEVERITY.MEDIUM,\n\t},\n\tINEFFECTIVE_COLD_FOG: {\n\t\t1: SEVERITY.MAJOR,\n\t},\n}\n\nconst COLD_FOG_MINIMUM_VIABLE_CASTS = 2\nconst COLD_COLD_IDEAL_CASTS = 6\n\ninterface ColdFogWindow {\n\twhiteDeathCasts: number\n}\n\nexport class ColdFog extends Analyser {\n\tstatic override handle = 'coldfog'\n\tstatic override title = t('blu.cold_fog.title')`Cold Fog`\n\n\t@dependency private actors!: Actors\n\t@dependency private data!: Data\n\t@dependency private suggestions!: Suggestions\n\n\tprivate touchOfFrostProcs = 0\n\tprivate coldFogCasts = 0\n\tprivate currentHook?: EventHook<Events['action']>\n\tprivate touchOfFrostHistory = new History<ColdFogWindow>(\n\t\t() => ({\n\t\t\twhiteDeathCasts: 0,\n\t\t})\n\t)\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\t\tthis.addEventHook(playerFilter.type('statusApply').status(this.data.statuses.TOUCH_OF_FROST.id), this.onApplyTouchOfFrost)\n\t\tthis.addEventHook(playerFilter.type('statusRemove').status(this.data.statuses.TOUCH_OF_FROST.id), this.onRemoveTouchOfFrost)\n\n\t\tthis.addEventHook(playerFilter.type('statusApply').status(this.data.statuses.COLD_FOG.id), this.onApplyColdFog)\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onApplyTouchOfFrost(event: Events['statusApply']) {\n\t\tthis.touchOfFrostHistory.openNew(event.timestamp)\n\t\tif (this.currentHook !== undefined) { return }\n\n\t\t// Start tracking to see if they got the six White Death GCDs during the window\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\t\tthis.currentHook = this.addEventHook(playerFilter.action(this.data.actions.WHITE_DEATH.id).type('action'), this.onWhiteDeath)\n\t}\n\tprivate onRemoveTouchOfFrost() {\n\t\tthis.touchOfFrostHistory.closeCurrent(this.parser.pull.timestamp + this.parser.pull.duration)\n\t\tif (this.currentHook !== undefined) {\n\t\t\tthis.removeEventHook(this.currentHook)\n\t\t}\n\t}\n\n\tprivate onWhiteDeath(event: Events['action']) {\n\t\tconst current = this.touchOfFrostHistory.getCurrent()\n\t\tif (current == null) { return }\n\n\t\tif (event.action === this.data.actions.WHITE_DEATH.id) {\n\t\t\tcurrent.data.whiteDeathCasts++\n\t\t}\n\t}\n\n\tprivate onApplyColdFog() {\n\t\tthis.coldFogCasts++\n\t}\n\n\tprivate onComplete() {\n\n\t\t// Wiffled Cold Fog\n\t\tconst droppedColdFogs = this.coldFogCasts - this.touchOfFrostHistory.entries.length\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.COLD_FOG.icon,\n\t\t\tcontent: <Trans id=\"blu.coldfog.dropped.content\">\n\t\t\t\tAny damage taken while the <DataLink status=\"COLD_FOG\"/> effect is active grants the <DataLink status=\"TOUCH_OF_FROST\"/>\n\t\t\t\tbuff, allowing the use of <DataLink action=\"WHITE_DEATH\" /> for 15 seconds.\n\t\t\t\tYou should ensure you can proc every cast of <DataLink action=\"COLD_FOG\"/>.\n\t\t\t</Trans>,\n\t\t\ttiers: COLD_SEVERITY.DROPPED_COLD_FOG,\n\t\t\tvalue: droppedColdFogs,\n\t\t\twhy: <Trans id=\"blu.coldfog.dropped.why\">\n\t\t\t\t<Plural value={droppedColdFogs ?? 0} one=\"# Cold Fog use\" other=\"# Cold Fog uses\" /> did not proc <DataLink action=\"WHITE_DEATH\"  showIcon={false} showTooltip={false} />\n\t\t\t</Trans>,\n\t\t}))\n\n\t\t// Every Touch of Frost window should have at least two casts of White Death (to offset the opportunity cost of\n\t\t// casting Cold Fog), and ideally 6 or 7 casts total of White Death, depending on spell speed.\n\t\tconst ineffectiveColdFog = this.touchOfFrostHistory.entries\n\t\t\t.filter(entry => entry.data.whiteDeathCasts < COLD_FOG_MINIMUM_VIABLE_CASTS)\n\t\t\t.length\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.COLD_FOG.icon,\n\t\t\tcontent: <Trans id=\"blu.coldfog.ineffective.content\">\n\t\t\t\tFor <DataLink action=\"COLD_FOG\"/> to be effective, you need to cast <DataLink action=\"WHITE_DEATH\" />\n\t\t\t\tat least two times while under <DataLink status=\"TOUCH_OF_FROST\" />.\n\t\t\t</Trans>,\n\t\t\ttiers: COLD_SEVERITY.INEFFECTIVE_COLD_FOG,\n\t\t\tvalue: ineffectiveColdFog,\n\t\t\twhy: <Trans id=\"blu.coldfog.ineffective.why\">\n\t\t\t\t<Plural value={ineffectiveColdFog ?? 0} one=\"# Cold Fog use\" other=\"# Cold Fog uses\" /> were a DPS loss due to not using<DataLink action=\"WHITE_DEATH\"  showIcon={false} showTooltip={false} /> enough times\n\t\t\t</Trans>,\n\t\t}))\n\n\t\t// Doing less than 6 cold fogs is rarely good, although some fight timelines necessitate it.\n\t\tconst droppedWhiteDeathCasts = this.touchOfFrostHistory.entries\n\t\t\t.filter(entry => entry.data.whiteDeathCasts >= COLD_FOG_MINIMUM_VIABLE_CASTS)\n\t\t\t.filter(entry => entry.data.whiteDeathCasts  < COLD_COLD_IDEAL_CASTS)\n\t\t\t.length\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.COLD_FOG.icon,\n\t\t\tcontent: <Trans id=\"blu.coldfog.dropped_casts.content\">\n\t\t\t\t<DataLink action=\"WHITE_DEATH\" /> should be cast 6 or 7 times (depending on spell speed)\n\t\t\t\tfor each <DataLink action=\"COLD_FOG\" /> cast.\n\t\t\t</Trans>,\n\t\t\ttiers: COLD_SEVERITY.DROPPED_WHITE_DEATH_CASTS,\n\t\t\tvalue: droppedWhiteDeathCasts,\n\t\t\twhy: <Trans id=\"blu.coldfog.dropped_casts.why\">\n\t\t\t\t<Plural value={droppedWhiteDeathCasts ?? 0} one=\"# Cold Fog use\" other=\"# Cold Fog uses\" /> cast <DataLink action=\"WHITE_DEATH\"  showIcon={false} showTooltip={false} /> less than 6 times.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n}\n","import {Event, Events} from 'event'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Data} from 'parser/core/modules/Data'\nimport {Death} from 'parser/core/modules/Death'\n\n// Deaths from Final Sting and Self-Destruct should not count for\n// the report.\n// It would be nice to check for early stings here, but that would\n// require comparing how much damage the sting did vs how much health\n// the boss had left, which is too fight-specific.\n\nexport class BLUDeath extends Death {\n\t@dependency private mydata!: Data\n\n\tprivate isFinalSting = false\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\t\tthis.addEventHook(filter<Event>().source(this.parser.actor.id).type('action')\n\t\t\t.action(oneOf([\n\t\t\t\tthis.mydata.actions.FINAL_STING.id,\n\t\t\t\tthis.mydata.actions.SELF_DESTRUCT.id,\n\t\t\t])), this.onFinalSting)\n\t}\n\n\tprivate onFinalSting() {\n\t\tthis.isFinalSting = true\n\t}\n\n\toverride shouldCountDeath(event: Events['actorUpdate']): boolean {\n\t\tif (event.actor !== this.parser.actor.id) {\n\t\t\treturn true\n\t\t}\n\t\tif (this.isFinalSting) {\n\t\t\tthis.isFinalSting = false\n\t\t\treturn false\n\t\t}\n\t\treturn true\n\t}\n}\n\n","import {Defensives as CoreDefensives} from 'parser/core/modules/Defensives'\n\nexport class Defensives extends CoreDefensives {\n\tprotected override trackedDefensives = [\n\t\tthis.data.actions.ADDLE,\n\t\tthis.data.actions.MAGIC_HAMMER,\n\t]\n}\n","import {Plural, Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Status} from 'data/STATUSES'\nimport {Event} from 'event'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport Checklist, {Requirement, TARGET, TieredRule} from 'parser/core/modules/Checklist'\nimport {DoTs as CoreDoTs} from 'parser/core/modules/DoTs'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\nconst SEVERITIES = {\n\tUNBUFFED_SOT: {\n\t\t1: SEVERITY.MINOR,\n\t},\n\t// Clipping warnings in seconds per minute\n\tCLIPPING: {\n\t\t6000: SEVERITY.MINOR,\n\t\t9000: SEVERITY.MEDIUM,\n\t\t12000: SEVERITY.MAJOR,\n\t},\n\tUPTIME: {\n\t\t90: TARGET.WARN,\n\t\t95: TARGET.SUCCESS,\n\t},\n}\n\nexport class DoTs extends CoreDoTs {\n\t@dependency private myactors!: Actors\n\t@dependency private checklist!: Checklist\n\t@dependency private suggestions!: Suggestions\n\n\tprivate bristleId?: Status['id']\n\tprivate unbuffedSongsOfTorment = 0;\n\n\tprotected override trackedStatuses = [\n\t\tthis.data.statuses.BLEEDING.id,\n\t]\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tthis.bristleId = this.data.statuses.BRISTLE.id\n\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\n\t\tthis.addEventHook(playerFilter.type('action').action(this.data.actions.SONG_OF_TORMENT.id), this.onApplyingSoT)\n\t\tthis.addEventHook(filter<Event>().type('complete'), this.onCompleteExtra)\n\n\t}\n\tprivate onApplyingSoT() {\n\t\tif (this.bristleId === undefined) { return }\n\t\tif (this.myactors.current.hasStatus(this.bristleId)) { // Boost effect from Bristle is present\n\t\t\treturn\n\t\t}\n\n\t\t// Bristle was not used, which is a (relatively minor) ~65 potency loss\n\t\tthis.unbuffedSongsOfTorment++\n\t}\n\n\tprivate onCompleteExtra() {\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.SONG_OF_TORMENT.icon,\n\t\t\tcontent: <Trans id = \"blu.song_of_torment.suggestion.unbuffed.content\">\n\t\t\t\tIdeally every <DataLink action=\"SONG_OF_TORMENT\"/> should be buffed by first using <DataLink action=\"BRISTLE\"/>.\n\t\t\t\tThis is a minor potency gain.\n\t\t\t</Trans>,\n\t\t\ttiers: SEVERITIES.UNBUFFED_SOT,\n\t\t\twhy: <Trans id =\"blu.song_of_torment.suggestion.unbuffed.why\">\n\t\t\t\t<Plural value={this.unbuffedSongsOfTorment ?? 0} one=\"# Song of Torment was\" other=\"# Songs of Torment were\"/> not buffed.\n\t\t\t</Trans>,\n\t\t\tvalue: this.unbuffedSongsOfTorment,\n\t\t}))\n\t}\n\n\tprotected override addChecklistRules() {\n\t\tconst uptimePercent = this.getUptimePercent(this.data.statuses.BLEEDING.id)\n\t\tthis.checklist.add(new TieredRule({\n\t\t\tname: <Trans id=\"blu.dots.rule.name\">Keep your DoTs up </Trans>,\n\t\t\tdescription: <Trans id=\"blu.dots.rule.description\">\n\t\t\t\tThe <DataLink status=\"BLEEDING\" showIcon={false} showTooltip={false} /> effect from Nightbloom and SoT is a solid 15% of your total damage.\n\t\t\t</Trans>,\n\t\t\ttiers: SEVERITIES.UPTIME,\n\t\t\trequirements: [\n\t\t\t\tnew Requirement({\n\t\t\t\t\tname: <Trans id=\"blu.dots.requirement.uptime-bleed.name\"><DataLink status=\"BLEEDING\" /> uptime</Trans>,\n\t\t\t\t\tpercent: uptimePercent,\n\t\t\t\t}),\n\t\t\t],\n\t\t}))\n\t}\n\n\tprotected addClippingSuggestions() {\n\t\tconst clippingPerMinute = this.getClippingAmount(this.data.statuses.BLEEDING.id)\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.SONG_OF_TORMENT.icon,\n\t\t\tcontent: <Trans id=\"blu.dots.suggestion.clip-bleed.content\">\n\t\t\t\tAvoid refreshing Song of Torment significantly before its expiration, this will allow you to cast more Sonic Boom.\n\t\t\t</Trans>,\n\t\t\ttiers: SEVERITIES.CLIPPING,\n\t\t\tvalue: clippingPerMinute,\n\t\t\twhy: <Trans id=\"blu.dots.suggestion.clip-bleed.why\">\n\t\t\t\tAn average of {this.parser.formatDuration(clippingPerMinute)} of <DataLink status=\"BLEEDING\" /> clipped per minute due to early refreshes.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n}\n\n","import {Trans, Plural} from '@lingui/react'\nimport {StatusLink} from 'components/ui/DbLink'\nimport STATUSES, {Status} from 'data/STATUSES'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Data} from 'parser/core/modules/Data'\nimport Downtime from 'parser/core/modules/Downtime'\nimport Suggestions, {TieredSuggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\ninterface buffMisuse {\n\tdropped: number\n\toverwrote: number\n\tduration: number\n}\n\nexport class DroppedBuffs extends Analyser {\n\tstatic override handle = 'droppedbuffs'\n\n\t@dependency private data!: Data\n\t@dependency private suggestions!: Suggestions\n\t@dependency private downtime!: Downtime\n\n\tprivate currentBuffs = new Map<Status['id'], number>()\n\tprivate misusedBuffs : {[key: number]: buffMisuse} = {\n\t\t[STATUSES.BRISTLE.id]: {dropped: 0, overwrote: 0, duration: STATUSES.BRISTLE.duration},\n\t\t[STATUSES.WHISTLE.id]: {dropped: 0, overwrote: 0, duration: STATUSES.WHISTLE.duration},\n\t\t[STATUSES.TINGLING.id]: {dropped: 0, overwrote: 0, duration: STATUSES.TINGLING.duration},\n\t}\n\n\toverride initialise() {\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\t\tconst buffFilter = playerFilter.status(oneOf(Object.keys(this.misusedBuffs).map(Number)))\n\t\tthis.addEventHook(buffFilter.type('statusApply'), this.onGainBuff)\n\t\tthis.addEventHook(buffFilter.type('statusRemove'), this.onRemoveBuff)\n\t\tthis.addEventHook({\n\t\t\ttype: 'death',\n\t\t\tactor: this.parser.actor.id,\n\t\t}, this.onDeath)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onRemoveBuff(event: Events['statusRemove']) {\n\t\tif (this.currentBuffs.has(event.status)) {\n\t\t\tconst buffStart = this.currentBuffs.get(event.status) ?? event.timestamp\n\t\t\tconst buffEnd   = event.timestamp\n\t\t\tconst buffDelta = buffEnd - buffStart\n\t\t\tif (buffDelta >= this.misusedBuffs[event.status].duration) {\n\t\t\t\t// Buff expired!\n\t\t\t\tthis.misusedBuffs[event.status].dropped++\n\t\t\t}\n\t\t}\n\t\tthis.currentBuffs.delete(event.status)\n\t}\n\n\tprivate onGainBuff(event: Events['statusApply']) {\n\t\tconst current = this.currentBuffs.get(event.status)\n\t\tthis.currentBuffs.set(event.status, event.timestamp)\n\n\t\tif (current === undefined) {\n\t\t\treturn\n\t\t}\n\n\t\t// Overwrite! Let's ignore it if this is during downtime:\n\t\tconst duringDowntime = this.downtime.getDowntime(event.timestamp - 2, event.timestamp)\n\t\tif (duringDowntime >= 0) {\n\t\t\treturn\n\t\t}\n\n\t\t// Not during downtime, so just an overwrite.\n\t\tthis.misusedBuffs[event.status].overwrote++\n\t}\n\n\tprivate onDeath() {\n\t\tthis.currentBuffs.clear()\n\t}\n\n\tprivate suggestOnDroppedStatus(statusID: Status['id'], droppedStatusCount: number) {\n\t\tconst droppedStatus = this.data.getStatus(statusID)\n\t\tif (droppedStatus === undefined) { return }\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: droppedStatus.icon,\n\t\t\tcontent: <Trans id=\"blu.droppedbuffs.suggestions.dropped.content\" >\n\t\t\t\t<StatusLink {...droppedStatus} /> fell off without being used.\n\t\t\t</Trans>,\n\t\t\ttiers: {1: SEVERITY.MEDIUM},\n\t\t\tvalue: droppedStatusCount,\n\t\t\twhy: <Trans id=\"blu.droppedbuffs.suggestions.dropped.why\" >\n\t\t\t\t<Plural value={droppedStatusCount ?? 0} one=\"# Use of \" other=\"# Uses of \"/> <StatusLink {...droppedStatus} showIcon={false} /> expired.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n\n\tprivate suggestOnOverwrittenStatus(statusID: Status['id'], overwrittenStatusCount: number) {\n\t\tconst overwrittenStatus = this.data.getStatus(statusID)\n\t\tif (overwrittenStatus === undefined) { return }\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: overwrittenStatus.icon,\n\t\t\tcontent: <Trans id=\"blu.droppedbuffs.suggestions.overwritten.content\" >\n\t\t\t\t<StatusLink {...overwrittenStatus} /> was overwritten.\n\t\t\t</Trans>,\n\t\t\ttiers: {1: SEVERITY.MEDIUM},\n\t\t\tvalue: overwrittenStatusCount,\n\t\t\twhy: <Trans id=\"blu.droppedbuffs.suggestions.overwritten.why\" >\n\t\t\t\t<Plural value={overwrittenStatusCount ?? 0} one=\"# Use of \" other=\"# Uses of \"/> <StatusLink {...overwrittenStatus} showIcon={false} /> were overwritten.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n\n\tprivate onComplete() {\n\t\tObject.keys(this.misusedBuffs).map(Number).forEach(statusID => {\n\t\t\tthis.suggestOnDroppedStatus(statusID, this.misusedBuffs[statusID].dropped)\n\t\t\tthis.suggestOnOverwrittenStatus(statusID, this.misusedBuffs[statusID].overwrote)\n\t\t})\n\t}\n}\n","import {CooldownDowntime} from 'parser/core/modules/CooldownDowntime'\n\nconst DEFAULT_ALLOWED_DOWNTIME = 1000\nexport class GeneralCDDowntime extends CooldownDowntime {\n\toverride defaultAllowedAverageDowntime = DEFAULT_ALLOWED_DOWNTIME\n\n\toverride trackedCds = [\n\t\t{\n\t\t\tcooldowns: [this.data.actions.NIGHTBLOOM],\n\t\t\tfirstUseOffset: 5000,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.PHANTOM_FLURRY],\n\t\t\tfirstUseOffset: 19000,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.FEATHER_RAIN, this.data.actions.ERUPTION],\n\t\t\tfirstUseOffset: 15000,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.SHOCK_STRIKE],\n\t\t\tfirstUseOffset: 15000,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.GLASS_DANCE],\n\t\t\tfirstUseOffset: 12500,\n\t\t\tallowedAverageDowntime: 30000, // DPS gain to hold this until the Moon Flute window\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.J_KICK, this.data.actions.QUASAR],\n\t\t\tfirstUseOffset: 2500,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.TRIPLE_TRIDENT],\n\t\t\tfirstUseOffset: 2500,\n\t\t\tallowedAverageDowntime: 30000, // DPS gain for Crit builds to hold this until the Moon Flute window\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.THE_ROSE_OF_DESTRUCTION],\n\t\t\tfirstUseOffset: 5000,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.COLD_FOG],\n\t\t\tfirstUseOffset: 30000, // some time after the opener\n\t\t},\n\t\t{\n\t\t\tcooldowns: [\n\t\t\t\tthis.data.actions.OFF_GUARD,\n\t\t\t\tthis.data.actions.PECULIAR_LIGHT,\n\t\t\t],\n\t\t\tfirstUseOffset: 50000, // up to 50 seconds into the pull, if people are staggering their buffs\n\t\t},\n\t]\n\toverride suggestionOnlyCooldowns = [\n\t\t{cooldowns: [this.data.actions.MATRA_MAGIC]},\n\t\t{cooldowns: [this.data.actions.DRAGON_FORCE]},\n\t\t{cooldowns: [this.data.actions.ANGELS_SNACK]},\n\t]\n}\n","import {Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Interrupts as CoreInterrupts} from 'parser/core/modules/Interrupts'\nimport React from 'react'\nimport {DISPLAY_ORDER} from './DISPLAY_ORDER'\n\nexport class Interrupts extends CoreInterrupts {\n\tstatic override displayOrder = DISPLAY_ORDER.INTERRUPTED_CASTS\n\toverride suggestionContent = <Trans id=\"blu.interrupts.suggestion.content\">\n\t\tBlue Mage has few movement tools; our <DataLink action=\"SWIFTCAST\"/> will either be used during the <DataLink action=\"MOON_FLUTE\"/> window, or be left in reserve for a resurrect.  In very select circumstances <DataLink action=\"COLD_FOG\"/> can be used to get 15 seconds of free movement, but this is rare.  Generally, you will want to pre-position and use slidecast windows as much as you can.\n\t</Trans>\n}\n\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {RotationTargetOutcome} from 'components/ui/RotationTable'\nimport {Action} from 'data/ACTIONS'\nimport {dependency} from 'parser/core/Injectable'\nimport {BuffWindow, EvaluatedAction, TrackedAction, ExpectedActionsEvaluator, ExpectedGcdCountEvaluator} from 'parser/core/modules/ActionWindow'\nimport {HistoryEntry} from 'parser/core/modules/ActionWindow/History'\nimport {GlobalCooldown} from 'parser/core/modules/GlobalCooldown'\nimport {SEVERITY} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\nconst SEVERITIES = {\n\tMISSING_EXPECTED_USES: {\n\t\t1: SEVERITY.MINOR,\n\t\t2: SEVERITY.MEDIUM,\n\t\t3: SEVERITY.MAJOR,\n\t},\n\n\tTOO_FEW_GCDS: {\n\t\t8: SEVERITY.MAJOR,\n\t},\n}\n\nconst EXPECTED_GCD_COUNT = 5\n// Some notes on the expected GCD count.\n// Waxing Nocturne is 15 seconds, so that seems like\n// it should be 6 GCDs, but the first .5 seconds you are still\n// in GCD recast time, so it's more like 14.5 seconds.\n//\n// If you are running very high spell speed, it is actually\n// possible to get those 6 GCDs, but that's not the entire story!\n//\n// If you just cats Moon Flute and then do 6 GCDs, then no matter\n// how strong those GCDs are -- even if they are 6 Revenge Blasts --\n// it will be a potency loss compared to 6 Revenge Blasts + 6 Sonic Booms.\n//\n// So while GCDs are as usual important, the big deal in a Moon Flute\n// window is weaving in as many oGCDs as we can *without* dropping a\n// GCD cast.\n//\n// And so our standard moon flute window actually only has us cast 4\n// GCDs (Triple Trident, The Rose of Destruction, Bristle, Matra Magic)\n// while giving up ~5 seconds to purposely clipping with oGCDs;\n// 3.6 seconds of Surpanakha, and the rest is all hard clips and\n// purposeful multi-weaves.\n//\n// ...but for implementation details, Phantom Flurry is marked as a GCD,\n// so even though we technically only do 4 GCDs in the window, we are\n// looking for a pseudo-5th, Phantom Flurry.\n//\n// Also, if they used Final Sting, then we window can be as short as a single\n// GCD!\n\nexport class MoonFlute extends BuffWindow {\n\tstatic override handle = 'moonflutes'\n\tstatic override title = t('blu.moonflutes.title')`Moon Flute Windows`\n\n\t@dependency globalCooldown!: GlobalCooldown\n\n\toverride buffStatus = this.data.statuses.WAXING_NOCTURNE\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tconst suggestionIcon = this.data.actions.MOON_FLUTE.icon\n\t\tconst suggestionWindowName = <ActionLink action=\"MOON_FLUTE\" showIcon={false}/>\n\t\tthis.addEvaluator(new ExpectedGcdCountEvaluator({\n\t\t\texpectedGcds: EXPECTED_GCD_COUNT, // 4 GCDs + Phantom Flurry _or_ 5 GCDs\n\t\t\tglobalCooldown: this.globalCooldown,\n\t\t\tsuggestionIcon,\n\t\t\tsuggestionContent: <Trans id=\"blu.moonflutes.suggestions.gcds.content\">\n\t\t\t\tRegardless of spell speed, ideally a <ActionLink action=\"MOON_FLUTE\" /> window should contain at least\n\t\t\t\t\t4 GCDs and end in <ActionLink action=\"PHANTOM_FLURRY\" />.  If you have higher latency this can\n\t\t\t\t\tbe problematic; changing your speed speed might help, and in a pinch you can try moving certain\n\t\t\t\t\toGCDs out of the window (<ActionLink action=\"J_KICK\" />, <ActionLink action=\"GLASS_DANCE\" />,\n\t\t\t\t<ActionLink action=\"FEATHER_RAIN\" />), or replacing <ActionLink action=\"THE_ROSE_OF_DESTRUCTION\" />\n\t\t\t\t\twith a <ActionLink action=\"SONIC_BOOM\" />.\n\t\t\t</Trans>,\n\t\t\tsuggestionWindowName,\n\t\t\tseverityTiers: SEVERITIES.TOO_FEW_GCDS,\n\t\t\thasStacks: false,\n\t\t\tadjustCount: this.adjustExpectedGcdCount.bind(this),\n\t\t}))\n\n\t\tconst mfActionEvaluator = new MoonFluteExpectedActionsEvaluator({\n\t\t\texpectedActions: [\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.J_KICK,\n\t\t\t\t\texpectedPerWindow: 1,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.TRIPLE_TRIDENT,\n\t\t\t\t\texpectedPerWindow: 1,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.NIGHTBLOOM,\n\t\t\t\t\texpectedPerWindow: 1,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.THE_ROSE_OF_DESTRUCTION,\n\t\t\t\t\texpectedPerWindow: 1,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.SHOCK_STRIKE,\n\t\t\t\t\texpectedPerWindow: 1,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.BRISTLE,\n\t\t\t\t\texpectedPerWindow: 1,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.GLASS_DANCE,\n\t\t\t\t\texpectedPerWindow: 1,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.SURPANAKHA,\n\t\t\t\t\texpectedPerWindow: 4,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.FEATHER_RAIN,\n\t\t\t\t\texpectedPerWindow: 1,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.MATRA_MAGIC,\n\t\t\t\t\texpectedPerWindow: 1,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.PHANTOM_FLURRY,\n\t\t\t\t\texpectedPerWindow: 1,\n\t\t\t\t},\n\t\t\t],\n\t\t\tsuggestionIcon,\n\t\t\tsuggestionContent: <Trans id=\"blu.moonflutes.suggestions.expected-actions.content\">\n\t\t\t\t<ActionLink action=\"MOON_FLUTE\" /> is only worth using if the buffed actions during the window\n\t\t\t\twill give you an extra 1260 potency (equivalent to casting <ActionLink action=\"SONIC_BOOM\" /> six times).\n\t\t\t\tThe more of your larger cooldowns you can fit into the window, the better the result.  High-priority targets\n\t\t\t\tare <ActionLink action=\"NIGHTBLOOM\" />, and finishing the combo with a <ActionLink action=\"PHANTOM_FLURRY\" />.\n\t\t\t</Trans>,\n\t\t\tsuggestionWindowName,\n\t\t\tseverityTiers: SEVERITIES.MISSING_EXPECTED_USES,\n\t\t\tadjustOutcome: this.adjustExpectedActionOutcome.bind(this),\n\t\t})\n\t\tmfActionEvaluator.setAltAction(this.data.actions.FEATHER_RAIN, this.data.actions.ERUPTION)\n\t\tmfActionEvaluator.setAltAction(this.data.actions.SHOCK_STRIKE, this.data.actions.BLU_MOUNTAIN_BUSTER)\n\t\tmfActionEvaluator.setAltAction(this.data.actions.J_KICK, this.data.actions.QUASAR)\n\t\tthis.addEvaluator(mfActionEvaluator)\n\t}\n\n\tprivate adjustExpectedGcdCount(window: HistoryEntry<EvaluatedAction[]>) {\n\t\tconst finalStingUsed = window.data.filter(event => (event.action.id === this.data.actions.FINAL_STING.id || event.action.id === this.data.actions.SELF_DESTRUCT.id)).length\n\t\treturn finalStingUsed >= 1 ? (-window.data.length+1) : 0\n\t}\n\n\tprivate adjustExpectedActionOutcome(window: HistoryEntry<EvaluatedAction[]>, _action: TrackedAction) {\n\t\tconst finalStingUsed = window.data.filter(event => (event.action.id === this.data.actions.FINAL_STING.id || event.action.id === this.data.actions.SELF_DESTRUCT.id)).length\n\t\tif (finalStingUsed === 0) {\n\t\t\treturn\n\t\t}\n\n\t\treturn (actual: number, expected?: number) => {\n\t\t\tif (expected !== undefined && actual === expected) {\n\t\t\t\treturn RotationTargetOutcome.POSITIVE\n\t\t\t}\n\t\t\treturn RotationTargetOutcome.NEUTRAL\n\t\t}\n\t}\n}\n\nclass MoonFluteExpectedActionsEvaluator extends ExpectedActionsEvaluator {\n\tprivate altActions = new Map<Action['id'], Action>()\n\tprivate foundAltActions = new Map<Action['id'], Action>()\n\n\tpublic setAltAction(action: Action, altAction: Action) {\n\t\tthis.altActions.set(action.id, altAction)\n\t}\n\n\t// Just a small subclass that handles our alternative actions.\n\toverride countUsed(window: HistoryEntry<EvaluatedAction[]>, action: TrackedAction) {\n\t\tconst altAction = this.altActions.get(action.action.id)\n\t\tif (altAction !== undefined) {\n\t\t\tconst altActionID = altAction.id\n\t\t\tconst foundAlt = window.data.filter(cast => cast.action.id === altActionID).length\n\t\t\tif (foundAlt > 0) {\n\t\t\t\tthis.foundAltActions.set(action.action.id, altAction)\n\t\t\t\treturn foundAlt\n\t\t\t}\n\t\t}\n\n\t\treturn super.countUsed(window, action)\n\t}\n\n\toverride actionHeader(action: TrackedAction) {\n\t\tconst foundAlt = this.foundAltActions.get(action.action.id)\n\t\tif (foundAlt === undefined) {\n\t\t\treturn super.actionHeader(action)\n\t\t}\n\n\t\t// We have alternative actions used\n\t\treturn <ActionLink showName={false} {...foundAlt}/>\n\t}\n}\n\n","import {Trans} from '@lingui/react'\nimport ACTIONS from 'data/ACTIONS'\nimport {Event, Events} from 'event'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport {Overheal, SuggestedColors} from 'parser/core/modules/Overheal'\nimport React from 'react'\n\nexport class BLUOverheal extends Overheal {\n\n\t@dependency private actors!: Actors\n\n\toverride checklistRuleBreakout = true\n\toverride displayPieChart = true\n\toverride displaySuggestion = true\n\toverride suggestionIcon = ACTIONS.POM_CURE.icon\n\n\toverride trackedHealCategories = [\n\t\t{\n\t\t\tname: <Trans id=\"blu.overheal.hot.name\">Healing Over Time</Trans>,\n\t\t\tcolor: SuggestedColors[1], // 0 is used for \"Direct\"\n\t\t\ttrackedHealIds: [\n\t\t\t\tthis.data.statuses.ANGELS_SNACK.id,\n\t\t\t\tthis.data.actions.ANGELS_SNACK.id,\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tname: <Trans id=\"blu.overheal.aoe.name\">AoE</Trans>,\n\t\t\tcolor: SuggestedColors[2],\n\t\t\ttrackedHealIds: [\n\t\t\t\tthis.data.actions.STOTRAM.id,\n\t\t\t\tthis.data.actions.EXUVIATION.id,\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tname: <Trans id=\"blu.overheal.white_wind.name\">White Wind</Trans>,\n\t\t\tcolor: SuggestedColors[3],\n\t\t\ttrackedHealIds: [\n\t\t\t\tthis.data.actions.WHITE_WIND.id,\n\t\t\t],\n\t\t},\n\t]\n\n\toverride initialise() {\n\t\t// the eventhooks look like a FIFO but might as well just add\n\t\t// this hook twice in case it also behaves like a LIFO in some\n\t\t// scenario.\n\t\tthis.addEventHook(filter<Event>().type('complete'), this.onCompleteExtra)\n\t\tsuper.initialise()\n\t\tthis.addEventHook(filter<Event>().type('complete'), this.onCompleteExtra)\n\t}\n\n\toverride considerHeal(event: Events['heal'], _pet: boolean = false): boolean {\n\t\t// Filter out Devour; it's going to be used on cooldown by tanks, and either\n\t\t// as a DPS button or occasionally as a mechanic button (e.g. A8S Gavel)\n\t\tif (event.cause.type === 'action') {\n\t\t\treturn event.cause.action !== this.data.actions.DEVOUR.id\n\t\t}\n\t\treturn true\n\t}\n\n\tprivate onCompleteExtra() {\n\t\t// Ideally we only run the Overheal report if the person has Healer mimickry,\n\t\t// but detection of the status is finicky since it's a stance that people\n\t\t// normally get before even going into the instance.\n\n\t\t// So let's instead just check if they did any sort of non-White Wind healing\n\t\tconst nonWWhealing = this.direct.heal + this.trackedOverheals.reduce((acc, entry) => {\n\t\t\tif (entry.idIsTracked(this.data.actions.WHITE_WIND.id)) {\n\t\t\t\treturn acc\n\t\t\t}\n\t\t\treturn acc + entry.heal\n\t\t}, 0)\n\n\t\tif (nonWWhealing !== 0) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.checklistRuleBreakout = false\n\t\tthis.displayPieChart = false\n\t\tthis.displaySuggestion = false\n\t\tthis.displayChecklist = false\n\t\tthis.checklistRuleBreakout = false\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Plural, Trans} from '@lingui/react'\nimport {ActionLink, DataLink} from 'components/ui/DbLink'\nimport {RotationTable, RotationTableEntry} from 'components/ui/RotationTable'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {EventHook} from 'parser/core/Dispatcher'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {History} from 'parser/core/modules/ActionWindow/History'\nimport {Actors} from 'parser/core/modules/Actors'\nimport {Data} from 'parser/core/modules/Data'\nimport Downtime from 'parser/core/modules/Downtime'\nimport {GlobalCooldown} from 'parser/core/modules/GlobalCooldown'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport {Timeline} from 'parser/core/modules/Timeline'\nimport React, {Fragment} from 'react'\nimport {Message} from 'semantic-ui-react'\nimport {DISPLAY_ORDER} from './DISPLAY_ORDER'\n\n// Teechnicaly it's 20% but at 18% HP the HP next regen tick will move you past\n// the window, so give it a bit of a fuzz\nconst REVENGE_BLAST_PERCENT = 0.20\nconst REVENGE_BLAST_WINDOW_PERCENT = 0.18\nconst REVENGE_BLAST_MINIMUM_WINDOW_MS = 5000\n\nconst REVENGE_BLAST_CAST_TIME = 2000\nconst SLIDECAST_OFFSET = 500\n\n// Tiered suggestion severities\nconst REVENGE_SEVERITY = {\n\tWINDOW_MISSED: {\n\t\t1: SEVERITY.MINOR,\n\t\t2: SEVERITY.MINOR,\n\t\t3: SEVERITY.MAJOR,\n\t},\n\tCAST_OUT_OF_WINDOW: {\n\t\t1: SEVERITY.MAJOR,\n\t},\n\tUNWHISTLED_OPENING_REVENGE_BLAST: {\n\t\t1: SEVERITY.MINOR,\n\t},\n}\n\ninterface RevengeBlastWindow {\n\tevents: Array<Events['action']>,\n\thadWhistle: boolean,\n\thadRevengeBlast: boolean,\n}\n\nexport class RevengeBlast extends Analyser {\n\tstatic override handle = 'revengeblast'\n\tstatic override title = t('blu.revenge_blast.title')`Revenge Blast Windows`\n\tstatic override displayOrder = DISPLAY_ORDER.REVENGE_BLAST\n\n\t@dependency private actors!: Actors\n\t@dependency private data!: Data\n\t@dependency private suggestions!: Suggestions\n\t@dependency private timeline!: Timeline\n\t@dependency private downtime!: Downtime\n\t@dependency private gcd!: GlobalCooldown\n\n\tprivate badRevengeBlasts = 0\n\tprivate inRevengeBlastWindow = false\n\tprivate revengeBlastWindows = new History<RevengeBlastWindow>(\n\t\t() => ({\n\t\t\tevents: [],\n\t\t\thadWhistle: false,\n\t\t\thadRevengeBlast: false,\n\t\t})\n\t)\n\tprivate actionHook?: EventHook<Events['action']>\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\t\tthis.addEventHook(playerFilter.type('action').action(this.data.actions.REVENGE_BLAST.id), this.onRevengeBlast)\n\t\tthis.addEventHook(playerFilter.type(oneOf(['heal', 'damage'])), this.onActorUpdate)\n\t\tthis.addEventHook(filter<Event>().type('actorUpdate').actor(this.parser.actor.id), this.onActorUpdate)\n\t\tthis.addEventHook({\n\t\t\ttype: 'death',\n\t\t\tactor: this.parser.actor.id,\n\t\t}, this.onActorUpdate)\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onActorUpdate(event: Event) {\n\t\tconst revengeBlastThreshold = this.actors.current.hp.maximum * REVENGE_BLAST_WINDOW_PERCENT\n\n\t\t// TODO: check if we are in a downtime window\n\n\t\tif ((this.actors.current.hp.current > 0) && (this.actors.current.hp.current < revengeBlastThreshold)) {\n\t\t\tif (this.inRevengeBlastWindow) { return }\n\t\t\tthis.inRevengeBlastWindow = true\n\t\t\tthis.revengeBlastWindows.openNew(event.timestamp)\n\t\t\tif (this.actionHook == null) {\n\t\t\t\tthis.actionHook = this.addEventHook(filter<Event>().source(this.parser.actor.id).type('action'), this.onRevengeBlastWindow)\n\t\t\t}\n\t\t} else {\n\t\t\tif (!this.inRevengeBlastWindow) { return }\n\t\t\tthis.inRevengeBlastWindow = false\n\t\t\tthis.revengeBlastWindows.closeCurrent(event.timestamp)\n\t\t\tif (this.actionHook != null) {\n\t\t\t\tthis.removeEventHook(this.actionHook)\n\t\t\t\tthis.actionHook = undefined\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onRevengeBlastWindow(event: Events['action']) {\n\t\tthis.revengeBlastWindows.doIfOpen(current => {\n\t\t\tif (!current.hadRevengeBlast && event.action === this.data.actions.REVENGE_BLAST.id) {\n\t\t\t\tif (this.actors.current.hasStatus(this.data.statuses.WHISTLE.id)) {\n\t\t\t\t\tcurrent.hadWhistle = true\n\t\t\t\t}\n\t\t\t\tcurrent.hadRevengeBlast = true\n\t\t\t}\n\t\t\tcurrent.events.push(event)\n\t\t})\n\t}\n\n\tprivate onRevengeBlast() {\n\t\tconst revengeBlastThreshold = this.actors.current.hp.maximum * REVENGE_BLAST_PERCENT\n\t\tif (this.actors.current.hp.current > revengeBlastThreshold) {\n\t\t\tthis.badRevengeBlasts++\n\t\t}\n\t}\n\n\tprivate onComplete() {\n\t\tthis.revengeBlastWindows.closeCurrent(this.parser.pull.timestamp + this.parser.pull.duration)\n\n\t\t// Revenge Blasts that happened above the HP threshold.\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.REVENGE_BLAST.icon,\n\t\t\tcontent: <Trans id=\"blu.revenge_blast.bad.content\">\n\t\t\t\tOnly use <DataLink action=\"REVENGE_BLAST\" /> if your HP will be below 20% by the time the slidecast window starts.\n\t\t\t</Trans>,\n\t\t\ttiers: REVENGE_SEVERITY.CAST_OUT_OF_WINDOW,\n\t\t\tvalue: this.badRevengeBlasts,\n\t\t\twhy: <Trans id=\"blu.revenge_blast.bad.why\">\n\t\t\t\t<Plural value={this.badRevengeBlasts ?? 0} one=\"# Revenge Blast cast\" other=\"# Revenge Blast casts\" /> happened when above 20% HP\n\t\t\t</Trans>,\n\t\t}))\n\n\t\t// If you know a Revenge Blast window is coming, using Whistle first is a DPS gain.\n\t\tconst unwhistledWindows: number = this.revengeBlastWindows.entries\n\t\t\t.filter(revengeWindow => revengeWindow.data.hadRevengeBlast && !revengeWindow.data.hadWhistle)\n\t\t\t.length\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.REVENGE_BLAST.icon,\n\t\t\tcontent: <Trans id=\"blu.revenge_blast.unwhistled.content\">\n\t\t\t\tIf it won't drop a <DataLink action=\"REVENGE_BLAST\" /> cast, you should cast <DataLink action=\"WHISTLE\" /> before entering a <DataLink action=\"REVENGE_BLAST\" showIcon={false} /> window for a DPS gain over using your filler.\n\t\t\t</Trans>,\n\t\t\ttiers: REVENGE_SEVERITY.UNWHISTLED_OPENING_REVENGE_BLAST,\n\t\t\tvalue: unwhistledWindows,\n\t\t\twhy: <Trans id=\"blu.revenge_blast.unwhistled.why\">\n\t\t\t\t<Plural value={unwhistledWindows ?? 0} one=\"# Revenge Blast window\" other=\"# Revenge Blast windows\" /> did not have the <DataLink action=\"WHISTLE\" /> buff.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n\n\toverride output() {\n\t\tif (this.revengeBlastWindows.entries.length === 0) { return undefined }\n\n\t\tconst gcdHeader = {\n\t\t\theader: <Trans id=\"blu.revenge_blast.rotation-table.header.blast-count\">Revenge Blasts</Trans>,\n\t\t\taccessor: 'gcds',\n\t\t}\n\n\t\tconst gcd = this.gcd.getDuration() / 1000\n\t\tconst revengeBlastID = this.data.actions.REVENGE_BLAST.id\n\t\tconst dat = this.data\n\t\tconst downtime = this.downtime\n\t\tconst rotationData: RotationTableEntry[] = []\n\t\tthis.revengeBlastWindows.entries\n\t\t\t.filter(revengeWindow => ((revengeWindow.end ?? revengeWindow.start) - revengeWindow.start) > REVENGE_BLAST_MINIMUM_WINDOW_MS)\n\t\t\t.forEach(revengeWindow => {\n\t\t\t\tconst revengeStart = revengeWindow.start - this.parser.pull.timestamp - REVENGE_BLAST_CAST_TIME + SLIDECAST_OFFSET\n\t\t\t\tconst revengeEnd   = (revengeWindow.end ?? revengeWindow.start) - this.parser.pull.timestamp - REVENGE_BLAST_CAST_TIME + SLIDECAST_OFFSET\n\t\t\t\tconst forcedDowntime = downtime.getDowntime(\n\t\t\t\t\trevengeWindow.start,\n\t\t\t\t\trevengeWindow.end ?? revengeWindow.start,\n\t\t\t\t)\n\t\t\t\t// TODO: this is a cop-out.  Dealing with downtime is hard.\n\t\t\t\tif (forcedDowntime > REVENGE_BLAST_MINIMUM_WINDOW_MS) { return }\n\n\t\t\t\tconst deltaMs      = revengeEnd - revengeStart - forcedDowntime\n\t\t\t\tif (deltaMs < REVENGE_BLAST_MINIMUM_WINDOW_MS) { return }\n\n\t\t\t\tconst expectedGCDs = Math.floor(deltaMs / 1000 / gcd)\n\t\t\t\tconst tableEntry: RotationTableEntry = {\n\t\t\t\t\tstart: revengeStart,\n\t\t\t\t\tend: revengeEnd,\n\t\t\t\t\ttargetsData: {\n\t\t\t\t\t\tgcds: {\n\t\t\t\t\t\t\tactual: revengeWindow.data.events.filter(e => dat.getAction(e.action)?.id === revengeBlastID).length,\n\t\t\t\t\t\t\texpected: expectedGCDs,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\trotation: revengeWindow.data.events.map(event => ({action: event.action})),\n\t\t\t\t}\n\t\t\t\trotationData.push(tableEntry)\n\t\t\t})\n\n\t\tif (rotationData.length === 0) { return }\n\n\t\treturn <Fragment>\n\t\t\t<Message>\n\t\t\t\t<Trans id=\"blu.revenge_blast.table.message\">Finding windows to safely use <ActionLink action=\"REVENGE_BLAST\"/> is always a good idea.  Even small windows of two GCDs can be attractive -- If you fumble the timing and the second cast only does 50 potency, it is still a DPS gain over casting a filler GCD twice.</Trans>\n\t\t\t</Message>\n\t\t\t<RotationTable\n\t\t\t\ttargets={[gcdHeader]}\n\t\t\t\tdata={rotationData}\n\t\t\t\tonGoto={this.timeline.show}\n\t\t\t/>\n\t\t</Fragment>\n\t}\n}\n\n","import {Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Swiftcast as CoreSwiftcast} from 'parser/core/modules/Swiftcast'\nimport React from 'react'\n\nexport class Swiftcast extends CoreSwiftcast {\n\toverride suggestionContent = <Trans id=\"blu.swiftcast.suggestion.content\">Cast a spell with <DataLink action=\"SWIFTCAST\" /> before it expires.</Trans>\n}\n","import {Plural, Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Event} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport {Data} from 'parser/core/modules/Data'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\n// Triple Trident can be loosely considered as the last step in a combo;\n// you always want to pop\n//\n//  Whistle => Tingle => Triple Trident\n//\n// Although in standard BLU fashion, the first two buttons can be\n// in any order, and you can use any amount of non-Physical attacks\n// after the first two and still get the combo.\n\nexport class TripleTrident extends Analyser {\n\tstatic override handle = 'tripletrident'\n\n\t@dependency private actors!: Actors\n\t@dependency private data!: Data\n\t@dependency private suggestions!: Suggestions\n\n\tprivate unbuffedTT = 0\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\t\tthis.addEventHook(playerFilter.type('action').action(this.data.actions.TRIPLE_TRIDENT.id), this.onTripleTrident)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onTripleTrident() {\n\t\tconst hasWhistle = this.actors.current.hasStatus(this.data.statuses.WHISTLE.id)\n\t\tconst hasTingle  = this.actors.current.hasStatus(this.data.statuses.TINGLING.id)\n\t\tif (hasWhistle && hasTingle) {\n\t\t\treturn\n\t\t}\n\t\tthis.unbuffedTT++\n\t}\n\n\tprivate onComplete() {\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.TRIPLE_TRIDENT.icon,\n\t\t\tcontent: <Trans id=\"blu.triple_trident.unbuffed.content\">\n\t\t\t\t<DataLink action=\"TRIPLE_TRIDENT\" /> should always be buffed with <DataLink action=\"WHISTLE\" /> and <DataLink action=\"TINGLE\" />.  For <DataLink action=\"MOON_FLUTE\" /> windows, you want to cast <DataLink action=\"WHISTLE\" showIcon={false} /> and <DataLink action=\"TINGLE\" showIcon={false} /> before casting <DataLink action=\"MOON_FLUTE\" showIcon={false} />.\n\t\t\t</Trans>,\n\t\t\ttiers: {1: SEVERITY.MEDIUM},\n\t\t\tvalue: this.unbuffedTT,\n\t\t\twhy: <Trans id=\"blu.triple_trident.unbuffed.why\">\n\t\t\t\t<Plural value={this.unbuffedTT ?? 0} one=\"# Triple Trident use\" other=\"# Triple Trident uses\" /> were not buffed\n\t\t\t</Trans>,\n\t\t}))\n\t}\n}\n\n","import {Trans, Plural} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Event, Events} from 'event'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport {TieredSuggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport {Weaving, Weave} from 'parser/core/modules/Weaving'\nimport React from 'react'\n\nconst TO_MILLISECONDS = 1000\nconst MAX_SURPANAKHA_CHARGES = 4\n\nconst MAX_ALLOWED_MULTIWEAVE_DURING_MOON_FLUTE = 6\n\n// Surpanakha has four charges, and each it is pressed, it gives\n// a buff that increases the damage of the next Surpanakha, but\n// ONLY if no other action is used.\n// That \"no other action\" is EXTREMELY strict.  No GCD, no oGCDs,\n// no items, no sprint.\n//\n// Each Surpanakha cast is *roughly* ~850ms, assuming little latency;\n// this module uses a flat 1000ms to accommodate for typical latency.\n//\n// Additionally, the standard opener has us doing a very\n// funny HEXAWEAVE (Swift, Glass Dance, Surpanakha x4) so\n// we need to except that specific situation too.\n//\n\nexport class BLUWeaving extends Weaving {\n\tprivate badSurpanakhaSequence = 0\n\n\t@dependency private actors!: Actors\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\t\tthis.addEventHook(filter<Event>().type('complete'), this.onCompleteExtra)\n\t}\n\n\toverride getMaxWeaves(weave: Weave) {\n\t\tlet surpanakhas = 0\n\t\tlet foundBadSurpanakhaSequence = false\n\t\tconst weaves: Array<Events['action']> = weave.weaves\n\t\tweaves.forEach(weave => {\n\t\t\tif (weave.action === this.data.actions.SURPANAKHA.id) {\n\t\t\t\tsurpanakhas++\n\t\t\t} else if (surpanakhas >=1 && surpanakhas < MAX_SURPANAKHA_CHARGES) {\n\t\t\t\tfoundBadSurpanakhaSequence = true\n\t\t\t}\n\t\t})\n\n\t\tif (foundBadSurpanakhaSequence || (surpanakhas && surpanakhas !== MAX_SURPANAKHA_CHARGES)) {\n\t\t\tthis.badSurpanakhaSequence++\n\t\t}\n\n\t\tif (surpanakhas && !foundBadSurpanakhaSequence && weaves.length > surpanakhas && weaves.length <= MAX_ALLOWED_MULTIWEAVE_DURING_MOON_FLUTE) {\n\t\t\t// We got four Surpanakhas, they were correctly used in sequence, but there's\n\t\t\t// more to this weave window.\n\t\t\t// If the weave happened after the final Surpanakha then they're unnecessarily\n\t\t\t// clipping their next GCD, so we'll fall through and give them a suggestion\n\t\t\t// based on that\n\t\t\tif (weaves[weaves.length - 1].action === this.data.actions.SURPANAKHA.id) {\n\t\t\t\t// ...but here's the other alternative.  They did the four Surpanakhas at\n\t\t\t\t// the end of the weave slot.  IF they are following the standard opener,\n\t\t\t\t// then they did something like this:\n\t\t\t\t//      Bristle (Swiftcast, Glass Dance, Surpanakha x4)\n\t\t\t\t// So let's be understanding.  During a Moon Flute window, single or\n\t\t\t\t// double weaving *before* the Surpanakhas is potentially fine.\n\t\t\t\tif (this.actors.current.hasStatus(this.data.statuses.WAXING_NOCTURNE.id)) {\n\t\t\t\t\t// Continue the handwavey assumption that any weave takes 1000ms\n\t\t\t\t\tconst extraWeaveTimeMs = TO_MILLISECONDS * (weaves.length + 1)\n\t\t\t\t\tif (weave.gcdTimeDiff < extraWeaveTimeMs) {\n\t\t\t\t\t\treturn weaves.length\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Otherwise, we only accept Surpanakha when it is not weaved with anything else.\n\t\tif (surpanakhas &&\n\t\t\tweaves.length === surpanakhas &&\n\t\t\tweave.gcdTimeDiff < (surpanakhas + 1) * TO_MILLISECONDS) {\n\t\t\treturn surpanakhas\n\t\t}\n\n\t\treturn super.getMaxWeaves(weave)\n\t}\n\n\tprivate onCompleteExtra() {\n\t\t// Give a suggestion for people who didn't use Surpanakha x4, losing the buff and\n\t\t// a bunch of damage.\n\t\t//\n\t\t// There's an edge case here -- Some fights you may want to delay your Moon Flute window by\n\t\t// 30 seconds, at which point you might as well use a single charge of Surpanakha rather than\n\t\t// having it go to waste.\n\t\t//\n\t\t// But if people are clever & skilled enough to do that kind of optimization, then they're\n\t\t// clever enough to understand that they can disregarding the misfiring message.\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.SURPANAKHA.icon,\n\t\t\tcontent: <Trans id=\"blu.weaving.bad_surpanakha.content\">\n\t\t\t\tUse all four <DataLink action=\"SURPANAKHA\" /> charges at the same time, with no other actions in-between.  Even <DataLink action=\"SPRINT\" showIcon={false} /> or using an item will cancel the buff.\n\t\t\t</Trans>,\n\t\t\twhy: <Trans id=\"blu.weaving.bad_surpanakha.why\">\n\t\t\t\t<Plural value={this.badSurpanakhaSequence ?? 0} one=\"# Surpanakha chain\" other=\"# Surpanakha chains\" /> dropped the buff early.\n\t\t\t</Trans>,\n\t\t\ttiers: {1: SEVERITY.MAJOR},\n\t\t\tvalue: this.badSurpanakhaSequence,\n\t\t}))\n\t}\n}\n\n","import STATUSES from 'data/STATUSES'\nimport {StatusTimeline as CoreStatusTimeline} from 'parser/core/modules/StatusTimeline'\n\nexport class StatusTimeline extends CoreStatusTimeline {\n\tstatic override statusesStackMapping = {\n\t\t[STATUSES.BAD_BREATH_POISON.id]: STATUSES.MALODOROUS.id,\n\t\t[STATUSES.WANING_NOCTURNE.id]: STATUSES.WAXING_NOCTURNE.id,\n\t}\n}\n","import {LucidDreaming} from 'parser/core/modules/LucidDreaming'\nimport {Tincture} from 'parser/core/modules/Tincture'\nimport {ActionTimeline} from './ActionTimeline'\nimport {AlwaysBeCasting} from './AlwaysBeCasting'\nimport {BLURaidBuffs} from './BLURaidBuffs'\nimport {ColdFog} from './ColdFog'\nimport {BLUDeath} from './Death'\nimport {Defensives} from './Defensives'\nimport {DoTs} from './DoTs'\nimport {DroppedBuffs} from './DroppedBuffs'\nimport {GeneralCDDowntime} from './GeneralCDDowntime'\nimport {Interrupts} from './Interrupts'\nimport {MoonFlute} from './MoonFlute'\nimport {BLUOverheal} from './Overheal'\nimport {RevengeBlast} from './RevengeBlast'\nimport {Swiftcast} from './Swiftcast'\nimport {TripleTrident} from './TripleTrident'\nimport {BLUWeaving} from './Weaving'\nimport {StatusTimeline} from './StatusTimeline'\n\nexport default [\n\tDefensives,\n\tActionTimeline,\n\tBLUDeath,\n\tBLUWeaving,\n\tAlwaysBeCasting,\n\tDoTs,\n\tTincture,\n\tInterrupts,\n\tLucidDreaming,\n\tSwiftcast,\n\tGeneralCDDowntime,\n\tMoonFlute,\n\tColdFog,\n\tRevengeBlast,\n\tBLURaidBuffs,\n\tBLUOverheal,\n\tStatusTimeline,\n\tTripleTrident,\n\tDroppedBuffs,\n]\n","require('../../../modules/es.array.flat');\nrequire('../../../modules/es.array.unscopables.flat');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').flat;\n","var flat = require('../array/virtual/flat');\n\nvar ArrayPrototype = Array.prototype;\n\nmodule.exports = function (it) {\n  var own = it.flat;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.flat) ? flat : own;\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar flattenIntoArray = require('../internals/flatten-into-array');\nvar toObject = require('../internals/to-object');\nvar toLength = require('../internals/to-length');\nvar toInteger = require('../internals/to-integer');\nvar arraySpeciesCreate = require('../internals/array-species-create');\n\n// `Array.prototype.flat` method\n// https://tc39.es/ecma262/#sec-array.prototype.flat\n$({ target: 'Array', proto: true }, {\n  flat: function flat(/* depthArg = 1 */) {\n    var depthArg = arguments.length ? arguments[0] : undefined;\n    var O = toObject(this);\n    var sourceLen = toLength(O.length);\n    var A = arraySpeciesCreate(O, 0);\n    A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));\n    return A;\n  }\n});\n","// this method was added to unscopables after implementation\n// in popular engines, so it's moved to a separate module\nvar addToUnscopables = require('../internals/add-to-unscopables');\n\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('flat');\n","var parent = require('../../es/instance/flat');\n\nmodule.exports = parent;\n"],"names":["module","exports","AlwaysBeCasting","CastTime","Checklist","Data","Downtime","GlobalCooldown","SpeedAdjustments","gcdUptime","gcdsCounted","lastBeginCast","this","addEventHook","filter","source","parser","actor","id","type","onBeginCast","onCast","onComplete","event","action","data","getAction","onGcd","castTime","forEvent","globalCooldown","getDuration","ANIMATION_LOCK","recastTime","recastForEvent","castStart","timestamp","considerCast","relativeTimestamp","pull","debug","name","formatEpochTimestamp","Math","max","undefined","_action","downtime","isDowntime","fightDuration","currentDuration","getDowntime","uptime","checklist","add","Rule","Trans","description","displayOrder","requirements","Requirement","percent","getUptimePercent","target","Analyser","handle","dependency","speedAdjustments","Death","Suggestions","Timeline","info","actorId","getActorInfo","count","actorInfo","currentEpochTimestamp","currentDeadTime","timestampDeath","duration","hp","current","onDeath","status","statuses","TRANSCENDENT","onTranscendentApply","onTranscendentRemove","get","set","timestampTranscendent","counted","shouldCountDeath","queueEvent","raiseHook","value","onRaise","_event","addDeathToTimeline","removeEventHook","progress","playerInfo","suggestions","Suggestion","icon","actions","RAISE","content","severity","SEVERITY","why","start","end","timeline","addItem","SimpleItem","style","width","height","backgroundColor","SEVERITIES","USE_PERCENT_THRESHOLD","LucidDreaming","lastUse","uses","totalHeld","suggestionContent","Fragment","LUCID_DREAMING","onCastLucid","_held","cooldown","usesMissed","holdDuration","formatDuration","floor","notUsesPercent","TieredSuggestion","tiers","suggestionWhy","dependencies","StatusTimeline","ActionTimeline","Actors","statusActionMap","usages","rows","getRowKey","statusId","targetId","playerPetIds","actors","owner","pet","allPetIds","playerControlled","actorFilter","oneOf","noneOf","onApply","onRemove","statusesApplied","statusUsages","statusTarget","row","createStatusTargetRow","lastUsage","push","getStatus","usage","StatusItem","remappedStatusId","constructor","statusesStackMapping","rowKey","cachedRow","statusRow","createStatusRow","addRow","SimpleRow","label","actionTimeline","getRow","hideCollapsed","collapse","CAST_TIME_MAX_WEAVES","WEAVING_SEVERITY","Weaving","Invulnerability","suggestionIcon","moduleLink","cursor","onClick","scrollTo","message","title","weaves","ongoingCastEvent","leadingGcdEvent","trailingGcdEvent","badWeaves","playerFilter","clearWeave","autoAttack","isOgcd","saveIfBad","length","leadingTimestamp","gcdTimeDiff","invulnerability","weave","isBadWeave","weaveCount","isActive","types","recast","BASE_GCD","getMaxWeaves","matchClosestLower","panels","item","key","events","exclusive","styled","fluid","CoreActionTimeline","phantomFlurryHistory","currentPhantomFlurry","phantomFlurryInterruptingActionHook","surpanakhas","phantomFlurryCastFilter","PHANTOM_FLURRY","phantomFlurryStatusFilter","phantomFlurryKick","PHANTOM_FLURRY_KICK","surpanakhaCastFilter","SURPANAKHA","onApplyPhantomFlurry","onRemovePhantomFlurry","onPhantomFlurryFinalKick","onCastSurpanakha","currentFlurry","manualKick","inMoonFlute","hasStatus","WAXING_NOCTURNE","anyActionFilter","flurryDuration","acc","flurry","surpanakhaDuration","missingFlurryTicks","flurryChannelMs","missingFlurryChannelMs","ceil","missingFlurryKicks","showIcon","CoreAlwaysBeCasting","BLURaidBuffs","inOffGuard","inPeculiarLight","inLibra","buffHistory","buffActionHook","PECULIAR_LIGHT_ID","PECULIAR_LIGHT","OFF_GUARD_ID","OFF_GUARD","CONDENSED_LIBRA_ASTRAL_ID","CONDENSED_LIBRA_ASTRAL","CONDENSED_LIBRA_UMBRAL_ID","CONDENSED_LIBRA_UMBRAL","CONDENSED_LIBRA_PHYSICAL_ID","CONDENSED_LIBRA_PHYSICAL","previousApply","previousRemove","st","fn","History","buffAction","isBuffedAction","buffId","overwritten","ours","newBuffHistory","damageType","DamageType","libraIsBuffed","attackElement","elementType","libraAction","CONDENSED_LIBRA","statusFilter","Number","team","Team","onApplyRaidBuff","onRemoveRaidBuff","cur","prev","timestampDelta","isDupedEvent","appliedBuffHistory","currentBuff","getCurrent","closeCurrent","newBuff","openNew","playerTargets","playerActionFilter","onActionDuringBuff","removedBuff","removedBuffHistory","canRemoveHook","forEach","history","buffCurrent","underPL","underOG","underLibra","buff","ourOverwritten","b","allBuffs","e","a","ourBuffs","pl","rotationData","buffWindow","buffStart","buffEnd","relevantActionsBuffed","ogBuffed","plBuffed","libraBuffed","buffStatus","Message","Table","compact","unstackable","celled","collapsing","textAlign","marginRight","Button","circular","size","show","COLD_SEVERITY","DROPPED_COLD_FOG","DROPPED_WHITE_DEATH_CASTS","INEFFECTIVE_COLD_FOG","ColdFog","touchOfFrostProcs","coldFogCasts","currentHook","touchOfFrostHistory","whiteDeathCasts","TOUCH_OF_FROST","onApplyTouchOfFrost","onRemoveTouchOfFrost","COLD_FOG","onApplyColdFog","WHITE_DEATH","onWhiteDeath","droppedColdFogs","showTooltip","ineffectiveColdFog","entry","droppedWhiteDeathCasts","BLUDeath","isFinalSting","mydata","FINAL_STING","SELF_DESTRUCT","onFinalSting","Defensives","trackedDefensives","ADDLE","MAGIC_HAMMER","CoreDefensives","UNBUFFED_SOT","CLIPPING","UPTIME","TARGET","DoTs","bristleId","unbuffedSongsOfTorment","trackedStatuses","BLEEDING","BRISTLE","SONG_OF_TORMENT","onApplyingSoT","onCompleteExtra","myactors","uptimePercent","TieredRule","clippingPerMinute","getClippingAmount","CoreDoTs","DroppedBuffs","currentBuffs","misusedBuffs","STATUSES","dropped","overwrote","buffFilter","onGainBuff","onRemoveBuff","has","delete","clear","statusID","droppedStatusCount","droppedStatus","overwrittenStatusCount","overwrittenStatus","suggestOnDroppedStatus","suggestOnOverwrittenStatus","GeneralCDDowntime","defaultAllowedAverageDowntime","trackedCds","cooldowns","NIGHTBLOOM","firstUseOffset","FEATHER_RAIN","ERUPTION","SHOCK_STRIKE","GLASS_DANCE","allowedAverageDowntime","J_KICK","QUASAR","TRIPLE_TRIDENT","THE_ROSE_OF_DESTRUCTION","suggestionOnlyCooldowns","MATRA_MAGIC","DRAGON_FORCE","ANGELS_SNACK","CooldownDowntime","Interrupts","CoreInterrupts","MISSING_EXPECTED_USES","TOO_FEW_GCDS","MoonFlute","MOON_FLUTE","suggestionWindowName","addEvaluator","ExpectedGcdCountEvaluator","expectedGcds","severityTiers","hasStacks","adjustCount","adjustExpectedGcdCount","bind","mfActionEvaluator","MoonFluteExpectedActionsEvaluator","expectedActions","expectedPerWindow","adjustOutcome","adjustExpectedActionOutcome","setAltAction","BLU_MOUNTAIN_BUSTER","window","actual","expected","RotationTargetOutcome","BuffWindow","altActions","foundAltActions","altAction","altActionID","foundAlt","cast","showName","ExpectedActionsEvaluator","BLUOverheal","checklistRuleBreakout","displayPieChart","displaySuggestion","ACTIONS","trackedHealCategories","color","SuggestedColors","trackedHealIds","STOTRAM","EXUVIATION","WHITE_WIND","cause","DEVOUR","direct","heal","trackedOverheals","idIsTracked","displayChecklist","Overheal","REVENGE_BLAST_MINIMUM_WINDOW_MS","REVENGE_SEVERITY","WINDOW_MISSED","CAST_OUT_OF_WINDOW","UNWHISTLED_OPENING_REVENGE_BLAST","RevengeBlast","badRevengeBlasts","inRevengeBlastWindow","revengeBlastWindows","hadWhistle","hadRevengeBlast","actionHook","REVENGE_BLAST","onRevengeBlast","onActorUpdate","revengeBlastThreshold","maximum","onRevengeBlastWindow","doIfOpen","WHISTLE","unwhistledWindows","revengeWindow","gcdHeader","header","accessor","gcd","revengeBlastID","dat","revengeStart","revengeEnd","forcedDowntime","deltaMs","expectedGCDs","tableEntry","targetsData","gcds","rotation","RotationTable","targets","onGoto","Swiftcast","CoreSwiftcast","TripleTrident","unbuffedTT","onTripleTrident","hasWhistle","hasTingle","TINGLING","BLUWeaving","badSurpanakhaSequence","foundBadSurpanakhaSequence","extraWeaveTimeMs","CoreStatusTimeline","Tincture","entryVirtual","flat","ArrayPrototype","Array","prototype","it","own","$","flattenIntoArray","toObject","toLength","toInteger","arraySpeciesCreate","proto","depthArg","arguments","O","sourceLen","A","addToUnscopables","parent"],"sourceRoot":""}