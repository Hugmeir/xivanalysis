{"version":3,"file":"assets/core.966a3a23.js","mappings":"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","sources":["webpack://@xivanalysis/client/./src/parser/core/modules/ActionTimeline/ActionTimeline.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/ActionTimeline/ActionTimeline.module.css?2f05","webpack://@xivanalysis/client/./src/parser/core/modules/AlwaysBeCasting.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/Defensives.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/GlobalCooldown.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/StatusTimeline.ts","webpack://@xivanalysis/client/./src/parser/core/modules/Statuses.ts","webpack://@xivanalysis/client/./src/parser/core/modules/Weaving.tsx","webpack://@xivanalysis/client/./src/components/ui/ContributorLabel.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/About.js","webpack://@xivanalysis/client/./src/parser/core/modules/About.module.css?e4c9","webpack://@xivanalysis/client/./src/parser/core/modules/ChangeLog/Component.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/ChangeLog/ChangeLog.module.css?3ff9","webpack://@xivanalysis/client/./src/parser/core/modules/ChangeLog/ChangeLog.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/Dummy.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/EventsView/eventFormatter.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/EventsView/EventsView.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/EventsView/EventsView.module.css?b4a7","webpack://@xivanalysis/client/./src/parser/core/modules/Medicated.ts","webpack://@xivanalysis/client/./src/parser/core/modules/RaidBuffs.ts","webpack://@xivanalysis/client/./src/parser/core/modules/index.js"],"sourcesContent":["import {Trans} from '@lingui/react'\nimport {Action, ActionKey} from 'data/ACTIONS'\nimport {Analyser} from 'parser/core/Analyser'\nimport {dependency} from 'parser/core/Injectable'\nimport CastTime from 'parser/core/modules/CastTime'\nimport {ChargeHistoryEntry, CooldownEndReason, CooldownGroup, CooldownHistoryEntry, Cooldowns, SelectionSpecifier} from 'parser/core/modules/Cooldowns'\nimport {Data} from 'parser/core/modules/Data'\nimport {ActionItem, BaseItem, ContainerRow, SimpleItem, Timeline} from 'parser/core/modules/Timeline'\nimport React, {ReactNode} from 'react'\nimport {Icon} from 'semantic-ui-react'\nimport {ensureArray, isDefined} from 'utilities'\nimport styles from './ActionTimeline.module.css'\n\nconst ANIMATION_LOCK = 100\n\n// We're excluding the Action interface as it's unessecary for this config format, and complicates the discrimination later.\ntype RowSpecifierEntry = Exclude<SelectionSpecifier, Action>\n\n/**\n * One or more actions, action keys, or cooldown group IDs. The special-case\n * value \"GCD\" is available for selection of the GCD cooldown group.\n */\nexport type RowSpecifier = RowSpecifierEntry | RowSpecifierEntry[]\n\n/** Advanced configuration options for a row. */\nexport interface ActionRowConfig {\n\t/** Specifier(s) for items that should be displayed in this row. */\n\tcontent: RowSpecifier\n\t/** Label to display for the row. */\n\tlabel?: ReactNode\n\t/** Order of the row within the timeline. */\n\torder?: number\n}\n\n/** Configuration for a single row. */\nexport type ActionRow = RowSpecifier | ActionRowConfig\n\n// Internal row config used within the module\ntype InternalRowConfig =\n\t& Omit<ActionRowConfig, 'content'>\n\t& {content: readonly SelectionSpecifier[]}\n\nenum ItemDepth {\n\tCHARGE_GAIN = 0,\n\tACTION = 1,\n}\n\nexport class ActionTimeline extends Analyser {\n\tstatic override handle = 'actionTimeline'\n\tstatic override debug = false\n\n\t/**\n\t * Configuration for the rows generated by this module. Any cooldown groups\n\t * not represented in this configuration will be added to automatically\n\t * generated rows in order of use.\n\t */\n\tstatic rows: ActionRow[] = [\n\t\t{content: 'GCD', order: -97},\n\t]\n\n\t@dependency private castTime!: CastTime\n\t@dependency private cooldowns!: Cooldowns\n\t@dependency private data!: Data\n\t@dependency private timeline!: Timeline\n\n\tprivate resolvedRows: InternalRowConfig[] = []\n\tprivate groupRows = new Map<CooldownGroup, ContainerRow>()\n\n\t/** Retrieve the timeline row representing the specified action. */\n\tgetRow(action: ActionKey | Action) {\n\t\treturn this.addRow({content: [action]})\n\t}\n\n\toverride initialise() {\n\t\t// Add rows for all the configured entries\n\t\tfor (const config of (this.constructor as typeof ActionTimeline).rows) {\n\t\t\tconst resolvedConfig = this.resolveConfig(config)\n\t\t\tthis.resolvedRows.push(resolvedConfig)\n\t\t\tthis.addRow(resolvedConfig)\n\t\t}\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onComplete() {\n\t\t// Track the groups with configured rows so backfill doesn't duplicate\n\t\tconst populatedGroups = new Set<number>()\n\n\t\t// Add rows for all the configured entries\n\t\tfor (const config of this.resolvedRows) {\n\t\t\tconst row = this.addRow(config)\n\t\t\tthis.populateRow(row, config)\n\t\t\tconfig.content.forEach(specifier =>\n\t\t\t\tthis.cooldowns.groups(specifier).forEach(group => populatedGroups.add(group))\n\t\t\t)\n\t\t}\n\n\t\t// Figure out what groups have not been explicitly configured and build rows for them\n\t\tthis.cooldowns.allGroups()\n\t\t\t.filter(group => !populatedGroups.has(group))\n\t\t\t.forEach(group => {\n\t\t\t\tconst config = {content: [group]}\n\t\t\t\tconst row = this.addRow(config)\n\t\t\t\tthis.populateRow(row, config)\n\t\t\t})\n\t}\n\n\tprivate resolveConfig(config: ActionRow): InternalRowConfig {\n\t\t// Standardise the simple config into the main config shape\n\t\tlet finalConfig = config\n\t\tif (typeof finalConfig !== 'object' || Array.isArray(finalConfig)) {\n\t\t\tfinalConfig = {content: finalConfig}\n\t\t}\n\t\treturn {\n\t\t\t...finalConfig,\n\t\t\tcontent: ensureArray(finalConfig.content),\n\t\t}\n\t}\n\n\tprivate addRow(config: InternalRowConfig) {\n\t\t// If there's already a row for one of the specifiers, use it\n\t\tconst groups = config.content.flatMap(specifier => this.cooldowns.groups(specifier))\n\t\tconst existingRow = groups\n\t\t\t.map(group => this.groupRows.get(group))\n\t\t\t.find(isDefined)\n\t\tif (existingRow != null) {\n\t\t\treturn existingRow\n\t\t}\n\n\t\t// Using an IIFE because pattern matching isn't in the spec yet\n\t\tconst firstContent = config.content[0]\n\t\tconst label = (() => {\n\t\t\tif (config.label != null) { return config.label }\n\t\t\tif (firstContent === 'GCD')  { return <Trans id=\"core.action-timeline.label.gcd\">GCD</Trans> }\n\t\t\tif (typeof firstContent === 'string') { return this.data.actions[firstContent].name }\n\t\t\tif (typeof firstContent === 'number') { return this.cooldowns.cooldownHistory(firstContent)[0]?.action.name }\n\t\t\treturn firstContent.name\n\t\t})()\n\n\t\t// Build the row and save it to the groups for this config\n\t\t// TODO: collision handling?\n\t\tconst row = this.timeline.addRow(new ContainerRow({\n\t\t\tlabel,\n\t\t\torder: config.order,\n\t\t\tcollapse: true,\n\t\t}))\n\t\tgroups.forEach(group => this.groupRows.set(group, row))\n\n\t\treturn row\n\t}\n\n\tprivate populateRow(row: ContainerRow, {content}: InternalRowConfig) {\n\t\t// Add all the items\n\t\tthis.addCooldownItems(row, content.flatMap(specifier => this.cooldowns.cooldownHistory(specifier)))\n\t\tthis.addChargeItems(row, content.flatMap(specifier => this.cooldowns.chargeHistory(specifier)))\n\t}\n\n\tprivate addCooldownItems(row: ContainerRow, history: CooldownHistoryEntry[]) {\n\t\tfor (const entry of history) {\n\t\t\tconst duration = this.getCooldownDuration(entry)\n\n\t\t\t// TODO: with the adjusted cast time we might get some overlaps, should we try to avoid that?]\n\t\t\t// TODO: Add interrupt visuals. CD2 only records interrupts within the bounds of a cooldown, so we'll need to track it in some manner for long-cast actions.\n\t\t\tconst start = entry.start - this.parser.pull.timestamp\n\t\t\tconst end = start + duration\n\t\t\trow.addItem(new SimpleItem({\n\t\t\t\tstart,\n\t\t\t\tend,\n\t\t\t\tcontent: <div className={styles.cooldown}/>,\n\t\t\t}))\n\t\t}\n\t}\n\n\tprivate addChargeItems(row: ContainerRow, history: ChargeHistoryEntry[]) {\n\t\tfor (const entry of history) {\n\t\t\tconst item = entry.delta < 0\n\t\t\t\t? new ActionItem({\n\t\t\t\t\tdepth: ItemDepth.ACTION,\n\t\t\t\t\tstart: entry.timestamp - this.parser.pull.timestamp,\n\t\t\t\t\taction: entry.action,\n\t\t\t\t})\n\t\t\t\t: new ChargeGainItem({\n\t\t\t\t\tdepth: ItemDepth.CHARGE_GAIN,\n\t\t\t\t\tstart: entry.timestamp - this.parser.pull.timestamp,\n\t\t\t\t})\n\t\t\trow.addItem(item)\n\t\t}\n\t}\n\n\tprivate getCooldownDuration(entry: CooldownHistoryEntry) {\n\t\tlet duration = entry.end - entry.start\n\n\t\t// If the cooldown expired naturally, it _may_ have a cast time greater than its cooldown.\n\t\tif (entry.endReason === CooldownEndReason.EXPIRED) {\n\t\t\tconst castTime = this.castTime.forAction(entry.action.id, entry.start) ?? 0\n\n\t\t\t// We add the animation lock constant to the cast time to mimic the game's\n\t\t\t// behaviour - also sometimes known as \"caster tax\".\n\t\t\tduration = Math.max(duration, castTime + ANIMATION_LOCK)\n\t\t}\n\n\t\treturn duration\n\t}\n}\n\nclass ChargeGainItem extends BaseItem {\n\tContent = () => (\n\t\t<div className={styles.chargeGain}>\n\t\t\t<Icon name=\"angle double up\" className={styles.icon}/>\n\t\t</div>\n\t)\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"backgroundColour\":\"rgba(213, 221, 246, .4)\",\"chargeColor\":\"color(rgba(213, 221, 246, .4) a(100%) l(-20%))\",\"cooldown\":\"ActionTimeline-module_cooldown__3u1x3\",\"chargeGain\":\"ActionTimeline-module_chargeGain__3-Of9\",\"icon\":\"ActionTimeline-module_icon__8OvsF\"};","import {Trans} from '@lingui/react'\nimport {Action} from 'data/ACTIONS'\nimport {ANIMATION_LOCK} from 'data/CONSTANTS'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport CastTime from 'parser/core/modules/CastTime'\nimport Checklist, {Requirement, Rule} from 'parser/core/modules/Checklist'\nimport {Data} from 'parser/core/modules/Data'\nimport Downtime from 'parser/core/modules/Downtime'\nimport {GlobalCooldown} from 'parser/core/modules/GlobalCooldown'\nimport {SpeedAdjustments} from 'parser/core/modules/SpeedAdjustments'\nimport React from 'react'\n\nconst UPTIME_TARGET = 98\n\nexport class AlwaysBeCasting extends Analyser {\n\tstatic override handle = 'abc'\n\tstatic override debug = false\n\n\t@dependency protected castTime!: CastTime\n\t@dependency protected checklist!: Checklist\n\t@dependency protected data!: Data\n\t@dependency protected downtime!: Downtime\n\t@dependency protected globalCooldown!: GlobalCooldown\n\t@dependency protected speedAdjustments!: SpeedAdjustments\n\n\tprotected gcdUptime: number = 0\n\tprotected gcdsCounted: number = 0\n\n\tprivate lastBeginCast?: Events['prepare']\n\n\toverride initialise() {\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>().source(this.parser.actor.id).type('prepare'),\n\t\t\tthis.onBeginCast\n\t\t)\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>().source(this.parser.actor.id).type('action'),\n\t\t\tthis.onCast\n\t\t)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onBeginCast(event: Events['prepare']) {\n\t\tthis.lastBeginCast = event\n\t}\n\n\tprivate onCast(event: Events['action']) {\n\t\tconst action = this.data.getAction(event.action)\n\n\t\tif (action == null || action.onGcd == null || !action.onGcd) {\n\t\t\treturn\n\t\t}\n\n\t\tlet castTime = this.castTime.forEvent(event) ?? 0\n\t\tconst adjustedBaseGCD = this.globalCooldown.getDuration()\n\t\tif (castTime >= adjustedBaseGCD) {\n\t\t\t// Account for \"caster tax\" - animation lock on spells with cast time equal to or greater than the GCD that prevents starting the next spell until the animation finishes\n\t\t\tcastTime += ANIMATION_LOCK\n\t\t}\n\t\tconst recastTime = this.castTime.recastForEvent(event) ?? 0\n\n\t\tconst castStart = (this.lastBeginCast != null && this.lastBeginCast.action === event.action) ? this.lastBeginCast.timestamp : event.timestamp\n\t\tif (this.considerCast(action, castStart)) {\n\t\t\tconst relativeTimestamp = event.timestamp - this.parser.pull.timestamp\n\t\t\tif (castTime > relativeTimestamp) {\n\t\t\t\tthis.debug(`GCD Uptime for precast ${action.name} at ${this.parser.formatEpochTimestamp(event.timestamp, 1)} - Cast time: ${castTime} | Recast time: ${recastTime} | Time of completion: ${relativeTimestamp}`)\n\t\t\t\tthis.gcdUptime += Math.max(0, relativeTimestamp)\n\t\t\t} else {\n\t\t\t\tthis.debug(`GCD Uptime for ${action.name} at ${this.parser.formatEpochTimestamp(event.timestamp, 1)} - Cast time: ${castTime} | Recast time: ${recastTime}`)\n\t\t\t\tthis.gcdUptime += Math.max(castTime, recastTime)\n\t\t\t}\n\t\t\tthis.gcdsCounted += 1\n\t\t} else {\n\t\t\tthis.debug(`Excluding cast of ${action.name} at ${this.parser.formatEpochTimestamp(event.timestamp, 1)}`)\n\t\t}\n\t\tthis.lastBeginCast = undefined\n\t}\n\n\t/**\n\t * Implementing modules MAY override this to return false and exclude certain events from GCD uptime calculations.\n\t * By default, returns true if the cast did not start during downtime\n\t * @param action Action being considered for GCD uptime\n\t * @param timestamp Timestamp the action occurred at\n\t * @param castTime Calculated cast time of the action (adjusted by speed modifiers, if any active)\n\t */\n\tprotected considerCast(_action: Action, castStart: number) {\n\t\treturn !this.downtime.isDowntime(castStart)\n\t}\n\n\tprotected getUptimePercent(): number {\n\t\tthis.debug(`Observed ${this.gcdsCounted} GCDs for a total of ${this.gcdUptime} ms of uptime`)\n\t\tconst fightDuration = this.parser.currentDuration - this.downtime.getDowntime()\n\t\tconst uptime = this.gcdUptime / fightDuration * 100\n\t\tthis.debug(`Total fight duration: ${this.parser.currentDuration} - Downtime: ${this.downtime.getDowntime()} - Uptime percentage ${uptime}`)\n\t\treturn uptime\n\t}\n\n\tprotected onComplete() {\n\t\tif (this.gcdUptime === 0) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.checklist.add(new Rule({\n\t\t\tname: <Trans id=\"core.always-cast.title\">Always be casting</Trans>,\n\t\t\tdescription: <Trans id=\"core.always-cast.description\">\n\t\t\t\tMake sure you're always doing something. It's often better to make small\n\t\t\t\tmistakes while keeping the GCD rolling than it is to perform the correct\n\t\t\t\trotation slowly.\n\t\t\t</Trans>,\n\t\t\tdisplayOrder: -1,\n\t\t\trequirements: [\n\t\t\t\tnew Requirement({\n\t\t\t\t\tname: <Trans id=\"core.always-cast.gcd-uptime\">GCD Uptime</Trans>,\n\t\t\t\t\tpercent: this.getUptimePercent(),\n\t\t\t\t}),\n\t\t\t],\n\t\t\ttarget: UPTIME_TARGET,\n\t\t}))\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Plural, Trans} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {Action, ActionKey} from 'data/ACTIONS'\nimport {JOBS, RoleKey} from 'data/JOBS'\nimport {Analyser} from 'parser/core/Analyser'\nimport {dependency} from 'parser/core/Injectable'\nimport {CooldownDowntime} from 'parser/core/modules/CooldownDowntime'\nimport {Data} from 'parser/core/modules/Data'\nimport React, {Fragment, ReactNode} from 'react'\nimport {Accordion, Button, Icon, Message, Table} from 'semantic-ui-react'\nimport {CooldownEndReason, CooldownHistoryEntry, Cooldowns} from './Cooldowns'\nimport DISPLAY_ORDER from './DISPLAY_ORDER'\nimport {Timeline} from './Timeline'\n\nconst DEFENSIVE_ROLE_ACTIONS: Map<RoleKey, ActionKey[]> = new Map<RoleKey, ActionKey[]>([\n\t['TANK', ['RAMPART', 'REPRISAL']],\n\t['MELEE', ['FEINT', 'BLOODBATH', 'SECOND_WIND']],\n\t['PHYSICAL_RANGED', ['SECOND_WIND']],\n\t['MAGICAL_RANGED', ['ADDLE']],\n\t['HEALER', []],\n])\n\nexport class Defensives extends Analyser {\n\tstatic override handle = 'defensives'\n\tstatic override title = t('core.defensives.title')`Defensives`\n\tstatic override displayOrder = DISPLAY_ORDER.DEFENSIVES\n\n\t@dependency protected cooldowns!:Cooldowns\n\t@dependency protected cooldownDowntime!: CooldownDowntime\n\t@dependency protected data!: Data\n\t@dependency private timeline!: Timeline\n\n\t/**\n\t * Implementing modules should provide a list of job-specific defensive actions to track\n\t */\n\tprotected trackedDefensives: Action[] = []\n\t/**\n\t * Implementing modules may override the main header message text\n\t */\n\tprotected headerContent: ReactNode = <Trans id=\"core.defensives.header.content\">\n\t\tUsing your mitigation and healing cooldowns can help you survive mistakes, or relieve some stress on the healers and let them deal more damage.<br/>\n\t\tWhile you shouldn't use them at the expense of your rotation or buff alignment, you should try to find helpful times to use them.\n\t</Trans>\n\n\toverride initialise() {\n\t\tconst roleDefensives = DEFENSIVE_ROLE_ACTIONS.get(JOBS[this.parser.actor.job].role)?.map(key => this.data.actions[key]) ?? []\n\t\troleDefensives.forEach(roleAction => {\n\t\t\tif (!this.trackedDefensives.find(action => roleAction.id === action.id)) {\n\t\t\t\tthis.trackedDefensives.push(roleAction)\n\t\t\t}\n\t\t})\n\t}\n\n\tprivate getUsageCount(defensive: Action): number {\n\t\treturn this.getUses(defensive).length\n\t}\n\n\tprivate getUses(defensive: Action): CooldownHistoryEntry[] {\n\t\treturn this.cooldowns.cooldownHistory(defensive).filter((entry) => entry.endReason !== CooldownEndReason.INTERRUPTED)\n\t}\n\n\tprivate getMaxUses(defensive: Action): number {\n\t\tconst totalAdditionalUses = this.getUses(defensive).reduce((acc, usage) => acc + this.getAdditionalUsageData(defensive, usage.start).chargesBeforeNextUse, this.getAdditionalUsageData(defensive).chargesBeforeNextUse)\n\t\treturn this.getUsageCount(defensive) + totalAdditionalUses\n\t}\n\n\toverride output() {\n\t\tif (this.trackedDefensives.length === 0) {\n\t\t\treturn\n\t\t}\n\n\t\treturn <Fragment>\n\t\t\t<Message icon>\n\t\t\t\t<Icon name=\"info\" />\n\t\t\t\t<Message.Content>\n\t\t\t\t\t{this.headerContent}\n\t\t\t\t\t<br/><br/>\n\t\t\t\t\t<Trans id=\"core.defensives.header.sub-content\">\n\t\t\t\t\t\tThe below tables will show you where you can gain additional uses of these cooldowns, without interfering with your existing ones.\n\t\t\t\t\t</Trans>\n\t\t\t\t</Message.Content>\n\t\t\t</Message>\n\t\t\t<Accordion\n\t\t\t\texclusive={false}\n\t\t\t\tstyled\n\t\t\t\tfluid\n\t\t\t\tpanels={\n\t\t\t\t\tthis.trackedDefensives.map((defensive, index) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tkey: defensive.id,\n\t\t\t\t\t\t\ttitle: {\n\t\t\t\t\t\t\t\tcontent: <><ActionLink key={index} {...defensive} /> - {this.getUsageCount(defensive)} / {this.getMaxUses(defensive)}</>,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcontent: {\n\t\t\t\t\t\t\t\tcontent: <Table compact unstackable celled>\n\t\t\t\t\t\t\t\t\t<Table.Body>\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tthis.tryGetAdditionalUseRow(defensive)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tthis.getUses(defensive).map((entry) => {\n\t\t\t\t\t\t\t\t\t\t\t\treturn this.getUsageRow(entry, defensive)\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</Table.Body>\n\t\t\t\t\t\t\t\t</Table>,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t/>\n\t\t</Fragment>\n\t}\n\n\tprivate getUsageRow(entry: CooldownHistoryEntry, defensive: Action): ReactNode {\n\t\treturn <>\n\t\t\t<Table.Row key={entry.start}>\n\t\t\t\t<Table.Cell>\n\t\t\t\t\t<Trans id=\"core.defensives.table.usage-row.text\">Used at <Button\n\t\t\t\t\t\tcircular\n\t\t\t\t\t\tcompact\n\t\t\t\t\t\tsize=\"mini\"\n\t\t\t\t\t\ticon=\"time\"onClick={() => this.timeline.show(entry.start - this.parser.pull.timestamp, entry.end - this.parser.pull.timestamp)}>\n\t\t\t\t\t</Button> {this.parser.formatEpochTimestamp(entry.start)}\n\t\t\t\t\t</Trans>\n\t\t\t\t</Table.Cell>\n\t\t\t</Table.Row>\n\t\t\t{\n\t\t\t\tthis.tryGetAdditionalUseRow(defensive, entry.start)\n\t\t\t}\n\t\t</>\n\t}\n\n\tprivate getAdditionalUsageData(defensive: Action, timestamp: number = this.parser.pull.timestamp): {chargesBeforeNextUse: number, availableTimestamp: number, useByTimestamp: number} {\n\t\tlet availableTimestamp: number, currentCharges\n\n\t\tif (timestamp === this.parser.pull.timestamp) {\n\t\t\tavailableTimestamp = this.parser.pull.timestamp\n\t\t\tcurrentCharges = defensive.charges || 1\n\t\t} else {\n\t\t\tconst chargesAvailableEvent = this.cooldowns.chargeHistory(defensive).find(charges => charges.timestamp >= timestamp && charges.current > 0)\n\t\t\tavailableTimestamp = chargesAvailableEvent?.timestamp || (this.parser.pull.duration + this.parser.pull.timestamp)\n\t\t\tcurrentCharges = chargesAvailableEvent?.current || 0\n\t\t}\n\n\t\tconst cooldown = defensive.cooldown || this.parser.pull.duration\n\t\tconst nextEntry = this.getUses(defensive).find(historyEntry => historyEntry.start > timestamp)\n\t\tconst useByTimestamp = nextEntry != null ? (nextEntry.start - cooldown) : (this.parser.pull.timestamp + this.parser.pull.duration)\n\n\t\tif (useByTimestamp <= availableTimestamp) {\n\t\t\treturn {chargesBeforeNextUse: 0, availableTimestamp, useByTimestamp}\n\t\t}\n\n\t\treturn {chargesBeforeNextUse: currentCharges + Math.floor((useByTimestamp - availableTimestamp) / cooldown), availableTimestamp, useByTimestamp}\n\t}\n\n\tprivate tryGetAdditionalUseRow(defensive: Action, timestamp: number = this.parser.pull.timestamp): ReactNode {\n\t\tconst {chargesBeforeNextUse, availableTimestamp, useByTimestamp} = this.getAdditionalUsageData(defensive, timestamp)\n\n\t\tif (chargesBeforeNextUse === 0) {\n\t\t\treturn <></>\n\t\t}\n\n\t\treturn <Table.Row>\n\t\t\t<Table.Cell>\n\t\t\t\t<Trans id=\"core.defensives.table.extra-usage-row.text\"><Plural value={chargesBeforeNextUse} one=\"1 extra use\" other=\"# extra uses\"/> available between <Button\n\t\t\t\t\tcircular\n\t\t\t\t\tcompact\n\t\t\t\t\tsize=\"mini\"\n\t\t\t\t\ticon=\"time\"onClick={() => this.timeline.show(availableTimestamp - this.parser.pull.timestamp, useByTimestamp - this.parser.pull.timestamp)}>\n\t\t\t\t</Button> {this.parser.formatEpochTimestamp(availableTimestamp)} and {this.parser.formatEpochTimestamp(useByTimestamp)}\n\t\t\t\t</Trans>\n\t\t\t</Table.Cell>\n\t\t</Table.Row>\n\t}\n}\n","import {MessageDescriptor} from '@lingui/core'\nimport {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport TransMarkdown from 'components/ui/TransMarkdown'\nimport {BASE_GCD} from 'data/CONSTANTS'\nimport React from 'react'\nimport {Report} from 'report'\nimport {Analyser} from '../Analyser'\nimport {dependency} from '../Injectable'\nimport {Data} from './Data'\nimport {SpeedAdjustments} from './SpeedAdjustments'\nimport {SimpleStatistic, Statistics} from './Statistics'\n\nconst estimateHelp: Record<Report['meta']['source'] | '__all', MessageDescriptor> = {\n\t__all: t('core.gcd.no-statistics.v2')`This GCD recast is an *estimate*, and may be incorrect. If it is reporting a GCD recast *longer* than reality, you likely need to focus on keeping your GCD rolling.`,\n\tlegacyFflogs: t('core.gcd.estimate-help.fflogs')`Precise attribute values are only available from FF Logs for the player who logged the report in ACT.`,\n}\n\nexport class GlobalCooldown extends Analyser {\n\tstatic override handle = 'gcd'\n\n\t@dependency private data!: Data\n\t@dependency private statistics!: Statistics\n\t@dependency private speedAdjustments!: SpeedAdjustments\n\n\toverride initialise() {\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\t/**\n\t * Get the base recast time of the parsed actor's GCD cooldown group, in milliseconds.\n\t * The value returned from this function _may_ be an estimate - check {@link GlobalCooldown.isEstimated}\n\t * to see if it is.\n\t */\n\tpublic getDuration() {\n\t\treturn this.speedAdjustments.getAdjustedDuration({duration: BASE_GCD})\n\t}\n\n\t/** Returns whether the GCD duration calculated by this module is an estimate. */\n\tpublic isEstimated() {\n\t\treturn this.speedAdjustments.isAdjustmentEstimated()\n\t}\n\n\tprivate onComplete() {\n\t\tconst estimated = this.isEstimated()\n\n\t\tthis.statistics.add(new SimpleStatistic({\n\t\t\ttitle: estimated\n\t\t\t\t? <Trans id=\"core.gcd.estimated-gcd\">Estimated GCD</Trans>\n\t\t\t\t: <Trans id=\"core.gcd.gcd\">GCD Recast</Trans>,\n\t\t\ticon: this.data.actions.ATTACK.icon,\n\t\t\tvalue: this.parser.formatDuration(this.getDuration()),\n\t\t\tinfo: estimated ? <>\n\t\t\t\t<TransMarkdown source={estimateHelp.__all}/>\n\t\t\t\t<TransMarkdown source={estimateHelp[this.parser.report.meta.source]}/>\n\t\t\t</> : undefined,\n\t\t}))\n\t}\n}\n","import {Action} from 'data/ACTIONS'\nimport {Status} from 'data/STATUSES'\nimport {Event, Events} from 'event'\nimport _ from 'lodash'\nimport {Analyser} from '../Analyser'\nimport {filter, noneOf, oneOf} from '../filter'\nimport {dependency} from '../Injectable'\nimport {ActionTimeline} from './ActionTimeline'\nimport {Actor, Actors} from './Actors'\nimport {Data} from './Data'\nimport {SimpleRow, StatusItem} from './Timeline'\n\ninterface Usage {\n\tstart: number\n\tend?: number\n}\n\ninterface StatusTarget {\n\tusages: Usage[]\n\trow: SimpleRow\n}\n\nexport class StatusTimeline extends Analyser {\n\tstatic override handle = 'statusTimeline'\n\n\tstatic statusesStackMapping: Record<number, number> = {}\n\n\t@dependency private actionTimeline!: ActionTimeline;\n\t@dependency private actors!: Actors;\n\t@dependency private data!: Data\n\n\tprivate statusActionMap = new Map<Status['id'], Action>();\n\tprivate usages = new Map<Status['id'], Map<Actor['id'], StatusTarget>>()\n\tprivate rows = new Map<string, SimpleRow>()\n\n\toverride initialise() {\n\t\t// Hook status events\n\t\tconst playerPetIds = this.parser.pull.actors\n\t\t\t.filter(actor => actor.owner === this.parser.actor)\n\t\t\t.map(pet => pet.id)\n\n\t\tconst allPetIds = this.parser.pull.actors\n\t\t\t.filter(actor => actor.owner?.playerControlled === true)\n\t\t\t.map(pet => pet.id)\n\n\t\tconst actorFilter = filter<Event>()\n\t\t\t.source(oneOf([this.parser.actor.id, ...playerPetIds]))\n\t\t\t.target(noneOf(allPetIds))\n\n\t\tthis.addEventHook(actorFilter.type('statusApply'), this.onApply)\n\t\tthis.addEventHook(actorFilter.type('statusRemove'), this.onRemove)\n\t\tthis.addEventHook('complete', this.onComplete)\n\n\t\t// Pre-cache status->action mappings\n\t\tfor (const action of Object.values(this.data.actions)) {\n\t\t\tif (action.statusesApplied == null) { continue }\n\t\t\tfor (const status of action.statusesApplied) {\n\t\t\t\tconst statusId = this.data.statuses[status].id\n\t\t\t\tthis.statusActionMap.set(statusId, action)\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onApply(event: Events['statusApply']) {\n\t\tlet statusUsages = this.usages.get(event.status)\n\t\tif (statusUsages == null) {\n\t\t\tstatusUsages = new Map()\n\t\t\tthis.usages.set(event.status, statusUsages)\n\t\t}\n\n\t\tlet statusTarget = statusUsages.get(event.target)\n\t\tif (statusTarget == null) {\n\t\t\tconst row = this.createStatusTargetRow(event.status, event.target)\n\t\t\tif (row == null) { return }\n\t\t\tstatusTarget = {\n\t\t\t\tusages: [],\n\t\t\t\trow,\n\t\t\t}\n\t\t\tstatusUsages.set(event.target, statusTarget)\n\t\t}\n\n\t\t// If there's an existing usage on the target, this can be considered to be a refresh\n\t\tconst lastUsage = _.last(statusTarget.usages)\n\t\tif (lastUsage != null && lastUsage.end == null) {\n\t\t\treturn\n\t\t}\n\n\t\tstatusTarget.usages.push({\n\t\t\tstart: event.timestamp,\n\t\t})\n\t}\n\n\tprivate onRemove(event: Events['statusRemove']) {\n\t\tconst lastUsage = _.last(this.usages.get(event.status)?.get(event.target)?.usages)\n\t\tif (lastUsage == null) { return }\n\n\t\tlastUsage.end = event.timestamp\n\t}\n\n\tprivate onComplete() {\n\t\tfor (const [statusId, statusUsages] of this.usages) {\n\t\t\tconst status = this.data.getStatus(statusId)\n\t\t\tif (status == null) { continue }\n\n\t\t\tfor (const statusTarget of statusUsages.values()) {\n\t\t\t\tfor (const usage of statusTarget.usages) {\n\t\t\t\t\tstatusTarget.row.addItem(new StatusItem({\n\t\t\t\t\t\tstatus,\n\t\t\t\t\t\tstart: usage.start - this.parser.pull.timestamp,\n\t\t\t\t\t\tend: (usage.end ?? this.parser.pull.timestamp + this.parser.pull.duration) - this.parser.pull.timestamp,\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate createStatusTargetRow(statusId: Status['id'], targetId: Actor['id']) {\n\t\tconst mapping = (this.constructor as typeof StatusTimeline).statusesStackMapping\n\t\tconst remappedStatusId = mapping[statusId] ?? statusId\n\n\t\tconst rowKey = this.getRowKey(remappedStatusId, targetId)\n\n\t\tconst cachedRow = this.rows.get(rowKey)\n\t\tif (cachedRow != null) { return cachedRow }\n\n\t\tconst statusRow = this.createStatusRow(remappedStatusId)\n\t\tif (statusRow == null) { return }\n\n\t\tconst actor = this.actors.get(targetId)\n\n\t\tconst row = statusRow.addRow(new SimpleRow({\n\t\t\tlabel: actor.name,\n\t\t}))\n\n\t\tthis.rows.set(rowKey, row)\n\t\treturn row\n\t}\n\n\tprivate createStatusRow(statusId: Status['id']) {\n\t\tconst rowKey = this.getRowKey(statusId)\n\n\t\tconst cachedRow = this.rows.get(rowKey)\n\t\tif (cachedRow != null) { return cachedRow }\n\n\t\tconst action = this.statusActionMap.get(statusId)\n\t\tif (action == null) { return }\n\n\t\tconst row = this.actionTimeline.getRow(action).addRow(new SimpleRow({\n\t\t\tlabel: this.data.getStatus(statusId)?.name ?? statusId,\n\t\t\thideCollapsed: true,\n\t\t\tcollapse: true,\n\t\t}))\n\n\t\tthis.rows.set(rowKey, row)\n\t\treturn row\n\t}\n\n\tprivate getRowKey = (statusId: Status['id'], targetId?: Actor['id']) =>\n\t\t`${statusId}:${targetId}`\n}\n","import {Status, StatusKey} from 'data/STATUSES'\nimport {Events} from 'event'\nimport {ensureArray} from 'utilities'\nimport {Analyser} from '../Analyser'\nimport {dependency} from '../Injectable'\nimport {Actor, StatusEvent} from './Actors'\nimport {Data} from './Data'\nimport {Invulnerability} from './Invulnerability'\n\ninterface Edge {\n\tside: 'apply' | 'remove'\n\ttimestamp: number\n}\n\nexport class Statuses extends Analyser {\n\tstatic override handle = 'statuses'\n\tstatic override debug = false\n\n\t@dependency private readonly data!: Data\n\t@dependency private readonly invulnerability!: Invulnerability\n\n\t/**\n\t * Calculate the total uptime of the specified status across allspecified actors.\n\t * @param statusSpecifier Status to calculate uptime of.\n\t * @param targetSpecifier Target(s) that should be checked for the status.\n\t * @param source Source of statuses to filter by. Defaults to the parsed actor.\n\t */\n\tgetUptime(\n\t\tstatusSpecifier: StatusKey | Status,\n\t\ttargetSpecifier: Actor | Actor[],\n\t\tsource = this.parser.actor\n\t) {\n\t\t// Resolve arguments.\n\t\tconst status = typeof statusSpecifier === 'string'\n\t\t\t? this.data.statuses[statusSpecifier]\n\t\t\t: statusSpecifier\n\n\t\tconst targets = ensureArray(targetSpecifier)\n\n\t\t// Collect all the status history for the specified status/target/source combo.\n\t\tconst edges = targets.flatMap(target => this.edgesForActor(\n\t\t\ttarget,\n\t\t\ttarget.statusHistory.get(status.id)?.get(source.id) ?? []\n\t\t))\n\n\t\t// Edges are mapped from multiple potential targets; interlace by sorting by timestamp.\n\t\tedges.sort((a, b) => a.timestamp - b.timestamp)\n\n\t\t// Sum time when any of the specified targets had the status.\n\t\tconst meta = {uptime: 0, depth: 0, application: 0}\n\t\tfor (const edge of edges) {\n\t\t\tif (edge.side === 'apply') {\n\t\t\t\tif (meta.depth === 0) {\n\t\t\t\t\tmeta.application = edge.timestamp\n\t\t\t\t}\n\t\t\t\tmeta.depth ++\n\n\t\t\t} else {\n\t\t\t\tmeta.depth --\n\t\t\t\tif (meta.depth === 0) {\n\t\t\t\t\tmeta.uptime += edge.timestamp - meta.application\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.debug(`Status ${status.name} ${edge.side} at ${this.ft(edge.timestamp)}, depth=${meta.depth}`)\n\t\t}\n\n\t\treturn meta.uptime\n\t}\n\n\tprivate edgesForActor(target: Actor, events: StatusEvent[]) {\n\t\t// We can safely assume status events from an actor will alternate between apply and remove.\n\t\tconst edges: Edge[] = []\n\t\tlet apply: Events['statusApply'] | undefined\n\t\tlet refresh: Events['statusApply'] | undefined\n\n\t\tfor (const event of events) {\n\t\t\t// Track the initial application and refreshes.\n\t\t\tif (event.type === 'statusApply') {\n\t\t\t\tapply ??= event\n\t\t\t\trefresh = event\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif (apply == null) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Window has been closed, merge any edges in.\n\t\t\tedges.push(...this.splitRangeForInvulns(\n\t\t\t\ttarget,\n\t\t\t\tapply.timestamp,\n\t\t\t\tevent.timestamp\n\t\t\t))\n\t\t\tapply = undefined\n\t\t}\n\n\t\t// If we've got a dangling apply, build edges for it.\n\t\tif (apply != null) {\n\t\t\t// Try to find a reasonable remove time for the status, if it has a duration.  Cap to the end of the fight.\n\t\t\tconst statusDuration = this.data.getStatus(apply.status)?.duration\n\t\t\tconst remove = statusDuration == null\n\t\t\t\t? this.parser.currentEpochTimestamp\n\t\t\t\t: Math.min((refresh ?? apply).timestamp + statusDuration, this.parser.currentEpochTimestamp)\n\n\t\t\tedges.push(...this.splitRangeForInvulns(\n\t\t\t\ttarget,\n\t\t\t\tapply.timestamp,\n\t\t\t\tremove,\n\t\t\t))\n\t\t}\n\n\t\treturn edges\n\t}\n\n\tprivate splitRangeForInvulns(target: Actor, apply: number, remove: number): Edge[] {\n\t\tlet range = {apply, remove}\n\t\tconst finalRanges = [range]\n\n\t\t// Get the invuln windows that occured during this range\n\t\tconst invulns = this.invulnerability.getWindows({\n\t\t\tstart: apply,\n\t\t\tend: remove,\n\t\t\tactorFilter: actor => actor.kind === target.kind,\n\t\t\ttypes: ['invulnerable'],\n\t\t})\n\n\t\tfor (const invuln of invulns) {\n\t\t\t// Invuln clipped start of range.\n\t\t\tif (invuln.start < range.apply && invuln.end >= range.apply) {\n\t\t\t\tthis.debug(`Start clip, [${this.ft(range.apply)},${this.ft(range.remove)}] -> [${this.ft(invuln.end)},${this.ft(range.remove)}]`)\n\n\t\t\t\trange.apply = invuln.end\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Invuln clipped end of range.\n\t\t\tif (invuln.start <= range.remove && invuln.end > range.remove) {\n\t\t\t\tthis.debug(`End clip, [${this.ft(range.apply)},${this.ft(range.remove)}] -> [${this.ft(range.apply)},${this.ft(invuln.start)}]`)\n\n\t\t\t\trange.remove = invuln.start\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Everything else should be a range split, sanity check.\n\t\t\tif (invuln.start < range.apply || invuln.end > range.remove) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tthis.debug(`Split [${this.ft(range.apply)},${this.ft(range.remove)}] -> [${this.ft(range.apply)},${this.ft(invuln.start)}], [${this.ft(invuln.end)},${this.ft(range.remove)}]`)\n\n\t\t\t// Split the range into two around the invuln.\n\t\t\tconst previousRange = range\n\t\t\trange = {...range}\n\t\t\tfinalRanges.push(range)\n\n\t\t\tpreviousRange.remove = invuln.start\n\t\t\trange.apply = invuln.end\n\t\t}\n\n\t\t// Map the ranges into edges.\n\t\treturn finalRanges.flatMap(range => [\n\t\t\t{side: 'apply', timestamp: range.apply},\n\t\t\t{side: 'remove', timestamp: range.remove},\n\t\t] as const)\n\t}\n\n\t// Small utility for formatting timestamps, as we do it a _lot_ in debug messages\n\tprivate ft = (timestamp: number) => this.parser.formatEpochTimestamp(timestamp, 1)\n}\n","import {t} from '@lingui/macro'\nimport {Trans, Plural} from '@lingui/react'\nimport NormalisedMessage from 'components/ui/NormalisedMessage'\nimport Rotation from 'components/ui/Rotation'\nimport {Action} from 'data/ACTIONS'\nimport {BASE_GCD} from 'data/CONSTANTS'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport CastTime from 'parser/core/modules/CastTime'\nimport {Data} from 'parser/core/modules/Data'\nimport {Invulnerability} from 'parser/core/modules/Invulnerability'\nimport Suggestions, {TieredSuggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport React, {ReactNode} from 'react'\nimport {Accordion} from 'semantic-ui-react'\nimport {matchClosestLower} from 'utilities'\n\nconst CAST_TIME_MAX_WEAVES = {\n\t0: 2,\n\t1000: 1,\n\t2500: 0,\n}\nconst REDUCE_MAX_WEAVES_RECAST_BELOW = 1800\nconst DEFAULT_MAX_WEAVES = 2\n\nconst WEAVING_SEVERITY = {\n\t1: SEVERITY.MEDIUM,\n\t5: SEVERITY.MAJOR,\n}\n\nexport interface Weave {\n\tleadingGcdEvent?: Events['action'],\n\ttrailingGcdEvent: Events['action'],\n\tgcdTimeDiff: number,\n\tweaves: Array<Events['action']>,\n}\n\nexport class Weaving extends Analyser {\n\tstatic override handle = 'weaving'\n\n\t@dependency protected castTime!: CastTime\n\t@dependency protected data!: Data\n\t@dependency private invulnerability!: Invulnerability\n\t@dependency protected suggestions!: Suggestions\n\n\tstatic override title = t('core.weaving.title')`Weaving Issues`\n\n\tprotected suggestionIcon: string = 'https://xivapi.com/i/001000/001785.png' // WVR Focused Synth\n\n\tprotected moduleLink = (\n\t\t<a style={{cursor: 'pointer'}} onClick={() => this.parser.scrollTo(Weaving.handle)}>\n\t\t\t<NormalisedMessage message={Weaving.title}/>\n\t\t</a>\n\t)\n\tprotected suggestionContent: ReactNode = <Trans id=\"core.weaving.content\">\n\t\tAvoid weaving more actions than you have time for in a single GCD window. Doing so will delay your next GCD, reducing possible uptime. Check the {this.moduleLink} module below for more detailed analysis.\n\t</Trans>\n\n\tprotected severity = WEAVING_SEVERITY\n\n\tprivate weaves: Array<Events['action']> = []\n\tprivate ongoingCastEvent?: Events['prepare']\n\tprivate leadingGcdEvent?: Events['action']\n\tprivate trailingGcdEvent?: Events['action']\n\tprivate badWeaves: Weave[] = []\n\n\toverride initialise() {\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\n\t\tthis.addEventHook(playerFilter.type('prepare'), this.onBeginCast)\n\t\tthis.addEventHook(playerFilter.type('action'), this.onCast)\n\t\tthis.addEventHook(filter<Event>().type('complete'), this.onComplete)\n\t\tthis.addEventHook(filter<Event>().type('death'), this.clearWeave)\n\t}\n\n\tprivate onBeginCast(event: Events['prepare']) {\n\t\tthis.ongoingCastEvent = event\n\t}\n\n\tprivate onCast(event: Events['action']) {\n\t\tconst action = this.data.getAction(event.action)\n\n\t\t// If the action is an auto, just ignore it\n\t\tif (!action || action.autoAttack) {\n\t\t\treturn\n\t\t}\n\n\t\t// If it's not a GCD, just bump the weave count\n\t\tif (this.isOgcd(action)) {\n\t\t\tthis.weaves.push(event)\n\t\t\treturn\n\t\t}\n\n\t\tif (this.ongoingCastEvent && this.ongoingCastEvent.action === action.id) {\n\t\t\t// This event is the end of a GCD cast\n\t\t\tthis.trailingGcdEvent = {\n\t\t\t\t...event,\n\t\t\t\t// Override the timestamp of the GCD with when its cast began\n\t\t\t\ttimestamp: this.ongoingCastEvent.timestamp,\n\t\t\t}\n\t\t} else {\n\t\t\t// This event was an instant GCD (or log missed the cast starting)\n\t\t\tthis.trailingGcdEvent = event\n\t\t}\n\n\t\t// Always reset the ongoing cast\n\t\tthis.ongoingCastEvent = undefined\n\n\t\t// Throw the current state onto the history\n\t\tthis.saveIfBad()\n\n\t\t// Reset\n\t\tthis.leadingGcdEvent = this.trailingGcdEvent\n\t\tthis.weaves = []\n\t}\n\n\tprivate onComplete() {\n\t\t// If there's been at least one gcd, run a cleanup on any remnant data\n\t\tif (this.leadingGcdEvent) {\n\t\t\tthis.saveIfBad()\n\t\t}\n\n\t\t// Few triples is medium, any more is major\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.suggestionIcon,\n\t\t\tcontent: this.suggestionContent,\n\t\t\twhy: <Plural\n\t\t\t\tid=\"core.weaving.why\"\n\t\t\t\tvalue={this.badWeaves.length}\n\t\t\t\t_1=\"# instance of incorrect weaving\"\n\t\t\t\tother=\"# instances of incorrect weaving\"\n\t\t\t/>,\n\t\t\ttiers: this.severity,\n\t\t\tvalue: this.badWeaves.length,\n\t\t}))\n\t}\n\n\tprivate saveIfBad() {\n\t\tif (this.trailingGcdEvent == null) { return }\n\n\t\tconst leadingTimestamp = this.leadingGcdEvent?.timestamp ?? this.parser.pull.timestamp\n\t\tconst gcdTimeDiff = this.trailingGcdEvent.timestamp\n\t\t\t- leadingTimestamp\n\t\t\t- this.invulnerability.getDuration({\n\t\t\t\tstart: leadingTimestamp,\n\t\t\t\tend: this.trailingGcdEvent.timestamp,\n\t\t\t})\n\n\t\tconst weave: Weave = {\n\t\t\tleadingGcdEvent: this.leadingGcdEvent,\n\t\t\ttrailingGcdEvent: this.trailingGcdEvent,\n\t\t\tgcdTimeDiff,\n\t\t\tweaves: this.weaves,\n\t\t}\n\n\t\tif (weave.weaves.length === 0) {\n\t\t\treturn\n\t\t}\n\n\t\tif (this.isBadWeave(weave)) {\n\t\t\tthis.badWeaves.push(weave)\n\t\t}\n\t}\n\n\tprivate isOgcd(action: Action) {\n\t\treturn !action.onGcd && !action.autoAttack\n\t}\n\n\tprivate isBadWeave(weave: Weave) {\n\t\t// Calc. the no. of weaves - we're ignoring any made while the boss is untargetable, and events that happened before the pull\n\t\tconst weaveCount = weave.weaves.filter(\n\t\t\tevent => true\n\t\t\t\t&& !this.invulnerability.isActive({timestamp: event.timestamp, types: ['untargetable']})\n\t\t\t\t&& event.timestamp >= this.parser.pull.timestamp,\n\t\t).length\n\n\t\tconst recast = ((weave.leadingGcdEvent != null) ? this.castTime.recastForEvent(weave.leadingGcdEvent) : undefined) ?? BASE_GCD\n\t\t// Check the downtime-adjusted GCD time difference for this weave - do not treat multiple weaves during downtime as bad weaves\n\t\treturn weave.gcdTimeDiff > recast && weaveCount > this.getMaxWeaves(weave)\n\t}\n\n\tprivate clearWeave() {\n\t\t// prompts saving any existing weaves if they're bad, and reset\n\t\tif (this.weaves.length > 0) {\n\t\t\tthis.saveIfBad()\n\t\t}\n\n\t\t// remove existing weaves and pretend the next leadingGcdEvent is like a fresh start (which I guess it is)\n\t\tthis.weaves = []\n\t\tthis.leadingGcdEvent = undefined\n\t}\n\n\t/**\n\t * Implementing classes MAY override this in order to provide custom logic for determining the number of max weaves, given the leading GCD Event\n\t * @param event The Action Event of the leading GCD.  Will be undefined for the first GCD of the pull - default behavior is to allow 2 weaves in case of missing pre-pull action\n\t * @returns number of allowed weaves after the leading GCD before flagging as bad weaving\n\t */\n\tprotected getMaxWeaves(weave: Weave): number {\n\t\tif (weave.leadingGcdEvent == null) {\n\t\t\treturn DEFAULT_MAX_WEAVES\n\t\t}\n\n\t\tconst castTime = this.castTime.forEvent(weave.leadingGcdEvent)\n\t\tif (castTime == null)  {\n\t\t\treturn DEFAULT_MAX_WEAVES\n\t\t}\n\n\t\tconst maxWeaves = matchClosestLower(CAST_TIME_MAX_WEAVES, castTime) ?? DEFAULT_MAX_WEAVES\n\t\tconst recastTime = this.castTime.recastForEvent(weave.leadingGcdEvent) ?? BASE_GCD\n\n\t\treturn maxWeaves - (recastTime < REDUCE_MAX_WEAVES_RECAST_BELOW ? 1 : 0)\n\t}\n\n\toverride output() {\n\t\tif (this.badWeaves.length === 0) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst panels = this.badWeaves.map(item => ({\n\t\t\tkey: item.leadingGcdEvent?.timestamp ?? this.parser.pull.timestamp,\n\t\t\ttitle: {\n\t\t\t\tcontent: <>\n\t\t\t\t\t<strong>{this.parser.formatEpochTimestamp(item.leadingGcdEvent?.timestamp ?? this.parser.pull.timestamp)}</strong>\n\t\t\t\t\t&nbsp;-&nbsp;\n\t\t\t\t\t<Plural\n\t\t\t\t\t\tid=\"core.weaving.panel-count\"\n\t\t\t\t\t\tvalue={item.weaves.length}\n\t\t\t\t\t\t_1=\"# weave\"\n\t\t\t\t\t\tother=\"# weaves\"\n\t\t\t\t\t/>\n\t\t\t\t\t&nbsp;(\n\t\t\t\t\t{this.parser.formatDuration(item.gcdTimeDiff)}\n\t\t\t\t\t&nbsp;\n\t\t\t\t\t<Trans id=\"core.weaving.between-gcds\">between GCDs</Trans>\n\t\t\t\t\t)\n\t\t\t\t</>,\n\t\t\t},\n\t\t\tcontent: {\n\t\t\t\tcontent: <Rotation events={[\n\t\t\t\t\t...(item.leadingGcdEvent != null ? [item.leadingGcdEvent] : []),\n\t\t\t\t\t...item.weaves,\n\t\t\t\t]}/>,\n\t\t\t},\n\t\t}))\n\n\t\treturn <Accordion\n\t\t\texclusive={false}\n\t\t\tpanels={panels}\n\t\t\tstyled\n\t\t\tfluid\n\t\t/>\n\t}\n}\n","import Color from 'color'\nimport {Contributor} from 'data/CONTRIBUTORS'\nimport React, {CSSProperties, PureComponent, ReactNode} from 'react'\nimport {Label} from 'semantic-ui-react'\n\ninterface ContributorLabelProps {\n\tcontributor: Contributor\n\tdetail?: ReactNode\n}\n\nexport default class ContributorLabel extends PureComponent<ContributorLabelProps> {\n\toverride render() {\n\t\tconst {contributor, detail} = this.props\n\n\t\tconst {avatar, name, jobs} = contributor\n\n\t\tconst style: CSSProperties = {}\n\t\tif (jobs.length) {\n\t\t\t// I'm assuming the first job they list is their 'main'\n\t\t\tconst job = jobs[0]\n\t\t\tstyle.backgroundColor = job.colour\n\t\t\tif (Color(job.colour).isDark()) {\n\t\t\t\tstyle.color = 'white'\n\t\t\t}\n\t\t}\n\n\t\treturn <Label\n\t\t\timage\n\t\t\tstyle={style}\n\t\t>\n\t\t\t{avatar && <img src={avatar} alt={name}/>}\n\t\t\t{name}\n\t\t\t{detail && <Label.Detail>{detail}</Label.Detail>}\n\t\t</Label>\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {Message, Segment} from 'akkd'\nimport ContributorLabel from 'components/ui/ContributorLabel'\nimport NormalisedMessage from 'components/ui/NormalisedMessage'\nimport {patchSupported} from 'data/PATCHES'\nimport {AVAILABLE_MODULES} from 'parser/AVAILABLE_MODULES'\nimport {Analyser, DisplayMode} from 'parser/core/Analyser'\nimport React from 'react'\nimport {Header} from 'semantic-ui-react'\nimport styles from './About.module.css'\nimport DISPLAY_ORDER from './DISPLAY_ORDER'\n\nexport default class About extends Analyser {\n\tstatic handle = 'about'\n\tstatic displayOrder = DISPLAY_ORDER.ABOUT\n\tstatic displayMode = DisplayMode.RAW\n\tstatic title = t('core.about.title')`About`\n\n\tDescription = null\n\tcontributors = []\n\n\tsupportedPatches = null\n\t// {\n\t//\t\tfrom: ...,\n\t//\t\tto: ...,\n\t// }\n\n\tset supportedPatch(value) {\n\t\t// Warn the dev that they're using a deprecated prop\n\t\tif (process.env.NODE_ENV === 'development') {\n\t\t\tconsole.warn('About.suportedPatch has been deprecated. Please use the About.supportedPatches object instead.')\n\t\t}\n\n\t\tthis.supportedPatches.from = value\n\t}\n\n\tconstructor(...args) {\n\t\tsuper(...args)\n\n\t\t// Merge the parser's metadata in\n\t\tconst fields = ['Description', 'contributors']\n\t\tfields.forEach(field => {\n\t\t\tthis[field] = this.parser.meta[field]\n\t\t})\n\n\t\t// If the job meta doesn't have supported patches, skip using the full meta so we don't display the core support range.\n\t\tconst jobMeta = AVAILABLE_MODULES.JOBS[this.parser.actor.job]\n\t\tthis.supportedPatches = jobMeta.supportedPatches != null\n\t\t\t? this.parser.meta.supportedPatches\n\t\t\t: undefined\n\t}\n\n\toutput() {\n\t\t// If they've not set the supported patch range, we're assuming it's not supported at all\n\t\tif (this.supportedPatches == null) {\n\t\t\treturn (\n\t\t\t\t<Segment>\n\t\t\t\t\t<Message error icon=\"times circle outline\">\n\t\t\t\t\t\t<Message.Header>\n\t\t\t\t\t\t\t<Trans id=\"core.about.unsupported.title\">This job is currently unsupported</Trans>\n\t\t\t\t\t\t</Message.Header>\n\t\t\t\t\t\t<Trans id=\"core.about.unsupported.description\">\n\t\t\t\t\t\t\tThe output shown below will not contain any job-specific analysis, and may be missing critical data required to generate an accurate result.\n\t\t\t\t\t\t</Trans>\n\t\t\t\t\t</Message>\n\t\t\t\t</Segment>\n\t\t\t)\n\t\t}\n\n\t\t// Work out the supported patch range (and if we're in it)\n\t\tconst {from, to = from} = this.supportedPatches\n\t\tconst supported = patchSupported(\n\t\t\tthis.parser.report.edition,\n\t\t\tfrom,\n\t\t\tto,\n\t\t\tthis.parser.pull.timestamp / 1000,\n\t\t)\n\n\t\tconst {Description} = this\n\n\t\treturn (\n\t\t\t<div className={styles.container}>\n\t\t\t\t<div className={styles.description}>\n\t\t\t\t\t<Header><NormalisedMessage message={this.constructor.title}/></Header>\n\n\t\t\t\t\t<Description/>\n\n\t\t\t\t\t{!supported && (\n\t\t\t\t\t\t<Message error icon=\"times circle outline\">\n\t\t\t\t\t\t\t<Message.Header>\n\t\t\t\t\t\t\t\t<Trans id=\"core.about.patch-unsupported.title\">Report patch unsupported</Trans>\n\t\t\t\t\t\t\t</Message.Header>\n\t\t\t\t\t\t\t<Trans id=\"core.about.patch-unsupported.description\">\n\t\t\t\t\t\t\t\tThis report was logged during patch {this.parser.patch.key}, which is not supported by the analyser. Calculations and suggestions may be impacted by changes in the interim.\n\t\t\t\t\t\t\t</Trans>\n\t\t\t\t\t\t</Message>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<dl className={styles.meta}>\n\t\t\t\t\t<dt><Trans id=\"core.about.supported-patches\">Supported Patches:</Trans></dt>\n\t\t\t\t\t<dd>{from}{from !== to && `–${to}`}</dd>\n\n\t\t\t\t\t{this.contributors.length > 0 && <>\n\t\t\t\t\t\t<dt><Trans id=\"core.about.contributors\">Contributors:</Trans></dt>\n\t\t\t\t\t\t<dd>\n\t\t\t\t\t\t\t{this.contributors.map(contributor => {\n\t\t\t\t\t\t\t\tconst {user, role} = contributor\n\t\t\t\t\t\t\t\treturn <div\n\t\t\t\t\t\t\t\t\tkey={typeof user === 'string' ? user : user.name}\n\t\t\t\t\t\t\t\t\tclassName={styles.contributor}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ContributorLabel\n\t\t\t\t\t\t\t\t\t\tcontributor={user}\n\t\t\t\t\t\t\t\t\t\tdetail={role && <NormalisedMessage message={role.text}/>}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</dd>\n\t\t\t\t\t</>}\n\t\t\t\t</dl>\n\t\t\t</div>\n\t\t)\n\t}\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"gutter\":\"20px\",\"md\":\"(min-width: 768px)\",\"themeBackground\":\"var(--background)\",\"description\":\"About-module_description__2PUG_\",\"meta\":\"About-module_meta__MTrvI\",\"contributor\":\"About-module_contributor__2E81e\",\"container\":\"About-module_container__2mUOL\"};","import ContributorLabel from 'components/ui/ContributorLabel'\nimport {ChangelogEntry} from 'parser/core/Meta'\nimport * as PropTypes from 'prop-types'\nimport React from 'react'\nimport {Accordion, AccordionTitleProps} from 'semantic-ui-react'\nimport styles from './ChangeLog.module.css'\n\ninterface ChangeLogProps {\n\tchangelog: ChangelogEntry[]\n}\n\nexport default class ChangeLog extends React.PureComponent<ChangeLogProps> {\n\tstatic propTypes = {\n\t\tchangelog: PropTypes.arrayOf(PropTypes.shape({\n\t\t\tdate: PropTypes.instanceOf(Date),\n\t\t\tcontributors: PropTypes.array,\n\t\t\tchanges: PropTypes.string,\n\t\t})),\n\t}\n\n\toverride state = {\n\t\tactiveIndexes: new Set(),\n\t}\n\n\thandleClick = (event: React.MouseEvent<HTMLDivElement>, data: AccordionTitleProps) => {\n\t\tconst {index} = data\n\t\tconst {activeIndexes} = this.state\n\n\t\tconst newIndexes = new Set(activeIndexes)\n\t\tif (newIndexes.has(index)) {\n\t\t\tnewIndexes.delete(index)\n\t\t} else {\n\t\t\tnewIndexes.add(index)\n\t\t}\n\n\t\tthis.setState({activeIndexes: newIndexes})\n\t}\n\n\toverride render() {\n\t\tconst {activeIndexes} = this.state\n\n\t\treturn <Accordion fluid styled>\n\t\t\t{this.props.changelog.map((item, index) => {\n\t\t\t\tconst dateString = item.date.toLocaleDateString()\n\t\t\t\tconst active = activeIndexes.has(index)\n\n\t\t\t\treturn <React.Fragment key={index}>\n\t\t\t\t\t<Accordion.Title\n\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\tactive={active}\n\t\t\t\t\t\tonClick={this.handleClick}\n\t\t\t\t\t\tclassName={styles.change}\n\t\t\t\t\t>\n\t\t\t\t\t\t<strong className={styles.date}>{dateString}</strong>\n\n\t\t\t\t\t\t{!active && <span className={styles.message}><item.Changes/></span>}\n\n\t\t\t\t\t\t{item.contributors && item.contributors.length > 0 && (\n\t\t\t\t\t\t\t<div className={styles.contributors}>\n\t\t\t\t\t\t\t\t{item.contributors.map(contributor => (\n\t\t\t\t\t\t\t\t\t<ContributorLabel key={contributor.name} contributor={contributor} />\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Accordion.Title>\n\n\t\t\t\t\t<Accordion.Content active={active}>\n\t\t\t\t\t\t<item.Changes/>\n\t\t\t\t\t</Accordion.Content>\n\t\t\t\t</React.Fragment>\n\t\t\t})}\n\t\t</Accordion>\n\t}\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"change\":\"ChangeLog-module_change__1ic9I\",\"date\":\"ChangeLog-module_date__RHyqs\",\"message\":\"ChangeLog-module_message__1vQwX\",\"contributors\":\"ChangeLog-module_contributors__3a6oS\"};","import {t} from '@lingui/macro'\nimport {Analyser, DisplayMode} from 'parser/core/Analyser'\nimport React from 'react'\nimport DISPLAY_ORDER from '../DISPLAY_ORDER'\nimport {default as ChangelogComponent} from './Component'\n\nexport default class ChangeLog extends Analyser {\n\tstatic override handle = 'changelog'\n\tstatic override displayOrder = DISPLAY_ORDER.CHANGELOG\n\tstatic override displayMode = DisplayMode.FULL\n\n\tstatic override title = t('core.changelog.title')`Changelog`\n\n\toverride output() {\n\t\tconst {changelog} = this.parser.meta\n\n\t\tif (changelog.length === 0) {\n\t\t\treturn false\n\t\t}\n\n\t\t// Sorts the changelog by date. New to old.\n\t\tchangelog.sort((a, b) => b.date.valueOf() - a.date.valueOf())\n\n\t\treturn <ChangelogComponent changelog={changelog}/>\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {Event, Events} from 'event'\nimport React from 'react'\nimport {Team} from 'report'\nimport {Analyser} from '../Analyser'\nimport {EventHook} from '../Dispatcher'\nimport {filter, oneOf} from '../filter'\nimport {dependency} from '../Injectable'\nimport BrokenLog from './BrokenLog'\nimport {Death} from './Death'\n\nconst LIKELY_DUMMY_THRESHOLD = 3\n\nexport class Dummy extends Analyser {\n\tstatic override title = t('core.dummy.title')`Striking Dummy`\n\tstatic override handle = 'dummy'\n\tstatic override debug = false\n\n\t@dependency private brokenLog!: BrokenLog\n\t@dependency private death!: Death\n\n\tprivate hook?: EventHook<Events['death']>\n\n\toverride initialise() {\n\t\tconst foeIds = this.parser.pull.actors\n\t\t\t.filter(actor => actor.team === Team.FOE)\n\t\t\t.map(actor => actor.id)\n\n\t\tthis.hook = this.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.type('death')\n\t\t\t\t.actor(oneOf(foeIds)),\n\t\t\tthis.onFoeDeath,\n\t\t)\n\t}\n\n\tprivate onFoeDeath(event: Events['death']) {\n\t\tconst count = this.death.getCount(event.actor)\n\t\tif (count < LIKELY_DUMMY_THRESHOLD) { return }\n\t\tthis.hook != null && this.removeEventHook(this.hook)\n\t\tthis.brokenLog.trigger(this, 'striking dummy', (\n\t\t\t<Trans id=\"core.dummy.broken-log\">\n\t\t\t\tOne or more actors in this pull appear to be striking dummies. The behaviour of dummy health pools breaks a number of assumptions made by xivanalysis, which can lead to subtly incorrect results.\n\t\t\t</Trans>\n\t\t), false)\n\t}\n}\n","import {ActionLink, StatusLink} from 'components/ui/DbLink'\nimport {Cause, Event, Events, SourceModifier, TargetModifier} from 'event'\nimport React from 'react'\nimport {Actor, Pull} from 'report'\nimport {formatDuration} from 'utilities'\n\nexport interface EventFormatterOptions<E extends Event> {\n\tevent: E,\n\tpull: Pull,\n}\nexport type EventFormatter<E extends Event> =\n\t(event: EventFormatterOptions<E>) => React.ReactNode\nexport const eventFormatters = new Map<string, EventFormatter<Event>>()\n\n/**\n * Register a formatter function for the specified event type. The formatter will\n * be used to provide human-readable text for that event type in the events view\n * output.\n *\n * @param type Type of event to register the formatter for.\n * @param formatter The formatter to register.\n */\nexport function registerEventFormatter<T extends keyof Events>(type: T, formatter: EventFormatter<Events[T]>) {\n\tif (eventFormatters.has(type)) {\n\t\tthrow new Error(`Trying to register formatter for already-handled event type ${type}`)\n\t}\n\teventFormatters.set(type, formatter as EventFormatter<Event>)\n}\n\n// -----\n// #region Stock event formatters\n// -----\n\nconst getActorName = (actorId: Actor['id'], actors: Actor[]) =>\n\tactors.find(actor => actor.id === actorId)?.name\n\t?? actorId\n\nfunction formatCause(cause: Cause) {\n\tswitch (cause.type) {\n\tcase 'action': return <ActionLink id={cause.action}/>\n\tcase 'status': return <StatusLink id={cause.status}/>\n\tdefault: return JSON.stringify(cause)\n\t}\n}\n\nfunction formatSourceModifier(modifier: SourceModifier) {\n\tswitch (modifier) {\n\tcase SourceModifier.NORMAL: return ''\n\tcase SourceModifier.MISS: return ' Miss.'\n\tcase SourceModifier.CRITICAL: return ' Critical hit!'\n\tcase SourceModifier.DIRECT: return ' Direct hit!'\n\tcase SourceModifier.CRITICAL_DIRECT: return ' Critical direct hit!'\n\tdefault: return ''\n\t}\n}\n\nfunction formatTargetModifier(modifier: TargetModifier) {\n\tswitch (modifier) {\n\tcase TargetModifier.NORMAL: return ''\n\tcase TargetModifier.PARRY: return ' Parried.'\n\tcase TargetModifier.BLOCK: return ' Blocked.'\n\tcase TargetModifier.DODGE: return ' Dodged.'\n\tcase TargetModifier.INVULNERABLE: return ' Invulnerable.'\n\tdefault: return ''\n\t}\n}\n\nregisterEventFormatter('prepare', ({event, pull}) => <>\n\t{getActorName(event.source, pull.actors)}\n\t&nbsp;prepares <ActionLink id={event.action}/>\n\t&nbsp;on {getActorName(event.target, pull.actors)}\n</>)\n\nregisterEventFormatter('interrupt', ({event, pull}) => <>\n\t{getActorName(event.source, pull.actors)}\n\t&nbsp;interrupts {getActorName(event.target, pull.actors)}'s\n\t&nbsp;<ActionLink id={event.action}/>\n</>)\n\nregisterEventFormatter('action', ({event, pull}) => <>\n\t{getActorName(event.source, pull.actors)}\n\t&nbsp;uses <ActionLink id={event.action}/>\n\t&nbsp;on {getActorName(event.target, pull.actors)}\n</>)\n\nregisterEventFormatter('statusApply', ({event, pull}) => <>\n\t{getActorName(event.source, pull.actors)}\n\t&nbsp;applies <StatusLink id={event.status}/>\n\t&nbsp;on {getActorName(event.target, pull.actors)}\n\t{event.duration != null && <>&nbsp;for {formatDuration(event.duration, {hideMinutesIfZero: true})}</>}\n\t{event.data != null && <>&nbsp;with data <code>{event.data}</code></>}\n</>)\n\nregisterEventFormatter('statusRemove', ({event, pull}) => <>\n\t{getActorName(event.source, pull.actors)}'s\n\t&nbsp;<StatusLink id={event.status}/>\n\t&nbsp;fades from {getActorName(event.target, pull.actors)}\n</>)\n\nregisterEventFormatter('execute', ({event, pull}) => <>\n\t{getActorName(event.source, pull.actors)}'s\n\t&nbsp;<ActionLink id={event.action}/>\n\t&nbsp;executes on {getActorName(event.target, pull.actors)}\n\t&nbsp;(seq: {event.sequence})\n</>)\n\nregisterEventFormatter('damage', ({event, pull}) => <>\n\t{getActorName(event.source, pull.actors)}'s\n\t&nbsp;{formatCause(event.cause)}\n\t&nbsp;hits\n\t{\n\t\tevent.targets.map(t => <>\n\t\t\t&nbsp;{getActorName(t.target, pull.actors)}\n\t\t\t&nbsp;for {t.amount} damage\n\t\t\t{t.overkill > 0 && <>,&nbsp;overkilling by {t.overkill}</>}.\n\t\t\t{formatSourceModifier(t.sourceModifier)}\n\t\t\t{formatTargetModifier(t.targetModifier)}\n\t\t</>)\n\t}\n\t{event.sequence && <>&nbsp;(seq: {event.sequence})</>}\n</>)\n\nregisterEventFormatter('heal', ({event, pull}) => <>\n\t{getActorName(event.source, pull.actors)}'s\n\t&nbsp;{formatCause(event.cause)}\n\t&nbsp;heals&nbsp;\n\t{\n\t\tevent.targets.map(t => <>\n\t\t\t&nbsp;{getActorName(t.target, pull.actors)}\n\t\t\t&nbsp;for {t.amount} HP\n\t\t\t{t.overheal > 0 && <>,&nbsp;overhealing by {t.overheal}</>}.\n\t\t\t{formatSourceModifier(t.sourceModifier)}\n\t\t</>)\n\t}\n\t{event.sequence && <>&nbsp;(seq: {event.sequence})</>}\n</>)\n\nregisterEventFormatter('actorUpdate', ({event, pull}) => <>\n\t{getActorName(event.actor, pull.actors)} is updated.\n\t{event.hp != null && <>&nbsp;HP: {event.hp.current}/{event.hp.maximum}.</>}\n\t{event.mp != null && <>&nbsp;MP: {event.mp.current}/{event.mp.maximum}.</>}\n\t{event.position != null && <>&nbsp;Position: {event.position.x},{event.position.y}.</>}\n\t{event.targetable != null && <>&nbsp;{event.targetable ? 'Targetable' : 'Untargetable'}.</>}\n</>)\n\n// -----\n// #endregion\n// -----\n","import cx from 'classnames'\nimport {Event} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport React, {CSSProperties, useState} from 'react'\nimport Measure from 'react-measure'\nimport {FixedSizeList} from 'react-window'\nimport {Pull} from 'report'\nimport {Icon, Popup} from 'semantic-ui-react'\nimport {formatDuration} from 'utilities/strings'\nimport DISPLAY_ORDER from '../DISPLAY_ORDER'\nimport {eventFormatters} from './eventFormatter'\nimport styles from './EventsView.module.css'\n\nconst rowHeight = parseInt(styles.rowHeight, 10)\n\nexport class EventsView extends Analyser {\n\tstatic override title = 'Events View'\n\tstatic override handle = 'eventsView'\n\tstatic override displayOrder = DISPLAY_ORDER.EVENTS_VIEW\n\tstatic override debug = true\n\n\tprivate events: Event[] = []\n\n\toverride initialise() {\n\t\tthis.debug(() => {\n\t\t\t// Catch every event. Note: if you're reading this - don't use the predicate for logic unless you know exactly what you're doing.\n\t\t\t// It's a massive anti-pattern, and I'm only doing it here as a microoptimisation for a single use case. If you're not sure, ask.\n\t\t\tthis.addEventHook((event): event is never => {\n\t\t\t\tthis.events.push(event)\n\t\t\t\treturn false\n\t\t\t}, () => { /* noop - this will never be called */ })\n\t\t})\n\t}\n\n\toverride output() {\n\t\tif (this.events.length === 0) {\n\t\t\treturn null\n\t\t}\n\n\t\tconst data = {\n\t\t\tevents: this.events,\n\t\t\tpull: this.parser.pull,\n\t\t}\n\n\t\treturn <EventsViewComponent data={data}/>\n\t}\n}\n\ninterface EventsViewData {\n\tevents: Event[]\n\tpull: Pull\n}\n\ninterface EventsViewComponentProps {\n\tdata: EventsViewData\n}\n\nfunction EventsViewComponent({data}: EventsViewComponentProps) {\n\tconst [width, setWidth] = useState<number>()\n\n\tconst height = 500\n\t// Bumped overscan to handle scrolling nicer for the large data set.\n\tconst overscanCount = 10\n\n\treturn <>\n\t\t<Measure\n\t\t\tbounds\n\t\t\tchildren={({measureRef}) => <div ref={measureRef}/>}\n\t\t\tonResize={contentRect => setWidth(contentRect.bounds?.width)}\n\t\t/>\n\n\t\t{width != null && (\n\t\t\t<FixedSizeList\n\t\t\t\twidth={width}\n\t\t\t\theight={height}\n\t\t\t\titemSize={rowHeight}\n\t\t\t\titemCount={data.events.length}\n\t\t\t\toverscanCount={overscanCount}\n\t\t\t\titemData={data}\n\t\t\t\tchildren={EventItem}\n\t\t\t/>\n\t\t)}\n\t</>\n}\n\ninterface EventItemProps {\n\tdata: EventsViewData\n\tindex: number\n\tstyle: CSSProperties\n}\n\nfunction EventItem({data: {events, pull}, index, style}: EventItemProps) {\n\tconst event = events[index]\n\n\tconst timestamp = formatDuration(\n\t\tevent.timestamp - pull.timestamp,\n\t\t{secondPrecision: 3},\n\t)\n\n\tconst formatter = eventFormatters.get(event.type)\n\tconst formatted = formatter != null\n\t\t? formatter({event, pull})\n\t\t: JSON.stringify(event)\n\n\treturn (\n\t\t<div className={cx(styles.row, index % 2 === 1 && styles.odd)} style={style}>\n\t\t\t<div className={styles.timestamp}>{timestamp}</div>\n\t\t\t<div className={styles.type}>{event.type}</div>\n\t\t\t<div className={styles.description}>{formatted}</div>\n\t\t\t<div className={styles.showData}>\n\t\t\t\t<Popup\n\t\t\t\t\ttrigger={<Icon name=\"code\"/>}\n\t\t\t\t\tcontent={<pre>{JSON.stringify(event, undefined, 2)}</pre>}\n\t\t\t\t\tposition=\"left center\"\n\t\t\t\t\ton=\"click\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"themeBackdrop\":\"var(--backdrop)\",\"rowHeight\":\"24px\",\"row\":\"EventsView-module_row__3NDup\",\"odd\":\"EventsView-module_odd__25dzx\",\"timestamp\":\"EventsView-module_timestamp__2YlTh\",\"type\":\"EventsView-module_type__2RtB5\",\"description\":\"EventsView-module_description__3Ta3K\",\"showData\":\"EventsView-module_showData__hraD7\"};","import {Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {dependency} from '../Injectable'\nimport {Data} from './Data'\nimport {SimpleRow, StatusItem, Timeline} from './Timeline'\n\ninterface Medication {\n\tstart: number\n\tend?: number\n}\n\nexport class Medicated extends Analyser {\n\tstatic override handle = 'medicated'\n\n\t@dependency private data!: Data\n\t@dependency private timeline!: Timeline\n\n\tprivate pot: Medication | undefined\n\tprivate pots: Medication[] = []\n\n\toverride initialise() {\n\t\tthis.addEventHook({\n\t\t\ttype: 'statusApply',\n\t\t\ttarget: this.parser.actor.id,\n\t\t\tstatus: this.data.statuses.MEDICATED.id,\n\t\t}, this.onMedication)\n\n\t\tthis.addEventHook({\n\t\t\ttype: 'statusRemove',\n\t\t\ttarget: this.parser.actor.id,\n\t\t\tstatus: this.data.statuses.MEDICATED.id,\n\t\t}, this.offMedication)\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onMedication(event: Events['statusApply']) {\n\t\tthis.pot = {start: event.timestamp}\n\t}\n\n\tprivate stopAndSave(endTime: number = this.parser.currentEpochTimestamp) {\n\t\tif (this.pot != null) {\n\t\t\tthis.pots.push({...this.pot, end: endTime})\n\t\t}\n\n\t\tthis.pot = undefined\n\t}\n\n\tprivate offMedication(event: Events['statusRemove']) {\n\t\tif (this.pot == null) {\n\t\t\tthrow new Error('potion instance not found')\n\t\t}\n\n\t\tthis.stopAndSave(event.timestamp)\n\t}\n\n\tprivate onComplete() {\n\t\tconst status = this.data.statuses.MEDICATED\n\n\t\t// Add a pot that is still up before end of pull\n\t\tif (this.pot != null && this.pot.end == null) {\n\t\t\tthis.stopAndSave()\n\t\t}\n\n\t\tif (this.pots.length > 0) {\n\t\t\tconst row = new SimpleRow({\n\t\t\t\tlabel: 'Medicated',\n\t\t\t\torder: -99,\n\t\t\t})\n\n\t\t\tthis.pots.forEach(pot => row.addItem(new StatusItem({\n\t\t\t\tstatus: status,\n\t\t\t\tstart: pot.start - this.parser.pull.timestamp,\n\t\t\t\tend: pot.end != null ? pot.end - this.parser.pull.timestamp : this.parser.pull.duration,\n\t\t\t})))\n\n\t\t\tthis.timeline.addRow(row)\n\t\t}\n\t}\n}\n","import {JobKey} from 'data/JOBS'\nimport {Status, StatusKey} from 'data/STATUSES'\nimport {Event, Events} from 'event'\nimport {Team} from 'report'\nimport {Analyser} from '../Analyser'\nimport {filter, oneOf} from '../filter'\nimport {dependency} from '../Injectable'\nimport {Actor, Actors} from './Actors'\nimport {Data} from './Data'\nimport {SimpleRow, StatusItem, Timeline} from './Timeline'\n\n// Are other jobs going to need to add to this?\ninterface StatusConfig {\n\tkey: StatusKey\n\tgroup?: string\n\tname?: string,\n\texclude?: JobKey[]\n}\n\nconst TRACKED_STATUSES: StatusConfig[] = [\n\t{key: 'THE_BALANCE', group: 'arcanum', name: 'Arcanum'},\n\t{key: 'THE_ARROW', group: 'arcanum', name: 'Arcanum'},\n\t{key: 'THE_SPEAR', group: 'arcanum', name: 'Arcanum'},\n\t{key: 'THE_BOLE', group: 'arcanum', name: 'Arcanum'},\n\t{key: 'THE_EWER', group: 'arcanum', name: 'Arcanum'},\n\t{key: 'THE_SPIRE', group: 'arcanum', name: 'Arcanum'},\n\t{key: 'DIVINATION'},\n\t{key: 'BATTLE_LITANY'},\n\t{key: 'BATTLE_VOICE'},\n\t{key: 'BROTHERHOOD'},\n\t{key: 'CHAIN_STRATAGEM'},\n\t{key: 'EMBOLDEN_SELF'}, // tracking the self buff so it appears on the RDM's perspective\n\t{key: 'EMBOLDEN_PARTY'},\n\t{key: 'LEFT_EYE', exclude: ['DRAGOON']}, // notDRG\n\t{key: 'TECHNICAL_FINISH'},\n\t{key: 'STANDARD_FINISH_PARTNER'},\n\t{key: 'DEVILMENT'},\n\t{key: 'OFF_GUARD'},\n\t{key: 'PECULIAR_LIGHT'},\n\t{key: 'CONDENSED_LIBRA_ASTRAL', group: 'libra', name: 'Condensed Libra'},\n\t{key: 'CONDENSED_LIBRA_UMBRAL', group: 'libra', name: 'Condensed Libra'},\n\t{key: 'CONDENSED_LIBRA_PHYSICAL', group: 'libra', name: 'Condensed Libra'},\n\t{key: 'ARCANE_CIRCLE'},\n\t{key: 'SEARING_LIGHT'},\n\t{key: 'RADIANT_FINALE'},\n]\n\nexport class RaidBuffs extends Analyser {\n\tstatic override handle = 'raidBuffs'\n\n\t@dependency private readonly actors!: Actors\n\t@dependency private readonly data!: Data\n\t@dependency private readonly timeline!: Timeline\n\n\tprivate applications = new Map<Actor['id'], Map<Status['id'], number>>()\n\tprivate timelineRows = new Map<string | number, SimpleRow>()\n\tprivate settings = new Map<Status['id'], StatusConfig>(\n\t\tTRACKED_STATUSES.map(config => [this.data.statuses[config.key].id, config])\n\t)\n\n\toverride initialise() {\n\t\t// Patch-specific raid buff additions\n\t\tif (this.parser.patch.before('6.1')) {\n\t\t\tthis.settings.set(\n\t\t\t\tthis.data.statuses.TRICK_ATTACK_VULNERABILITY_UP.id,\n\t\t\t\t{key: 'TRICK_ATTACK_VULNERABILITY_UP', name: 'Trick Attack'}\n\t\t\t)\n\t\t} else {\n\t\t\tthis.settings.set(\n\t\t\t\tthis.data.statuses.MUG_VULNERABILITY_UP.id,\n\t\t\t\t{key: 'MUG_VULNERABILITY_UP', name: 'Mug'}\n\t\t\t)\n\t\t}\n\n\t\t// Event hooks\n\t\tconst statusFilter = filter<Event>()\n\t\t\t.status(oneOf([...this.settings.keys()]))\n\t\t\t.target((target: Actor['id']): target is Actor['id'] => {\n\t\t\t\t// Match all foes, but only the parsed actor of the friends.\n\t\t\t\tconst actor = this.actors.get(target)\n\t\t\t\tif (actor.team === Team.FRIEND) {\n\t\t\t\t\treturn actor.id === this.parser.actor.id\n\t\t\t\t}\n\t\t\t\treturn true\n\t\t\t})\n\t\tthis.addEventHook(statusFilter.type('statusApply'), this.onApply)\n\t\tthis.addEventHook(statusFilter.type('statusRemove'), this.onRemove)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onApply(event: Events['statusApply']) {\n\t\tconst statusId = event.status\n\t\tconst settings = this.settings.get(statusId)\n\n\t\tif (settings?.exclude?.includes(this.parser.actor.job)) {\n\t\t\treturn\n\t\t}\n\n\t\t// Record the start time of the status\n\t\tconst applications = this.getTargetApplications(event.target)\n\t\tif (!applications.has(statusId)) {\n\t\t\tapplications.set(statusId, event.timestamp)\n\t\t}\n\t}\n\n\tprivate onRemove(event: Events['statusRemove']) {\n\t\tthis.endStatus(event.target, event.status)\n\t}\n\n\tprivate endStatus(targetId: Actor['id'], statusId: Status['id']) {\n\t\tconst applications = this.getTargetApplications(targetId)\n\t\tconst applyTime = applications.get(statusId)\n\t\tif (!applyTime) { return }\n\t\tapplications.delete(statusId)\n\n\t\tconst settings = this.settings.get(statusId)\n\t\tconst status = this.data.getStatus(statusId)\n\t\tif (settings == null || status == null) { return }\n\n\t\t// Get the row for this status/group, creating one if it doesn't exist yet.\n\t\t// NOTE: Using application time as order, as otherwise adding here forces ordering by end time of the first status\n\t\tconst rowId = settings.group ?? statusId\n\t\tlet row = this.timelineRows.get(rowId)\n\t\tif (row == null) {\n\t\t\trow = new SimpleRow({\n\t\t\t\tlabel: settings.name ?? status.name,\n\t\t\t\torder: applyTime,\n\t\t\t})\n\t\t\tthis.timelineRows.set(rowId, row)\n\t\t}\n\n\t\tconst start = applyTime - this.parser.pull.timestamp\n\n\t\t// It's not uncommon for a status to be mirrored onto mechanic actors, which\n\t\t// causes a big bunch-up of statuses in the timeline. If there's already an\n\t\t// item for this application, skip out.\n\t\tif (row.items[row.items.length - 1]?.start === start) {\n\t\t\treturn\n\t\t}\n\n\t\t// Add an item for the status to its row\n\t\trow.addItem(new StatusItem({\n\t\t\tstart,\n\t\t\tend: this.parser.currentEpochTimestamp - this.parser.pull.timestamp,\n\t\t\tstatus,\n\t\t}))\n\t}\n\n\tprivate onComplete() {\n\t\t// Clean up any remnant statuses\n\t\tfor (const [targetId, statuses] of this.applications) {\n\t\t\tfor (const statusId of statuses.keys()) {\n\t\t\t\tthis.endStatus(targetId, statusId)\n\t\t\t}\n\t\t}\n\n\t\t// Add the parent row. It will automatically hide if there's no children.\n\t\tthis.timeline.addRow(new SimpleRow({\n\t\t\tlabel: 'Raid Buffs',\n\t\t\torder: -100,\n\t\t\trows: Array.from(this.timelineRows.values()),\n\t\t}))\n\t}\n\n\tprivate getTargetApplications(targetId: Actor['id']) {\n\t\tlet applications = this.applications.get(targetId)\n\t\tif (applications == null) {\n\t\t\tapplications = new Map()\n\t\t\tthis.applications.set(targetId, applications)\n\t\t}\n\t\treturn applications\n\t}\n}\n","import About from './About'\nimport {ActionTimeline} from './ActionTimeline'\nimport {Actors} from './Actors'\nimport {AlwaysBeCasting} from './AlwaysBeCasting'\nimport BrokenLog from './BrokenLog'\nimport CastTime from './CastTime'\nimport ChangeLog from './ChangeLog'\nimport Checklist from './Checklist'\nimport {Combos} from './Combos'\nimport {Cooldowns} from './Cooldowns'\nimport {Data} from './Data'\nimport {Death} from './Death'\nimport {Defensives} from './Defensives'\nimport Downtime from './Downtime'\nimport {Dummy} from './Dummy'\nimport {EventsView} from './EventsView'\nimport {GlobalCooldown} from './GlobalCooldown'\nimport {Invulnerability} from './Invulnerability'\nimport {Medicated} from './Medicated'\nimport {RaidBuffs} from './RaidBuffs'\nimport {ResourceGraphs} from './ResourceGraphs'\nimport {SpeedAdjustments} from './SpeedAdjustments'\nimport {Statistics} from './Statistics'\nimport {Statuses} from './Statuses'\nimport {StatusTimeline} from './StatusTimeline'\nimport Suggestions from './Suggestions'\nimport {Timeline} from './Timeline'\nimport {UnableToAct} from './UnableToAct'\nimport {Weaving} from './Weaving'\n\nexport default [\n\tAbout,\n\tActionTimeline,\n\tActors,\n\tAlwaysBeCasting,\n\tBrokenLog,\n\tChangeLog,\n\tCastTime,\n\tChecklist,\n\tCombos,\n\tCooldowns,\n\tData,\n\tDeath,\n\tDefensives,\n\tDowntime,\n\tDummy,\n\tEventsView,\n\tGlobalCooldown,\n\tInvulnerability,\n\tMedicated,\n\tRaidBuffs,\n\tResourceGraphs,\n\tSpeedAdjustments,\n\tStatistics,\n\tStatuses,\n\tStatusTimeline,\n\tSuggestions,\n\tTimeline,\n\tUnableToAct,\n\tWeaving,\n]\n"],"names":["ItemDepth","ActionTimeline","CastTime","Cooldowns","Data","Timeline","resolvedRows","groupRows","action","this","addRow","content","constructor","rows","config","resolvedConfig","resolveConfig","push","addEventHook","onComplete","populatedGroups","row","populateRow","forEach","specifier","cooldowns","groups","group","add","allGroups","has","finalConfig","Array","isArray","ensureArray","existingRow","get","isDefined","firstContent","label","Trans","id","data","actions","name","cooldownHistory","timeline","ContainerRow","order","collapse","set","addCooldownItems","addChargeItems","chargeHistory","history","entry","duration","getCooldownDuration","start","parser","pull","timestamp","end","addItem","SimpleItem","className","item","delta","ActionItem","depth","ACTION","ChargeGainItem","CHARGE_GAIN","endReason","CooldownEndReason","castTime","forAction","Math","max","Analyser","handle","debug","dependency","Content","styles","Icon","BaseItem","AlwaysBeCasting","Checklist","Downtime","GlobalCooldown","SpeedAdjustments","gcdUptime","gcdsCounted","lastBeginCast","filter","source","actor","type","onBeginCast","onCast","event","getAction","onGcd","forEvent","globalCooldown","getDuration","ANIMATION_LOCK","recastTime","recastForEvent","castStart","considerCast","relativeTimestamp","formatEpochTimestamp","undefined","_action","downtime","isDowntime","fightDuration","currentDuration","getDowntime","uptime","checklist","Rule","description","displayOrder","requirements","Requirement","percent","getUptimePercent","target","speedAdjustments","DEFENSIVE_ROLE_ACTIONS","Defensives","CooldownDowntime","trackedDefensives","headerContent","JOBS","job","role","key","roleAction","defensive","getUses","length","totalAdditionalUses","acc","usage","getAdditionalUsageData","chargesBeforeNextUse","getUsageCount","Fragment","icon","exclusive","styled","fluid","panels","index","title","getMaxUses","compact","unstackable","celled","tryGetAdditionalUseRow","getUsageRow","circular","size","onClick","show","availableTimestamp","currentCharges","charges","chargesAvailableEvent","current","cooldown","nextEntry","historyEntry","useByTimestamp","floor","DISPLAY_ORDER","cooldownDowntime","estimateHelp","__all","legacyFflogs","Statistics","getAdjustedDuration","BASE_GCD","isAdjustmentEstimated","estimated","isEstimated","statistics","SimpleStatistic","ATTACK","value","formatDuration","info","report","meta","StatusTimeline","Actors","statusActionMap","usages","getRowKey","statusId","targetId","playerPetIds","actors","owner","pet","allPetIds","playerControlled","actorFilter","oneOf","noneOf","onApply","onRemove","statusesApplied","status","statuses","statusUsages","statusTarget","createStatusTargetRow","lastUsage","getStatus","StatusItem","remappedStatusId","statusesStackMapping","rowKey","cachedRow","statusRow","createStatusRow","SimpleRow","actionTimeline","getRow","hideCollapsed","Statuses","Invulnerability","ft","statusSpecifier","targetSpecifier","targets","edges","edgesForActor","statusHistory","a","b","application","edge","side","events","apply","refresh","splitRangeForInvulns","statusDuration","remove","currentEpochTimestamp","min","range","finalRanges","invulns","invulnerability","getWindows","kind","types","invuln","previousRange","CAST_TIME_MAX_WEAVES","WEAVING_SEVERITY","SEVERITY","Weaving","Suggestions","suggestionIcon","moduleLink","style","cursor","scrollTo","message","suggestionContent","severity","weaves","ongoingCastEvent","leadingGcdEvent","trailingGcdEvent","badWeaves","playerFilter","clearWeave","autoAttack","isOgcd","saveIfBad","suggestions","TieredSuggestion","why","tiers","leadingTimestamp","gcdTimeDiff","weave","isBadWeave","weaveCount","isActive","recast","getMaxWeaves","matchClosestLower","ContributorLabel","props","contributor","detail","avatar","jobs","backgroundColor","colour","Color","isDark","color","Label","image","src","alt","PureComponent","About","args","Description","contributors","supportedPatches","fields","field","jobMeta","AVAILABLE_MODULES","console","warn","from","error","to","supported","patchSupported","edition","Header","NormalisedMessage","patch","user","text","displayMode","DisplayMode","ChangeLog","state","activeIndexes","handleClick","newIndexes","delete","setState","Accordion","changelog","dateString","date","toLocaleDateString","active","Changes","React","valueOf","Dummy","BrokenLog","Death","hook","foeIds","team","Team","onFoeDeath","death","getCount","removeEventHook","brokenLog","trigger","eventFormatters","registerEventFormatter","formatter","Error","getActorName","actorId","formatCause","cause","formatSourceModifier","modifier","SourceModifier","formatTargetModifier","TargetModifier","hideMinutesIfZero","sequence","t","amount","overkill","sourceModifier","targetModifier","overheal","hp","maximum","mp","position","x","y","targetable","rowHeight","EventsView","EventsViewComponent","useState","width","setWidth","bounds","children","measureRef","ref","onResize","contentRect","height","itemSize","itemCount","overscanCount","itemData","EventItem","secondPrecision","formatted","cx","Popup","on","Medicated","pot","pots","MEDICATED","onMedication","offMedication","endTime","stopAndSave","TRACKED_STATUSES","exclude","RaidBuffs","applications","timelineRows","settings","before","TRICK_ATTACK_VULNERABILITY_UP","MUG_VULNERABILITY_UP","statusFilter","getTargetApplications","endStatus","applyTime","rowId","items","Combos","ResourceGraphs","UnableToAct"],"sourceRoot":""}