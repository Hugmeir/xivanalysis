{"version":3,"file":"assets/jobs-war.8c328b47.js","mappings":"2LA0CKA,E,mWCzCL,EAA4L,0CAA5L,EAA6O,oC,qBDyCxOA,GAAAA,EAAAA,EAAAA,YAAAA,GAAAA,cAAAA,EAAAA,EAAAA,OAAAA,GAAAA,Q,EAAAA,IAAAA,EAAAA,CAAAA,IAKE,IAAMC,GAAb,iCAagCC,EAAAA,GAbhC,iCAciCC,EAAAA,GAdjC,iCAe4BC,EAAAA,GAf5B,iCAgBgCC,EAAAA,IAhBhC,uVAkBSC,aAAoC,GAlB7C,EAmBSC,UAAY,IAAI,KAnBzB,uCAsBC,SAAOC,GACN,OAAOC,KAAKC,OAAO,CAACC,QAAS,CAACH,IAC9B,GAxBF,wBA0BC,WAAsB,gBAECC,KAAKG,YAAsCC,MAF5C,IAErB,2BAAuE,KAA5DC,EAA4D,QAChEC,EAAiBN,KAAKO,cAAcF,GAC1CL,KAAKH,aAAaW,KAAKF,GACvBN,KAAKC,OAAOK,EACZ,CANoB,+BAQrBN,KAAKS,aAAa,WAAYT,KAAKU,WACnC,GAnCF,wBAqCC,WAAqB,eAEdC,EAAkB,IAAI,KAFR,UAKCX,KAAKH,cALN,IAKpB,2BAAwC,KAA7BQ,EAA6B,QACjCO,EAAMZ,KAAKC,OAAOI,GACxBL,KAAKa,YAAYD,EAAKP,GACtBA,EAAOH,QAAQY,SAAQ,SAAAC,GAAS,OAC/B,EAAKC,UAAUC,OAAOF,GAAWD,SAAQ,SAAAI,GAAK,OAAIP,EAAgBQ,IAAID,EAAxB,GADf,GAGhC,CAXmB,+BAcpB,MAAAlB,KAAKgB,UAAUI,aAAf,QACS,SAAAF,GAAK,OAAKP,EAAgBU,IAAIH,EAAzB,IACZJ,SAAQ,SAAAI,GACR,IAAMb,EAAS,CAACH,QAAS,CAACgB,IACpBN,EAAM,EAAKX,OAAOI,GACxB,EAAKQ,YAAYD,EAAKP,EACtB,GACF,GA1DF,2BA4DC,SAAsBA,GAErB,IAAIiB,EAAcjB,EAIlB,OAH2B,YAAvB,OAAOiB,IAA4BC,MAAMC,QAAQF,MACpDA,EAAc,CAACpB,QAASoB,KAEzB,kBACIA,GADJ,IAECpB,SAASuB,EAAAA,EAAAA,IAAYH,EAAYpB,UAElC,GAtEF,oBAwEC,SAAeG,GAA2B,eAEnCY,EAAS,MAAAZ,EAAOH,SAAP,QAAuB,SAAAa,GAAS,OAAI,EAAKC,UAAUC,OAAOF,EAA1B,IACzCW,EAAc,UAAAT,GAAM,KAANA,GACd,SAAAC,GAAK,OAAI,EAAKpB,UAAU6B,IAAIT,EAAvB,KADS,OAEbU,EAAAA,IACP,GAAmB,MAAfF,EACH,OAAOA,EAIR,IAKuC,EALjCG,EAAexB,EAAOH,QAAQ,GAC9B4B,EACe,MAAhBzB,EAAOyB,MAAwBzB,EAAOyB,MACrB,QAAjBD,GAAkC,SAAC,EAAAE,MAAD,CAAOC,GAAG,iCAAV,iBACV,iBAAjBH,EAAoC,EAAKI,KAAKC,QAAQL,GAAcM,KACnD,iBAAjBN,EAA6B,UAAO,EAAKb,UAAUoB,gBAAgBP,GAAc,UAApD,aAAO,EAAiD9B,OAAOoC,KAChGN,EAAaM,KAKfvB,EAAMZ,KAAKqC,SAASpC,OAAO,IAAIqC,EAAAA,GAAa,CACjDR,MAAAA,EACAS,MAAOlC,EAAOkC,MACdC,UAAU,KAIX,OAFAvB,EAAOH,SAAQ,SAAAI,GAAK,OAAI,EAAKpB,UAAU2C,IAAIvB,EAAON,EAA9B,IAEbA,CACP,GAtGF,yBAwGC,SAAoBA,EAApB,GAAqE,WAA7BV,EAA6B,EAA7BA,QAEvCF,KAAK0C,iBAAiB9B,EAAK,IAAAV,GAAO,KAAPA,GAAgB,SAAAa,GAAS,OAAI,EAAKC,UAAUoB,gBAAgBrB,EAAnC,KACpDf,KAAK2C,eAAe/B,EAAK,IAAAV,GAAO,KAAPA,GAAgB,SAAAa,GAAS,OAAI,EAAKC,UAAU4B,cAAc7B,EAAjC,IAClD,GA5GF,8BA8GC,SAAyBH,EAAmBiC,GAAiC,gBACxDA,GADwD,IAC5E,2BAA6B,KAAlBC,EAAkB,QACtBC,EAAW/C,KAAKgD,oBAAoBF,GAIpCG,EAAQH,EAAMG,MAAQjD,KAAKkD,OAAOC,KAAKC,UACvCC,EAAMJ,EAAQF,EACpBnC,EAAI0C,QAAQ,IAAIC,EAAAA,GAAW,CAC1BN,MAAAA,EACAI,IAAAA,EACAnD,SAAS,gBAAKsD,UCvKqH,4CDyKpI,CAb2E,+BAc5E,GA5HF,4BA8HC,SAAuB5C,EAAmBiC,GAA+B,gBACpDA,GADoD,IACxE,2BAA6B,KAAlBC,EAAkB,QACtBW,EAAOX,EAAMY,MAAQ,EACxB,IAAIC,EAAAA,GAAW,CAChBC,MAAOrE,EAAUsE,OACjBZ,MAAOH,EAAMM,UAAYpD,KAAKkD,OAAOC,KAAKC,UAC1CrD,OAAQ+C,EAAM/C,SAEb,IAAI+D,EAAe,CACpBF,MAAOrE,EAAUwE,YACjBd,MAAOH,EAAMM,UAAYpD,KAAKkD,OAAOC,KAAKC,YAE5CxC,EAAI0C,QAAQG,EACZ,CAbuE,+BAcxE,GA5IF,iCA8IC,SAA4BX,GAC3B,IAAIC,EAAWD,EAAMO,IAAMP,EAAMG,MAGjC,GAAIH,EAAMkB,YAAcC,EAAAA,EAAAA,QAA2B,OAC5CC,EAAQ,UAAGlE,KAAKkE,SAASC,UAAUrB,EAAM/C,OAAOiC,GAAIc,EAAMG,cAAlD,QAA4D,EAI1EF,EAAWqB,KAAKC,IAAItB,EAAUmB,EAzLV,IA0LpB,CAED,OAAOnB,CACP,KA3JF,GAAoCuB,EAAAA,IAApC,EACiBC,OAAS,iBAD1B,EAEiBC,OAAQ,EAFzB,EASQpE,KAAoB,CAC1B,CAACF,QAAS,MAAOqC,OAAQ,KAV3B,sCAaEkC,EAAAA,EAbF,iFAaqBP,QAbrB,uCAcEO,EAAAA,EAdF,iFAcqBzD,SAdrB,kCAeEyD,EAAAA,EAfF,iFAeqBxC,IAfrB,sCAgBEwC,EAAAA,EAhBF,iFAgBqBpC,QAhBrB,OA8JMyB,EAAAA,SAAAA,I,4LACLY,QAAU,kBACT,gBAAKlB,UAAWmB,EAAhB,UACC,SAACC,EAAA,EAAD,CAAMzC,KAAK,kBAAkBqB,UAAWmB,KAFhC,E,WADLb,CAAuBe,EAAAA,G,sQEtMvBC,EAAkB,KAgBHrF,GAAAA,EAAAA,QAAAA,SAAAA,cAGDE,EAAAA,GAAAA,EAAAA,QAAAA,SAAAA,cACYoF,EAAAA,GAAAA,EAAAA,EAAAA,SAAAA,I,uQAEvBC,UAAkC,G,EAClCC,QAAyB,K,2CAEjC,WAEC,IAAMC,GAAmBC,EAAAA,EAAAA,MACvBC,OAAOpF,KAAKkD,OAAOmC,MAAMrD,IACzBsD,OAAOtF,KAAKiC,KAAKsD,SAASC,UAAUxD,IAEtChC,KAAKS,aAAayE,EAAiBO,KAAK,eAAgBzF,KAAK0F,kBAC7D1F,KAAKS,aAAayE,EAAiBO,KAAK,gBAAiBzF,KAAK2F,kBAC9D,G,8BAED,WACC3F,KAAKiF,QAAUjF,KAAK4F,0BACpB,G,+BAED,WACC5F,KAAK6F,MAAM7F,KAAKiF,SAChBjF,KAAKiF,QAAU,IACf,G,+BAWD,SAAyB/C,EAA2B4D,GAA6F,IAAzE7C,EAAyE,uDAAzDjD,KAAKkD,OAAO6C,sBAAuB1C,EAAsB,uCAChJ,OAAOrD,KAAKyC,IAAI,CAACP,QAAAA,EAAS4D,WAAAA,EAAY7C,MAAAA,EAAOI,IAAAA,EAAKoC,KAAM,OAAQO,aAAc,QAC9E,G,sCASD,WAA4I,IAA5G9D,EAA4G,uDAAhF,MAAOe,EAAyE,uDAAzDjD,KAAKkD,OAAO6C,sBAAuB1C,EAAsB,uCAC3I,OAAOrD,KAAKiG,wBAAwB/D,EAAS,EAAG,OAAQe,EAAOI,EAC/D,G,qCAWD,SAA+BnB,EAA2B4D,GAAsI,IAAlHE,EAAkH,uDAAjF,OAAQ/C,EAAyE,uDAAzDjD,KAAKkD,OAAO6C,sBAAuB1C,EAAsB,uCAC/L,OAAOrD,KAAKyC,IAAI,CAACP,QAAAA,EAAS4D,WAAAA,EAAYE,aAAAA,EAAc/C,MAAAA,EAAOI,IAAAA,EAAKoC,KAAM,cACtE,G,iBACD,SAAYK,GAGX,OAFkB9F,KAAKgF,UAAUxE,KAAKsF,GAEnB,CACnB,G,mBAOD,SAAa9D,GAAwE,IAArDoB,EAAqD,uDAAzCpD,KAAKkD,OAAO6C,sBACvD,GAAU,MAAN/D,EAAJ,CACA,IAAMkE,EAAKlG,KAAKgF,UAAUhD,GACrBkE,IACLA,EAAG7C,IAAMD,EAHiB,CAI1B,G,sBAOD,SAAgB+C,GACf,OAAOnG,KAAKmE,UAAUgC,EAAMpG,OAAQoG,EAAM/C,UAC1C,G,4BAOD,SAAsB+C,GACrB,OAAOnG,KAAKoG,gBAAgBD,EAAMpG,OAAQoG,EAAM/C,UAChD,G,uBAQD,SAAiBiD,GAA6F,IAA3EjD,EAA2E,uDAAvDpD,KAAKkD,OAAO6C,sBAClE,OAAO/F,KAAKsG,gBAAgBD,EAAUjD,EACtC,G,6BAQD,SAAuBiD,GAA6F,IAA3EjD,EAA2E,uDAAvDpD,KAAKkD,OAAO6C,sBACxE,OAAO/F,KAAKsG,gBAAgBD,EAAUjD,EAAW,SACjD,G,6BASD,SAAwBiD,GAAkI,MAAhHjD,EAAgH,uDAA5FpD,KAAKkD,OAAO6C,sBAAuBQ,EAAyD,uDAA5B,OAEvHC,EAAgB,MAAAxG,KAAKgF,WAAL,QAAsB,SAAAkB,GAAE,aAC7B,QAAfA,EAAGhE,SAAqB,MAAAgE,EAAGhE,SAAH,OAAoBmE,KAC7CH,EAAGjD,OAASG,IACD,MAAV8C,EAAG7C,KAAe6C,EAAG7C,KAAOD,KACR,SAApB8C,EAAGF,cAA2BE,EAAGF,eAAiBO,EAJN,IAOxCxG,EAASC,KAAKiC,KAAKwE,UAAUJ,GACnC,GAAc,MAAVtG,EAAJ,CAGA,IAAI2G,EAA2B,WAAbH,EACM,MAApBxG,EAAO4G,UAAoB5G,EAAO4G,UAAY5G,EAAO6G,SACtD7G,EAAOmE,SAGV,GAAmB,MAAfwC,GAAoC,WAAbH,GAAyBG,GAAe5B,EAClE,OAAO4B,EAGqB,MAAzB3G,EAAO8G,iBACVH,EAAc1G,KAAK8G,iBAAiBC,oBAAoB,CACvDhE,SAAU2D,EACVM,UAAWjH,EAAO8G,kBAIpB,IAAII,EAAc,EACdC,EAAa,EACbC,EAAqB,EAEzBX,EAAc1F,SAAQ,SAAAoF,GACL,SAAZA,EAAGT,MAEFS,EAAGJ,WAAa,GAAKI,EAAGJ,WAAamB,IACxCA,EAAgBf,EAAGJ,YAGhBI,EAAGJ,WAAa,GAAKI,EAAGJ,WAAaoB,IACxCA,EAAehB,EAAGJ,aAEG,eAAZI,EAAGT,OAEb0B,GAAwBjB,EAAGJ,WAE5B,IAGD,IAAMsB,EAAmBhD,KAAKC,IAAIqC,EAAcQ,EAAeD,EAAe,GAC9E,GAAiB,WAAbV,GAAyBa,GAAoBtC,EAEhD,OAAOA,EAGR,GAA6B,IAAzBqC,EAEH,OAAO,EAIR,IAAIE,EAAeD,EAAmBD,EAKtC,MAJiB,WAAbZ,IACHc,EAAejD,KAAKC,IAAIgD,EAAcvC,IAGA,GAAhCV,KAAKkD,MAAMD,EAAe,GAvDhC,CAgED,K,EAvM8BtC,CAJMT,EAAAA,IAAAA,EACrBC,OAAS,WAGMQ,EAHN,gCAExBN,EAAAA,EAAAA,GAAAA,C,6EAAWxC,I,8CACXwC,EAAAA,EAAAA,GAAAA,C,6EAAWqC,gB,8SCbAS,GAAb,iCAIqC5H,EAAAA,GAJrC,iCAKgD6H,EAAAA,GALhD,uRA0JSC,GAAK,SAACrE,GAAD,OAAuB,EAAKF,OAAOwE,qBAAqBtE,EAAW,EAAnE,EA1Jd,0CAaC,SACCuE,EACAC,GAEC,WADDC,EACC,uDADQ7H,KAAKkD,OAAOmC,MAGfC,EAAoC,iBAApBqC,EACnB3H,KAAKiC,KAAKsD,SAASoC,GACnBA,EAEGG,GAAUrG,EAAAA,EAAAA,IAAYmG,GAGtBG,EAAQ,IAAAD,GAAO,KAAPA,GAAgB,SAAA1C,GAAM,eAAI,EAAK4C,cAC5C5C,EADuC,oBAEvCA,EAAO6C,cAActG,IAAI2D,EAAOtD,WAFO,aAEvC,EAAqCL,IAAIkG,EAAO7F,WAFT,QAEgB,GAFpB,IAMpC,IAAA+F,GAAK,KAALA,GAAW,SAACG,EAAGC,GAAJ,OAAUD,EAAE9E,UAAY+E,EAAE/E,SAA1B,IAGX,IAlBC,EAkBKgF,EAAO,CAACC,OAAQ,EAAGzE,MAAO,EAAG0E,YAAa,GAlB/C,UAmBkBP,GAnBlB,IAmBD,2BAA0B,WAAfQ,EAAe,QACP,UAAdA,EAAKC,MACW,IAAfJ,EAAKxE,QACRwE,EAAKE,YAAcC,EAAKnF,WAEzBgF,EAAKxE,UAGLwE,EAAKxE,QACc,IAAfwE,EAAKxE,QACRwE,EAAKC,QAAUE,EAAKnF,UAAYgF,EAAKE,cAIvCtI,KAAKwE,MAAL,mCAAqBc,EAAOnD,KAA5B,aAAoCoG,EAAKC,KAAzC,gBAAoDxI,KAAKyH,GAAGc,EAAKnF,WAAjE,oBAAsFgF,EAAKxE,OAC3F,CAlCA,+BAoCD,OAAOwE,EAAKC,MACZ,GAtDF,2BAwDC,SAAsBjD,EAAeqD,GAEpC,IACIC,EACAC,EAJuD,EAErDZ,EAAgB,GAFqC,UAMvCU,GANuC,IAM3D,2BAA4B,KAEO,EAFxBtC,EAAiB,QAER,gBAAfA,EAAMV,KAMG,MAATiD,IAKJX,EAAMvH,KAAN,MAAAuH,GAAK,OAAS/H,KAAK4I,qBAClBxD,EACAsD,EAAMtF,UACN+C,EAAM/C,aAEPsF,OAAQG,IAfF,QAAL,EAAAH,SAAA,QAAAA,EAAUvC,GACVwC,EAAUxC,EAeX,CAzB0D,+BA4B3D,GAAa,MAATuC,EAAe,SAEZI,EAAc,UAAG9I,KAAKiC,KAAK8G,UAAUL,EAAMpD,eAA7B,aAAG,EAAmCvC,SACpDiG,EAA2B,MAAlBF,EACZ9I,KAAKkD,OAAO6C,sBACZ3B,KAAK6E,KAAI,UAACN,SAAD,QAAYD,GAAOtF,UAAY0F,EAAgB9I,KAAKkD,OAAO6C,uBAEvEgC,EAAMvH,KAAN,MAAAuH,GAAK,OAAS/H,KAAK4I,qBAClBxD,EACAsD,EAAMtF,UACN4F,IAED,CAED,OAAOjB,CACP,GAnGF,kCAqGC,SAA6B3C,EAAesD,EAAeM,GAC1D,IADkF,EAC9EE,EAAQ,CAACR,MAAAA,EAAOM,OAAAA,GACdG,EAAc,CAACD,GAGfE,EAAUpJ,KAAKqJ,gBAAgBC,WAAW,CAC/CrG,MAAOyF,EACPrF,IAAK2F,EACLO,YAAa,SAAAlE,GAAK,OAAIA,EAAMmE,OAASpE,EAAOoE,IAA1B,EAClBC,MAAO,CAAC,kBATyE,UAY7DL,GAZ6D,IAYlF,2BAA8B,eAEgC,MAQE,MAVrDM,EAAmB,QAE7B,GAAIA,EAAOzG,MAAQiG,EAAMR,OAASgB,EAAOrG,KAAO6F,EAAMR,MACrD1I,KAAKwE,MAAL,yCAA2BxE,KAAKyH,GAAGyB,EAAMR,OAAzC,aAAmD1I,KAAKyH,GAAGyB,EAAMF,QAAjE,kBAAiFhJ,KAAKyH,GAAGiC,EAAOrG,KAAhG,aAAwGrD,KAAKyH,GAAGyB,EAAMF,QAAtH,MAEAE,EAAMR,MAAQgB,EAAOrG,SAKtB,GAAIqG,EAAOzG,OAASiG,EAAMF,QAAUU,EAAOrG,IAAM6F,EAAMF,OACtDhJ,KAAKwE,MAAL,uCAAyBxE,KAAKyH,GAAGyB,EAAMR,OAAvC,aAAiD1I,KAAKyH,GAAGyB,EAAMF,QAA/D,kBAA+EhJ,KAAKyH,GAAGyB,EAAMR,OAA7F,aAAuG1I,KAAKyH,GAAGiC,EAAOzG,OAAtH,MAEAiG,EAAMF,OAASU,EAAOzG,WAKvB,KAAIyG,EAAOzG,MAAQiG,EAAMR,OAASgB,EAAOrG,IAAM6F,EAAMF,QAArD,CAIAhJ,KAAKwE,MAAL,+CAAqBxE,KAAKyH,GAAGyB,EAAMR,OAAnC,aAA6C1I,KAAKyH,GAAGyB,EAAMF,QAA3D,kBAA2EhJ,KAAKyH,GAAGyB,EAAMR,OAAzF,aAAmG1I,KAAKyH,GAAGiC,EAAOzG,OAAlH,gBAA+HjD,KAAKyH,GAAGiC,EAAOrG,KAA9I,aAAsJrD,KAAKyH,GAAGyB,EAAMF,QAApK,MAGA,IAAMW,EAAgBT,EACtBA,GAAQ,UAAIA,GACZC,EAAY3I,KAAK0I,GAEjBS,EAAcX,OAASU,EAAOzG,MAC9BiG,EAAMR,MAAQgB,EAAOrG,GAVpB,CAWD,CA3CiF,+BA8ClF,OAAO,IAAA8F,GAAW,KAAXA,GAAoB,SAAAD,GAAK,MAAI,CACnC,CAACV,KAAM,QAASpF,UAAW8F,EAAMR,OACjC,CAACF,KAAM,SAAUpF,UAAW8F,EAAMF,QAFH,GAIhC,KAvJF,GAA8B1E,EAAAA,IAA9B,EACiBC,OAAS,WAD1B,EAEiBC,OAAQ,EAFzB,kCAIEC,EAAAA,EAJF,iFAI8BxC,IAJ9B,6CAKEwC,EAAAA,EALF,iFAK8B4E,eAL9B,M,uJCZa7J,EAAb,+GAAoCoK,EAAAA,GAAvBpK,EACIY,KAAAA,IAAAA,EAAAA,IAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GACZwJ,EAAAA,EAAAA,MAAAA,CAGH,YACA,gBAGA,CAAC,WAAY,WACb,YAGA,YACA,UACA,gBACA,gBACA,mBACA,cACA,WAGA,eACA,WAGA,UACA,QAEA,WAGA,YACA,a,8CCjCWC,EAAb,yMACCC,eAAiB,EAAK7H,KAAKC,QAAQ6H,UAAUC,KAD9C,EAGCC,eAAiB,CAChB,CACCC,UAAW,EAAKjI,KAAKC,QAAQiI,gBAC7BC,UAAW,CAAC,EAAKnI,KAAKC,QAAQmI,aAC9BC,WAAY,GACV,CACFJ,UAAW,EAAKjI,KAAKC,QAAQqI,SAC7BH,UAAW,CAAC,EAAKnI,KAAKC,QAAQsI,aAC9BF,WAAY,GACV,CACFJ,UAAW,EAAKjI,KAAKC,QAAQ6H,UAC7BK,UAAW,CAAC,EAAKnI,KAAKC,QAAQuI,aAC9BH,WAAY,IAff,Y,SAAyBI,GCAZC,EAAb,yMACUb,eAAiB,EAAK7H,KAAKC,QAAQ0I,KAAKZ,KADlD,Y,SAA4Ba,GCAfC,EAAb,yMACoBC,kBAAoB,CACtC,EAAK9I,KAAKC,QAAQ8I,SAClB,EAAK/I,KAAKC,QAAQ+I,UAClB,EAAKhJ,KAAKC,QAAQgJ,cAClB,EAAKjJ,KAAKC,QAAQiJ,aAClB,EAAKlJ,KAAKC,QAAQkJ,cAClB,EAAKnJ,KAAKC,QAAQmJ,iBAClB,EAAKpJ,KAAKC,QAAQoJ,aARpB,Y,SAAgCC,G,qPCY1BC,GAAmB,CACxB,GAAIC,GAAAA,GAAAA,MACJ,GAAIA,GAAAA,GAAAA,OAGQC,IAAb,iCAG8BC,GAAAA,GAH9B,iCAImCC,GAAAA,IAJnC,qRAMSC,WAAa,EAAK1K,IAAI,IAAI2K,GAAAA,GAAa,CAC9CC,MAAO,CAACjK,MAAO,cAAekK,MAAOC,EAAAA,EAAAA,QAAAA,WAPvC,EAUSC,oBAAsB,IAAI,IAAJ,CAA+B,CAE5D,CAAC,EAAKjK,KAAKC,QAAQ0I,KAAK5I,GAAI,CAACmK,MAAO,KACpC,CAAC,EAAKlK,KAAKC,QAAQkK,WAAWpK,GAAI,CAACmK,MAAO,KAC1C,CAAC,EAAKlK,KAAKC,QAAQmK,YAAYrK,GAAI,CAACmK,MAAO,KAC3C,CAAC,EAAKlK,KAAKC,QAAQoK,gBAAgBtK,GAAI,CAACmK,MAAO,KAC/C,CAAC,EAAKlK,KAAKC,QAAQqK,UAAUvK,GAAI,CAACjC,OAAQ,KAE1C,CAAC,EAAKkC,KAAKC,QAAQsI,YAAYxI,GAAI,CAACjC,QAAS,KAC7C,CAAC,EAAKkC,KAAKC,QAAQqI,SAASvI,GAAI,CAACjC,QAAS,KAC1C,CAAC,EAAKkC,KAAKC,QAAQiI,gBAAgBnI,GAAI,CAACjC,QAAS,KACjD,CAAC,EAAKkC,KAAKC,QAAQmI,YAAYrI,GAAI,CAACjC,QAAS,OArB/C,2CAwBC,WAAsB,OACrB,0DAEA,IAAMyM,EAAe,IAAW,MAAAxM,KAAKkM,qBAAL,SAEhClM,KAAKS,cACJ0E,EAAAA,EAAAA,MACE0C,OAAO7H,KAAKkD,OAAOmC,MAAMrD,IACzByD,MAAKgH,EAAAA,EAAAA,IAAM,CAAC,SAAU,WACtB1M,QAAO0M,EAAAA,EAAAA,IAAMD,IACfxM,KAAK0M,iBAGN1M,KAAKS,aAAa,WAAYT,KAAKU,WACnC,GAtCF,6BAwCC,SAAwByF,GACvB,IAAMwG,EAAW3M,KAAKkM,oBAAoBvK,IAAIwE,EAAMpG,QAC9C6M,EAAc,IAAI,IAAJ,CAAsB,CACzC5M,KAAKiC,KAAKC,QAAQsI,YAAYxI,GAC9BhC,KAAKiC,KAAKC,QAAQqI,SAASvI,KAG5B,GAAgB,MAAZ2K,EAAkB,OAEjBE,EAAM,UAAGF,EAASxG,EAAMV,aAAlB,QAA2B,EAEpCzF,KAAK8M,OAAOC,QAAQC,UAAUhN,KAAKiC,KAAKsD,SAAS0H,cAAcjL,MAC3DhC,KAAKkD,OAAOgK,MAAMC,OAAO,QAAUP,EAAYvL,IAAI8E,EAAMpG,WAE7D8M,EAASzI,KAAKC,IAAIwI,EAAQ,IAG3B7M,KAAK6L,WAAWuB,OAAOP,EACvB,CACD,GA3DF,wBA6DC,WACC7M,KAAKqN,YAAYlM,IAAI,IAAImM,GAAAA,GAAiB,CACzCtD,KAAMhK,KAAKiC,KAAKC,QAAQqK,UAAUvC,KAClC9J,SAAS,UAAC,EAAA6B,MAAD,CAAOC,GAAG,qCAAV,gJAGTuL,KAAK,UAAC,EAAAxL,MAAD,CAAOC,GAAG,iCAAV,gEACHhC,KAAK6L,WAAW2B,WAElBC,MAAOjC,GACPkC,MAAO1N,KAAK6L,WAAW2B,UAExB,KAzEF,GAA2BG,GAAAA,IAA3B,EACiBC,MAAQ,8CADzB,oCAGEnJ,EAAAA,EAHF,iFAGqBqI,MAHrB,yCAIErI,EAAAA,EAJF,iFAIqB4I,WAJrB,O,0DCRMQ,GAAkC,CACvC,cACA,WACA,kBACA,eAKKC,GAAqB,CAC1B,EAAGrC,GAAAA,GAAAA,OAISsC,IAAb,iCAGiCrO,GAAAA,GAHjC,kPAiBUsO,aAAe,CAAC,CACxBC,WAAY,EAAKhM,KAAKsD,SAAS2I,cAC/BC,eAAgB,CAAC,EAAKlM,KAAKC,QAAQmI,YAAa,EAAKpI,KAAKC,QAAQiI,mBAnBpE,EAsBUiE,2BAA4B,EAtBtC,EAuBUC,6BAA8B,EAvBxC,EAyBUC,gBAAkB,EAAKrM,KAAKC,QAAQqK,UAAUvC,KAzBxD,EA0BUuE,yBAA2BT,GA1BrC,EA2BUU,oBAAqB,UAAC,EAAAzM,MAAD,CAAOC,GAAG,4CAAV,kHACd,UAAC,MAAD,CAAUsD,OAAO,mBAAwC,UAAC,MAAD,CAAUvF,OAAO,iBAAoB,UAAC,MAAD,CAAUA,OAAO,uBA5BhI,EA+BU0O,kBAAoB,EAAKxM,KAAKC,QAAQqK,UAAUvC,KA/B1D,EAgCU0E,2BAA6BZ,GAhCvC,EAiCUa,sBAAuB,UAAC,EAAA5M,MAAD,CAAOC,GAAG,gDAAV,6EACnB,UAAC,MAAD,CAAUjC,OAAO,eAAoC,UAAC,MAAD,CAAUuF,OAAO,qBAlCpF,2CAKC,WAAsB,YACrB,0DAEAtF,KAAKS,cACJ0E,EAAAA,EAAAA,MACE0C,OAAO7H,KAAKkD,OAAOmC,MAAMrD,IACzByD,KAAK,UACL1F,OAAOC,KAAKiC,KAAK2M,cAAcf,MACjC,wBAAM,SAAK7M,WAAL,OAAsB,YApBT,IAoBnB,GAED,KAfF,GAA+B6N,GAAAA,GAA/B,EACiBtK,OAAS,YAD1B,uCAGEE,EAAAA,EAHF,iFAGqBzD,SAHrB,O,oHCRM8N,GAA0B,CAC/B,cACA,mBAGKC,GAAyB,CAC9B,cACA,YAUYC,IAAb,iCAIyBC,GAAAA,IAJzB,iCAKoBtP,GAAAA,GALpB,iCAM2BiM,GAAAA,IAN3B,yTAQkBsD,cARlB,UAQkC,EAAKjN,KAAKsD,SAAS0H,cAAciC,qBARnE,QAnB0B,EAmB1B,EAUSnC,aAVT,IAWSlK,QAA2B,GAXpC,EAaSsM,eAbT,6CAeC,WACC,IAAMC,GAAejK,EAAAA,EAAAA,MAAgB0C,OAAO7H,KAAKkD,OAAOmC,MAAMrD,IAG9DhC,KAAKS,aAAa2O,EAAa3J,KAAK,eAAeH,OAAOtF,KAAKiC,KAAKsD,SAAS0H,cAAcjL,IAAKhC,KAAKqP,QACrGrP,KAAKS,aAAa2O,EAAa3J,KAAK,gBAAgBH,OAAOtF,KAAKiC,KAAKsD,SAAS0H,cAAcjL,IAAKhC,KAAKsP,QAEtGtP,KAAKS,aAAa,WAAYT,KAAKU,WACnC,GAvBF,oBAyBC,SAAeyF,GAA+B,MAE7C,GAAoB,MAAhBnG,KAAK+M,QAAT,CAEA,IAAMhN,EAASC,KAAKiC,KAAKwE,UAAUN,EAAMpG,QAG3B,MAAVA,GAAkB,UAAEA,EAAOwP,aAAT,UAGE,MAApBvP,KAAK+M,QAAQ1J,KAChBrD,KAAK+M,QAAQyC,MAAMhP,KAAKT,EAAOiC,GATI,CAWpC,GAtCF,oBAwCC,SAAemE,GAEd,GAAoB,MAAhBnG,KAAK+M,QAAiB,CACzB/M,KAAK+M,QAAU,CAAC9J,MAAOkD,EAAM/C,UAAWoM,MAAO,GAAIC,SAAS,GAE5DzP,KAAK+M,QAAQ0C,QAAUzP,KAAKiC,KAAKsD,SAAS0H,cAAclK,UAAa/C,KAAKkD,OAAOC,KAAKC,UAAYpD,KAAKkD,OAAOC,KAAKJ,SAAYoD,EAAM/C,UAGrI,IAAMgM,GAAejK,EAAAA,EAAAA,MAAgB0C,OAAO7H,KAAKkD,OAAOmC,MAAMrD,IAC9DhC,KAAKmP,UAAYnP,KAAKkD,OAAOgK,MAAMC,OAAO,OACvCnN,KAAKS,aAAa2O,EAAa3J,KAAK,UAAWzF,KAAK0P,QACpD1P,KAAKS,aACN2O,EACE3J,KAAK,UACL1F,OAAOC,KAAKiC,KAAK2M,cAAcG,KACjC/O,KAAK0P,OACP,CACD,GAzDF,oBA2DC,SAAevJ,GACdnG,KAAK2P,YAAYxJ,EAAM/C,UACvB,GA7DF,yBA+DC,WAA+E,IAA3DwM,EAA2D,uDAAzC5P,KAAKkD,OAAO6C,sBAC7B,MAAhB/F,KAAK+M,UACR/M,KAAK+M,QAAQ1J,IAAMuM,EAEnB5P,KAAK6C,QAAQrC,KAAKR,KAAK+M,SAED,MAAlB/M,KAAKmP,YACRnP,KAAK6P,gBAAgB7P,KAAKmP,WAC1BnP,KAAKmP,eAAYtG,IAInB7I,KAAK+M,aAAUlE,CACf,GA5EF,wBA8EC,WAAqB,iBAEpB7I,KAAK2P,YAAY3P,KAAKkD,OAAOC,KAAKC,UAAYpD,KAAKkD,OAAOC,KAAKJ,UAG/D,IAAM+M,EAAoB,OAAA9P,KAAK6C,SAAL,QAAoB,SAAAkN,GAAO,OAAKA,EAAQN,OAAb,IAI/CO,EAAa,KAAAF,GAAiB,KAAjBA,GAAyB,SAACG,EAAOlD,GAAR,aAAoBkD,EAAQ7L,KAAKC,IAAI,EAAI,EAAK6K,cAAgB,OAAAnC,EAAQyC,OAAR,QAAqB,SAAAxN,GAAE,OAAIA,IAAO,EAAKC,KAAKC,QAAQgO,YAAYlO,EAAzC,IAA6CmO,OAAlI,GAA4I,GAClLC,EAAcN,EAAkBK,OAASnQ,KAAKkP,cAC9CmB,EAAcrQ,KAAKsQ,eAAeF,EAAaJ,GAsBrD,GApBAhQ,KAAKuQ,UAAUpP,IAAI,IAAIqP,GAAAA,GAAK,CAC3BrO,MAAM,UAAC,EAAAJ,MAAD,CAAOC,GAAG,kCAAV,0CAGNyO,aAAa,UAAC,EAAA1O,MAAD,CAAOC,GAAG,yCAAV,iIAC+BhC,KAAKkP,eADpC,aACZ,UAAC,MAAD,CAAUnP,OAAO,mBAA+D,UAAC,MAAD,CAAUA,OAAO,iBAAoB,UAAC,MAAD,CAAUA,OAAO,gBAGvIqF,OAAQ,IACRsL,aAAc,CACb,IAAIC,GAAAA,GAAY,CACfxO,MAAM,UAAC,EAAAJ,MAAD,CAAOC,GAAG,8CAAV,yCACL,UAAC,MAAD,CAAUjC,OAAO,qBAElB6Q,gBAAiB,sBAAGR,EAAcJ,EAAnB,eAAmCI,EAAnC,cAAmDC,EAAnD,MACfQ,QAASR,QAKRrQ,KAAKkD,OAAOgK,MAAMC,OAAO,OAAQ,OAE9B2D,EAAY,KAAAhC,IAAU,KAAVA,IAAe,SAAAiC,GAAS,OAAI,EAAK9O,KAAKC,QAAQ6O,GAAW/O,EAAjC,IACpCgP,EAAW,KAAAjC,IAAS,KAATA,IAAc,SAAAgC,GAAS,OAAI,EAAK9O,KAAKC,QAAQ6O,GAAW/O,EAAjC,IAGlCiP,EAAU,OAAAjR,KAAK6C,SAAL,QAAoB,SAACoN,EAAOlD,GAAR,OAAoBkD,GAAS,EAAKf,cAAgB,EAAKgC,YAAYnE,EAASiE,GAA5E,GAAwF,GACtHG,EAAc,KAAArB,GAAiB,KAAjBA,GAAyB,SAACG,EAAOlD,GAAR,OAAoBkD,EAAQ,EAAKiB,YAAYnE,EAAS+D,EAAtD,GAAkE,GAE/G9Q,KAAKqN,YAAYlM,IAAI,IAAImM,GAAAA,GAAiB,CACzCtD,KAAMhK,KAAKiC,KAAKC,QAAQsI,YAAYR,KACpC9J,SAAS,UAAC,EAAA6B,MAAD,CAAOC,GAAG,oCAAV,2IACS,UAAC,MAAD,CAAUjC,OAAO,mBAAuC,UAAC,MAAD,CAAUA,OAAO,iBAAuC,UAAC,MAAD,CAAUA,OAAO,gBAEnJ0N,MAAO,CACN,EAAGhC,GAAAA,GAAAA,OAEJiC,MAAOuD,EACP1D,KAAK,UAAC,EAAAxL,MAAD,CAAOC,GAAG,gCAAV,qFACWiP,QAAAA,GADX,aACwD,UAAC,MAAD,CAAUG,UAAU,EAAO9L,OAAO,wBAIhGtF,KAAKqN,YAAYlM,IAAI,IAAImM,GAAAA,GAAiB,CACzCtD,KAAMhK,KAAKiC,KAAKC,QAAQmI,YAAYL,KACpC9J,SAAS,UAAC,EAAA6B,MAAD,CAAOC,GAAG,wCAAV,yLACI,UAAC,MAAD,CAAUjC,OAAO,iBAAmB,UAAC,MAAD,CAAUA,OAAO,qBAA8B,UAAC,MAAD,CAAUuF,OAAO,mBAA0H,UAAC,MAAD,CAAU8L,UAAU,EAAO9L,OAAO,qBAE7QmI,MAAO,CACN,EAAGhC,GAAAA,GAAAA,OAEJiC,MAAOyD,EACP5D,KAAK,UAAC,EAAAxL,MAAD,CAAOC,GAAG,oCAAV,qJAC8GmP,YAAAA,GAD9G,aAC4D,UAAC,MAAD,CAAU7L,OAAO,mBAA+E,UAAC,MAAD,CAAUvF,OAAO,iBAAmB,UAAC,MAAD,CAAUA,OAAO,yBAGvN,CACD,GApJF,yBAsJC,SAAoBsR,EAAuBC,GAC1C,IADmF,EAC/EC,EAAQ,EACRC,EAAO,EAFwE,WAKlEH,EAAO7B,OAL2D,IAKnF,2BAA+B,KAApBxN,EAAoB,QAC9B,GAAIA,IAAOhC,KAAKiC,KAAKC,QAAQgO,YAAYlO,KACrC,KAAAsP,GAAU,KAAVA,EAAoBtP,IAAOwP,MAC/BD,GAEavR,KAAKkP,eAAiB,KACnC,CAXkF,+BAcnF,OAAO9K,KAAK6E,IAAIjJ,KAAKkP,cAAesC,EACpC,GArKF,4BAuKC,SAAepM,EAAgBqM,GAG9B,QAFarM,EAASqM,GAENrM,EAAU,KAAKsM,QAAQ,EACvC,KA3KF,GAAkCpN,GAAAA,IAAlC,EACiBC,OAAS,KAD1B,EAEiBqJ,MAAQ,6CAFzB,uCAIEnJ,EAAAA,EAJF,iFAIa8L,SAJb,kCAKE9L,EAAAA,EALF,iFAKaxC,IALb,yCAMEwC,EAAAA,EANF,iFAMa4I,WANb,OChCasE,GAAb,yMACCC,WAAa,CACZ,CACC5Q,UAAW,CAAC,EAAKiB,KAAKC,QAAQqK,WAE9BsF,eAAgB,KAChBC,QAAS,CACR5P,QAAS,CACR,EAAKD,KAAKC,QAAQsI,YAClB,EAAKvI,KAAKC,QAAQqI,SAClB,EAAKtI,KAAKC,QAAQiI,gBAClB,EAAKlI,KAAKC,QAAQmI,aAEnB0H,aAAc,MAIhB,CACC/Q,UAAW,CAAC,EAAKiB,KAAKC,QAAQ+K,eAE9B+E,uBAAwB,KAExBH,eAAgB,MAGjB,CACC7Q,UAAW,CACV,EAAKiB,KAAKC,QAAQ+P,SAClB,EAAKhQ,KAAKC,QAAQgQ,SAGnBL,eAAgB,OAGjB,CACC7Q,UAAW,CACV,EAAKiB,KAAKC,QAAQiQ,WAGnBN,eAAgB,QAvCnB,Y,SAAkCO,GCI5BC,GAAgB,CACrB,EAAG5G,GAAAA,GAAAA,OAGS6G,GAAb,yMAGUtE,aAAe,CAAC,CACxBC,WAAY,EAAKhM,KAAKsD,SAASgN,kBAC/BpE,eAAgB,CAAC,EAAKlM,KAAKC,QAAQgO,eALrC,EAQU9B,2BAA4B,EARtC,EAUUE,gBAAkB,EAAKrM,KAAKC,QAAQgO,YAAYlG,KAV1D,EAWUuE,yBAA2B8D,GAXrC,EAYU7D,oBAAqB,UAAC,EAAAzM,MAAD,CAAOC,GAAG,6CAAV,sGACd,UAAC,MAAD,CAAUsD,OAAO,uBAA2C,UAAC,MAAD,CAAUvF,OAAO,mBAb9F,EAeUyS,gBAAiB,UAAC,EAAAzQ,MAAD,CAAOC,GAAG,yCAAV,8EACuC,EAAKyQ,cAD5C,aACzB,UAAC,MAAD,CAAUnN,OAAO,yBAhBnB,YAAgCuJ,GAAAA,GAAnByD,GACI/N,OAAS,a,6DCDbmO,IAAb,kCAG8B/G,GAAAA,GAH9B,kCAIiCsD,GAAAA,IAJjC,kCAKuCzH,GAAAA,GALvC,kCAMgCD,GAAAA,GANhC,+YAQC,WACCvH,KAAKS,aAAa,WAAYT,KAAKU,WACnC,GAVF,wBAYC,WAAmB,WAClBV,KAAKuQ,UAAUpP,IAAI,IAAIqP,GAAAA,GAAK,CAC3BrO,MAAM,UAAC,EAAAJ,MAAD,CAAOC,GAAG,oCAAV,qCACNyO,aAAa,UAAC,EAAA1O,MAAD,CAAOC,GAAG,2CAAV,8FACboD,OAAQ,GACRsL,aAAc,CACb,IAAIC,GAAAA,GAAY,CACfxO,MAAM,UAAC,EAAAJ,MAAD,CAAOC,GAAG,sCAAV,oCAAgD,UAAC,MAAD,CAAUsD,OAAO,uBACvEuL,QAAS,kBAAM,EAAK8B,kBAAX,OAIZ,GAxBF,8BA0BC,WAIC,OAHqB3S,KAAKuF,SAASqN,UAAU,kBAAmB5S,KAAK8M,OAAO+F,UACxD7S,KAAKkD,OAAO4P,gBAAkB9S,KAAKqJ,gBAAgB0J,YAAY,CAACtJ,MAAO,CAAC,mBAEtD,GACtC,KA/BF,GAAoCnF,GAAAA,IAApC,GACiBC,OAAS,iBAD1B,wCAGEE,EAAAA,EAHF,kFAGqBqI,MAHrB,yCAIErI,EAAAA,EAJF,kFAIqB8L,SAJrB,+CAKE9L,EAAAA,EALF,kFAKqB4E,eALrB,wCAME5E,EAAAA,EANF,kFAMqBc,QANrB,QCCA,IACC/F,EACAqK,EACAc,EACAG,EACAY,GACAqC,GACAiB,GACA2C,GACAW,GACAI,G","sources":["webpack://@xivanalysis/client/./src/parser/core/modules/ActionTimeline/ActionTimeline.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/ActionTimeline/ActionTimeline.module.css?2f05","webpack://@xivanalysis/client/./src/parser/core/modules/CastTime.ts","webpack://@xivanalysis/client/./src/parser/core/modules/Statuses.ts","webpack://@xivanalysis/client/./src/parser/jobs/war/modules/ActionTimeline.ts","webpack://@xivanalysis/client/./src/parser/jobs/war/modules/AoE.ts","webpack://@xivanalysis/client/./src/parser/jobs/war/modules/Combos.ts","webpack://@xivanalysis/client/./src/parser/jobs/war/modules/Defensives.ts","webpack://@xivanalysis/client/./src/parser/jobs/war/modules/Gauge.tsx","webpack://@xivanalysis/client/./src/parser/jobs/war/modules/Infuriate.tsx","webpack://@xivanalysis/client/./src/parser/jobs/war/modules/InnerRelease.tsx","webpack://@xivanalysis/client/./src/parser/jobs/war/modules/OGCDDowntime.ts","webpack://@xivanalysis/client/./src/parser/jobs/war/modules/PrimalRend.tsx","webpack://@xivanalysis/client/./src/parser/jobs/war/modules/SurgingTempest.tsx","webpack://@xivanalysis/client/./src/parser/jobs/war/modules/index.ts"],"sourcesContent":["import {Trans} from '@lingui/react'\nimport {Action, ActionKey} from 'data/ACTIONS'\nimport {Analyser} from 'parser/core/Analyser'\nimport {dependency} from 'parser/core/Injectable'\nimport CastTime from 'parser/core/modules/CastTime'\nimport {ChargeHistoryEntry, CooldownEndReason, CooldownGroup, CooldownHistoryEntry, Cooldowns, SelectionSpecifier} from 'parser/core/modules/Cooldowns'\nimport {Data} from 'parser/core/modules/Data'\nimport {ActionItem, BaseItem, ContainerRow, SimpleItem, Timeline} from 'parser/core/modules/Timeline'\nimport React, {ReactNode} from 'react'\nimport {Icon} from 'semantic-ui-react'\nimport {ensureArray, isDefined} from 'utilities'\nimport styles from './ActionTimeline.module.css'\n\nconst ANIMATION_LOCK = 100\n\n// We're excluding the Action interface as it's unessecary for this config format, and complicates the discrimination later.\ntype RowSpecifierEntry = Exclude<SelectionSpecifier, Action>\n\n/**\n * One or more actions, action keys, or cooldown group IDs. The special-case\n * value \"GCD\" is available for selection of the GCD cooldown group.\n */\nexport type RowSpecifier = RowSpecifierEntry | RowSpecifierEntry[]\n\n/** Advanced configuration options for a row. */\nexport interface ActionRowConfig {\n\t/** Specifier(s) for items that should be displayed in this row. */\n\tcontent: RowSpecifier\n\t/** Label to display for the row. */\n\tlabel?: ReactNode\n\t/** Order of the row within the timeline. */\n\torder?: number\n}\n\n/** Configuration for a single row. */\nexport type ActionRow = RowSpecifier | ActionRowConfig\n\n// Internal row config used within the module\ntype InternalRowConfig =\n\t& Omit<ActionRowConfig, 'content'>\n\t& {content: readonly SelectionSpecifier[]}\n\nenum ItemDepth {\n\tCHARGE_GAIN = 0,\n\tACTION = 1,\n}\n\nexport class ActionTimeline extends Analyser {\n\tstatic override handle = 'actionTimeline'\n\tstatic override debug = false\n\n\t/**\n\t * Configuration for the rows generated by this module. Any cooldown groups\n\t * not represented in this configuration will be added to automatically\n\t * generated rows in order of use.\n\t */\n\tstatic rows: ActionRow[] = [\n\t\t{content: 'GCD', order: -97},\n\t]\n\n\t@dependency private castTime!: CastTime\n\t@dependency private cooldowns!: Cooldowns\n\t@dependency private data!: Data\n\t@dependency private timeline!: Timeline\n\n\tprivate resolvedRows: InternalRowConfig[] = []\n\tprivate groupRows = new Map<CooldownGroup, ContainerRow>()\n\n\t/** Retrieve the timeline row representing the specified action. */\n\tgetRow(action: ActionKey | Action) {\n\t\treturn this.addRow({content: [action]})\n\t}\n\n\toverride initialise() {\n\t\t// Add rows for all the configured entries\n\t\tfor (const config of (this.constructor as typeof ActionTimeline).rows) {\n\t\t\tconst resolvedConfig = this.resolveConfig(config)\n\t\t\tthis.resolvedRows.push(resolvedConfig)\n\t\t\tthis.addRow(resolvedConfig)\n\t\t}\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onComplete() {\n\t\t// Track the groups with configured rows so backfill doesn't duplicate\n\t\tconst populatedGroups = new Set<number>()\n\n\t\t// Add rows for all the configured entries\n\t\tfor (const config of this.resolvedRows) {\n\t\t\tconst row = this.addRow(config)\n\t\t\tthis.populateRow(row, config)\n\t\t\tconfig.content.forEach(specifier =>\n\t\t\t\tthis.cooldowns.groups(specifier).forEach(group => populatedGroups.add(group))\n\t\t\t)\n\t\t}\n\n\t\t// Figure out what groups have not been explicitly configured and build rows for them\n\t\tthis.cooldowns.allGroups()\n\t\t\t.filter(group => !populatedGroups.has(group))\n\t\t\t.forEach(group => {\n\t\t\t\tconst config = {content: [group]}\n\t\t\t\tconst row = this.addRow(config)\n\t\t\t\tthis.populateRow(row, config)\n\t\t\t})\n\t}\n\n\tprivate resolveConfig(config: ActionRow): InternalRowConfig {\n\t\t// Standardise the simple config into the main config shape\n\t\tlet finalConfig = config\n\t\tif (typeof finalConfig !== 'object' || Array.isArray(finalConfig)) {\n\t\t\tfinalConfig = {content: finalConfig}\n\t\t}\n\t\treturn {\n\t\t\t...finalConfig,\n\t\t\tcontent: ensureArray(finalConfig.content),\n\t\t}\n\t}\n\n\tprivate addRow(config: InternalRowConfig) {\n\t\t// If there's already a row for one of the specifiers, use it\n\t\tconst groups = config.content.flatMap(specifier => this.cooldowns.groups(specifier))\n\t\tconst existingRow = groups\n\t\t\t.map(group => this.groupRows.get(group))\n\t\t\t.find(isDefined)\n\t\tif (existingRow != null) {\n\t\t\treturn existingRow\n\t\t}\n\n\t\t// Using an IIFE because pattern matching isn't in the spec yet\n\t\tconst firstContent = config.content[0]\n\t\tconst label = (() => {\n\t\t\tif (config.label != null) { return config.label }\n\t\t\tif (firstContent === 'GCD')  { return <Trans id=\"core.action-timeline.label.gcd\">GCD</Trans> }\n\t\t\tif (typeof firstContent === 'string') { return this.data.actions[firstContent].name }\n\t\t\tif (typeof firstContent === 'number') { return this.cooldowns.cooldownHistory(firstContent)[0]?.action.name }\n\t\t\treturn firstContent.name\n\t\t})()\n\n\t\t// Build the row and save it to the groups for this config\n\t\t// TODO: collision handling?\n\t\tconst row = this.timeline.addRow(new ContainerRow({\n\t\t\tlabel,\n\t\t\torder: config.order,\n\t\t\tcollapse: true,\n\t\t}))\n\t\tgroups.forEach(group => this.groupRows.set(group, row))\n\n\t\treturn row\n\t}\n\n\tprivate populateRow(row: ContainerRow, {content}: InternalRowConfig) {\n\t\t// Add all the items\n\t\tthis.addCooldownItems(row, content.flatMap(specifier => this.cooldowns.cooldownHistory(specifier)))\n\t\tthis.addChargeItems(row, content.flatMap(specifier => this.cooldowns.chargeHistory(specifier)))\n\t}\n\n\tprivate addCooldownItems(row: ContainerRow, history: CooldownHistoryEntry[]) {\n\t\tfor (const entry of history) {\n\t\t\tconst duration = this.getCooldownDuration(entry)\n\n\t\t\t// TODO: with the adjusted cast time we might get some overlaps, should we try to avoid that?]\n\t\t\t// TODO: Add interrupt visuals. CD2 only records interrupts within the bounds of a cooldown, so we'll need to track it in some manner for long-cast actions.\n\t\t\tconst start = entry.start - this.parser.pull.timestamp\n\t\t\tconst end = start + duration\n\t\t\trow.addItem(new SimpleItem({\n\t\t\t\tstart,\n\t\t\t\tend,\n\t\t\t\tcontent: <div className={styles.cooldown}/>,\n\t\t\t}))\n\t\t}\n\t}\n\n\tprivate addChargeItems(row: ContainerRow, history: ChargeHistoryEntry[]) {\n\t\tfor (const entry of history) {\n\t\t\tconst item = entry.delta < 0\n\t\t\t\t? new ActionItem({\n\t\t\t\t\tdepth: ItemDepth.ACTION,\n\t\t\t\t\tstart: entry.timestamp - this.parser.pull.timestamp,\n\t\t\t\t\taction: entry.action,\n\t\t\t\t})\n\t\t\t\t: new ChargeGainItem({\n\t\t\t\t\tdepth: ItemDepth.CHARGE_GAIN,\n\t\t\t\t\tstart: entry.timestamp - this.parser.pull.timestamp,\n\t\t\t\t})\n\t\t\trow.addItem(item)\n\t\t}\n\t}\n\n\tprivate getCooldownDuration(entry: CooldownHistoryEntry) {\n\t\tlet duration = entry.end - entry.start\n\n\t\t// If the cooldown expired naturally, it _may_ have a cast time greater than its cooldown.\n\t\tif (entry.endReason === CooldownEndReason.EXPIRED) {\n\t\t\tconst castTime = this.castTime.forAction(entry.action.id, entry.start) ?? 0\n\n\t\t\t// We add the animation lock constant to the cast time to mimic the game's\n\t\t\t// behaviour - also sometimes known as \"caster tax\".\n\t\t\tduration = Math.max(duration, castTime + ANIMATION_LOCK)\n\t\t}\n\n\t\treturn duration\n\t}\n}\n\nclass ChargeGainItem extends BaseItem {\n\tContent = () => (\n\t\t<div className={styles.chargeGain}>\n\t\t\t<Icon name=\"angle double up\" className={styles.icon}/>\n\t\t</div>\n\t)\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"backgroundColour\":\"rgba(213, 221, 246, .4)\",\"chargeColor\":\"color(rgba(213, 221, 246, .4) a(100%) l(-20%))\",\"cooldown\":\"ActionTimeline-module_cooldown__3u1x3\",\"chargeGain\":\"ActionTimeline-module_chargeGain__3-Of9\",\"icon\":\"ActionTimeline-module_icon__8OvsF\"};","import {Event, Events} from 'event'\nimport {Analyser} from '../Analyser'\nimport {filter} from '../filter'\nimport {dependency} from '../Injectable'\nimport {Data} from './Data'\nimport {SpeedAdjustments} from './SpeedAdjustments'\n\nconst MIN_RECAST_TIME = 1500\n\ntype AffectsWhichTime =\n\t| 'cast'\n\t| 'recast'\n\t| 'both'\n\nexport interface CastTimeAdjustment {\n\tactions: number[] | 'all',\n\ttype: 'time' | 'percentage'\n\tadjustment: number,\n\taffectsWhich: AffectsWhichTime,\n\tstart: number,\n\tend?: number\n}\n\nexport default class CastTime extends Analyser {\n\tstatic override handle = 'castTime'\n\n\t@dependency data!: Data\n\t@dependency speedAdjustments!: SpeedAdjustments\n\n\tprivate castTimes: CastTimeAdjustment[] = []\n\tprivate scIndex: number | null = null\n\n\toverride initialise() {\n\t\t// Only going to deal with SC here, job-specific can do it themselves\n\t\tconst switftCastFilter = filter<Event>()\n\t\t\t.target(this.parser.actor.id)\n\t\t\t.status(this.data.statuses.SWIFTCAST.id)\n\n\t\tthis.addEventHook(switftCastFilter.type('statusApply'), this.onApplySwiftcast)\n\t\tthis.addEventHook(switftCastFilter.type('statusRemove'), this.onRemoveSwiftcast)\n\t}\n\n\tprivate onApplySwiftcast(): void {\n\t\tthis.scIndex = this.setInstantCastAdjustment()\n\t}\n\n\tprivate onRemoveSwiftcast(): void {\n\t\tthis.reset(this.scIndex)\n\t\tthis.scIndex = null\n\t}\n\n\t// TODO: Update signatures to use objects instead of param vomit, separate PR tho\n\t/**\n\t * Sets a cast time adjustment for a flat time amount per cast (See: Lightspeed, Dreadwyrm Trance, etc.)\n\t * @param actions The actions this adjustment applies to. Either an array of IDs, or the string 'all'\n\t * @param adjustment The amount of time that cast times are adjustmented by\n\t * @param start The beginning of the adjustment time range. Defaults to the current epoch timestamp\n\t * @param end The end of the adjustment time range. May be left null if the end of the range is not yet known\n\t * @returns The index number within the cast time adjustments collection, can be used to reset/end this adjustment later\n\t */\n\tpublic setTimeAdjustment(actions: number[] | 'all', adjustment: number, start: number = this.parser.currentEpochTimestamp, end?: number): number {\n\t\treturn this.set({actions, adjustment, start, end, type: 'time', affectsWhich: 'cast'})\n\t}\n\n\t/**\n\t * Shorthand function for setting casts to instant (ie. Swiftcast, Triplecast)\n\t * @param actions The actions this adjustment applies to. Either an array of IDs, or the string 'all'. Defaults to 'all'\n\t * @param start The beginning of the adjustment time range. Defaults to the current epoch timestamp\n\t * @param end The end of the adjustment time range. May be left null if the end of the range is not yet known\n\t * @returns The end of the adjustment time range. May be left null if the end of the range is not yet known\n\t */\n\tpublic setInstantCastAdjustment(actions: number[] | 'all' = 'all', start: number = this.parser.currentEpochTimestamp, end?: number): number {\n\t\treturn this.setPercentageAdjustment(actions, 0, 'cast', start, end)\n\t}\n\n\t/**\n\t * Sets a cast time adjustment for a percentage change per cast (See: Swiftcast, RDM's Doublecast trait, Ley Lines, etc.)\n\t * @param actions The actions this adjustment applies to. Either an array of IDs, or the string 'all'\n\t * @param adjustment The percentage multiplier to adjust the cast time to (ie 0 for instant cast, 0.85 for Ley Lines, 1.25 for a 25% slow)\n\t * @param affectsWhich Does this percentage change affect the recast time, cast time, or both? Defaults to cast time\n\t * @param start The beginning of the adjustment time range. Defaults to the current epoch timestamp\n\t * @param end The end of the adjustment time range. May be left null if the end of the range is not yet known\n\t * @returns The index number within the cast time adjustments collection, can be used to reset/end this adjustment later\n\t */\n\tpublic setPercentageAdjustment(actions: number[] | 'all', adjustment: number, affectsWhich: AffectsWhichTime = 'cast', start: number = this.parser.currentEpochTimestamp, end?: number): number {\n\t\treturn this.set({actions, adjustment, affectsWhich, start, end, type: 'percentage'})\n\t}\n\tprivate set(adjustment: CastTimeAdjustment): number {\n\t\tconst newLength = this.castTimes.push(adjustment)\n\n\t\treturn newLength - 1\n\t}\n\n\t/**\n\t * Sets the 'end' property of the specified cast time reduction range\n\t * @param id The index within the cast times adjustment collection (provided by the set functions)\n\t * @param timestamp The timestamp at which the reduction range ended. Defaults to the current epoch timestamp\n\t */\n\tpublic reset(id: number | null, timestamp = this.parser.currentEpochTimestamp): void {\n\t\tif (id == null) { return }\n\t\tconst ct = this.castTimes[id]\n\t\tif (!ct) { return }\n\t\tct.end = timestamp\n\t}\n\n\t/**\n\t * Returns the effective cast time for the specified event\n\t * @param event The event in question\n\t * @returns The actual cast time, either as the default, or the modified time if any modifiers were in effect. Returns undefined if the action cannot be determined, or has no default cast time\n\t */\n\tpublic forEvent(event: Events['action'] | Events['prepare']): number | undefined {\n\t\treturn this.forAction(event.action, event.timestamp)\n\t}\n\n\t/**\n\t * Returns the effective recast time for the specified event\n\t * @param event The event in question\n\t * @returns The actual recast time, either as the default, or the modified time if any modifiers were in effect. Returns undefined i fthe action cannot be determined, or has no gcdRecast/cooldown property defined\n\t */\n\tpublic recastForEvent(event: Events['action'] | Events['prepare']): number | undefined {\n\t\treturn this.recastForAction(event.action, event.timestamp)\n\t}\n\n\t/**\n\t * Returns the effective cast time for the specified action at the specified point in time\n\t * @param actionId The action in question\n\t * @param timestamp The timestamp in question\n\t * @returns The actual cast time, either as the default, or the modified time if any modifiers were in effect. Returns undefined if the action cannot be determined, or has no default cast time\n\t */\n\tpublic forAction(actionId: number, timestamp: number = this.parser.currentEpochTimestamp): number | undefined {\n\t\treturn this.getAdjustedTime(actionId, timestamp)\n\t}\n\n\t/**\n\t * Returns the effective recast time for the specified action at the specified point in time\n\t * @param actionId The action in question\n\t * @param timestamp Thetimestamp in question\n\t * @returns The actual recast time, either as the default, or the modified time if any modifiers were in effect. Returns undefined if the action cannot be determined, or has no gcdRecast/cooldown property defined\n\t */\n\tpublic recastForAction(actionId: number, timestamp: number = this.parser.currentEpochTimestamp): number | undefined {\n\t\treturn this.getAdjustedTime(actionId, timestamp, 'recast')\n\t}\n\n\t/**\n\t * Returns the adjusted time (either cast or recast) for the specified action at the specified point in time\n\t * @param actionId The action in question\n\t * @param timestamp The timestamp in question\n\t * @param forWhich Do we want the recast for this action, or the cast time? Defaults to cast time\n\t * @returns The adjusted time, if any adjustments exist at this timestamp, or the default if not. Will return undefined if the base time (recast/cooldown/cast) can't be determined\n\t */\n\tprivate getAdjustedTime(actionId: number, timestamp: number = this.parser.currentEpochTimestamp, forWhich: AffectsWhichTime = 'cast'): number | undefined {\n\t\t// Get any cast time modifiers active when the event took place\n\t\tconst matchingTimes = this.castTimes.filter(ct =>\n\t\t\t(ct.actions === 'all' || ct.actions.includes(actionId)) &&\n\t\t\tct.start <= timestamp &&\n\t\t\t(ct.end == null || ct.end >= timestamp) &&\n\t\t\t(ct.affectsWhich === 'both' || ct.affectsWhich === forWhich),\n\t\t)\n\n\t\tconst action = this.data.getAction(actionId)\n\t\tif (action == null) {\n\t\t\treturn undefined\n\t\t}\n\t\tlet defaultTime = forWhich === 'recast'\n\t\t\t? (action.gcdRecast != null ? action.gcdRecast : action.cooldown)\n\t\t\t: action.castTime\n\n\t\t// If the default comes back undefined, or already at or below the minimum action time (including instants), no adjustments to perform\n\t\tif (defaultTime == null || forWhich === 'recast' && defaultTime <= MIN_RECAST_TIME) {\n\t\t\treturn defaultTime\n\t\t}\n\n\t\tif (action.speedAttribute != null) {\n\t\t\tdefaultTime = this.speedAdjustments.getAdjustedDuration({\n\t\t\t\tduration: defaultTime,\n\t\t\t\tattribute: action.speedAttribute,\n\t\t\t})\n\t\t}\n\n\t\tlet flatReduction=0\n\t\tlet flatIncrease=0\n\t\tlet percentageAdjustment=1\n\n\t\tmatchingTimes.forEach(ct => {\n\t\t\tif (ct.type === 'time') {\n\t\t\t\t// Find the largest flat cast time reduction value\n\t\t\t\tif (ct.adjustment < 0 && ct.adjustment < flatReduction) {\n\t\t\t\t\tflatReduction = ct.adjustment\n\t\t\t\t}\n\t\t\t\t// Find the largest flat cast time increase value\n\t\t\t\tif (ct.adjustment > 0 && ct.adjustment > flatIncrease)  {\n\t\t\t\t\tflatIncrease = ct.adjustment\n\t\t\t\t}\n\t\t\t} else if (ct.type === 'percentage') {\n\t\t\t\t// Get the total percentage adjustment\n\t\t\t\tpercentageAdjustment *= ct.adjustment\n\t\t\t}\n\t\t})\n\n\t\t// Calculate the final cast time based on the flat and percentage reductions we've found\n\t\tconst flatAdjustedTime = Math.max(defaultTime + flatIncrease + flatReduction, 0) // Yes, plus flatReduction because it's already a negative value\n\t\tif (forWhich === 'recast' && flatAdjustedTime <= MIN_RECAST_TIME) {\n\t\t\t// Flat reductions reduced value below minimum action time, percentage adjustments will not be effective\n\t\t\treturn MIN_RECAST_TIME\n\t\t}\n\n\t\tif (percentageAdjustment === 0) {\n\t\t\t// Adjusted to instant\n\t\t\treturn 0\n\t\t}\n\n\t\t// Apply percentage speed modifiers, subject to clamping at the minimum action time\n\t\tlet adjustedTime = flatAdjustedTime * percentageAdjustment\n\t\tif (forWhich === 'recast') {\n\t\t\tadjustedTime = Math.max(adjustedTime, MIN_RECAST_TIME)\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-magic-numbers\n\t\treturn Math.floor(adjustedTime / 10) * 10 // adjustments are rounded down to the nearest 10ms in game\n\n\t\t/**\n\t\t * In the absence of easily-acquired slows to test with, I'm going to assume this is the right way to calculate this:\n\t\t * - Lightspeed/DWT even with slow should still have normal 2.5s casts be instant\n\t\t * - Swiftcast/Triple/Dualcast with slow should still be instant\n\t\t * Unsure what the actual interaction between slow and a non-instant percentage change like Ley Lines or a > 2.5s cast with Lightspeed/DWT (aka Raise) would be with a slow\n\t\t * We're also not tracking any slow statuses so this is probably overkill but hey, maybe Reaper or Sage will have a slow-myself-down-to-hit-harder mechanic .-.\n\t\t */\n\t}\n}\n","import {Status, StatusKey} from 'data/STATUSES'\nimport {Events} from 'event'\nimport {ensureArray} from 'utilities'\nimport {Analyser} from '../Analyser'\nimport {dependency} from '../Injectable'\nimport {Actor, StatusEvent} from './Actors'\nimport {Data} from './Data'\nimport {Invulnerability} from './Invulnerability'\n\ninterface Edge {\n\tside: 'apply' | 'remove'\n\ttimestamp: number\n}\n\nexport class Statuses extends Analyser {\n\tstatic override handle = 'statuses'\n\tstatic override debug = false\n\n\t@dependency private readonly data!: Data\n\t@dependency private readonly invulnerability!: Invulnerability\n\n\t/**\n\t * Calculate the total uptime of the specified status across allspecified actors.\n\t * @param statusSpecifier Status to calculate uptime of.\n\t * @param targetSpecifier Target(s) that should be checked for the status.\n\t * @param source Source of statuses to filter by. Defaults to the parsed actor.\n\t */\n\tgetUptime(\n\t\tstatusSpecifier: StatusKey | Status,\n\t\ttargetSpecifier: Actor | Actor[],\n\t\tsource = this.parser.actor\n\t) {\n\t\t// Resolve arguments.\n\t\tconst status = typeof statusSpecifier === 'string'\n\t\t\t? this.data.statuses[statusSpecifier]\n\t\t\t: statusSpecifier\n\n\t\tconst targets = ensureArray(targetSpecifier)\n\n\t\t// Collect all the status history for the specified status/target/source combo.\n\t\tconst edges = targets.flatMap(target => this.edgesForActor(\n\t\t\ttarget,\n\t\t\ttarget.statusHistory.get(status.id)?.get(source.id) ?? []\n\t\t))\n\n\t\t// Edges are mapped from multiple potential targets; interlace by sorting by timestamp.\n\t\tedges.sort((a, b) => a.timestamp - b.timestamp)\n\n\t\t// Sum time when any of the specified targets had the status.\n\t\tconst meta = {uptime: 0, depth: 0, application: 0}\n\t\tfor (const edge of edges) {\n\t\t\tif (edge.side === 'apply') {\n\t\t\t\tif (meta.depth === 0) {\n\t\t\t\t\tmeta.application = edge.timestamp\n\t\t\t\t}\n\t\t\t\tmeta.depth ++\n\n\t\t\t} else {\n\t\t\t\tmeta.depth --\n\t\t\t\tif (meta.depth === 0) {\n\t\t\t\t\tmeta.uptime += edge.timestamp - meta.application\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.debug(`Status ${status.name} ${edge.side} at ${this.ft(edge.timestamp)}, depth=${meta.depth}`)\n\t\t}\n\n\t\treturn meta.uptime\n\t}\n\n\tprivate edgesForActor(target: Actor, events: StatusEvent[]) {\n\t\t// We can safely assume status events from an actor will alternate between apply and remove.\n\t\tconst edges: Edge[] = []\n\t\tlet apply: Events['statusApply'] | undefined\n\t\tlet refresh: Events['statusApply'] | undefined\n\n\t\tfor (const event of events) {\n\t\t\t// Track the initial application and refreshes.\n\t\t\tif (event.type === 'statusApply') {\n\t\t\t\tapply ??= event\n\t\t\t\trefresh = event\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif (apply == null) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Window has been closed, merge any edges in.\n\t\t\tedges.push(...this.splitRangeForInvulns(\n\t\t\t\ttarget,\n\t\t\t\tapply.timestamp,\n\t\t\t\tevent.timestamp\n\t\t\t))\n\t\t\tapply = undefined\n\t\t}\n\n\t\t// If we've got a dangling apply, build edges for it.\n\t\tif (apply != null) {\n\t\t\t// Try to find a reasonable remove time for the status, if it has a duration.  Cap to the end of the fight.\n\t\t\tconst statusDuration = this.data.getStatus(apply.status)?.duration\n\t\t\tconst remove = statusDuration == null\n\t\t\t\t? this.parser.currentEpochTimestamp\n\t\t\t\t: Math.min((refresh ?? apply).timestamp + statusDuration, this.parser.currentEpochTimestamp)\n\n\t\t\tedges.push(...this.splitRangeForInvulns(\n\t\t\t\ttarget,\n\t\t\t\tapply.timestamp,\n\t\t\t\tremove,\n\t\t\t))\n\t\t}\n\n\t\treturn edges\n\t}\n\n\tprivate splitRangeForInvulns(target: Actor, apply: number, remove: number): Edge[] {\n\t\tlet range = {apply, remove}\n\t\tconst finalRanges = [range]\n\n\t\t// Get the invuln windows that occured during this range\n\t\tconst invulns = this.invulnerability.getWindows({\n\t\t\tstart: apply,\n\t\t\tend: remove,\n\t\t\tactorFilter: actor => actor.kind === target.kind,\n\t\t\ttypes: ['invulnerable'],\n\t\t})\n\n\t\tfor (const invuln of invulns) {\n\t\t\t// Invuln clipped start of range.\n\t\t\tif (invuln.start < range.apply && invuln.end >= range.apply) {\n\t\t\t\tthis.debug(`Start clip, [${this.ft(range.apply)},${this.ft(range.remove)}] -> [${this.ft(invuln.end)},${this.ft(range.remove)}]`)\n\n\t\t\t\trange.apply = invuln.end\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Invuln clipped end of range.\n\t\t\tif (invuln.start <= range.remove && invuln.end > range.remove) {\n\t\t\t\tthis.debug(`End clip, [${this.ft(range.apply)},${this.ft(range.remove)}] -> [${this.ft(range.apply)},${this.ft(invuln.start)}]`)\n\n\t\t\t\trange.remove = invuln.start\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Everything else should be a range split, sanity check.\n\t\t\tif (invuln.start < range.apply || invuln.end > range.remove) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tthis.debug(`Split [${this.ft(range.apply)},${this.ft(range.remove)}] -> [${this.ft(range.apply)},${this.ft(invuln.start)}], [${this.ft(invuln.end)},${this.ft(range.remove)}]`)\n\n\t\t\t// Split the range into two around the invuln.\n\t\t\tconst previousRange = range\n\t\t\trange = {...range}\n\t\t\tfinalRanges.push(range)\n\n\t\t\tpreviousRange.remove = invuln.start\n\t\t\trange.apply = invuln.end\n\t\t}\n\n\t\t// Map the ranges into edges.\n\t\treturn finalRanges.flatMap(range => [\n\t\t\t{side: 'apply', timestamp: range.apply},\n\t\t\t{side: 'remove', timestamp: range.remove},\n\t\t] as const)\n\t}\n\n\t// Small utility for formatting timestamps, as we do it a _lot_ in debug messages\n\tprivate ft = (timestamp: number) => this.parser.formatEpochTimestamp(timestamp, 1)\n}\n","import {ActionRow, ActionTimeline as CoreActionTimeline} from 'parser/core/modules/ActionTimeline'\n\nexport class ActionTimeline extends CoreActionTimeline {\n\tstatic override rows: ActionRow[] = [\n\t\t...CoreActionTimeline.rows,\n\n\t\t// Buffs\n\t\t'INFURIATE',\n\t\t'INNER_RELEASE',\n\n\t\t// oGCD Damage\n\t\t['UPHEAVAL', 'OROGENY'],\n\t\t'ONSLAUGHT',\n\n\t\t// Personal Mitigation\n\t\t'VENGEANCE',\n\t\t'RAMPART',\n\t\t'NASCENT_FLASH',\n\t\t'BLOODWHETTING',\n\t\t'THRILL_OF_BATTLE',\n\t\t'EQUILIBRIUM',\n\t\t'HOLMGANG',\n\n\t\t// Party Mitigation\n\t\t'SHAKE_IT_OFF',\n\t\t'REPRISAL',\n\n\t\t// Tank Utility\n\t\t'PROVOKE',\n\t\t'SHIRK',\n\t\t// Stance\n\t\t'DEFIANCE',\n\n\t\t// Disrupt Utility\n\t\t'INTERJECT',\n\t\t'LOW_BLOW',\n\t]\n}\n","import {AoEUsages} from 'parser/core/modules/AoEUsages'\n\nexport class AoE extends AoEUsages {\n\tsuggestionIcon = this.data.actions.OVERPOWER.icon\n\n\ttrackedActions = [\n\t\t{\n\t\t\taoeAction: this.data.actions.CHAOTIC_CYCLONE,\n\t\t\tstActions: [this.data.actions.INNER_CHAOS],\n\t\t\tminTargets: 3,\n\t\t}, {\n\t\t\taoeAction: this.data.actions.DECIMATE,\n\t\t\tstActions: [this.data.actions.FELL_CLEAVE],\n\t\t\tminTargets: 3,\n\t\t}, {\n\t\t\taoeAction: this.data.actions.OVERPOWER,\n\t\t\tstActions: [this.data.actions.HEAVY_SWING],\n\t\t\tminTargets: 2,\n\t\t},\n\t]\n}\n","import {Combos as CoreCombos} from 'parser/core/modules/Combos'\n\nexport class Combos extends CoreCombos {\n\toverride suggestionIcon = this.data.actions.MAIM.icon\n}\n","import {Defensives as CoreDefensives} from 'parser/core/modules/Defensives'\n\nexport class Defensives extends CoreDefensives {\n\tprotected override trackedDefensives = [\n\t\tthis.data.actions.HOLMGANG,\n\t\tthis.data.actions.VENGEANCE,\n\t\tthis.data.actions.BLOODWHETTING,\n\t\tthis.data.actions.SHAKE_IT_OFF,\n\t\tthis.data.actions.NASCENT_FLASH,\n\t\tthis.data.actions.THRILL_OF_BATTLE,\n\t\tthis.data.actions.EQUILIBRIUM,\n\t]\n}\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {Action} from 'data/ACTIONS'\nimport {JOBS} from 'data/JOBS'\nimport {Event, Events} from 'event'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport {CounterGauge, Gauge as CoreGauge} from 'parser/core/modules/Gauge'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\ntype GaugeModifier = Partial<Record<Event['type'], number>>\n\nconst SUGGESTION_TIERS = {\n\t20: SEVERITY.MINOR,\n\t50: SEVERITY.MAJOR,\n}\n\nexport class Gauge extends CoreGauge {\n\tstatic override title = t('war.gauge.title')`Beast Gauge`\n\n\t@dependency private actors!: Actors\n\t@dependency private suggestions!: Suggestions\n\n\tprivate beastGauge = this.add(new CounterGauge({\n\t\tchart: {label: 'Beast Gauge', color: JOBS.WARRIOR.colour},\n\t}))\n\n\tprivate beastGaugeModifiers = new Map<number, GaugeModifier>([\n\t\t// Builders\n\t\t[this.data.actions.MAIM.id, {combo: 10}],\n\t\t[this.data.actions.STORMS_EYE.id, {combo: 10}],\n\t\t[this.data.actions.STORMS_PATH.id, {combo: 20}],\n\t\t[this.data.actions.MYTHRIL_TEMPEST.id, {combo: 20}],\n\t\t[this.data.actions.INFURIATE.id, {action: 50}],\n\t\t// Spenders\n\t\t[this.data.actions.FELL_CLEAVE.id, {action: -50}],\n\t\t[this.data.actions.DECIMATE.id, {action: -50}],\n\t\t[this.data.actions.CHAOTIC_CYCLONE.id, {action: -50}],\n\t\t[this.data.actions.INNER_CHAOS.id, {action: -50}],\n\t])\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tconst beastActions = Array.from(this.beastGaugeModifiers.keys())\n\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.source(this.parser.actor.id)\n\t\t\t\t.type(oneOf(['action', 'combo']))\n\t\t\t\t.action(oneOf(beastActions)),\n\t\t\tthis.onGaugeModifier,\n\t\t)\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onGaugeModifier(event: Events['action' | 'combo']) {\n\t\tconst modifier = this.beastGaugeModifiers.get(event.action)\n\t\tconst freeActions = new Set<Action['id']>([\n\t\t\tthis.data.actions.FELL_CLEAVE.id,\n\t\t\tthis.data.actions.DECIMATE.id,\n\t\t])\n\n\t\tif (modifier != null) {\n\t\t\t// Spenders are free during IR, post-6.1 only FC+Decimate are\n\t\t\tlet amount = modifier[event.type] ?? 0\n\t\t\tif (\n\t\t\t\tthis.actors.current.hasStatus(this.data.statuses.INNER_RELEASE.id)\n\t\t\t\t&& (this.parser.patch.before('6.1') || freeActions.has(event.action))\n\t\t\t) {\n\t\t\t\tamount = Math.max(amount, 0)\n\t\t\t}\n\n\t\t\tthis.beastGauge.modify(amount)\n\t\t}\n\t}\n\n\tprivate onComplete() {\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.INFURIATE.icon,\n\t\t\tcontent: <Trans id=\"war.gauge.suggestions.loss.content\">\n\t\t\t\t\tAvoid letting your Beast Gauge overcap - the wasted resources may cost further uses of your spenders over the course of the fight.\n\t\t\t</Trans>,\n\t\t\twhy: <Trans id=\"war.gauge.suggestions.loss.why\">\n\t\t\t\t{this.beastGauge.overCap} Wrath lost to overcapping Beast gauge.\n\t\t\t</Trans>,\n\t\t\ttiers: SUGGESTION_TIERS,\n\t\t\tvalue: this.beastGauge.overCap,\n\t\t}))\n\t}\n}\n","import {Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {ActionKey} from 'data/ACTIONS'\nimport {Event} from 'event'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Cooldowns} from 'parser/core/modules/Cooldowns'\nimport {Procs as CoreProcs} from 'parser/core/modules/Procs'\nimport {SEVERITY} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\nconst INFURIATE_REDUCERS: ActionKey[] = [\n\t'FELL_CLEAVE',\n\t'DECIMATE',\n\t'CHAOTIC_CYCLONE',\n\t'INNER_CHAOS',\n]\n\nconst INFURIATE_CDR = 5000\n\nconst INFURIATE_SEVERITY = {\n\t1: SEVERITY.MAJOR,\n}\n\n// Yes I know this is Infuriate but the proc is Nascent Chaos so here we are\nexport class Infuriate extends CoreProcs {\n\tstatic override handle = 'infuriate'\n\n\t@dependency private cooldowns!: Cooldowns\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.source(this.parser.actor.id)\n\t\t\t\t.type('action')\n\t\t\t\t.action(this.data.matchActionId(INFURIATE_REDUCERS)),\n\t\t\t() => this.cooldowns.reduce('INFURIATE', INFURIATE_CDR),\n\t\t)\n\t}\n\n\toverride trackedProcs = [{\n\t\tprocStatus: this.data.statuses.NASCENT_CHAOS,\n\t\tconsumeActions: [this.data.actions.INNER_CHAOS, this.data.actions.CHAOTIC_CYCLONE],\n\t}]\n\n\toverride showDroppedProcSuggestion = true\n\toverride showOverwroteProcSuggestion = true\n\n\toverride droppedProcIcon = this.data.actions.INFURIATE.icon\n\toverride droppedProcSeverityTiers = INFURIATE_SEVERITY\n\toverride droppedProcContent = <Trans id=\"war.infuriate.suggestions.dropped.content\">\n\t\tTry to consume <DataLink status=\"NASCENT_CHAOS\"/> before it expires, as <DataLink action=\"INNER_CHAOS\"/> and <DataLink action=\"CHAOTIC_CYCLONE\"/> are two of your strongest skills.\n\t</Trans>\n\n\toverride overwroteProcIcon = this.data.actions.INFURIATE.icon\n\toverride overwroteProcSeverityTiers = INFURIATE_SEVERITY\n\toverride overwroteProcContent = <Trans id=\"war.infuriate.suggestions.overwritten.content\">\n\t\tAvoid using <DataLink action=\"INFURIATE\"/> when you already have <DataLink status=\"NASCENT_CHAOS\"/> applied.\n\t</Trans>\n}\n","import {t} from '@lingui/macro'\nimport {Plural, Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Action, ActionKey} from 'data/ACTIONS'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {EventHook} from 'parser/core/Dispatcher'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport Checklist, {Requirement, Rule} from 'parser/core/modules/Checklist'\nimport {Data} from 'parser/core/modules/Data'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\n// Default case\nconst IR_STACKS_APPLIED = 3\n\nconst CHAOS_GCDS: ActionKey[] = [\n\t'INNER_CHAOS',\n\t'CHAOTIC_CYCLONE',\n]\n\nconst GOOD_GCDS: ActionKey[] = [\n\t'FELL_CLEAVE',\n\t'DECIMATE',\n]\n\ninterface ReleaseWindow {\n\tstart: number\n\tend?: number\n\tcasts: Array<Action['id']>\n\trushing: boolean\n}\n\nexport class InnerRelease extends Analyser {\n\tstatic override handle = 'ir'\n\tstatic override title = t('war.ir.title')`Inner Release`\n\n\t@dependency checklist!: Checklist\n\t@dependency data!: Data\n\t@dependency suggestions!: Suggestions\n\n\tprivate readonly stacksApplied = this.data.statuses.INNER_RELEASE.stacksApplied ?? IR_STACKS_APPLIED\n\n\tprivate current: ReleaseWindow | undefined\n\tprivate history: ReleaseWindow[] = []\n\n\tprivate innerHook?: EventHook<Events['action']>\n\n\toverride initialise() {\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\n\t\t// Only track IR gain since IR gives PRR anyway and PrimalChaos handles missed PRs\n\t\tthis.addEventHook(playerFilter.type('statusApply').status(this.data.statuses.INNER_RELEASE.id), this.onGain)\n\t\tthis.addEventHook(playerFilter.type('statusRemove').status(this.data.statuses.INNER_RELEASE.id), this.onDrop)\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onCast(event: Events['action']): void {\n\t\t// No window so why are we here?\n\t\tif (this.current == null) { return }\n\n\t\tconst action = this.data.getAction(event.action)\n\n\t\t// Only include GCDs\n\t\tif (action == null || !(action.onGcd ?? false)) { return }\n\n\t\t// Verify the window isn't closed, and count the GCDs\n\t\tif (this.current.end == null) {\n\t\t\tthis.current.casts.push(action.id)\n\t\t}\n\t}\n\n\tprivate onGain(event: Events['statusApply']): void {\n\t\t// Check if existing window or not - mostly since we don't really care about stack count\n\t\tif (this.current == null) {\n\t\t\tthis.current = {start: event.timestamp, casts: [], rushing: false}\n\n\t\t\tthis.current.rushing = this.data.statuses.INNER_RELEASE.duration >= (this.parser.pull.timestamp + this.parser.pull.duration) - event.timestamp\n\n\t\t\t// If we're 6.1+, we only want FC+Decimate since nothing else eats stacks\n\t\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\t\t\tthis.innerHook = this.parser.patch.before('6.1')\n\t\t\t\t? this.addEventHook(playerFilter.type('action'), this.onCast)\n\t\t\t\t: this.addEventHook(\n\t\t\t\t\tplayerFilter\n\t\t\t\t\t\t.type('action')\n\t\t\t\t\t\t.action(this.data.matchActionId(GOOD_GCDS)),\n\t\t\t\t\tthis.onCast)\n\t\t}\n\t}\n\n\tprivate onDrop(event: Events['statusRemove']): void {\n\t\tthis.stopAndSave(event.timestamp)\n\t}\n\n\tprivate stopAndSave(endTime: number = this.parser.currentEpochTimestamp): void {\n\t\tif (this.current != null) {\n\t\t\tthis.current.end = endTime\n\n\t\t\tthis.history.push(this.current)\n\n\t\t\tif (this.innerHook != null) {\n\t\t\t\tthis.removeEventHook(this.innerHook)\n\t\t\t\tthis.innerHook = undefined\n\t\t\t}\n\t\t}\n\n\t\tthis.current = undefined\n\t}\n\n\tprivate onComplete() {\n\t\t// Close off the last window\n\t\tthis.stopAndSave(this.parser.pull.timestamp + this.parser.pull.duration)\n\n\t\t// Collect the guaranteed IR windows\n\t\tconst nonRushedReleases = this.history.filter(release => !release.rushing)\n\n\t\t// Extract our suggestion metrics from history\n\t\t// We ignore rushed windows for missed GCDs since users tend to optmise this on a case-by-case basis\n\t\tconst missedGcds = nonRushedReleases.reduce((total, current) => total + Math.max(0, (this.stacksApplied - current.casts.filter(id => id !== this.data.actions.PRIMAL_REND.id).length)), 0)\n\t\tconst totalStacks = nonRushedReleases.length * this.stacksApplied\n\t\tconst percentUsed = this.getPercentUsed(totalStacks, missedGcds)\n\n\t\tthis.checklist.add(new Rule({\n\t\t\tname: <Trans id=\"war.ir.checklist.missedgcd.name\">\n\t\t\t\tUse All Inner Release Stacks\n\t\t\t</Trans>,\n\t\t\tdescription: <Trans id=\"war.ir.checklist.missedgcd.description\">\n\t\t\t\t<DataLink action=\"INNER_RELEASE\"/> grants {this.stacksApplied} stacks to use on <DataLink action=\"FELL_CLEAVE\"/> (or <DataLink action=\"DECIMATE\"/> for 3 or more targets).\n\t\t\t\tTry to consume all stacks generated.\n\t\t\t</Trans>,\n\t\t\ttarget: 100,\n\t\t\trequirements: [\n\t\t\t\tnew Requirement({\n\t\t\t\t\tname: <Trans id=\"war.ir.checklist.missedgcd.requirement.name\">\n\t\t\t\t\t\t<DataLink action=\"INNER_RELEASE\"/> stacks used\n\t\t\t\t\t</Trans>,\n\t\t\t\t\toverrideDisplay: `${totalStacks - missedGcds} / ${totalStacks} (${percentUsed}%)`,\n\t\t\t\t\tpercent: percentUsed,\n\t\t\t\t}),\n\t\t\t],\n\t\t}))\n\n\t\tif (this.parser.patch.before('6.1')) {\n\t\t\t// Build our GCD filters\n\t\t\tconst chaosGcds = CHAOS_GCDS.map(actionKey => this.data.actions[actionKey].id)\n\t\t\tconst goodGcds = GOOD_GCDS.map(actionKey => this.data.actions[actionKey].id)\n\n\t\t\t// We ignore rushed windows for IC as a user might push for higher potency at end of fight\n\t\t\tconst badGcds = this.history.reduce((total, current) => total + (this.stacksApplied - this.accountGcds(current, goodGcds)), 0)\n\t\t\tconst veryBadGcds = nonRushedReleases.reduce((total, current) => total + this.accountGcds(current, chaosGcds), 0)\n\n\t\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\t\ticon: this.data.actions.FELL_CLEAVE.icon,\n\t\t\t\tcontent: <Trans id=\"war.ir.suggestions.badgcd.content\">\n\t\t\t\t\tGCDs used during <DataLink action=\"INNER_RELEASE\"/> should be limited to <DataLink action=\"FELL_CLEAVE\"/> for optimal damage (or <DataLink action=\"DECIMATE\"/> if three or more targets are present).\n\t\t\t\t</Trans>,\n\t\t\t\ttiers: {\n\t\t\t\t\t1: SEVERITY.MAJOR,\n\t\t\t\t},\n\t\t\t\tvalue: badGcds,\n\t\t\t\twhy: <Trans id=\"war.ir.suggestions.badgcd.why\">\n\t\t\t\t\t<Plural value={badGcds} one=\"# GCD\" other=\"# GCDs\"/> wasted <DataLink showIcon={false} status=\"INNER_RELEASE\"/> stacks.\n\t\t\t\t</Trans>,\n\t\t\t}))\n\n\t\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\t\ticon: this.data.actions.INNER_CHAOS.icon,\n\t\t\t\tcontent: <Trans id=\"war.ir.suggestions.verybadgcd.content\">\n\t\t\t\t\tAvoid using <DataLink action=\"INNER_CHAOS\"/> or <DataLink action=\"CHAOTIC_CYCLONE\"/> inside of <DataLink status=\"INNER_RELEASE\"/> unless pushing downtime. These abilities are guaranteed to be a critical direct hit, and make no use of <DataLink showIcon={false} status=\"INNER_RELEASE\"/>'s benefits.\n\t\t\t\t</Trans>,\n\t\t\t\ttiers: {\n\t\t\t\t\t1: SEVERITY.MAJOR,\n\t\t\t\t},\n\t\t\t\tvalue: veryBadGcds,\n\t\t\t\twhy: <Trans id=\"war.ir.suggestions.verybadgcd.why\">\n\t\t\t\t\t<Plural value={veryBadGcds} one=\"# stack\" other=\"# stacks\"/> of <DataLink status=\"INNER_RELEASE\"/> <Plural value={veryBadGcds} one=\"was\" other=\"were\"/> lost to <DataLink action=\"INNER_CHAOS\"/> or <DataLink action=\"CHAOTIC_CYCLONE\"/>.\n\t\t\t\t</Trans>,\n\t\t\t}))\n\t\t}\n\t}\n\n\tprivate accountGcds(window: ReleaseWindow, targetGcds: Array<Action['id']>): number {\n\t\tlet count = 0\n\t\tlet hits = 0\n\n\t\t// Skip PR since it doesn't eat stacks\n\t\tfor (const id of window.casts) {\n\t\t\tif (id === this.data.actions.PRIMAL_REND.id) { continue }\n\t\t\tif (targetGcds.includes(id)) { hits++ }\n\t\t\tcount++\n\n\t\t\tif (count >= this.stacksApplied) { break }\n\t\t}\n\n\t\t// Ensure we're capped at max stacks, it shouldn't be possible to go over but better safe than sorry\n\t\treturn Math.min(this.stacksApplied, hits)\n\t}\n\n\tgetPercentUsed(target: number, missed: number): string {\n\t\tconst used = target - missed\n\n\t\treturn ((used / target) * 100).toFixed(2)\n\t}\n}\n","import {CooldownDowntime} from 'parser/core/modules/CooldownDowntime'\n\nexport class OGCDDowntime extends CooldownDowntime {\n\ttrackedCds = [\n\t\t{\n\t\t\tcooldowns: [this.data.actions.INFURIATE],\n\t\t\t// Infuriate is used before the second GCD\n\t\t\tfirstUseOffset: 2500,\n\t\t\tresetBy: {\n\t\t\t\tactions: [\n\t\t\t\t\tthis.data.actions.FELL_CLEAVE,\n\t\t\t\t\tthis.data.actions.DECIMATE,\n\t\t\t\t\tthis.data.actions.CHAOTIC_CYCLONE,\n\t\t\t\t\tthis.data.actions.INNER_CHAOS,\n\t\t\t\t],\n\t\t\t\trefundAmount: 5000,\n\t\t\t},\n\t\t},\n\n\t\t{\n\t\t\tcooldowns: [this.data.actions.INNER_RELEASE],\n\t\t\t// IR can sit for up to 2 GCDs, enough to be ready to reapply Eye with the safety of IR extending it\n\t\t\tallowedAverageDowntime: 2500,\n\t\t\t// IR can be delayed in the double IC opener, as late as just before the 7th GCD\n\t\t\tfirstUseOffset: 15000,\n\t\t},\n\n\t\t{\n\t\t\tcooldowns: [\n\t\t\t\tthis.data.actions.UPHEAVAL,\n\t\t\t\tthis.data.actions.OROGENY,\n\t\t\t],\n\t\t\t// With weaving a defence CD, and getting the CD rolling before IR starts (where you spam Onslaught)\n\t\t\tfirstUseOffset: 12500,\n\t\t},\n\n\t\t{\n\t\t\tcooldowns: [\n\t\t\t\tthis.data.actions.ONSLAUGHT,\n\t\t\t],\n\t\t\t// Weaving after IR is up, after the first FC or PR\n\t\t\tfirstUseOffset: 18500,\n\t\t},\n\t]\n}\n","import {Plural, Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Procs as CoreProcs} from 'parser/core/modules/Procs'\nimport {SEVERITY} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\nconst REND_SEVERITY = {\n\t1: SEVERITY.MAJOR,\n}\n\nexport class PrimalRend extends CoreProcs {\n\tstatic override handle = 'primalrend'\n\n\toverride trackedProcs = [{\n\t\tprocStatus: this.data.statuses.PRIMAL_REND_READY,\n\t\tconsumeActions: [this.data.actions.PRIMAL_REND],\n\t}]\n\n\toverride showDroppedProcSuggestion = true\n\n\toverride droppedProcIcon = this.data.actions.PRIMAL_REND.icon\n\toverride droppedProcSeverityTiers = REND_SEVERITY\n\toverride droppedProcContent = <Trans id=\"war.primalrend.suggestions.dropped.content\">\n\t\tTry to consume <DataLink status=\"PRIMAL_REND_READY\"/> before it expires as <DataLink action=\"PRIMAL_REND\"/> is your single strongest skill.\n\t</Trans>\n\toverride droppedProcWhy = <Trans id=\"war.primalrend.suggestions.dropped.why\">\n\t\t<DataLink status=\"PRIMAL_REND_READY\"/> timed out <Plural value={this.droppedProcs} one=\"# time\" other=\"# times\"/>\n\t</Trans>\n}\n","import {Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Analyser} from 'parser/core/Analyser'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport Checklist, {Rule, Requirement} from 'parser/core/modules/Checklist'\nimport {Invulnerability} from 'parser/core/modules/Invulnerability'\nimport {Statuses} from 'parser/core/modules/Statuses'\nimport React from 'react'\n\nexport class SurgingTempest extends Analyser {\n\tstatic override handle = 'surgingtempest'\n\n\t@dependency private actors!: Actors\n\t@dependency private checklist!: Checklist\n\t@dependency private invulnerability!: Invulnerability\n\t@dependency private statuses!: Statuses\n\n\toverride initialise(): void {\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tonComplete(): void {\n\t\tthis.checklist.add(new Rule({\n\t\t\tname: <Trans id=\"war.surgingtempest.checklist.name\">Keep Surging Tempest Up</Trans>,\n\t\t\tdescription: <Trans id=\"war.surgingtempest.checklist.description\">Surging Tempest increases your damage by 10%, a substantial part of your damage.</Trans>,\n\t\t\ttarget: 90,\n\t\t\trequirements: [\n\t\t\t\tnew Requirement({\n\t\t\t\t\tname: <Trans id=\"war.surgingtempest.checklist.uptime\"><DataLink status=\"SURGING_TEMPEST\"/> uptime</Trans>,\n\t\t\t\t\tpercent: () => this.getUptimePercent(),\n\t\t\t\t}),\n\t\t\t],\n\t\t}))\n\t}\n\n\tgetUptimePercent(): number {\n\t\tconst statusUptime = this.statuses.getUptime('SURGING_TEMPEST', this.actors.friends)\n\t\tconst fightUptime = this.parser.currentDuration - this.invulnerability.getDuration({types: ['invulnerable']})\n\n\t\treturn (statusUptime / fightUptime) * 100\n\t}\n}\n","import {ActionTimeline} from './ActionTimeline'\nimport {AoE} from './AoE'\nimport {Combos} from './Combos'\nimport {Defensives} from './Defensives'\nimport {Gauge} from './Gauge'\nimport {Infuriate} from './Infuriate'\nimport {InnerRelease} from './InnerRelease'\nimport {OGCDDowntime} from './OGCDDowntime'\nimport {PrimalRend} from './PrimalRend'\nimport {SurgingTempest} from './SurgingTempest'\n\nexport default [\n\tActionTimeline,\n\tAoE,\n\tCombos,\n\tDefensives,\n\tGauge,\n\tInfuriate,\n\tInnerRelease,\n\tOGCDDowntime,\n\tPrimalRend,\n\tSurgingTempest,\n]\n"],"names":["ItemDepth","ActionTimeline","CastTime","Cooldowns","Data","Timeline","resolvedRows","groupRows","action","this","addRow","content","constructor","rows","config","resolvedConfig","resolveConfig","push","addEventHook","onComplete","populatedGroups","row","populateRow","forEach","specifier","cooldowns","groups","group","add","allGroups","has","finalConfig","Array","isArray","ensureArray","existingRow","get","isDefined","firstContent","label","Trans","id","data","actions","name","cooldownHistory","timeline","ContainerRow","order","collapse","set","addCooldownItems","addChargeItems","chargeHistory","history","entry","duration","getCooldownDuration","start","parser","pull","timestamp","end","addItem","SimpleItem","className","item","delta","ActionItem","depth","ACTION","ChargeGainItem","CHARGE_GAIN","endReason","CooldownEndReason","castTime","forAction","Math","max","Analyser","handle","debug","dependency","Content","styles","Icon","BaseItem","MIN_RECAST_TIME","SpeedAdjustments","castTimes","scIndex","switftCastFilter","filter","target","actor","status","statuses","SWIFTCAST","type","onApplySwiftcast","onRemoveSwiftcast","setInstantCastAdjustment","reset","adjustment","currentEpochTimestamp","affectsWhich","setPercentageAdjustment","ct","event","recastForAction","actionId","getAdjustedTime","forWhich","matchingTimes","getAction","defaultTime","gcdRecast","cooldown","speedAttribute","speedAdjustments","getAdjustedDuration","attribute","flatReduction","flatIncrease","percentageAdjustment","flatAdjustedTime","adjustedTime","floor","Statuses","Invulnerability","ft","formatEpochTimestamp","statusSpecifier","targetSpecifier","source","targets","edges","edgesForActor","statusHistory","a","b","meta","uptime","application","edge","side","events","apply","refresh","splitRangeForInvulns","undefined","statusDuration","getStatus","remove","min","range","finalRanges","invulns","invulnerability","getWindows","actorFilter","kind","types","invuln","previousRange","CoreActionTimeline","AoE","suggestionIcon","OVERPOWER","icon","trackedActions","aoeAction","CHAOTIC_CYCLONE","stActions","INNER_CHAOS","minTargets","DECIMATE","FELL_CLEAVE","HEAVY_SWING","AoEUsages","Combos","MAIM","CoreCombos","Defensives","trackedDefensives","HOLMGANG","VENGEANCE","BLOODWHETTING","SHAKE_IT_OFF","NASCENT_FLASH","THRILL_OF_BATTLE","EQUILIBRIUM","CoreDefensives","SUGGESTION_TIERS","SEVERITY","Gauge","Actors","Suggestions","beastGauge","CounterGauge","chart","color","JOBS","beastGaugeModifiers","combo","STORMS_EYE","STORMS_PATH","MYTHRIL_TEMPEST","INFURIATE","beastActions","oneOf","onGaugeModifier","modifier","freeActions","amount","actors","current","hasStatus","INNER_RELEASE","patch","before","modify","suggestions","TieredSuggestion","why","overCap","tiers","value","CoreGauge","title","INFURIATE_REDUCERS","INFURIATE_SEVERITY","Infuriate","trackedProcs","procStatus","NASCENT_CHAOS","consumeActions","showDroppedProcSuggestion","showOverwroteProcSuggestion","droppedProcIcon","droppedProcSeverityTiers","droppedProcContent","overwroteProcIcon","overwroteProcSeverityTiers","overwroteProcContent","matchActionId","CoreProcs","CHAOS_GCDS","GOOD_GCDS","InnerRelease","Checklist","stacksApplied","innerHook","playerFilter","onGain","onDrop","onGcd","casts","rushing","onCast","stopAndSave","endTime","removeEventHook","nonRushedReleases","release","missedGcds","total","PRIMAL_REND","length","totalStacks","percentUsed","getPercentUsed","checklist","Rule","description","requirements","Requirement","overrideDisplay","percent","chaosGcds","actionKey","goodGcds","badGcds","accountGcds","veryBadGcds","showIcon","window","targetGcds","count","hits","missed","toFixed","OGCDDowntime","trackedCds","firstUseOffset","resetBy","refundAmount","allowedAverageDowntime","UPHEAVAL","OROGENY","ONSLAUGHT","CooldownDowntime","REND_SEVERITY","PrimalRend","PRIMAL_REND_READY","droppedProcWhy","droppedProcs","SurgingTempest","getUptimePercent","getUptime","friends","currentDuration","getDuration"],"sourceRoot":""}