{"version":3,"file":"assets/jobs-mch.5d8a7cd9.js","mappings":"2LA0CKA,E,mWCzCL,EAA4L,0CAA5L,EAA6O,oC,qBDyCxOA,GAAAA,EAAAA,EAAAA,YAAAA,GAAAA,cAAAA,EAAAA,EAAAA,OAAAA,GAAAA,Q,EAAAA,IAAAA,EAAAA,CAAAA,IAKE,IAAMC,GAAb,iCAagCC,EAAAA,GAbhC,iCAciCC,EAAAA,GAdjC,iCAe4BC,EAAAA,GAf5B,iCAgBgCC,EAAAA,IAhBhC,uVAkBSC,aAAoC,GAlB7C,EAmBSC,UAAY,IAAI,KAnBzB,uCAsBC,SAAOC,GACN,OAAOC,KAAKC,OAAO,CAACC,QAAS,CAACH,IAC9B,GAxBF,wBA0BC,WAAsB,gBAECC,KAAKG,YAAsCC,MAF5C,IAErB,2BAAuE,KAA5DC,EAA4D,QAChEC,EAAiBN,KAAKO,cAAcF,GAC1CL,KAAKH,aAAaW,KAAKF,GACvBN,KAAKC,OAAOK,EACZ,CANoB,+BAQrBN,KAAKS,aAAa,WAAYT,KAAKU,WACnC,GAnCF,wBAqCC,WAAqB,eAEdC,EAAkB,IAAI,KAFR,UAKCX,KAAKH,cALN,IAKpB,2BAAwC,KAA7BQ,EAA6B,QACjCO,EAAMZ,KAAKC,OAAOI,GACxBL,KAAKa,YAAYD,EAAKP,GACtBA,EAAOH,QAAQY,SAAQ,SAAAC,GAAS,OAC/B,EAAKC,UAAUC,OAAOF,GAAWD,SAAQ,SAAAI,GAAK,OAAIP,EAAgBQ,IAAID,EAAxB,GADf,GAGhC,CAXmB,+BAcpB,MAAAlB,KAAKgB,UAAUI,aAAf,QACS,SAAAF,GAAK,OAAKP,EAAgBU,IAAIH,EAAzB,IACZJ,SAAQ,SAAAI,GACR,IAAMb,EAAS,CAACH,QAAS,CAACgB,IACpBN,EAAM,EAAKX,OAAOI,GACxB,EAAKQ,YAAYD,EAAKP,EACtB,GACF,GA1DF,2BA4DC,SAAsBA,GAErB,IAAIiB,EAAcjB,EAIlB,OAH2B,YAAvB,OAAOiB,IAA4BC,MAAMC,QAAQF,MACpDA,EAAc,CAACpB,QAASoB,KAEzB,kBACIA,GADJ,IAECpB,SAASuB,EAAAA,EAAAA,IAAYH,EAAYpB,UAElC,GAtEF,oBAwEC,SAAeG,GAA2B,eAEnCY,EAAS,MAAAZ,EAAOH,SAAP,QAAuB,SAAAa,GAAS,OAAI,EAAKC,UAAUC,OAAOF,EAA1B,IACzCW,EAAc,UAAAT,GAAM,KAANA,GACd,SAAAC,GAAK,OAAI,EAAKpB,UAAU6B,IAAIT,EAAvB,KADS,OAEbU,EAAAA,IACP,GAAmB,MAAfF,EACH,OAAOA,EAIR,IAKuC,EALjCG,EAAexB,EAAOH,QAAQ,GAC9B4B,EACe,MAAhBzB,EAAOyB,MAAwBzB,EAAOyB,MACrB,QAAjBD,GAAkC,SAAC,EAAAE,MAAD,CAAOC,GAAG,iCAAV,iBACV,iBAAjBH,EAAoC,EAAKI,KAAKC,QAAQL,GAAcM,KACnD,iBAAjBN,EAA6B,UAAO,EAAKb,UAAUoB,gBAAgBP,GAAc,UAApD,aAAO,EAAiD9B,OAAOoC,KAChGN,EAAaM,KAKfvB,EAAMZ,KAAKqC,SAASpC,OAAO,IAAIqC,EAAAA,GAAa,CACjDR,MAAAA,EACAS,MAAOlC,EAAOkC,MACdC,UAAU,KAIX,OAFAvB,EAAOH,SAAQ,SAAAI,GAAK,OAAI,EAAKpB,UAAU2C,IAAIvB,EAAON,EAA9B,IAEbA,CACP,GAtGF,yBAwGC,SAAoBA,EAApB,GAAqE,WAA7BV,EAA6B,EAA7BA,QAEvCF,KAAK0C,iBAAiB9B,EAAK,IAAAV,GAAO,KAAPA,GAAgB,SAAAa,GAAS,OAAI,EAAKC,UAAUoB,gBAAgBrB,EAAnC,KACpDf,KAAK2C,eAAe/B,EAAK,IAAAV,GAAO,KAAPA,GAAgB,SAAAa,GAAS,OAAI,EAAKC,UAAU4B,cAAc7B,EAAjC,IAClD,GA5GF,8BA8GC,SAAyBH,EAAmBiC,GAAiC,gBACxDA,GADwD,IAC5E,2BAA6B,KAAlBC,EAAkB,QACtBC,EAAW/C,KAAKgD,oBAAoBF,GAIpCG,EAAQH,EAAMG,MAAQjD,KAAKkD,OAAOC,KAAKC,UACvCC,EAAMJ,EAAQF,EACpBnC,EAAI0C,QAAQ,IAAIC,EAAAA,GAAW,CAC1BN,MAAAA,EACAI,IAAAA,EACAnD,SAAS,gBAAKsD,UCvKqH,4CDyKpI,CAb2E,+BAc5E,GA5HF,4BA8HC,SAAuB5C,EAAmBiC,GAA+B,gBACpDA,GADoD,IACxE,2BAA6B,KAAlBC,EAAkB,QACtBW,EAAOX,EAAMY,MAAQ,EACxB,IAAIC,EAAAA,GAAW,CAChBC,MAAOrE,EAAUsE,OACjBZ,MAAOH,EAAMM,UAAYpD,KAAKkD,OAAOC,KAAKC,UAC1CrD,OAAQ+C,EAAM/C,SAEb,IAAI+D,EAAe,CACpBF,MAAOrE,EAAUwE,YACjBd,MAAOH,EAAMM,UAAYpD,KAAKkD,OAAOC,KAAKC,YAE5CxC,EAAI0C,QAAQG,EACZ,CAbuE,+BAcxE,GA5IF,iCA8IC,SAA4BX,GAC3B,IAAIC,EAAWD,EAAMO,IAAMP,EAAMG,MAGjC,GAAIH,EAAMkB,YAAcC,EAAAA,EAAAA,QAA2B,OAC5CC,EAAQ,UAAGlE,KAAKkE,SAASC,UAAUrB,EAAM/C,OAAOiC,GAAIc,EAAMG,cAAlD,QAA4D,EAI1EF,EAAWqB,KAAKC,IAAItB,EAAUmB,EAzLV,IA0LpB,CAED,OAAOnB,CACP,KA3JF,GAAoCuB,EAAAA,IAApC,EACiBC,OAAS,iBAD1B,EAEiBC,OAAQ,EAFzB,EASQpE,KAAoB,CAC1B,CAACF,QAAS,MAAOqC,OAAQ,KAV3B,sCAaEkC,EAAAA,EAbF,iFAaqBP,QAbrB,uCAcEO,EAAAA,EAdF,iFAcqBzD,SAdrB,kCAeEyD,EAAAA,EAfF,iFAeqBxC,IAfrB,sCAgBEwC,EAAAA,EAhBF,iFAgBqBpC,QAhBrB,OA8JMyB,EAAAA,SAAAA,I,4LACLY,QAAU,kBACT,gBAAKlB,UAAWmB,EAAhB,UACC,SAACC,EAAA,EAAD,CAAMzC,KAAK,kBAAkBqB,UAAWmB,KAFhC,E,WADLb,CAAuBe,EAAAA,G,sUE5LhBC,GAAb,iCAIkCrF,EAAAA,GAJlC,iCAKmCsF,EAAAA,IALnC,iCAM8BpF,EAAAA,GAN9B,iCAOkCqF,EAAAA,GAPlC,iCAQwCC,EAAAA,GARxC,iCAS0CC,EAAAA,GAT1C,2aAWWC,UAAoB,EAX/B,EAYWC,YAAsB,EAZjC,EAcSC,mBAdT,6CAgBC,WACCrF,KAAKS,cACJ6E,EAAAA,EAAAA,MAAgBC,OAAOvF,KAAKkD,OAAOsC,MAAMxD,IAAIyD,KAAK,WAClDzF,KAAK0F,aAEN1F,KAAKS,cACJ6E,EAAAA,EAAAA,MAAgBC,OAAOvF,KAAKkD,OAAOsC,MAAMxD,IAAIyD,KAAK,UAClDzF,KAAK2F,QAEN3F,KAAKS,aAAa,WAAYT,KAAKU,WACnC,GA1BF,yBA4BC,SAAoBkF,GACnB5F,KAAKqF,cAAgBO,CACrB,GA9BF,oBAgCC,SAAeA,GAAyB,QACjC7F,EAASC,KAAKiC,KAAK4D,UAAUD,EAAM7F,QAEzC,GAAc,MAAVA,GAAkC,MAAhBA,EAAO+F,OAAkB/F,EAAO+F,MAAtD,CAIA,IAAI5B,EAAQ,UAAGlE,KAAKkE,SAAS6B,SAASH,UAA1B,QAAoC,EAE5C1B,GADoBlE,KAAKgG,eAAeC,gBAG3C/B,GAAYgC,EAAAA,GAEb,IAAMC,EAAU,UAAGnG,KAAKkE,SAASkC,eAAeR,UAAhC,QAA0C,EAEpDS,EAAmC,MAAtBrG,KAAKqF,eAAyBrF,KAAKqF,cAActF,SAAW6F,EAAM7F,OAAUC,KAAKqF,cAAcjC,UAAYwC,EAAMxC,UACpI,GAAIpD,KAAKsG,aAAavG,EAAQsG,GAAY,CACzC,IACkC,QAG3B,MAJDE,EAAoBX,EAAMxC,UAAYpD,KAAKkD,OAAOC,KAAKC,UACzDc,EAAWqC,GACdvG,KAAKwE,MAAL,yDAAqCzE,EAAOoC,KAA5C,gBAAuDnC,KAAKkD,OAAOsD,qBAAqBZ,EAAMxC,UAAW,GAAzG,0BAA4Hc,EAA5H,4BAAuJiC,EAAvJ,mCAA2LI,IAC3LvG,KAAKmF,WAAaf,KAAKC,IAAI,EAAGkC,KAE9BvG,KAAKwE,MAAL,2CAA6BzE,EAAOoC,KAApC,gBAA+CnC,KAAKkD,OAAOsD,qBAAqBZ,EAAMxC,UAAW,GAAjG,0BAAoHc,EAApH,4BAA+IiC,IAC/InG,KAAKmF,WAAaf,KAAKC,IAAIH,EAAUiC,IAEtCnG,KAAKoF,aAAe,CACpB,KAAM,OACNpF,KAAKwE,MAAL,kCAAgCzE,EAAOoC,KAAvC,gBAAkDnC,KAAKkD,OAAOsD,qBAAqBZ,EAAMxC,UAAW,IACpG,CACDpD,KAAKqF,mBAAgBoB,CAxBpB,CAyBD,GA9DF,0BAuEC,SAAuBC,EAAiBL,GACvC,OAAQrG,KAAK2G,SAASC,WAAWP,EACjC,GAzEF,8BA2EC,WAAqC,UACpCrG,KAAKwE,MAAL,yBAAuBxE,KAAKoF,YAA5B,iCAA+DpF,KAAKmF,UAApE,kBACA,IAAM0B,EAAgB7G,KAAKkD,OAAO4D,gBAAkB9G,KAAK2G,SAASI,cAC5DC,EAAShH,KAAKmF,UAAY0B,EAAgB,IAEhD,OADA7G,KAAKwE,MAAL,4CAAoCxE,KAAKkD,OAAO4D,gBAAhD,yBAA+E9G,KAAK2G,SAASI,cAA7F,iCAAkIC,IAC3HA,CACP,GAjFF,wBAmFC,WACwB,IAAnBhH,KAAKmF,WAITnF,KAAKiH,UAAU9F,IAAI,IAAI+F,EAAAA,GAAK,CAC3B/E,MAAM,SAAC,EAAAJ,MAAD,CAAOC,GAAG,yBAAV,+BACNmF,aAAa,SAAC,EAAApF,MAAD,CAAOC,GAAG,+BAAV,gLAKboF,cAAe,EACfC,aAAc,CACb,IAAIC,EAAAA,GAAY,CACfnF,MAAM,SAAC,EAAAJ,MAAD,CAAOC,GAAG,8BAAV,wBACNuF,QAASvH,KAAKwH,sBAGhBC,OAxGmB,KA0GpB,KAxGF,GAAqCnD,EAAAA,IAArC,EACiBC,OAAS,MAD1B,EAEiBC,OAAQ,EAFzB,sCAIEC,EAAAA,EAJF,iFAIuBP,QAJvB,uCAKEO,EAAAA,EALF,iFAKuBwC,SALvB,kCAMExC,EAAAA,EANF,iFAMuBxC,IANvB,sCAOEwC,EAAAA,EAPF,iFAOuBkC,QAPvB,4CAQElC,EAAAA,EARF,iFAQuBuB,cARvB,8CASEvB,EAAAA,EATF,iFASuBiD,gBATvB,M,0RCJMC,EAA8E,CACnFC,MAAO,iNACPC,aAAc,uJAGF5C,GAAb,iCAG4BtF,EAAAA,GAH5B,iCAIkCmI,EAAAA,IAJlC,iCAKwC5C,EAAAA,GALxC,sWAOC,WACClF,KAAKS,aAAa,WAAYT,KAAKU,WACnC,GATF,yBAgBC,WACC,OAAOV,KAAK0H,iBAAiBK,oBAAoB,CAAChF,SAAUiF,EAAAA,GAC5D,GAlBF,yBAqBC,WACC,OAAOhI,KAAK0H,iBAAiBO,uBAC7B,GAvBF,wBAyBC,WACC,IAAMC,EAAYlI,KAAKmI,cAEvBnI,KAAKoI,WAAWjH,IAAI,IAAIkH,EAAAA,GAAgB,CACvCC,MAAOJ,GACJ,SAAC,EAAAnG,MAAD,CAAOC,GAAG,yBAAV,4BACA,SAAC,EAAAD,MAAD,CAAOC,GAAG,eAAV,wBACHuG,KAAMvI,KAAKiC,KAAKC,QAAQsG,OAAOD,KAC/BE,MAAOzI,KAAKkD,OAAOwF,eAAe1I,KAAKiG,eACvC0C,KAAMT,GAAY,iCACjB,SAAC,IAAD,CAAe3C,OAAQoC,EAAaC,SACpC,SAAC,IAAD,CAAerC,OAAQoC,EAAa3H,KAAKkD,OAAO0F,OAAOC,KAAKtD,kBACvDkB,IAEP,KAvCF,GAAoCnC,EAAAA,IAApC,EACiBC,OAAS,MAD1B,kCAGEE,EAAAA,EAHF,iFAGqBxC,IAHrB,wCAIEwC,EAAAA,EAJF,iFAIqB2D,UAJrB,8CAKE3D,EAAAA,EALF,iFAKqBiD,gBALrB,M,qRCTaoB,GAAb,iCAG8BnJ,EAAAA,GAH9B,iCAIgCC,EAAAA,IAJhC,iCAKsCJ,EAAAA,GALtC,yTAYWuJ,kBAAoB,MAZ/B,EAmBWC,0BAnBX,IAwBWC,kBAAoB,QAxB/B,EA6BWC,qBAAuB,WA7BlC,EAsCWC,mBAAoB,EAtC/B,EAwCSC,UAAqC,GAxC9C,EAyCSC,aAAwC,GAzCjD,iDA2CC,SAA2BC,GAC1B,OAAO,CACP,GA7CF,wBA+CC,WAAsB,eACfC,EAAY,YAAAvJ,KAAKkD,OAAOC,KAAKqG,QAAjB,QACT,SAAAhE,GAAK,OAAmB,MAAfA,EAAMiE,OAAiBjE,EAAMiE,MAAMzH,KAAO,EAAKkB,OAAOsC,MAAMxD,EAAhE,KADI,QAEZ,SAAA0H,GAAG,OAAIA,EAAI1H,EAAR,IACThC,KAAKS,cAAa6E,EAAAA,EAAAA,MAAgBG,KAAK,UAAUF,QAAOoE,EAAAA,EAAAA,IAAMJ,IAAavJ,KAAK2F,QAChF3F,KAAKS,aAAa,WAAYT,KAAKU,WACnC,GArDF,oBAuDC,SAAekF,GACV5F,KAAK4J,iBAAiBhE,GACzB5F,KAAKqJ,aAAa7I,KAAKoF,GAEvB5F,KAAKoJ,UAAU5I,KAAKoF,EAErB,GA7DF,wBA+DC,WACC,IAAIiE,EAEJ,GAAI7J,KAAKmJ,kBAAmB,CAC3B,IAAMW,EAAY9J,KAAKqC,SAASpC,OAAO,IAAI8J,EAAAA,GAAU,CACpDjI,MAAO9B,KAAK+I,kBACZxG,OAAQ,MAGTsH,EAAUC,EAAU7J,OAAO,IAAI8J,EAAAA,GAAU,CACxCjI,MAAO9B,KAAKiJ,kBACZ1G,MAAO,KAGR,IAAMyH,EAAaF,EAAU7J,OAAO,IAAI8J,EAAAA,GAAU,CACjDjI,MAAO9B,KAAKkJ,qBACZ3G,MAAO,KAGRvC,KAAKiK,cAAcD,EAAYhK,KAAKqJ,aAEpC,MAAM,GAAiC,MAA7BrJ,KAAKgJ,qBAA8B,CAC7C,IAAMkB,EAAelK,KAAKiC,KAAK4D,UAAU7F,KAAKgJ,sBAC9C,GAAoB,MAAhBkB,EAAwB,MAAM,IAAIC,MAAM,sDAI5CN,EAFkB7J,KAAKoK,eAAeC,OAAOH,GAEzBjK,OAAO,IAAI8J,EAAAA,GAAU,CACxCjI,MAAO9B,KAAK+I,kBACZxG,OAAQ,KAGT,MACAsH,EAAU7J,KAAKqC,SAASpC,OAAO,IAAI8J,EAAAA,GAAU,CAC5CjI,MAAO9B,KAAK+I,kBACZxG,OAAQ,MAIVvC,KAAKiK,cAAcJ,EAAS7J,KAAKoJ,UACjC,GAvGF,2BAyGC,SAAsBxI,EAAgB0J,GAAgC,WACrEA,EAAMxJ,SAAQ,SAAAyJ,GACb,IAAMxK,EAAS,EAAKkC,KAAK4D,UAAU0E,EAAKxK,QACxC,GAAc,MAAVA,EAAJ,CAEA,IAAMkD,EAAQsH,EAAKnH,UAAY,EAAKF,OAAOC,KAAKC,UAChDxC,EAAI0C,QAAQ,IAAIK,EAAAA,GAAW,CAC1B5D,OAAAA,EACAkD,MAAAA,EACAI,IAAKJ,IANwB,CAQ9B,GACD,KArHF,GAAiCqB,EAAAA,IAAjC,EACiBC,OAAS,cAD1B,kCAGEE,EAAAA,EAHF,iFAGuBxC,IAHvB,sCAIEwC,EAAAA,EAJF,iFAIqBpC,QAJrB,4CAKEoC,EAAAA,EALF,iFAKqB2F,cALrB,M,iHCNaI,EAAb,yMAICC,WAAa,EAAKxI,KAAKyI,SAASC,UAJjC,Y,SAA8BC,GAAjBJ,EACIjG,OAAS,WADbiG,EAEIlC,MAAQ,+C,uJCHZ9I,EAAb,+GAAoCqL,EAAAA,GAAvBrL,EACIY,KAAAA,IAAAA,EAAAA,IAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GACZyK,EAAAA,EAAAA,MAAAA,CACH,kBACA,kBACA,WACA,YACA,oBACA,cACA,cACA,WACA,aACA,YACA,aACA,QACA,eACA,YACA,c,gLCRW/F,GAAb,yMACSgG,aAA8B,GADvC,EAESC,kBAAwCtE,EAFjD,EAGSuE,wCAHT,8CAKC,YACC,4DAEA,IAAMC,GAAe3F,EAAAA,GAAAA,MAAgBC,OAAOvF,KAAKkD,OAAOsC,MAAMxD,IACxDkJ,EAAyBD,EAC7BlL,OAAOC,KAAKiC,KAAKC,QAAQiJ,aAAanJ,IACtCyD,KAAK,UACD2F,EAA2BH,EAC/BI,OAAOrL,KAAKiC,KAAKyI,SAASS,aAAanJ,IACvCyD,KAAK,gBAEPzF,KAAKS,aAAayK,EAAwBlL,KAAKsL,qBAC/CtL,KAAKS,aAAa2K,EAA0BpL,KAAKuL,qBACjD,GAlBF,iCAoBC,SAA4B3F,GAC3B,GAAyB,MAArB5F,KAAK+K,aAAT,CAEA/K,KAAK+K,aAAe,CACnB9H,MAAO2C,EAAMxC,UACbC,IAAKuC,EAAMxC,UAAYpD,KAAKiC,KAAKyI,SAASS,aAAapI,UAExD,IAAMyI,GAAkBlG,EAAAA,GAAAA,MACtBC,OAAOvF,KAAKkD,OAAOsC,MAAMxD,IACzBjC,QAAO0L,EAAAA,GAAAA,IAAO,CAACzL,KAAKiC,KAAKC,QAAQiJ,aAAanJ,MAC9CyD,KAAK,UACPzF,KAAKgL,mCAAqChL,KAAKS,aAAa+K,EAAiBxL,KAAKuL,sBAElFvL,KAAK8K,aAAatK,KAAKR,KAAK+K,aAZa,CAazC,GAlCF,kCAoCC,SAA6BnF,GACH,MAArB5F,KAAK+K,cAGsC,MAA3C/K,KAAKgL,qCAIThL,KAAK+K,aAAa1H,IAAMuC,EAAMxC,UAC9BpD,KAAK0L,gBAAgB1L,KAAKgL,oCAE1BhL,KAAK+K,kBAAetE,EACpBzG,KAAKgL,wCAAqCvE,EAE1C,GAlDF,0BAoDC,SAAsB1G,EAAgBsG,GACrC,OAAItG,IAAWC,KAAKiC,KAAKC,QAAQiJ,cAChCnL,KAAKwE,MAAL,2CAA+CxE,KAAKkD,OAAOsD,qBAAqBH,MACzE,IAGR,6DAA0BtG,EAAQsG,EAClC,GA3DF,8BA6DC,WAAoC,aAC7BQ,EAAgB7G,KAAKkD,OAAO4D,gBAAkB9G,KAAK2G,SAASI,cAC5D4E,EAAgB,OAAA3L,KAAK8K,cAAL,QAAyB,SAACc,EAAKC,GACpD,IAAMlF,EAAW,EAAKA,SAASI,YAC9B8E,EAAM5I,MACN4I,EAAMxI,KAGP,OAAOuI,EAD2BxH,KAAKC,IAAIwH,EAAMxI,IAAMwI,EAAM5I,MAAO,EAAK+C,eAAeC,eAC/CU,CACzC,GAAE,GAGH,OAFgB3G,KAAKmF,UAAYwG,GAAkB9E,EAAiB,GAGpE,KA1EF,G,SAAqCiF,G,YCRxBC,GAAb,yMAEUC,eAAiBC,GAAAA,GAAAA,kBAAAA,KAF3B,Y,SAA4BC,G,qPCwBtBC,GAA0B,CAC/B,aACA,aACA,QACA,aAcYC,IAAb,iCAI4BzM,GAAAA,GAJ5B,iCAKgCqF,GAAAA,GALhC,iCAMgCpF,GAAAA,IANhC,2TAQSyM,SAAqB,GAR9B,EASSC,eAAyC,GATlD,EAWSC,gBAXT,gBAYG,EAAKtK,KAAKC,QAAQsK,WAAWxK,GAAK,CAClCiB,MAAO,EAAKC,OAAOC,KAAKC,UACxBkH,MAAO,MAdV,UAgBG,EAAKrI,KAAKC,QAAQuK,MAAMC,cAAgB,CACxCzJ,MAAO,EAAKC,OAAOC,KAAKC,UACxBkH,MAAO,MAlBV,UAoBG,EAAKrI,KAAKC,QAAQyK,UAAU3K,GAAK,CACjCiB,MAAO,EAAKC,OAAOC,KAAKC,UACxBkH,MAAO,KAtBV,+CA0BC,WAAsB,WACrBtK,KAAKqM,SAAW,KAAAF,IAAU,KAAVA,IAAe,SAAAS,GAAS,OAAI,EAAK3K,KAAKC,QAAQ0K,GAAW5K,EAAjC,IAExC,IAAM6K,GAAavH,EAAAA,GAAAA,MACjBG,KAAK,UACLF,OAAOvF,KAAKkD,OAAOsC,MAAMxD,IAE3BhC,KAAKS,aAAaoM,EAAW9M,QAAO4J,EAAAA,GAAAA,IAAM3J,KAAKqM,WAAYrM,KAAK8M,iBAChE9M,KAAKS,aAAaoM,EAAY7M,KAAK2F,OACnC,GAnCF,6BAqCC,SAAwBC,GAAyB,MAC1C7F,EAASC,KAAKiC,KAAK4D,UAAUD,EAAM7F,QAEzC,GAAKA,GAAWA,EAAOgN,SAAvB,CAEA,IAAM/K,EAAE,UAAGjC,EAAO2M,qBAAV,QAA2B3M,EAAOiC,GACpCgL,EAAShN,KAAKuM,eAAevK,GAC7BiL,EAAkBrH,EAAMxC,UAGxB8J,EAAkB9I,KAAK+I,IAAIH,EAAO/J,MAAQlD,EAAOgN,SAAUE,GAE7DG,EAAkBF,EAGtB,GAAIlN,KAAK2G,SAASC,WAAWsG,GAAkB,CAC9C,IAAMG,EAAiBrN,KAAK2G,SAAS2G,mBAAmBN,EAAO/J,MAAOgK,GAAiB,GACvFG,EAAkBC,EAAehK,IAG7BgK,EAAehK,IAAMgK,EAAepK,MAjFb,OAkF1BmK,GAnFoB,MAqFrB,CAED,IAAMG,EAAQnJ,KAAKC,IAAI,EAAG4I,EAAkBG,GAGxCG,EA9Fe,MA+FlBvN,KAAKsM,eAAe9L,MAApB,oBACIwM,GADJ,IAECQ,gBAAiB5H,EAAM7F,OACvBwN,MAAOA,EACPlK,IAAK4J,KAKPjN,KAAKuM,eAAevK,GAAM,CACzBiB,MAAOgK,EACP3C,MAAO,GArCmC,CAuC3C,GA/EF,oBAiFC,SAAe1E,GACd,cAAqB,KAAc5F,KAAKuM,gBAAxC,eAAiB,KACTjC,MAAM9J,KAAKoF,EAEnB,GArFF,oBAuFC,WAAkB,aAEjB,GAAK5F,KAAKsM,eAAemB,OAAzB,CAEA,IAAMC,GAAa,WAACC,GAAA,EAAD,CAAOC,YAAU,EAACC,aAAW,EAACC,QAAQ,OAAtC,WAClB,UAACH,GAAA,SAAD,WACC,WAACA,GAAA,MAAD,YACC,UAACA,GAAA,aAAD,WAAkB,UAAC,GAAA5L,MAAD,CAAOC,GAAG,6BAAV,0BAClB,UAAC2L,GAAA,aAAD,WAAkB,UAAC,GAAA5L,MAAD,CAAOC,GAAG,yBAAV,4BAClB,UAAC2L,GAAA,aAAD,UAGF,UAACA,GAAA,OAAD,UACE,OAAA3N,KAAKsM,gBAAL,QAAwB,SAAAU,GACxB,OAAO,WAACW,GAAA,MAAD,YACN,UAACA,GAAA,OAAD,UAAa,EAAKzK,OAAOsD,qBAAqBwG,EAAO3J,QACrD,UAACsK,GAAA,OAAD,WACC,UAAC,GAAA5L,MAAD,CAAOC,GAAG,wBAAV,yCAC4E,EAAKkB,OAAOwF,eAAesE,EAAOO,QAD9G,aACC,UAAC,OAAD,WAAgB,EAAKtL,KAAK4D,UAAUmH,EAAOQ,yBAG7C,UAACG,GAAA,OAAD,WACC,UAACI,GAAA,EAAD,CAAQC,QAAS,kBAChB,EAAK3L,SAAS4L,KAAKjB,EAAO/J,MAAQ,EAAKC,OAAOC,KAAKC,UAAW4J,EAAO3J,IAnIpD,KAmI6E,EAAKH,OAAOC,KAAKC,UAD/F,EAAjB,UAEC,UAAC,GAAArB,MAAD,CAAOC,GAAG,gCAAV,oCAVoBgL,EAAO/J,MAc9B,SAIH,OAAO,WAAC,GAAAiL,SAAD,YACN,UAACC,GAAA,EAAD,WACC,UAAC,GAAApM,MAAD,CAAOC,GAAG,8BAAV,0RACC,UAAC,MAAD,CAAYjC,OAAO,eAAe,UAAC,MAAD,CAAYA,OAAO,gBAAoB,UAAC,MAAD,CAAYA,OAAO,WACZ,UAAC,MAAD,CAAYA,OAAO,qBAIpG2N,IAtCyC,CAwC3C,KAjIF,GAA2BpJ,GAAAA,IAA3B,EACiBC,OAAS,QAD1B,EAEiB+D,MAAQ,4CAFzB,mCAIE7D,GAAAA,EAJF,iFAIqBxC,IAJrB,uCAKEwC,GAAAA,EALF,iFAKqBkC,QALrB,uCAMElC,GAAAA,EANF,iFAMqBpC,QANrB,O,+HCjCM+L,GAAmB,CACxBC,KAAM,CACL,GAAIC,GAAAA,GAAAA,MACJ,GAAIA,GAAAA,GAAAA,OACJ,GAAIA,GAAAA,GAAAA,OAELC,QAAS,CACR,GAAID,GAAAA,GAAAA,MACJ,GAAIA,GAAAA,GAAAA,OACJ,GAAIA,GAAAA,GAAAA,QAKAE,GAAaC,KAAM,WAAWC,KADhB,KAEdC,GAAgBF,KAAM,WAAWC,KAFnB,KAYPE,IAAb,iCAGmCC,GAAAA,IAHnC,sPAKSC,KAAO,EAAK3N,IAAI,IAAI4N,GAAAA,GAAa,CACxCC,MAAO,CACNlN,OAAO,UAAC,GAAAC,MAAD,CAAOC,GAAG,0BAAV,kBACPiN,MAAOT,OARV,EAYSU,QAAU,EAAK/N,IAAI,IAAI4N,GAAAA,GAAa,CAC3CC,MAAO,CACNlN,OAAO,UAAC,GAAAC,MAAD,CAAOC,GAAG,6BAAV,qBACPiN,MAAON,OAfV,EAmBSQ,cAA0B,IAAI,KAAJ,CAAQ,CACzC,CAAC,EAAKlN,KAAKC,QAAQkN,kBAAkBpN,GAAI,CAAC4D,MAAO,SAAUH,KAAM,WAAY4J,OAAQ,IACrF,CAAC,EAAKpN,KAAKC,QAAQoN,iBAAiBtN,GAAI,CAAC4D,MAAO,QAASH,KAAM,WAAY4J,OAAQ,IACnF,CAAC,EAAKpN,KAAKC,QAAQqN,kBAAkBvN,GAAI,CAAC4D,MAAO,QAASH,KAAM,WAAY4J,OAAQ,IACpF,CAAC,EAAKpN,KAAKC,QAAQsN,YAAYxN,GAAI,CAAC4D,MAAO,SAAUH,KAAM,WAAY4J,OAAQ,IAC/E,CAAC,EAAKpN,KAAKC,QAAQuN,WAAWzN,GAAI,CAAC4D,MAAO,SAAUH,KAAM,WAAY4J,OAAQ,KAC9E,CAAC,EAAKpN,KAAKC,QAAQwN,kBAAkB1N,GAAI,CAAC4D,MAAO,SAAUH,KAAM,WAAY4J,OAAQ,KACrF,CAAC,EAAKpN,KAAKC,QAAQyN,YAAY3N,GAAI,CAAC4D,MAAO,SAAUH,KAAM,QAAS4J,OAAQ,OA1B9E,EA6BSO,iBAA6B,IAAI,KAAJ,CAAQ,CAC5C,CAAC,EAAK3N,KAAKC,QAAQqN,kBAAkBvN,GAAI,CAAC4D,MAAO,QAASH,KAAM,WAAY4J,OAAQ,KACpF,CAAC,EAAKpN,KAAKC,QAAQsK,WAAWxK,GAAI,CAAC4D,MAAO,SAAUH,KAAM,WAAY4J,OAAQ,KAC9E,CAAC,EAAKpN,KAAKC,QAAQyK,UAAU3K,GAAI,CAAC4D,MAAO,SAAUH,KAAM,WAAY4J,OAAQ,KAC7E,CAAC,EAAKpN,KAAKC,QAAQ2N,gBAAgB7N,GAAI,CAAC4D,MAAO,SAAUH,KAAM,QAAS4J,OAAQ,OAjClF,EAoCSS,eAAiB,EApC1B,+CAsCC,SAAsBC,EAAqBC,GAC1C,IAD+D,EACzDC,EAAgB,GAChBC,EAAc,GAF2C,WAI9B,KAAAF,GAAS,KAATA,IAJ8B,IAI/D,2BAAsD,2BAA1CjQ,EAA0C,KAClC,WADkC,KAC5C6F,MACRqK,EAAczP,KAAKT,GACnBmQ,EAAY1P,KAAKT,EAClB,CAR8D,+BAU/D,IAAMoQ,GAAa7K,EAAAA,GAAAA,MAAgBC,OAAOvF,KAAKkD,OAAOsC,MAAMxD,IAEtDoO,EAAeD,EACnB1K,MAAKkE,EAAAA,GAAAA,IAAM,CAAC,SAAU,WACtB5J,QAAO4J,EAAAA,GAAAA,IAAMuG,IAETG,EAAeF,EACnB1K,KAAK,UACL6K,OAAMhL,EAAAA,GAAAA,MACLG,KAAK,UACL1F,QAAO4J,EAAAA,GAAAA,IAAMsG,KAGhBjQ,KAAKS,aAAa2P,EAAcpQ,KAAKuQ,SAASR,EAAOC,IACrDhQ,KAAKS,aAAa4P,EAAcrQ,KAAKwQ,SAAST,EAAOC,GACrD,GA/DF,wBAiEC,YACC,4DAEAhQ,KAAKyQ,cAAczQ,KAAK8O,KAAM9O,KAAKmP,eACnCnP,KAAKyQ,cAAczQ,KAAKkP,QAASlP,KAAK4P,kBACtC5P,KAAKS,aAAa,WAAYT,KAAKU,WACnC,GAvEF,yBAyEC,WACC,OAAOV,KAAK8P,cACZ,GA3EF,sBA6EC,SAAiBC,EAAqBC,GAAqB,WAC1D,OAAO,SAACpK,GACP,IAAM8K,EAAWV,EAAUrO,IAAIiE,EAAM7F,QAEjC2Q,GAAYA,EAAS9K,QAAUA,EAAMH,MACxC,EAAKkL,YAAYZ,EAAOW,EAEzB,CACD,GArFF,sBAuFC,SAAiBX,EAAqBC,GAAqB,WAC1D,OAAO,SAACpK,GACP,GAAyB,WAArBA,EAAM0K,MAAM7K,OAAsBmL,EAAAA,GAAAA,IAAgBhL,GAAtD,CAEA,IAAM8K,EAAWV,EAAUrO,IAAIiE,EAAM0K,MAAMvQ,QAEvC2Q,GACH,EAAKC,YAAYZ,EAAOW,EAL+C,CAOxE,CACD,GAjGF,yBAmGC,SAAoBX,EAAqBW,GAClB,UAAlBA,EAASjL,MACZzF,KAAK8P,eAAiBC,EAAMtH,MAC5BsH,EAAMc,SAEsB,aAAlBH,EAASjL,KACnBsK,EAAMe,SAASJ,EAASrB,QAGxBU,EAAMgB,MAAML,EAASrB,OAEtB,GA9GF,wBAgHC,WACCrP,KAAKgR,YAAY7P,IAAI,IAAI8P,GAAAA,GAAiB,CACzC1I,KAAMvI,KAAKiC,KAAKC,QAAQyN,YAAYpH,KACpCrI,SAAS,UAAC,GAAA6B,MAAD,CAAOC,GAAG,2CAAV,uHAGTkP,MAAO9C,GAAiBC,KACxB5F,MAAOzI,KAAK8O,KAAKqC,QACjBC,KAAK,UAAC,GAAArP,MAAD,CAAOC,GAAG,uCAAV,+DACMhC,KAAK8O,KAAKqC,cAItBnR,KAAKgR,YAAY7P,IAAI,IAAI8P,GAAAA,GAAiB,CACzC1I,KAAMvI,KAAKiC,KAAKC,QAAQ2N,gBAAgBtH,KACxCrI,SAAS,UAAC,GAAA6B,MAAD,CAAOC,GAAG,8CAAV,8HACsD,UAAC,MAAD,CAAUjC,OAAO,uBAEhFmR,MAAO9C,GAAiBG,QACxB9F,MAAOzI,KAAKkP,QAAQiC,QACpBC,KAAK,UAAC,GAAArP,MAAD,CAAOC,GAAG,0CAAV,kEACMhC,KAAKkP,QAAQiC,aAGzB,KAxIF,GAA2BE,GAAAA,IAA3B,EACiB/I,MAAQ,uDADzB,0CAGE7D,GAAAA,EAHF,iFAGqBuM,WAHrB,O,YClCMM,GAAuB,IAERC,GAAAA,SAAAA,I,4LACpBC,WAAa,CAAC,CACbxQ,UAAW,CAAC,EAAKiB,KAAKC,QAAQuP,UAC9BC,eAAgB,KACd,CACF1Q,UAAW,CAAC,EAAKiB,KAAKC,QAAQwN,mBAC9BgC,eAAgB,KACd,CACF1Q,UAAW,CAAC,EAAKiB,KAAKC,QAAQyP,YAC9BC,uBAAwB,IACxBF,gBAAiB,KACf,CACF1Q,UAAW,CAAC,EAAKiB,KAAKC,QAAQsK,YAC9BoF,uBAAwBN,GACxBI,eAAgB,GAGd,CACF1Q,UAAW,CACV,EAAKiB,KAAKC,QAAQuK,MAClB,EAAKxK,KAAKC,QAAQ2P,YAEnBD,uBAAwBN,GACxBI,eAAgB,MAEd,CACF1Q,UAAW,CAAC,EAAKiB,KAAKC,QAAQyK,WAC9BiF,uBAAwBN,GACxBI,eAAgB,OAEd,CACF1Q,UAAW,CAAC,EAAKiB,KAAKC,QAAQ4P,aAC9BJ,eAAgB,IAChBK,QAAS,CAAC7P,QAAS,CAAC,EAAKD,KAAKC,QAAQ8P,YAAaC,aAAc,OAC/D,CACFjR,UAAW,CAAC,EAAKiB,KAAKC,QAAQgQ,UAC9BR,eAAgB,IAChBK,QAAS,CAAC7P,QAAS,CAAC,EAAKD,KAAKC,QAAQ8P,YAAaC,aAAc,Q,WArC9CV,CAA0BY,GAAAA,G,kFCiBzCC,GAAgC,CACrC,aACA,iBAGYC,IAAb,iCAI4B1S,GAAAA,GAJ5B,iCAKgCC,GAAAA,IALhC,oRAOSiD,QAA4C,IAAIyP,GAAAA,GAAQ,iBAAM,EAAN,IAPjE,EAQSC,kBART,IASSC,gBAAkB,KAAAJ,IAAgB,KAAhBA,IAAqB,SAAAK,GAAG,OAAI,EAAKxQ,KAAKC,QAAQuQ,GAAKzQ,EAA3B,IATnD,EAUS0Q,oBAAsB,EAAKxP,OAAOyP,MAAMC,OAAO,OArBjB,IACA,IAUvC,EA2ESC,qBAAuB,SAACzP,GAAD,OAC9B,UAAC2K,GAAA,EAAD,CACC+E,UAAQ,EACRhF,SAAO,EACPvF,KAAK,OACLwK,KAAK,OACL/E,QAAS,kBAAM,EAAK3L,SAAS4L,KAAK7K,EAAY,EAAKF,OAAOC,KAAKC,UAAWA,EAAY,EAAKF,OAAOC,KAAKC,UAA9F,EACTlD,QAAS,EAAKgD,OAAOsD,qBAAqBpD,IAPb,EA3EhC,4CAcC,WACC,IAAM4P,GAAoB1N,EAAAA,GAAAA,MACxBC,OAAOvF,KAAKkD,OAAOsC,MAAMxD,IACzByD,KAAK,UACL1F,OAAOC,KAAKiC,KAAKC,QAAQyN,YAAY3N,IAEvChC,KAAKS,aAAauS,EAAmBhT,KAAKiT,eAC1CjT,KAAKS,aAAa,CACjBgF,KAAM,QACND,MAAOxF,KAAKkD,OAAOsC,MAAMxD,IACvBhC,KAAKkT,kBACRlT,KAAKS,aAAa,WAAYT,KAAKkT,iBACnC,GA1BF,8BA4BC,SAAyBtN,GACpB5F,KAAKuS,eACRvS,KAAK0L,gBAAgB1L,KAAKuS,cAC1BvS,KAAKuS,kBAAe9L,GAGrBzG,KAAK6C,QAAQsQ,aAAavN,EAAMxC,UAChC,GAnCF,2BAqCC,SAAsBwC,GACrB5F,KAAKkT,iBAAiBtN,GAEtB5F,KAAKuS,aAAevS,KAAKS,cACxB6E,EAAAA,GAAAA,MACEC,OAAOvF,KAAKkD,OAAOsC,MAAMxD,IACzByD,KAAK,UACPzF,KAAK2F,QAGN3F,KAAK6C,QAAQuQ,QAAQxN,EAAMxC,UAC3B,GAhDF,oBAkDC,SAAewC,GACd,IAAMyN,EAAgBrT,KAAK6C,QAAQyQ,aAEd,MAAjBD,IAEAzN,EAAMxC,UAAYiQ,EAAcpQ,MAAQjD,KAAK0S,oBAChD1S,KAAKkT,iBAAiBtN,GAIvByN,EAAcpR,KAAKzB,KAAKoF,GACxB,GA7DF,4BA+DC,SAAuB2N,GACtB,OAvE4B,IAuExBA,GACI,kBAAM/P,UAAU,aAAhB,SAA8B+P,IAGlCA,GA5E0B,GA6EtB,kBAAM/P,UAAU,eAAhB,SAAgC+P,IAGjCA,CACP,GAzEF,oBAsFC,WAAkB,aACjB,GAAoC,IAAhC,KAAAvT,KAAK6C,SAAgB4K,OAAzB,CAEA,IAAM+F,EAAS,YAAAxT,KAAK6C,UAAL,QAAyB,SAAAmK,GAAU,MAC3CyG,EAAsB,OAAAzG,EAAO/K,MAAP,QACnB,SAAAsI,GAAI,aAAI,SAAKiI,iBAAL,OAA8BjI,EAAKxK,OAAvC,IACX0N,OAEF,MAAO,CACNnF,MAAO,CACNmK,IAAK,SAAWzF,EAAO/J,MACvB/C,SAAS,WAAC,GAAAgO,SAAD,WACP,EAAK2E,qBAAqB7F,EAAO/J,OACjC,IACA,EAAKyQ,eAAeD,GAHb,MA1GiB,EA0GjB,KAG8D,oBAAQzR,GAAG,8BAAX,iFAAgDgL,EAAO/K,KAAKwL,cAGpIvN,QAAS,CACRuS,IAAK,WAAazF,EAAO/J,MACzB/C,SAAS,UAACyT,GAAA,EAAD,CAAUC,OAAQ5G,EAAO/K,QAGpC,IAED,OAAO,WAAC,GAAAiM,SAAD,YACN,UAACC,GAAA,EAAD,WACC,UAAC,GAAApM,MAAD,CAAOC,GAAG,oCAAV,qZAA+F6R,uBAzHpE,GAyH3B,aAAgI,UAAC,MAAD,CAAU9T,OAAO,gBAAmB,UAAC,MAAD,CAAUA,OAAO,mBAAuC,UAAC,MAAD,CAAUA,OAAO,iBAAqB,UAAC,MAAD,CAAUA,OAAO,mBAEpR,UAAC+T,GAAA,EAAD,CACCC,WAAW,EACXP,OAAQA,EACRQ,QAAM,EACNC,OAAK,MA/B0C,CAkCjD,KAzHF,GAAiC3P,GAAAA,IAAjC,EACiBC,OAAS,cAD1B,EAEiB+D,MAAQ,4DAFzB,mCAIE7D,GAAAA,EAJF,iFAIqBxC,IAJrB,uCAKEwC,GAAAA,EALF,iFAKqBpC,QALrB,OCzBa6R,GAAb,yMACoBC,kBAAoB,CACtC,EAAKlS,KAAKC,QAAQkS,UAClB,EAAKnS,KAAKC,QAAQmS,WAHpB,Y,SAAgCC,GCCXC,GAAAA,SAAAA,I,4LACpBvI,eAAiBC,GAAAA,GAAAA,YAAAA,K,EAEjBuI,eAAiB,CAChB,CACCC,UAAWxI,GAAAA,GAAAA,WACXyI,UAAW,CAACzI,GAAAA,GAAAA,OACZ0I,WAAY,GACV,CACFF,UAAWxI,GAAAA,GAAAA,cACXyI,UAAW,CAACzI,GAAAA,GAAAA,YACZ0I,WAAY,GACV,CACFF,UAAWxI,GAAAA,GAAAA,WACXyI,UAAW,CAACzI,GAAAA,GAAAA,mBACZ0I,WAAY,I,WAfMJ,C,SAAuBK,GCAvBC,GAAAA,SAAAA,I,4LACD9L,kBAAoB,kB,EACpBC,qBAAuBiD,GAAAA,GAAAA,gBAAAA,G,WAFtB4I,C,SAAsB/L,GCarCgM,GAA+B,CACpC,YACA,aACA,QACA,cAGKC,GAA0B,CAC/B,aACA,aACA,gBACA,oBACA,mBACA,qBAGKC,GAAa,CAClBC,SAAU,CACT,EAAG3G,GAAAA,GAAAA,MACH,EAAGA,GAAAA,GAAAA,OACH,EAAGA,GAAAA,GAAAA,OAEJ4G,aAAc,CACb,EAAG5G,GAAAA,GAAAA,OACH,EAAGA,GAAAA,GAAAA,QAeQ6G,IAAb,iCAG4BxV,GAAAA,GAH5B,iCAImCkP,GAAAA,IAJnC,yRAMSuG,MAAyB,CAACC,QAAQ,EAAOC,YAAa,GAN/D,EAOSzS,QAA6B,CAAC0S,QAAS,EAAGC,YAAa,GAPhE,EASSC,iBAAmB,KAAAX,IAAe,KAAfA,IAAoB,SAAArC,GAAG,OAAI,EAAKxQ,KAAKC,QAAQuQ,GAAKzQ,EAA3B,IATnD,EAUS0T,YAAc,KAAAX,IAAU,KAAVA,IAAe,SAAAtC,GAAG,OAAI,EAAKxQ,KAAKC,QAAQuQ,GAAKzQ,EAA3B,IAVzC,EAYS2T,WAAYrQ,EAAAA,GAAAA,MAClBC,OAAO,EAAKrC,OAAOsC,MAAMxD,IACzByD,KAAK,UACL1F,QAAO4J,EAAAA,GAAAA,IAAM,yBAAI,EAAK8L,mBAAV,OAA+B,EAAKC,gBAfnD,4CAiBC,WACC,IAAME,GAAmBtQ,EAAAA,GAAAA,MACvBC,OAAOvF,KAAKkD,OAAOsC,MAAMxD,IACzBqJ,OAAOrL,KAAKiC,KAAKyI,SAASmL,YAAY7T,IAExChC,KAAKS,aAAamV,EAAiBnQ,KAAK,eAAgBzF,KAAK8V,cAC7D9V,KAAKS,aAAamV,EAAiBnQ,KAAK,gBAAiBzF,KAAK+V,UAC9D/V,KAAKS,aAAa,WAAYT,KAAKU,WACnC,GAzBF,0BA2BC,WACKV,KAAKoV,MAAMC,SACdrV,KAAK6C,QAAQ2S,aAAe,GAE7BxV,KAAKoV,MAAMY,QAAUhW,KAAKS,aAAaT,KAAK2V,UAAW3V,KAAK2F,QAC5D3F,KAAKoV,MAAMC,QAAS,CACpB,GAjCF,oBAmCC,SAAezP,GAAyB,MACnC5F,KAAKoV,MAAMC,SAAW,OAAArV,KAAKyV,kBAAL,OAA+B7P,EAAM7F,UAC9DC,KAAK6C,QAAQ0S,SAAW,GAEzBvV,KAAKoV,MAAME,YAAc1P,EAAMxC,SAC/B,GAxCF,sBA0CC,SAAiBwC,GACZA,EAAMxC,UAAYpD,KAAKoV,MAAME,YArFR,MAsFxBtV,KAAK6C,QAAQ2S,aAAe,GAEH,MAAtBxV,KAAKoV,MAAMY,SACdhW,KAAK0L,gBAAgB1L,KAAKoV,MAAMY,SAEjChW,KAAKoV,MAAMC,QAAS,CACpB,GAlDF,wBAoDC,WACCrV,KAAKgR,YAAY7P,IAAI,IAAI8P,GAAAA,GAAiB,CACzC1I,KAAMvI,KAAKiC,KAAKC,QAAQyP,WAAWpJ,KACnCrI,SAAS,UAAC,GAAA6B,MAAD,CAAOC,GAAG,8CAAV,wKACU,UAAC,MAAD,CAAUjC,OAAO,gBAAkC,UAAC,MAAD,CAAUA,OAAO,eAAgB,UAAC,MAAD,CAAUA,OAAO,WAAe,UAAC,MAAD,CAAUA,OAAO,gBAA6F,UAAC,MAAD,CAAUA,OAAO,kBAEtQmR,MAAO8D,GAAWC,SAClBxM,MAAOzI,KAAK6C,QAAQ0S,QACpBnE,KAAK,UAAC,GAAArP,MAAD,CAAOC,GAAG,0CAAV,yGACoDhC,KAAK6C,QAAQ0S,cAIvEvV,KAAKgR,YAAY7P,IAAI,IAAI8P,GAAAA,GAAiB,CACzC1I,KAAMvI,KAAKiC,KAAKC,QAAQyP,WAAWpJ,KACnCrI,SAAS,UAAC,GAAA6B,MAAD,CAAOC,GAAG,6CAAV,8GACI,UAAC,MAAD,CAAUjC,OAAO,kBAE9BmR,MAAO8D,GAAWE,aAClBzM,MAAOzI,KAAK6C,QAAQ2S,YACpBpE,KAAK,UAAC,GAAArP,MAAD,CAAOC,GAAG,yCAAV,0GACqDhC,KAAK6C,QAAQ2S,iBAGxE,KA5EF,GAAgClR,GAAAA,IAAhC,EACiBC,OAAS,aAD1B,mCAGEE,GAAAA,EAHF,iFAGqBxC,IAHrB,0CAIEwC,GAAAA,EAJF,iFAIqBuM,WAJrB,O,wBCxCMiF,GAAAA,SAAAA,I,6BAML,WAAYC,GAAyB,6BACpC,cAAMA,IAJCC,kBAG6B,IAF7BC,uBAE6B,EAEpC,EAAKD,aAAeD,EAAKC,aACzB,EAAKC,kBAAoBF,EAAKE,kBAHM,CAIpC,C,yCAED,SAAmBpJ,EAAyCjN,GAC3D,OAAIA,EAAOA,OAAOiC,KAAOhC,KAAKmW,aACtBnW,KAAKoW,kBAAkBpJ,GAAU,EAAI,GAE7C,0DAAuBA,EAAQjN,EAC/B,K,EAjBIkW,CAA4BI,GAAAA,IAoBrB7L,GAAb,yMACS8L,mBAA+B,GADxC,4CAGC,WAAsB,gBACrB,4DAEAtW,KAAKS,cAAa6E,EAAAA,GAAAA,MAAgBC,OAAOvF,KAAKkD,OAAOsC,MAAMxD,IAAIqJ,OAAOrL,KAAKiC,KAAKyI,SAASmL,YAAY7T,IACnGyD,KAAK,gBAAiBzF,KAAKuW,qBAC7B,IAAMC,EAAO,cAAAxW,KAAKkD,OAAOC,KAAKqG,QAAjB,QACJ,SAAAhE,GAAK,OAAIA,EAAMiE,QAAU,EAAKvG,OAAOsC,KAAhC,KADD,QAEP,SAAAA,GAAK,OAAIA,EAAMxD,EAAV,IACXhC,KAAKS,cACJ6E,EAAAA,GAAAA,MACEC,QAAOoE,EAAAA,GAAAA,IAAM6M,IACbzW,QAAO4J,EAAAA,GAAAA,IAAM,CAAC3J,KAAKiC,KAAKC,QAAQuU,YAAYzU,GAAIhC,KAAKiC,KAAKC,QAAQwU,iBAAiB1U,MACnFyD,KAAK,UACPzF,KAAK2W,gBAGN3W,KAAK4W,aAAa,IAAIX,GAAoB,CACzCY,gBAAiB,CAChB,CACC9W,OAAQC,KAAKiC,KAAKC,QAAQuP,SAC1BqF,kBAAmB,GAEpB,CACC/W,OAAQC,KAAKiC,KAAKC,QAAQyP,WAC1BmF,kBAAmB,GAEpB,CACC/W,OAAQC,KAAKiC,KAAKC,QAAQwU,iBAC1BI,kBAAmB,GAEpB,CACC/W,OAAQC,KAAKiC,KAAKC,QAAQuK,MAC1BqK,kBAAmB,GAEpB,CACC/W,OAAQC,KAAKiC,KAAKC,QAAQyK,UAC1BmK,kBAAmB,GAEpB,CACC/W,OAAQC,KAAKiC,KAAKC,QAAQsK,WAC1BsK,kBAAmB,IAGrB9K,eAAgBhM,KAAKiC,KAAKC,QAAQ6U,aAAaxO,KAC/CyO,mBAAmB,UAAC,GAAAjV,MAAD,CAAOC,GAAG,kDAAV,uFAGnBiV,sBAAsB,UAAC,MAAD,CAAUlX,OAAO,eAAemX,UAAU,IAChEC,cAAe,CACd,EAAG7I,GAAAA,GAAAA,MACH,EAAGA,GAAAA,GAAAA,OACH,EAAGA,GAAAA,GAAAA,OAEJ6H,aAAcnW,KAAKiC,KAAKC,QAAQyP,WAAW3P,GAC3CoU,kBAAmBpW,KAAKoW,kBAAkBgB,KAAKpX,QAEhD,GA3DF,iCA6DC,SAA4B4F,GAC3B5F,KAAKsW,mBAAmB9V,KAAKoF,EAAMxC,UACnC,GA/DF,+BAiEC,SAA0B4J,GAAyC,QAC5DqK,EAAgB,cAAArK,EAAO/K,MAAP,QACb,SAAAqV,GAAC,OAAIA,EAAEvX,OAAO+F,KAAb,KADY,QAEhB,SAAAwR,GAAC,OAAIA,EAAElU,SAAN,IACP,GAA6B,IAAzBiU,EAAc5J,OAAgB,OAAO,EAGzC,IAAM8J,EAAWF,EAAc,GAC/B,OAAOrX,KAAKsW,mBAAmBkB,MAAK,SAAApU,GAAS,aAAImU,GAAYnU,GAAaA,IAAS,UAAK4J,EAAO3J,WAAZ,QAAmB2J,EAAO/J,MAAhE,GAC7C,KA1EF,GAA8BwU,GAAAA,G,YChBxBzC,GAAa,CAClB0C,aAAc,CACb,EAAGpJ,GAAAA,GAAAA,MACH,EAAGA,GAAAA,GAAAA,OACH,EAAGA,GAAAA,GAAAA,OAEJqJ,iBAAkB,CACjB,EAAGrJ,GAAAA,GAAAA,OACH,EAAGA,GAAAA,GAAAA,QAUQsJ,IAAb,iCAI4BjY,GAAAA,GAJ5B,iCAKmCkP,GAAAA,IALnC,iCAMgCjP,GAAAA,IANhC,4TAQSiD,QAAU,IAAIyP,GAAAA,GACrB,iBAAO,CACNsB,OAAQ,GACRiE,OAAQ,EAFT,IATF,EAeSC,gBAfT,IAgBSC,kBAhBT,IAkBS3H,cAAe9K,EAAAA,GAAAA,MACrBC,OAAO,EAAKrC,OAAOsC,MAAMxD,IACzByD,KAAK,UApBR,4CAsBC,WACC,IAAMwF,GAAe3F,EAAAA,GAAAA,MAAgBC,OAAOvF,KAAKkD,OAAOsC,MAAMxD,IAE9DhC,KAAKS,aAAawK,EAChBxF,KAAK,eACL4F,OAAOrL,KAAKiC,KAAKyI,SAAS+G,SAASzP,IACnChC,KAAKgY,SAEPhY,KAAKS,aAAawK,EAChBxF,KAAK,UACL6K,MAAMtQ,KAAKiC,KAAKgW,mBAAmB,CAACjY,KAAKiC,KAAKyI,SAAS+G,SAASzP,MAChEhC,KAAKwQ,UAEPxQ,KAAKS,aAAa,WAAYT,KAAKU,WACnC,GApCF,yBAsCC,SAAoB0C,GACnBpD,KAAK6C,QAAQsQ,aAAa/P,GAEH,MAAnBpD,KAAK8X,aACR9X,KAAK0L,gBAAgB1L,KAAK8X,YAC1B9X,KAAK8X,gBAAarR,GAGM,MAArBzG,KAAK+X,eACR/X,KAAKkY,oBAAoBlY,KAAK+X,cAC9B/X,KAAK+X,kBAAetR,EAErB,GAlDF,qBAoDC,SAAgBb,GAA8B,WAC7C,GAAiC,MAA7B5F,KAAK6C,QAAQyQ,aAAjB,CAMAtT,KAAK6C,QAAQuQ,QAAQxN,EAAMxC,WAEJ,MAAnBpD,KAAK8X,aACR9X,KAAK8X,WAAa9X,KAAKS,aAAaT,KAAKoQ,aAAcpQ,KAAKuQ,WAG7D,IAAM4H,EAAcvS,EAAMxC,UAAYpD,KAAKiC,KAAKyI,SAAS+G,SAAS1O,SAClE/C,KAAK+X,aAAe/X,KAAKoY,iBAAiBD,GAAa,kBAAM,EAAKE,YAAYF,EAAvB,GAVtD,MAFAnY,KAAK6C,QAAQyV,UAAS,SAAAC,GAAO,OAAIA,EAAQV,QAAZ,GAa9B,GAnEF,sBAqEC,SAAiBjS,GAChB5F,KAAK6C,QAAQyV,UAAS,SAAAC,GAAO,OAAIA,EAAQC,OAAS5S,EAAM6S,QAAQ,GAAGpJ,MAAtC,IAC7BrP,KAAKqY,YAAYzS,EAAMxC,UACvB,GAxEF,sBA0EC,SAAiBwC,GAChB5F,KAAK6C,QAAQyV,UAAS,SAAAC,GAAO,OAAIA,EAAQ3E,OAAOpT,KAAKoF,EAAxB,GAC7B,GA5EF,wBA8EC,WAAqB,QACpB5F,KAAK6C,QAAQsQ,aAAanT,KAAKkD,OAAOwV,uBAEtC,IAAMC,EAAe,YAAA3Y,KAAK6C,UAAL,QACZ,SAAA+V,GAAQ,OAAIA,EAAS3W,KAAK4V,OAtGf,CAsGH,IACfpK,OAEIoL,EAAmB,YAAA7Y,KAAK6C,UAAL,QAChB,SAAA+V,GAAQ,OAA4B,MAAxBA,EAAS3W,KAAKuW,QAA2C,IAAzBI,EAAS3W,KAAKuW,MAAlD,IACf/K,OAEFzN,KAAKgR,YAAY7P,IAAI,IAAI8P,GAAAA,GAAiB,CACzC1I,KAAMvI,KAAKiC,KAAKC,QAAQuP,SAASlJ,KACjCrI,SAAS,UAAC,GAAA6B,MAAD,CAAOC,GAAG,wCAAV,sNACgD,UAAC,MAAD,CAAYjC,OAAO,cAA2H,UAAC,MAAD,CAAYA,OAAO,kBAE1NmR,MAAO8D,GAAW0C,aAClBjP,MAAOkQ,EACPvH,KAAK,UAAC,GAAArP,MAAD,CAAOC,GAAG,oCAAV,sGACH2W,aAAAA,EAA6DG,cArH5C,QAyHpB9Y,KAAKgR,YAAY7P,IAAI,IAAI8P,GAAAA,GAAiB,CACzC1I,KAAMvI,KAAKiC,KAAKC,QAAQuP,SAASlJ,KACjCrI,SAAS,UAAC,GAAA6B,MAAD,CAAOC,GAAG,0CAAV,6KACgB,UAAC,MAAD,CAAYjC,OAAO,gBAE5CmR,MAAO8D,GAAW2C,iBAClBlP,MAAOoQ,EACPzH,KAAK,UAAC,GAAArP,MAAD,CAAOC,GAAG,sCAAV,iGACH6W,iBAAAA,OAGH,GAhHF,oBAkHC,WAAkB,aACjB,GAAoC,IAAhC,KAAA7Y,KAAK6C,SAAgB4K,OAAzB,CAEA,IAAMsL,EAAY,CACjBC,QAAQ,UAAC,GAAAjX,MAAD,CAAOC,GAAG,+CAAV,kBACRiX,SAAU,QAGLC,EAAe,CACpBF,QAAQ,UAAC,GAAAjX,MAAD,CAAOC,GAAG,4CAAV,oBACRiX,SAAU,UAGLE,EAAe,YAAAnZ,KAAK6C,UAAL,QAAyB,SAAA+V,GAAQ,gBAAK,CAC1D3V,MAAO2V,EAAS3V,MAAQ,EAAKC,OAAOC,KAAKC,UACzCC,KAAK,UAACuV,EAASvV,WAAV,QAAiBuV,EAAS3V,OAAS,EAAKC,OAAOC,KAAKC,UACzDgW,YAAa,CACZC,KAAM,CACLC,OAAQV,EAAS3W,KAAK4V,OACtB0B,SAzJiB,IA4JnBC,SAAU,CACThB,OAAM,UAAEI,EAAS3W,KAAKuW,cAAhB,QAA0B,GAEjCiB,SAAU,OAAAb,EAAS3W,KAAK2R,QAAd,QAAyB,SAAAhO,GAAK,MAAK,CAAC7F,OAAQ6F,EAAM7F,OAApB,IAZa,IAetD,OAAO,WAAC,GAAAmO,SAAD,YACN,UAACC,GAAA,EAAD,WACC,UAAC,GAAApM,MAAD,CAAOC,GAAG,6BAAV,0NAA4G8W,cApK1F,GAoKlB,aAA6C,UAAC,MAAD,CAAY/Y,OAAO,mBAEjE,UAAC2Z,GAAA,EAAD,CACCjB,QAAS,CAACM,GACVY,MAAO,CAACT,GACRjX,KAAMkX,EACNS,OAAQ5Z,KAAKqC,SAAS4L,SAnCmC,CAsC3D,KAzJF,GAA8B3J,GAAAA,IAA9B,EACiBC,OAAS,WAD1B,EAEiB+D,MAAQ,8CAFzB,mCAIE7D,GAAAA,EAJF,iFAIqBxC,IAJrB,0CAKEwC,GAAAA,EALF,iFAKqBuM,WALrB,uCAMEvM,GAAAA,EANF,iFAMqBpC,QANrB,O,mCCnBMwX,GAAkC,CACvC,YACA,cACA,cACA,oBAgBYC,IAAb,iCAIiCC,GAAAA,GAJjC,iCAK4Bpa,GAAAA,GAL5B,iCAM6BiP,IAN7B,iCAOmCC,GAAAA,IAPnC,qWASSmL,QAAwB,GATjC,4CAWC,WAAsB,eACfC,EAAsB,KAAAJ,IAAkB,KAAlBA,IAAuB,SAAAjN,GAAS,OAAI,EAAK3K,KAAKC,QAAQ0K,GAAW5K,EAAjC,IAEtDkY,EAAS,cAAAla,KAAKkD,OAAOC,KAAKqG,QAAjB,QACN,SAAAhE,GAAK,OAAIA,EAAMiE,QAAU,EAAKvG,OAAOsC,KAAhC,KADC,QAET,SAAAA,GAAK,OAAIA,EAAMxD,EAAV,IAELiJ,GAAe3F,EAAAA,GAAAA,MAAgBC,OAAOvF,KAAKkD,OAAOsC,MAAMxD,IACxDmY,GAAoB7U,EAAAA,GAAAA,MACxBC,QAAOoE,EAAAA,GAAAA,IAAMuQ,IACbzU,KAAK,UACL6K,OAAMhL,EAAAA,GAAAA,MACLG,KAAK,UACL1F,QAAO4J,EAAAA,GAAAA,IAAMsQ,KAEhBja,KAAKS,aAAawK,EAAalL,OAAOC,KAAKiC,KAAKC,QAAQ2N,gBAAgB7N,IAAKhC,KAAKoa,UAClFpa,KAAKS,aAAa0Z,EAAmBna,KAAKwQ,UAC1CxQ,KAAKS,aAAa,WAAYT,KAAKU,WACnC,GA7BF,uBA+BC,WACC,IAAM2Z,EAAY,KAAOra,KAAKga,SAC9B,GAAIK,KAAczY,EAAAA,GAAAA,IAAUyY,EAAUhX,KACrC,OAAOgX,CAGR,GArCF,6BAuCC,SAAwBC,GACvB,IAAMva,EAASC,KAAKiC,KAAK4D,UAAUyU,GACnCta,KAAKua,UAAUC,QAAQxa,KAAM,0BAC5B,UAAC,GAAA+B,MAAD,CAAOC,GAAG,2CAAV,8FACW,UAAC,OAAD,WAAgBjC,OAI5B,GA/CF,sBAiDC,SAAiB6F,GACZ5F,KAAKya,cACRza,KAAKya,YAAYpX,IAAMuC,EAAMxC,WAG9BpD,KAAKga,QAAQxZ,KAAK,CACjByC,MAAO2C,EAAMxC,UACb8L,QAASlP,KAAK+P,MAAM2K,cACpBjB,SAAU,IAEX,GA3DF,sBA6DC,SAAiB7T,GAChB,GAAyB,WAArBA,EAAM0K,MAAM7K,KAAhB,CAEA,IAAKzF,KAAKya,YACT,OAAOza,KAAK2a,gBAAgB/U,EAAM0K,MAAMvQ,QAGzCC,KAAKya,YAAYhB,SAASjZ,KAAK,CAC9BoF,MAAOA,EACP7F,OAAQ6F,EAAM0K,MAAMvQ,OACpByY,OAAQ5S,EAAM6S,QAAQ,GAAGpJ,SAGtBzJ,EAAM0K,MAAMvQ,SAAWC,KAAKiC,KAAKC,QAAQwU,iBAAiB1U,KAC7DhC,KAAKya,YAAYpX,IAAMuC,EAAMxC,UAbe,CAe7C,GA7EF,wBA+EC,WAAqB,aACpBpD,KAAKga,QAAQlZ,SAAQ,SAAA8Z,GAAC,OAAI,EAAKpW,MAAMoW,EAAf,IAEtB,IAAMC,EAAkB,OAAA7a,KAAKga,SAAL,QACf,SAAAc,GAAK,aAAI,eAAOA,EAAMrB,iBAAb,eAAwB1Z,UAAW,EAAKkC,KAAKC,QAAQwU,iBAAiB1U,EAA1E,IACZyL,OAEFzN,KAAKgR,YAAY7P,IAAI,IAAI8P,GAAAA,GAAiB,CACzC1I,KAAMvI,KAAKiC,KAAKC,QAAQ2N,gBAAgBtH,KACxCrI,SAAS,UAAC,GAAA6B,MAAD,CAAOC,GAAG,iDAAV,yPACS,UAAC,MAAD,CAAYjC,OAAO,qBAA8K,UAAC,MAAD,CAAYA,OAAO,uBAEtOmR,MAAO,CACN,EAAG5C,GAAAA,GAAAA,OACH,EAAGA,GAAAA,GAAAA,OAEJ7F,MAAOoS,EACPzJ,KAAK,UAAC,GAAArP,MAAD,CAAOC,GAAG,6CAAV,uGACH6Y,gBAAAA,OAGH,GApGF,oBAsGC,WAAkB,aACXrH,EAAS,OAAAxT,KAAKga,SAAL,QAAiB,SAAAc,GAAS,QAClCC,EAAc,OAAAD,EAAMrB,UAAN,QACX,SAACuB,EAAOC,GAAR,OAAmBD,EAAQC,EAAOzC,MAAlC,GAA0C,GAEnD,MAAO,CACNlQ,MAAO,CACNmK,IAAK,SAAWqI,EAAM7X,MACtB/C,SAAS,UAAC,GAAA6B,MAAD,CAAOC,GAAG,0BAAV,gFACP,EAAKkB,OAAOsD,qBAAqBsU,EAAM7X,OADhC,EAGP6X,EAAM5L,QAAyB6L,YAAAA,GAHxB,aAER,yBAIF7a,QAAS,CACRuS,IAAK,WAAaqI,EAAM7X,MACxB/C,SAAS,UAACyT,GAAA,EAAD,CAAUC,OAAQ,OAAAkH,EAAMrB,UAAN,QAAmB,SAAAwB,GAAM,OAAIA,EAAOrV,KAAX,OAGtD,IAED,OAAO,WAAC,GAAAsI,SAAD,YACN,UAACC,GAAA,EAAD,WACC,UAAC,GAAApM,MAAD,CAAOC,GAAG,8BAAV,wSAAsE,UAAC,MAAD,CAAYjC,OAAO,0BAE1F,UAAC+T,GAAA,EAAD,CACCC,WAAW,EACXP,OAAQA,EACRQ,QAAM,EACNC,OAAK,MAGP,KAtIF,GAA+B3P,GAAAA,IAA/B,GACiBC,OAAS,QAD1B,GAEiB+D,MAAQ,wDAFzB,0CAIE7D,GAAAA,EAJF,iFAIqB8V,SAJrB,oCAKE9V,GAAAA,EALF,iFAKqBxC,IALrB,qCAMEwC,GAAAA,EANF,iFAMqBsL,KANrB,2CAOEtL,GAAAA,EAPF,iFAOqBuM,WAPrB,OCvBA,IACCxR,EACAsF,GACAiH,GACAK,GACAwC,GACA2C,GACAc,GACA6B,GACAK,GACAM,GACAM,GACA3K,GACAoN,GACAkC,G","sources":["webpack://@xivanalysis/client/./src/parser/core/modules/ActionTimeline/ActionTimeline.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/ActionTimeline/ActionTimeline.module.css?2f05","webpack://@xivanalysis/client/./src/parser/core/modules/AlwaysBeCasting.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/GlobalCooldown.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/PetTimeline.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/Tincture.ts","webpack://@xivanalysis/client/./src/parser/jobs/mch/modules/ActionTimeline.tsx","webpack://@xivanalysis/client/./src/parser/jobs/mch/modules/AlwaysBeCasting.ts","webpack://@xivanalysis/client/./src/parser/jobs/mch/modules/Combos.ts","webpack://@xivanalysis/client/./src/parser/jobs/mch/modules/Drift.tsx","webpack://@xivanalysis/client/./src/parser/jobs/mch/modules/Gauge.tsx","webpack://@xivanalysis/client/./src/parser/jobs/mch/modules/GeneralCDDowntime.tsx","webpack://@xivanalysis/client/./src/parser/jobs/mch/modules/Hypercharge.tsx","webpack://@xivanalysis/client/./src/parser/jobs/mch/modules/Mitigation.tsx","webpack://@xivanalysis/client/./src/parser/jobs/mch/modules/MultiHitSkills.ts","webpack://@xivanalysis/client/./src/parser/jobs/mch/modules/QueenTimeline.ts","webpack://@xivanalysis/client/./src/parser/jobs/mch/modules/Reassemble.tsx","webpack://@xivanalysis/client/./src/parser/jobs/mch/modules/Tincture.tsx","webpack://@xivanalysis/client/./src/parser/jobs/mch/modules/Wildfire.tsx","webpack://@xivanalysis/client/./src/parser/jobs/mch/modules/YassQueen.tsx","webpack://@xivanalysis/client/./src/parser/jobs/mch/modules/index.ts"],"sourcesContent":["import {Trans} from '@lingui/react'\nimport {Action, ActionKey} from 'data/ACTIONS'\nimport {Analyser} from 'parser/core/Analyser'\nimport {dependency} from 'parser/core/Injectable'\nimport CastTime from 'parser/core/modules/CastTime'\nimport {ChargeHistoryEntry, CooldownEndReason, CooldownGroup, CooldownHistoryEntry, Cooldowns, SelectionSpecifier} from 'parser/core/modules/Cooldowns'\nimport {Data} from 'parser/core/modules/Data'\nimport {ActionItem, BaseItem, ContainerRow, SimpleItem, Timeline} from 'parser/core/modules/Timeline'\nimport React, {ReactNode} from 'react'\nimport {Icon} from 'semantic-ui-react'\nimport {ensureArray, isDefined} from 'utilities'\nimport styles from './ActionTimeline.module.css'\n\nconst ANIMATION_LOCK = 100\n\n// We're excluding the Action interface as it's unessecary for this config format, and complicates the discrimination later.\ntype RowSpecifierEntry = Exclude<SelectionSpecifier, Action>\n\n/**\n * One or more actions, action keys, or cooldown group IDs. The special-case\n * value \"GCD\" is available for selection of the GCD cooldown group.\n */\nexport type RowSpecifier = RowSpecifierEntry | RowSpecifierEntry[]\n\n/** Advanced configuration options for a row. */\nexport interface ActionRowConfig {\n\t/** Specifier(s) for items that should be displayed in this row. */\n\tcontent: RowSpecifier\n\t/** Label to display for the row. */\n\tlabel?: ReactNode\n\t/** Order of the row within the timeline. */\n\torder?: number\n}\n\n/** Configuration for a single row. */\nexport type ActionRow = RowSpecifier | ActionRowConfig\n\n// Internal row config used within the module\ntype InternalRowConfig =\n\t& Omit<ActionRowConfig, 'content'>\n\t& {content: readonly SelectionSpecifier[]}\n\nenum ItemDepth {\n\tCHARGE_GAIN = 0,\n\tACTION = 1,\n}\n\nexport class ActionTimeline extends Analyser {\n\tstatic override handle = 'actionTimeline'\n\tstatic override debug = false\n\n\t/**\n\t * Configuration for the rows generated by this module. Any cooldown groups\n\t * not represented in this configuration will be added to automatically\n\t * generated rows in order of use.\n\t */\n\tstatic rows: ActionRow[] = [\n\t\t{content: 'GCD', order: -97},\n\t]\n\n\t@dependency private castTime!: CastTime\n\t@dependency private cooldowns!: Cooldowns\n\t@dependency private data!: Data\n\t@dependency private timeline!: Timeline\n\n\tprivate resolvedRows: InternalRowConfig[] = []\n\tprivate groupRows = new Map<CooldownGroup, ContainerRow>()\n\n\t/** Retrieve the timeline row representing the specified action. */\n\tgetRow(action: ActionKey | Action) {\n\t\treturn this.addRow({content: [action]})\n\t}\n\n\toverride initialise() {\n\t\t// Add rows for all the configured entries\n\t\tfor (const config of (this.constructor as typeof ActionTimeline).rows) {\n\t\t\tconst resolvedConfig = this.resolveConfig(config)\n\t\t\tthis.resolvedRows.push(resolvedConfig)\n\t\t\tthis.addRow(resolvedConfig)\n\t\t}\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onComplete() {\n\t\t// Track the groups with configured rows so backfill doesn't duplicate\n\t\tconst populatedGroups = new Set<number>()\n\n\t\t// Add rows for all the configured entries\n\t\tfor (const config of this.resolvedRows) {\n\t\t\tconst row = this.addRow(config)\n\t\t\tthis.populateRow(row, config)\n\t\t\tconfig.content.forEach(specifier =>\n\t\t\t\tthis.cooldowns.groups(specifier).forEach(group => populatedGroups.add(group))\n\t\t\t)\n\t\t}\n\n\t\t// Figure out what groups have not been explicitly configured and build rows for them\n\t\tthis.cooldowns.allGroups()\n\t\t\t.filter(group => !populatedGroups.has(group))\n\t\t\t.forEach(group => {\n\t\t\t\tconst config = {content: [group]}\n\t\t\t\tconst row = this.addRow(config)\n\t\t\t\tthis.populateRow(row, config)\n\t\t\t})\n\t}\n\n\tprivate resolveConfig(config: ActionRow): InternalRowConfig {\n\t\t// Standardise the simple config into the main config shape\n\t\tlet finalConfig = config\n\t\tif (typeof finalConfig !== 'object' || Array.isArray(finalConfig)) {\n\t\t\tfinalConfig = {content: finalConfig}\n\t\t}\n\t\treturn {\n\t\t\t...finalConfig,\n\t\t\tcontent: ensureArray(finalConfig.content),\n\t\t}\n\t}\n\n\tprivate addRow(config: InternalRowConfig) {\n\t\t// If there's already a row for one of the specifiers, use it\n\t\tconst groups = config.content.flatMap(specifier => this.cooldowns.groups(specifier))\n\t\tconst existingRow = groups\n\t\t\t.map(group => this.groupRows.get(group))\n\t\t\t.find(isDefined)\n\t\tif (existingRow != null) {\n\t\t\treturn existingRow\n\t\t}\n\n\t\t// Using an IIFE because pattern matching isn't in the spec yet\n\t\tconst firstContent = config.content[0]\n\t\tconst label = (() => {\n\t\t\tif (config.label != null) { return config.label }\n\t\t\tif (firstContent === 'GCD')  { return <Trans id=\"core.action-timeline.label.gcd\">GCD</Trans> }\n\t\t\tif (typeof firstContent === 'string') { return this.data.actions[firstContent].name }\n\t\t\tif (typeof firstContent === 'number') { return this.cooldowns.cooldownHistory(firstContent)[0]?.action.name }\n\t\t\treturn firstContent.name\n\t\t})()\n\n\t\t// Build the row and save it to the groups for this config\n\t\t// TODO: collision handling?\n\t\tconst row = this.timeline.addRow(new ContainerRow({\n\t\t\tlabel,\n\t\t\torder: config.order,\n\t\t\tcollapse: true,\n\t\t}))\n\t\tgroups.forEach(group => this.groupRows.set(group, row))\n\n\t\treturn row\n\t}\n\n\tprivate populateRow(row: ContainerRow, {content}: InternalRowConfig) {\n\t\t// Add all the items\n\t\tthis.addCooldownItems(row, content.flatMap(specifier => this.cooldowns.cooldownHistory(specifier)))\n\t\tthis.addChargeItems(row, content.flatMap(specifier => this.cooldowns.chargeHistory(specifier)))\n\t}\n\n\tprivate addCooldownItems(row: ContainerRow, history: CooldownHistoryEntry[]) {\n\t\tfor (const entry of history) {\n\t\t\tconst duration = this.getCooldownDuration(entry)\n\n\t\t\t// TODO: with the adjusted cast time we might get some overlaps, should we try to avoid that?]\n\t\t\t// TODO: Add interrupt visuals. CD2 only records interrupts within the bounds of a cooldown, so we'll need to track it in some manner for long-cast actions.\n\t\t\tconst start = entry.start - this.parser.pull.timestamp\n\t\t\tconst end = start + duration\n\t\t\trow.addItem(new SimpleItem({\n\t\t\t\tstart,\n\t\t\t\tend,\n\t\t\t\tcontent: <div className={styles.cooldown}/>,\n\t\t\t}))\n\t\t}\n\t}\n\n\tprivate addChargeItems(row: ContainerRow, history: ChargeHistoryEntry[]) {\n\t\tfor (const entry of history) {\n\t\t\tconst item = entry.delta < 0\n\t\t\t\t? new ActionItem({\n\t\t\t\t\tdepth: ItemDepth.ACTION,\n\t\t\t\t\tstart: entry.timestamp - this.parser.pull.timestamp,\n\t\t\t\t\taction: entry.action,\n\t\t\t\t})\n\t\t\t\t: new ChargeGainItem({\n\t\t\t\t\tdepth: ItemDepth.CHARGE_GAIN,\n\t\t\t\t\tstart: entry.timestamp - this.parser.pull.timestamp,\n\t\t\t\t})\n\t\t\trow.addItem(item)\n\t\t}\n\t}\n\n\tprivate getCooldownDuration(entry: CooldownHistoryEntry) {\n\t\tlet duration = entry.end - entry.start\n\n\t\t// If the cooldown expired naturally, it _may_ have a cast time greater than its cooldown.\n\t\tif (entry.endReason === CooldownEndReason.EXPIRED) {\n\t\t\tconst castTime = this.castTime.forAction(entry.action.id, entry.start) ?? 0\n\n\t\t\t// We add the animation lock constant to the cast time to mimic the game's\n\t\t\t// behaviour - also sometimes known as \"caster tax\".\n\t\t\tduration = Math.max(duration, castTime + ANIMATION_LOCK)\n\t\t}\n\n\t\treturn duration\n\t}\n}\n\nclass ChargeGainItem extends BaseItem {\n\tContent = () => (\n\t\t<div className={styles.chargeGain}>\n\t\t\t<Icon name=\"angle double up\" className={styles.icon}/>\n\t\t</div>\n\t)\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"backgroundColour\":\"rgba(213, 221, 246, .4)\",\"chargeColor\":\"color(rgba(213, 221, 246, .4) a(100%) l(-20%))\",\"cooldown\":\"ActionTimeline-module_cooldown__3u1x3\",\"chargeGain\":\"ActionTimeline-module_chargeGain__3-Of9\",\"icon\":\"ActionTimeline-module_icon__8OvsF\"};","import {Trans} from '@lingui/react'\nimport {Action} from 'data/ACTIONS'\nimport {ANIMATION_LOCK} from 'data/CONSTANTS'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport CastTime from 'parser/core/modules/CastTime'\nimport Checklist, {Requirement, Rule} from 'parser/core/modules/Checklist'\nimport {Data} from 'parser/core/modules/Data'\nimport Downtime from 'parser/core/modules/Downtime'\nimport {GlobalCooldown} from 'parser/core/modules/GlobalCooldown'\nimport {SpeedAdjustments} from 'parser/core/modules/SpeedAdjustments'\nimport React from 'react'\n\nconst UPTIME_TARGET = 98\n\nexport class AlwaysBeCasting extends Analyser {\n\tstatic override handle = 'abc'\n\tstatic override debug = false\n\n\t@dependency protected castTime!: CastTime\n\t@dependency protected checklist!: Checklist\n\t@dependency protected data!: Data\n\t@dependency protected downtime!: Downtime\n\t@dependency protected globalCooldown!: GlobalCooldown\n\t@dependency protected speedAdjustments!: SpeedAdjustments\n\n\tprotected gcdUptime: number = 0\n\tprotected gcdsCounted: number = 0\n\n\tprivate lastBeginCast?: Events['prepare']\n\n\toverride initialise() {\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>().source(this.parser.actor.id).type('prepare'),\n\t\t\tthis.onBeginCast\n\t\t)\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>().source(this.parser.actor.id).type('action'),\n\t\t\tthis.onCast\n\t\t)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onBeginCast(event: Events['prepare']) {\n\t\tthis.lastBeginCast = event\n\t}\n\n\tprivate onCast(event: Events['action']) {\n\t\tconst action = this.data.getAction(event.action)\n\n\t\tif (action == null || action.onGcd == null || !action.onGcd) {\n\t\t\treturn\n\t\t}\n\n\t\tlet castTime = this.castTime.forEvent(event) ?? 0\n\t\tconst adjustedBaseGCD = this.globalCooldown.getDuration()\n\t\tif (castTime >= adjustedBaseGCD) {\n\t\t\t// Account for \"caster tax\" - animation lock on spells with cast time equal to or greater than the GCD that prevents starting the next spell until the animation finishes\n\t\t\tcastTime += ANIMATION_LOCK\n\t\t}\n\t\tconst recastTime = this.castTime.recastForEvent(event) ?? 0\n\n\t\tconst castStart = (this.lastBeginCast != null && this.lastBeginCast.action === event.action) ? this.lastBeginCast.timestamp : event.timestamp\n\t\tif (this.considerCast(action, castStart)) {\n\t\t\tconst relativeTimestamp = event.timestamp - this.parser.pull.timestamp\n\t\t\tif (castTime > relativeTimestamp) {\n\t\t\t\tthis.debug(`GCD Uptime for precast ${action.name} at ${this.parser.formatEpochTimestamp(event.timestamp, 1)} - Cast time: ${castTime} | Recast time: ${recastTime} | Time of completion: ${relativeTimestamp}`)\n\t\t\t\tthis.gcdUptime += Math.max(0, relativeTimestamp)\n\t\t\t} else {\n\t\t\t\tthis.debug(`GCD Uptime for ${action.name} at ${this.parser.formatEpochTimestamp(event.timestamp, 1)} - Cast time: ${castTime} | Recast time: ${recastTime}`)\n\t\t\t\tthis.gcdUptime += Math.max(castTime, recastTime)\n\t\t\t}\n\t\t\tthis.gcdsCounted += 1\n\t\t} else {\n\t\t\tthis.debug(`Excluding cast of ${action.name} at ${this.parser.formatEpochTimestamp(event.timestamp, 1)}`)\n\t\t}\n\t\tthis.lastBeginCast = undefined\n\t}\n\n\t/**\n\t * Implementing modules MAY override this to return false and exclude certain events from GCD uptime calculations.\n\t * By default, returns true if the cast did not start during downtime\n\t * @param action Action being considered for GCD uptime\n\t * @param timestamp Timestamp the action occurred at\n\t * @param castTime Calculated cast time of the action (adjusted by speed modifiers, if any active)\n\t */\n\tprotected considerCast(_action: Action, castStart: number) {\n\t\treturn !this.downtime.isDowntime(castStart)\n\t}\n\n\tprotected getUptimePercent(): number {\n\t\tthis.debug(`Observed ${this.gcdsCounted} GCDs for a total of ${this.gcdUptime} ms of uptime`)\n\t\tconst fightDuration = this.parser.currentDuration - this.downtime.getDowntime()\n\t\tconst uptime = this.gcdUptime / fightDuration * 100\n\t\tthis.debug(`Total fight duration: ${this.parser.currentDuration} - Downtime: ${this.downtime.getDowntime()} - Uptime percentage ${uptime}`)\n\t\treturn uptime\n\t}\n\n\tprotected onComplete() {\n\t\tif (this.gcdUptime === 0) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.checklist.add(new Rule({\n\t\t\tname: <Trans id=\"core.always-cast.title\">Always be casting</Trans>,\n\t\t\tdescription: <Trans id=\"core.always-cast.description\">\n\t\t\t\tMake sure you're always doing something. It's often better to make small\n\t\t\t\tmistakes while keeping the GCD rolling than it is to perform the correct\n\t\t\t\trotation slowly.\n\t\t\t</Trans>,\n\t\t\tdisplayOrder: -1,\n\t\t\trequirements: [\n\t\t\t\tnew Requirement({\n\t\t\t\t\tname: <Trans id=\"core.always-cast.gcd-uptime\">GCD Uptime</Trans>,\n\t\t\t\t\tpercent: this.getUptimePercent(),\n\t\t\t\t}),\n\t\t\t],\n\t\t\ttarget: UPTIME_TARGET,\n\t\t}))\n\t}\n}\n","import {MessageDescriptor} from '@lingui/core'\nimport {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport TransMarkdown from 'components/ui/TransMarkdown'\nimport {BASE_GCD} from 'data/CONSTANTS'\nimport React from 'react'\nimport {Report} from 'report'\nimport {Analyser} from '../Analyser'\nimport {dependency} from '../Injectable'\nimport {Data} from './Data'\nimport {SpeedAdjustments} from './SpeedAdjustments'\nimport {SimpleStatistic, Statistics} from './Statistics'\n\nconst estimateHelp: Record<Report['meta']['source'] | '__all', MessageDescriptor> = {\n\t__all: t('core.gcd.no-statistics.v2')`This GCD recast is an *estimate*, and may be incorrect. If it is reporting a GCD recast *longer* than reality, you likely need to focus on keeping your GCD rolling.`,\n\tlegacyFflogs: t('core.gcd.estimate-help.fflogs')`Precise attribute values are only available from FF Logs for the player who logged the report in ACT.`,\n}\n\nexport class GlobalCooldown extends Analyser {\n\tstatic override handle = 'gcd'\n\n\t@dependency private data!: Data\n\t@dependency private statistics!: Statistics\n\t@dependency private speedAdjustments!: SpeedAdjustments\n\n\toverride initialise() {\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\t/**\n\t * Get the base recast time of the parsed actor's GCD cooldown group, in milliseconds.\n\t * The value returned from this function _may_ be an estimate - check {@link GlobalCooldown.isEstimated}\n\t * to see if it is.\n\t */\n\tpublic getDuration() {\n\t\treturn this.speedAdjustments.getAdjustedDuration({duration: BASE_GCD})\n\t}\n\n\t/** Returns whether the GCD duration calculated by this module is an estimate. */\n\tpublic isEstimated() {\n\t\treturn this.speedAdjustments.isAdjustmentEstimated()\n\t}\n\n\tprivate onComplete() {\n\t\tconst estimated = this.isEstimated()\n\n\t\tthis.statistics.add(new SimpleStatistic({\n\t\t\ttitle: estimated\n\t\t\t\t? <Trans id=\"core.gcd.estimated-gcd\">Estimated GCD</Trans>\n\t\t\t\t: <Trans id=\"core.gcd.gcd\">GCD Recast</Trans>,\n\t\t\ticon: this.data.actions.ATTACK.icon,\n\t\t\tvalue: this.parser.formatDuration(this.getDuration()),\n\t\t\tinfo: estimated ? <>\n\t\t\t\t<TransMarkdown source={estimateHelp.__all}/>\n\t\t\t\t<TransMarkdown source={estimateHelp[this.parser.report.meta.source]}/>\n\t\t\t</> : undefined,\n\t\t}))\n\t}\n}\n","import {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {ActionTimeline} from 'parser/core/modules/ActionTimeline'\nimport {Data} from 'parser/core/modules/Data'\nimport {ActionItem, SimpleRow, Timeline} from 'parser/core/modules/Timeline'\n\n// This module puts pet skills on the timeline beneath the GCD spells\nexport class PetTimeline extends Analyser {\n\tstatic override handle = 'pettimeline'\n\n\t@dependency protected data!: Data\n\t@dependency private timeline!: Timeline\n\t@dependency private actionTimeline!: ActionTimeline\n\n\t/**\n\t * Implementing modules MAY change the timeline group name.\n\t * If canPetBeCommanded returns false, this is the only name that will\n\t * appear on the timeline.\n\t */\n\tprotected timelineGroupName = 'Pet'\n\t/**\n\t * Implementing modules MAY indicate that a pet has a specific summon action.\n\t * If canPetBeCommanded returns true, this field is not used.\n\t * If timelineSummonAction is set to an action ID, actions will be grouped under it.\n\t */\n\t// TODO: This should be transitioned to a stable action key type, rather than action ID\n\tprotected timelineSummonAction?: number\n\t/**\n\t * Implementing modules MAY change the timeline row name for pet autos.\n\t * If canPetBeCommanded returns false, this field is not used.\n\t */\n\tprotected timelineAutosName = 'Autos'\n\t/**\n\t * Implementing modules MAY change the timeline row name for pet commanded skills.\n\t * If canPetBeCommanded returns false, this field is not used.\n\t */\n\tprotected timelineCommandsName = 'Commands'\n\t/**\n\t * Implementing modules MAY indicate that a pet has both \"autos\" and \"command\" skills.\n\t * If set to true, the autos and command skills will appear on separate lines in the\n\t * timeline.  If set to false, all skills will appear on the same row.\n\t *\n\t * If this is set to true, also override isCommandedEvent to determine which events are\n\t * command skills.\n\t */\n\tprotected canPetBeCommanded = false\n\n\tprivate autoCasts: Array<Events['action']> = []\n\tprivate commandCasts: Array<Events['action']> = []\n\n\tprotected isCommandedEvent(_event: Events['action']): boolean {\n\t\treturn false\n\t}\n\n\toverride initialise() {\n\t\tconst actorPets = this.parser.pull.actors\n\t\t\t.filter(actor => actor.owner != null && actor.owner.id === this.parser.actor.id)\n\t\t\t.map(pet => pet.id)\n\t\tthis.addEventHook(filter<Event>().type('action').source(oneOf(actorPets)), this.onCast)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onCast(event: Events['action']) {\n\t\tif (this.isCommandedEvent(event)) {\n\t\t\tthis.commandCasts.push(event)\n\t\t} else {\n\t\t\tthis.autoCasts.push(event)\n\t\t}\n\t}\n\n\tprivate onComplete() {\n\t\tlet autoRow: SimpleRow\n\n\t\tif (this.canPetBeCommanded) {\n\t\t\tconst parentrow = this.timeline.addRow(new SimpleRow({\n\t\t\t\tlabel: this.timelineGroupName,\n\t\t\t\torder: -98,\n\t\t\t}))\n\n\t\t\tautoRow = parentrow.addRow(new SimpleRow({\n\t\t\t\tlabel: this.timelineAutosName,\n\t\t\t\torder: 1,\n\t\t\t}))\n\n\t\t\tconst commandRow = parentrow.addRow(new SimpleRow({\n\t\t\t\tlabel: this.timelineCommandsName,\n\t\t\t\torder: 2,\n\t\t\t}))\n\n\t\t\tthis.addCastsToRow(commandRow, this.commandCasts)\n\n\t\t} else if (this.timelineSummonAction != null) {\n\t\t\tconst summonAction = this.data.getAction(this.timelineSummonAction)\n\t\t\tif (summonAction == null) { throw new Error('Timeline summon action set to an invalid action ID') }\n\n\t\t\tconst parentRow = this.actionTimeline.getRow(summonAction)\n\n\t\t\tautoRow = parentRow.addRow(new SimpleRow({\n\t\t\t\tlabel: this.timelineGroupName,\n\t\t\t\torder: -98,\n\t\t\t}))\n\n\t\t} else {\n\t\t\tautoRow = this.timeline.addRow(new SimpleRow({\n\t\t\t\tlabel: this.timelineGroupName,\n\t\t\t\torder: -98,\n\t\t\t}))\n\t\t}\n\n\t\tthis.addCastsToRow(autoRow, this.autoCasts)\n\t}\n\n\tprivate addCastsToRow(row: SimpleRow, casts: Array<Events['action']>) {\n\t\tcasts.forEach(cast => {\n\t\t\tconst action = this.data.getAction(cast.action)\n\t\t\tif (action == null) { return }\n\n\t\t\tconst start = cast.timestamp - this.parser.pull.timestamp\n\t\t\trow.addItem(new ActionItem({\n\t\t\t\taction,\n\t\t\t\tstart,\n\t\t\t\tend: start, // zero length intentional\n\t\t\t}))\n\t\t})\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {BuffWindow} from './ActionWindow/windows/BuffWindow'\n\nexport class Tincture extends BuffWindow {\n\tstatic override handle = 'tincture'\n\tstatic override title = t('core.tincture.title')`Tinctures`\n\n\tbuffStatus = this.data.statuses.MEDICATED\n\n\t// No initialise since only the table display is desired without\n\t// any evaluation as to expected actions.\n}\n","import {ActionRow, ActionTimeline as CoreActionTimeline} from 'parser/core/modules/ActionTimeline'\n\nexport class ActionTimeline extends CoreActionTimeline {\n\tstatic override rows: ActionRow[] = [\n\t\t...CoreActionTimeline.rows,\n\t\t'AUTOMATON_QUEEN',\n\t\t'QUEEN_OVERDRIVE',\n\t\t'WILDFIRE',\n\t\t'DETONATOR',\n\t\t'BARREL_STABILIZER',\n\t\t'HYPERCHARGE',\n\t\t'GAUSS_ROUND',\n\t\t'RICOCHET',\n\t\t'REASSEMBLE',\n\t\t'CHAIN_SAW',\n\t\t'AIR_ANCHOR',\n\t\t'DRILL',\n\t\t'FLAMETHROWER',\n\t\t'DISMANTLE',\n\t\t'TACTICIAN',\n\t]\n}\n","import {Action} from 'data/ACTIONS'\nimport {Event, Events} from 'event'\nimport {EventHook} from 'parser/core/Dispatcher'\nimport {filter, noneOf} from 'parser/core/filter'\nimport {AlwaysBeCasting as CoreAlwaysBeCasting} from 'parser/core/modules/AlwaysBeCasting'\n\ninterface FlameWindow {\n\tstart: number\n\tend: number\n}\n\nexport class AlwaysBeCasting extends CoreAlwaysBeCasting {\n\tprivate flameHistory: FlameWindow[] = []\n\tprivate currentFlame: FlameWindow | undefined = undefined\n\tprivate flamethrowerInterruptingActionHook?: EventHook<Events['action']>\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\t\tconst flamethrowerCastFilter = playerFilter\n\t\t\t.action(this.data.actions.FLAMETHROWER.id)\n\t\t\t.type('action')\n\t\tconst flamethrowerStatusFilter = playerFilter\n\t\t\t.status(this.data.statuses.FLAMETHROWER.id)\n\t\t\t.type('statusRemove')\n\n\t\tthis.addEventHook(flamethrowerCastFilter, this.onApplyFlamethrower)\n\t\tthis.addEventHook(flamethrowerStatusFilter, this.onRemoveFlamethrower)\n\t}\n\n\tprivate onApplyFlamethrower(event: Events['action']) {\n\t\tif (this.currentFlame != null) { return }\n\n\t\tthis.currentFlame = {\n\t\t\tstart: event.timestamp,\n\t\t\tend: event.timestamp + this.data.statuses.FLAMETHROWER.duration,\n\t\t}\n\t\tconst anyActionFilter = filter<Event>()\n\t\t\t.source(this.parser.actor.id)\n\t\t\t.action(noneOf([this.data.actions.FLAMETHROWER.id]))\n\t\t\t.type('action')\n\t\tthis.flamethrowerInterruptingActionHook = this.addEventHook(anyActionFilter, this.onRemoveFlamethrower)\n\n\t\tthis.flameHistory.push(this.currentFlame)\n\t}\n\n\tprivate onRemoveFlamethrower(event: Events['statusRemove'] | Events['action']) {\n\t\tif (this.currentFlame == null) {\n\t\t\treturn\n\t\t}\n\t\tif (this.flamethrowerInterruptingActionHook == null) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.currentFlame.end = event.timestamp\n\t\tthis.removeEventHook(this.flamethrowerInterruptingActionHook)\n\n\t\tthis.currentFlame = undefined\n\t\tthis.flamethrowerInterruptingActionHook = undefined\n\n\t}\n\n\toverride considerCast(action: Action, castStart: number): boolean {\n\t\tif (action === this.data.actions.FLAMETHROWER) {\n\t\t\tthis.debug(`Flamethrower began channeling at ${this.parser.formatEpochTimestamp(castStart)}`)\n\t\t\treturn false\n\t\t}\n\n\t\treturn super.considerCast(action, castStart)\n\t}\n\n\toverride getUptimePercent(): number {\n\t\tconst fightDuration = this.parser.currentDuration - this.downtime.getDowntime()\n\t\tconst flameDuration = this.flameHistory.reduce((acc, flame) => {\n\t\t\tconst downtime = this.downtime.getDowntime(\n\t\t\t\tflame.start,\n\t\t\t\tflame.end,\n\t\t\t)\n\t\t\tconst flamethrowerDurationOrGCD = Math.max(flame.end - flame.start, this.globalCooldown.getDuration())\n\t\t\treturn acc + flamethrowerDurationOrGCD - downtime\n\t\t}, 0)\n\t\tconst uptime = (this.gcdUptime + flameDuration) / (fightDuration) * 100\n\n\t\treturn uptime\n\t}\n}\n","import ACTIONS from 'data/ACTIONS'\nimport {Combos as CoreCombos} from 'parser/core/modules/Combos'\n\nexport class Combos extends CoreCombos {\n\t// Overrides\n\toverride suggestionIcon = ACTIONS.HEATED_SPLIT_SHOT.icon\n}\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {ActionKey} from 'data/ACTIONS'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Data} from 'parser/core/modules/Data'\nimport Downtime from 'parser/core/modules/Downtime'\nimport {Timeline} from 'parser/core/modules/Timeline'\nimport React, {Fragment} from 'react'\nimport {Button, Message, Table} from 'semantic-ui-react'\n\n// Buffer (ms) to forgive insignificant drift, we really only care about GCD drift here\n// and not log inconsistencies / sks issues / misguided weaving\nconst DRIFT_BUFFER = 1500\n\n// Buffer (ms) to allow for reopeners after a downtime, since the GCD that \"drifted\"\n// might not have first priority\nconst REOPENER_BUFFER = 12500\nconst MIN_REOPENER_DOWNTIME = 15000\n\n// Timeline padding to see the drifted GCD when you jump to the window\nconst TIMELINE_PADDING = 2500\n\n// 6.0: Add chain saw\nconst DRIFT_GCDS: ActionKey[] = [\n\t'AIR_ANCHOR',\n\t'BIOBLASTER',\n\t'DRILL',\n\t'CHAIN_SAW',\n]\n\ninterface DriftWindow {\n\tstart: number\n\tcasts: Array<Events['action']>\n}\n\ninterface ConfirmedDriftWindow extends DriftWindow {\n\tdriftedActionId: number\n\tdrift: number\n\tend: number\n}\n\nexport class Drift extends Analyser {\n\tstatic override handle = 'drift'\n\tstatic override title = t('mch.drift.title')`GCD Drift`\n\n\t@dependency private data!: Data\n\t@dependency private downtime!: Downtime\n\t@dependency private timeline!: Timeline\n\n\tprivate driftIds: number[] = []\n\tprivate driftedWindows: ConfirmedDriftWindow[] = []\n\n\tprivate currentWindows: { [groupId: number]: DriftWindow } = {\n\t\t[this.data.actions.AIR_ANCHOR.id]: {\n\t\t\tstart: this.parser.pull.timestamp,\n\t\t\tcasts: [],\n\t\t},\n\t\t[this.data.actions.DRILL.cooldownGroup]: {\n\t\t\tstart: this.parser.pull.timestamp,\n\t\t\tcasts: [],\n\t\t},\n\t\t[this.data.actions.CHAIN_SAW.id]: {\n\t\t\tstart: this.parser.pull.timestamp,\n\t\t\tcasts: [],\n\t\t},\n\t}\n\n\toverride initialise() {\n\t\tthis.driftIds = DRIFT_GCDS.map(actionKey => this.data.actions[actionKey].id)\n\n\t\tconst castFilter = filter<Event>()\n\t\t\t.type('action')\n\t\t\t.source(this.parser.actor.id)\n\n\t\tthis.addEventHook(castFilter.action(oneOf(this.driftIds)), this.onDriftableCast)\n\t\tthis.addEventHook(castFilter, this.onCast)\n\t}\n\n\tprivate onDriftableCast(event: Events['action']) {\n\t\tconst action = this.data.getAction(event.action)\n\n\t\tif (!action || !action.cooldown) { return }\n\n\t\tconst id = action.cooldownGroup ?? action.id\n\t\tconst window = this.currentWindows[id]\n\t\tconst observedUseTime = event.timestamp\n\n\t\t// Cap at this event's timestamp, just in case\n\t\tconst earliestUseTime = Math.min(window.start + action.cooldown, observedUseTime)\n\n\t\tlet expectedUseTime = earliestUseTime\n\n\t\t// Increase the expected use time if it was in downtime\n\t\tif (this.downtime.isDowntime(earliestUseTime)) {\n\t\t\tconst downtimeWindow = this.downtime.getDowntimeWindows(window.start, observedUseTime)[0]\n\t\t\texpectedUseTime = downtimeWindow.end\n\n\t\t\t// Forgive \"drift\" due to reopening with other actions after downtime\n\t\t\tif (downtimeWindow.end - downtimeWindow.start > MIN_REOPENER_DOWNTIME) {\n\t\t\t\texpectedUseTime += REOPENER_BUFFER\n\t\t\t}\n\t\t}\n\n\t\tconst drift = Math.max(0, observedUseTime - expectedUseTime)\n\n\t\t// Forgive a small amount of drift\n\t\tif (drift > DRIFT_BUFFER) {\n\t\t\tthis.driftedWindows.push({\n\t\t\t\t...window,\n\t\t\t\tdriftedActionId: event.action,\n\t\t\t\tdrift: drift,\n\t\t\t\tend: observedUseTime,\n\t\t\t})\n\t\t}\n\n\t\t// Begin the next window\n\t\tthis.currentWindows[id] = {\n\t\t\tstart: observedUseTime,\n\t\t\tcasts: [],\n\t\t}\n\t}\n\n\tprivate onCast(event: Events['action']) {\n\t\tfor (const window of Object.values(this.currentWindows)) {\n\t\t\twindow.casts.push(event)\n\t\t}\n\t}\n\n\toverride output() {\n\t\t// Nothing to show\n\t\tif (!this.driftedWindows.length) { return }\n\n\t\tconst driftTable = <Table collapsing unstackable compact=\"very\">\n\t\t\t<Table.Header>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.HeaderCell><Trans id=\"mch.drift.timestamp-header\">Timestamp</Trans></Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell><Trans id=\"mch.drift.drift-header\">Drift Issue</Trans></Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell></Table.HeaderCell>\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{this.driftedWindows.map(window => {\n\t\t\t\t\treturn <Table.Row key={window.start}>\n\t\t\t\t\t\t<Table.Cell>{this.parser.formatEpochTimestamp(window.end)}</Table.Cell>\n\t\t\t\t\t\t<Table.Cell>\n\t\t\t\t\t\t\t<Trans id=\"mch.drift.drift-issue\">\n\t\t\t\t\t\t\t\t<ActionLink {...this.data.getAction(window.driftedActionId)}/> drifted by {this.parser.formatDuration(window.drift)}\n\t\t\t\t\t\t\t</Trans>\n\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t<Table.Cell>\n\t\t\t\t\t\t\t<Button onClick={() =>\n\t\t\t\t\t\t\t\tthis.timeline.show(window.start - this.parser.pull.timestamp, window.end + TIMELINE_PADDING - this.parser.pull.timestamp)}>\n\t\t\t\t\t\t\t\t<Trans id=\"mch.drift.timelinelink-button\">Jump to Timeline</Trans>\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t</Table.Row>\n\t\t\t\t})}\n\t\t\t</Table.Body>\n\t\t</Table>\n\n\t\treturn <Fragment>\n\t\t\t<Message>\n\t\t\t\t<Trans id=\"mch.drift.accordion.message\">\n\t\t\t\t\t<ActionLink action=\"CHAIN_SAW\"/>, <ActionLink action=\"AIR_ANCHOR\"/>, and <ActionLink action=\"DRILL\"/> are your strongest GCDs and ideally they should always be kept on cooldown,\n\t\t\t\t\tunless you need to insert a filler GCD to adjust for skill speed. Avoid casting <ActionLink action=\"HYPERCHARGE\"/> if\n\t\t\t\t\tChain Saw, Air Anchor, or Drill will come off cooldown within 8 seconds.\n\t\t\t\t</Trans>\n\t\t\t</Message>\n\t\t\t{driftTable}\n\t\t</Fragment>\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport Color from 'color'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Cause, Event, Events} from 'event'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {CounterGauge, Gauge as CoreGauge} from 'parser/core/modules/Gauge'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\nimport { isSuccessfulHit } from 'utilities'\n\nconst OVERCAP_SEVERITY = {\n\tHEAT: {\n\t\t10: SEVERITY.MINOR,\n\t\t30: SEVERITY.MEDIUM,\n\t\t50: SEVERITY.MAJOR,\n\t},\n\tBATTERY: {\n\t\t10: SEVERITY.MINOR,\n\t\t20: SEVERITY.MEDIUM,\n\t\t30: SEVERITY.MAJOR,\n\t},\n}\n\nconst FADE_AMOUNT = 0.25\nconst HEAT_COLOR = Color('#D35A10').fade(FADE_AMOUNT)\nconst BATTERY_COLOR = Color('#2C9FCB').fade(FADE_AMOUNT)\n\ninterface GaugeModifier {\n\tevent: 'action' | 'damage' | 'combo'\n\ttype: 'generate' | 'spend' | 'queen'\n\tamount: number\n}\n\ntype GaugeMap = Map<number, GaugeModifier>\n\nexport class Gauge extends CoreGauge {\n\tstatic override title = t('mch.gauge.title')`Heat & Battery Gauge`\n\n\t@dependency private suggestions!: Suggestions\n\n\tprivate heat = this.add(new CounterGauge({\n\t\tgraph: {\n\t\t\tlabel: <Trans id=\"mch.gauge.resource.heat\">Heat</Trans>,\n\t\t\tcolor: HEAT_COLOR,\n\t\t},\n\t}))\n\n\tprivate battery = this.add(new CounterGauge({\n\t\tgraph: {\n\t\t\tlabel: <Trans id=\"mch.gauge.resource.battery\">Battery</Trans>,\n\t\t\tcolor: BATTERY_COLOR,\n\t\t},\n\t}))\n\n\tprivate heatModifiers: GaugeMap = new Map([\n\t\t[this.data.actions.HEATED_SPLIT_SHOT.id, {event: 'damage', type: 'generate', amount: 5}],\n\t\t[this.data.actions.HEATED_SLUG_SHOT.id, {event: 'combo', type: 'generate', amount: 5}],\n\t\t[this.data.actions.HEATED_CLEAN_SHOT.id, {event: 'combo', type: 'generate', amount: 5}],\n\t\t[this.data.actions.SPREAD_SHOT.id, {event: 'damage', type: 'generate', amount: 5}],\n\t\t[this.data.actions.SCATTERGUN.id, {event: 'damage', type: 'generate', amount: 10}],\n\t\t[this.data.actions.BARREL_STABILIZER.id, {event: 'action', type: 'generate', amount: 50}],\n\t\t[this.data.actions.HYPERCHARGE.id, {event: 'action', type: 'spend', amount: 50}],\n\t])\n\n\tprivate batteryModifiers: GaugeMap = new Map([\n\t\t[this.data.actions.HEATED_CLEAN_SHOT.id, {event: 'combo', type: 'generate', amount: 10}],\n\t\t[this.data.actions.AIR_ANCHOR.id, {event: 'damage', type: 'generate', amount: 20}],\n\t\t[this.data.actions.CHAIN_SAW.id, {event: 'damage', type: 'generate', amount: 20}],\n\t\t[this.data.actions.AUTOMATON_QUEEN.id, {event: 'action', type: 'queen', amount: 50}],\n\t])\n\n\tprivate _lastQueenCost = 0\n\n\tprivate addGaugeHooks(gauge: CounterGauge, modifiers: GaugeMap) {\n\t\tconst damageActions = []\n\t\tconst castActions = []\n\n\t\tfor (const [action, modifier] of modifiers.entries()) {\n\t\t\tmodifier.event === 'damage' ?\n\t\t\t\tdamageActions.push(action) :\n\t\t\t\tcastActions.push(action)\n\t\t}\n\n\t\tconst baseFilter = filter<Event>().source(this.parser.actor.id)\n\n\t\tconst actionFilter = baseFilter\n\t\t\t.type(oneOf(['action', 'combo']))\n\t\t\t.action(oneOf(castActions))\n\n\t\tconst damageFilter = baseFilter\n\t\t\t.type('damage')\n\t\t\t.cause(filter<Cause>()\n\t\t\t\t.type('action')\n\t\t\t\t.action(oneOf(damageActions))\n\t\t\t)\n\n\t\tthis.addEventHook(actionFilter, this.onAction(gauge, modifiers))\n\t\tthis.addEventHook(damageFilter, this.onDamage(gauge, modifiers))\n\t}\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tthis.addGaugeHooks(this.heat, this.heatModifiers)\n\t\tthis.addGaugeHooks(this.battery, this.batteryModifiers)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tpublic get lastQueenCost() {\n\t\treturn this._lastQueenCost\n\t}\n\n\tprivate onAction(gauge: CounterGauge, modifiers: GaugeMap) {\n\t\treturn (event: Events['action' | 'combo']) => {\n\t\t\tconst modifier = modifiers.get(event.action)\n\n\t\t\tif (modifier && modifier.event === event.type) {\n\t\t\t\tthis.modifyGauge(gauge, modifier)\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onDamage(gauge: CounterGauge, modifiers: GaugeMap) {\n\t\treturn (event: Events['damage']) => {\n\t\t\tif (event.cause.type === 'status' || !isSuccessfulHit(event)) { return }\n\n\t\t\tconst modifier = modifiers.get(event.cause.action)\n\n\t\t\tif (modifier) {\n\t\t\t\tthis.modifyGauge(gauge, modifier)\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate modifyGauge(gauge: CounterGauge, modifier: GaugeModifier) {\n\t\tif (modifier.type === 'queen') {\n\t\t\tthis._lastQueenCost = gauge.value\n\t\t\tgauge.reset()\n\n\t\t} else if (modifier.type === 'generate') {\n\t\t\tgauge.generate(modifier.amount)\n\n\t\t} else {\n\t\t\tgauge.spend(modifier.amount)\n\t\t}\n\t}\n\n\tprivate onComplete() {\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.HYPERCHARGE.icon,\n\t\t\tcontent: <Trans id=\"mch.gauge.suggestions.heat-waste.content\">\n\t\t\t\tTry not to let your Heat gauge overcap, as it may cost you Overheat windows over the course of the fight.\n\t\t\t</Trans>,\n\t\t\ttiers: OVERCAP_SEVERITY.HEAT,\n\t\t\tvalue: this.heat.overCap,\n\t\t\twhy: <Trans id=\"mch.gauge.suggestions.heat-waste.why\">\n\t\t\t\tYou lost {this.heat.overCap} Heat to an overcapped gauge.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.AUTOMATON_QUEEN.icon,\n\t\t\tcontent: <Trans id=\"mch.gauge.suggestions.battery-waste.content\">\n\t\t\t\tTry not to let your Battery gauge overcap, as it may cost you <DataLink action=\"AUTOMATON_QUEEN\" /> uses over the course of the fight.\n\t\t\t</Trans>,\n\t\t\ttiers: OVERCAP_SEVERITY.BATTERY,\n\t\t\tvalue: this.battery.overCap,\n\t\t\twhy: <Trans id=\"mch.gauge.suggestions.battery-waste.why\">\n\t\t\t\tYou lost {this.battery.overCap} Battery to an overcapped gauge.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n}\n","import {CooldownDowntime} from 'parser/core/modules/CooldownDowntime'\n\n// Strict downtime allowance for drill/bio blaster/air anchor\nconst DOWNTIME_ALLOWED_GCD = 100\n\nexport default class GeneralCDDowntime extends CooldownDowntime {\n\ttrackedCds = [{\n\t\tcooldowns: [this.data.actions.WILDFIRE],\n\t\tfirstUseOffset: 10000,\n\t}, {\n\t\tcooldowns: [this.data.actions.BARREL_STABILIZER],\n\t\tfirstUseOffset: 3000,\n\t}, {\n\t\tcooldowns: [this.data.actions.REASSEMBLE],\n\t\tallowedAverageDowntime: 5000,\n\t\tfirstUseOffset: -3000,\n\t}, {\n\t\tcooldowns: [this.data.actions.AIR_ANCHOR],\n\t\tallowedAverageDowntime: DOWNTIME_ALLOWED_GCD,\n\t\tfirstUseOffset: 0,\n\t\t// Currently, this property is not used due to the low reliability of GCD estimates.\n\t\t// isAffectedBySpeed: true,\n\t}, {\n\t\tcooldowns: [\n\t\t\tthis.data.actions.DRILL,\n\t\t\tthis.data.actions.BIOBLASTER,\n\t\t],\n\t\tallowedAverageDowntime: DOWNTIME_ALLOWED_GCD,\n\t\tfirstUseOffset: 2500,\n\t\t// isAffectedBySpeed: true,\n\t}, {\n\t\tcooldowns: [this.data.actions.CHAIN_SAW],\n\t\tallowedAverageDowntime: DOWNTIME_ALLOWED_GCD,\n\t\tfirstUseOffset: 12500,\n\t\t// isAffectedBySpeed: true,\n\t}, {\n\t\tcooldowns: [this.data.actions.GAUSS_ROUND],\n\t\tfirstUseOffset: 3000,\n\t\tresetBy: {actions: [this.data.actions.HEAT_BLAST], refundAmount: 15000},\n\t}, {\n\t\tcooldowns: [this.data.actions.RICOCHET],\n\t\tfirstUseOffset: 3000,\n\t\tresetBy: {actions: [this.data.actions.HEAT_BLAST], refundAmount: 15000},\n\t}]\n}\n","import {t} from '@lingui/macro'\nimport {Plural, Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport Rotation from 'components/ui/Rotation'\nimport {ActionKey} from 'data/ACTIONS'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {EventHook} from 'parser/core/Dispatcher'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {History} from 'parser/core/modules/ActionWindow/History'\nimport {Data} from 'parser/core/modules/Data'\nimport {Timeline} from 'parser/core/modules/Timeline'\nimport React, {Fragment} from 'react'\nimport {Message, Accordion, Button} from 'semantic-ui-react'\n\nconst HYPERCHARGE_DURATION_PATCH_600 = 8000\nconst HYPERCHARGE_DURATION_PATCH_630 = 10000\nconst HYPERCHARGE_GCD_TARGET = 5\nconst HYPERCHARGE_GCD_WARNING = 4\nconst HYPERCHARGE_GCD_ERROR = 0\n\nconst HYPERCHARGE_GCDS: ActionKey[] = [\n\t'HEAT_BLAST',\n\t'AUTO_CROSSBOW',\n]\n\nexport class Hypercharge extends Analyser {\n\tstatic override handle = 'hypercharge'\n\tstatic override title = t('mch.hypercharge.title')`Hypercharge Windows`\n\n\t@dependency private data!: Data\n\t@dependency private timeline!: Timeline\n\n\tprivate history: History<Array<Events['action']>> = new History(() => [])\n\tprivate rotationHook: EventHook<Events['action']> | undefined\n\tprivate hyperchargeGcds = HYPERCHARGE_GCDS.map(key => this.data.actions[key].id)\n\tprivate hyperchargeDuration = this.parser.patch.before('6.3')\n\t\t? HYPERCHARGE_DURATION_PATCH_600\n\t\t: HYPERCHARGE_DURATION_PATCH_630\n\n\toverride initialise() {\n\t\tconst hyperchargeFilter = filter<Event>()\n\t\t\t.source(this.parser.actor.id)\n\t\t\t.type('action')\n\t\t\t.action(this.data.actions.HYPERCHARGE.id)\n\n\t\tthis.addEventHook(hyperchargeFilter, this.onHypercharge)\n\t\tthis.addEventHook({\n\t\t\ttype: 'death',\n\t\t\tactor: this.parser.actor.id,\n\t\t}, this.endCurrentWindow)\n\t\tthis.addEventHook('complete', this.endCurrentWindow)\n\t}\n\n\tprivate endCurrentWindow(event: Event) {\n\t\tif (this.rotationHook) {\n\t\t\tthis.removeEventHook(this.rotationHook)\n\t\t\tthis.rotationHook = undefined\n\t\t}\n\n\t\tthis.history.closeCurrent(event.timestamp)\n\t}\n\n\tprivate onHypercharge(event: Events['action']) {\n\t\tthis.endCurrentWindow(event)\n\n\t\tthis.rotationHook = this.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.source(this.parser.actor.id)\n\t\t\t\t.type('action'),\n\t\t\tthis.onCast\n\t\t)\n\n\t\tthis.history.openNew(event.timestamp)\n\t}\n\n\tprivate onCast(event: Events['action']) {\n\t\tconst currentWindow = this.history.getCurrent()\n\n\t\tif (currentWindow == null) { return }\n\n\t\tif (event.timestamp > currentWindow.start + this.hyperchargeDuration) {\n\t\t\tthis.endCurrentWindow(event)\n\t\t\treturn\n\t\t}\n\n\t\tcurrentWindow.data.push(event)\n\t}\n\n\tprivate formatGcdCount(count: number) {\n\t\tif (count === HYPERCHARGE_GCD_ERROR) {\n\t\t\treturn <span className=\"text-error\">{count}</span>\n\t\t}\n\n\t\tif (count <= HYPERCHARGE_GCD_WARNING) {\n\t\t\treturn <span className=\"text-warning\">{count}</span>\n\t\t}\n\n\t\treturn count\n\t}\n\n\tprivate createTimelineButton = (timestamp: number) => (\n\t\t<Button\n\t\t\tcircular\n\t\t\tcompact\n\t\t\ticon=\"time\"\n\t\t\tsize=\"mini\"\n\t\t\tonClick={() => this.timeline.show(timestamp - this.parser.pull.timestamp, timestamp - this.parser.pull.timestamp)}\n\t\t\tcontent={this.parser.formatEpochTimestamp(timestamp)}\n\t\t/>\n\t)\n\n\toverride output() {\n\t\tif (this.history.entries.length === 0) { return }\n\n\t\tconst panels = this.history.entries.map(window => {\n\t\t\tconst hyperchargeGcdCount = window.data\n\t\t\t\t.filter(cast => this.hyperchargeGcds.includes(cast.action))\n\t\t\t\t.length\n\n\t\t\treturn {\n\t\t\t\ttitle: {\n\t\t\t\t\tkey: 'title-' + window.start,\n\t\t\t\t\tcontent: <Fragment>\n\t\t\t\t\t\t{this.createTimelineButton(window.start)}\n\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t{this.formatGcdCount(hyperchargeGcdCount)} / {HYPERCHARGE_GCD_TARGET} <Plural id=\"mch.hypercharge.panel-count\" value={window.data.length} one=\"Hypercharge GCD\" other=\"Hypercharge GCDs\"/>\n\t\t\t\t\t</Fragment>,\n\t\t\t\t},\n\t\t\t\tcontent: {\n\t\t\t\t\tkey: 'content-' + window.start,\n\t\t\t\t\tcontent: <Rotation events={window.data} />,\n\t\t\t\t},\n\t\t\t}\n\t\t})\n\n\t\treturn <Fragment>\n\t\t\t<Message>\n\t\t\t\t<Trans id=\"mch.hypercharge.accordion.message\">Every Hypercharge window should ideally include {HYPERCHARGE_GCD_TARGET} casts of <DataLink action=\"HEAT_BLAST\" /> or <DataLink action=\"AUTO_CROSSBOW\" /> and enough casts of <DataLink action=\"GAUSS_ROUND\" /> and <DataLink action=\"RICOCHET\" /> to avoid overcapping their charges. If you clip a lot while weaving, overcapping is still preferable to dropping a Hypercharge GCD. Each Hypercharge window below indicates how many GCDs it contained and will display all the casts in the window if expanded.</Trans>\n\t\t\t</Message>\n\t\t\t<Accordion\n\t\t\t\texclusive={false}\n\t\t\t\tpanels={panels}\n\t\t\t\tstyled\n\t\t\t\tfluid\n\t\t\t/>\n\t\t</Fragment>\n\t}\n}\n","import {Defensives} from 'parser/core/modules/Defensives'\n\nexport class Mitigation extends Defensives {\n\tprotected override trackedDefensives = [\n\t\tthis.data.actions.DISMANTLE,\n\t\tthis.data.actions.TACTICIAN,\n\t]\n}\n","import ACTIONS from 'data/ACTIONS'\nimport {AoEUsages} from 'parser/core/modules/AoEUsages'\n\nexport default class MultiHitSkills extends AoEUsages {\n\tsuggestionIcon = ACTIONS.SPREAD_SHOT.icon\n\n\ttrackedActions = [\n\t\t{\n\t\t\taoeAction: ACTIONS.BIOBLASTER,\n\t\t\tstActions: [ACTIONS.DRILL],\n\t\t\tminTargets: 2,\n\t\t}, {\n\t\t\taoeAction: ACTIONS.AUTO_CROSSBOW,\n\t\t\tstActions: [ACTIONS.HEAT_BLAST],\n\t\t\tminTargets: 3,\n\t\t}, {\n\t\t\taoeAction: ACTIONS.SCATTERGUN,\n\t\t\tstActions: [ACTIONS.HEATED_SPLIT_SHOT],\n\t\t\tminTargets: 3,\n\t\t},\n\t]\n}\n","import ACTIONS from 'data/ACTIONS'\nimport {PetTimeline} from 'parser/core/modules/PetTimeline'\n\nexport default class QueenTimeline extends PetTimeline {\n\tprotected override timelineGroupName = 'Automaton Queen'\n\tprotected override timelineSummonAction = ACTIONS.AUTOMATON_QUEEN.id\n}\n","import {Plural, Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {ActionKey} from 'data/ACTIONS'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {EventHook} from 'parser/core/Dispatcher'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Data} from 'parser/core/modules/Data'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\n// Rarely, reassembled fade timestamps don't match the GCD cast timestamps - deal with it\nconst DELAY_THRESHOLD_MS = 100\n\n// These are the only GCDs that should be reassembled under normal circumstances\nconst REASSEMBLE_GCDS: ActionKey[] = [\n\t'CHAIN_SAW',\n\t'AIR_ANCHOR',\n\t'DRILL',\n\t'SCATTERGUN',\n]\n\nconst OTHER_GCDS: ActionKey[] = [\n\t'BIOBLASTER',\n\t'HEAT_BLAST',\n\t'AUTO_CROSSBOW',\n\t'HEATED_SPLIT_SHOT',\n\t'HEATED_SLUG_SHOT',\n\t'HEATED_CLEAN_SHOT',\n]\n\nconst SEVERITIES = {\n\tBAD_USES: {\n\t\t1: SEVERITY.MINOR,\n\t\t2: SEVERITY.MEDIUM,\n\t\t3: SEVERITY.MAJOR,\n\t},\n\tDROPPED_USES: {\n\t\t1: SEVERITY.MEDIUM,\n\t\t2: SEVERITY.MAJOR,\n\t},\n}\n\ninterface ReassembleState {\n\tactive: boolean\n\tlastGcdTime: number\n\tgcdHook?: EventHook<Events['action']>\n}\n\ninterface ReassembleHistory {\n\tbadUses: number\n\tdroppedUses: number\n}\n\nexport class Reassemble extends Analyser {\n\tstatic override handle = 'reassemble'\n\n\t@dependency private data!: Data\n\t@dependency private suggestions!: Suggestions\n\n\tprivate state: ReassembleState = {active: false, lastGcdTime: 0}\n\tprivate history: ReassembleHistory = {badUses: 0, droppedUses: 0}\n\n\tprivate reassembleGcdIds = REASSEMBLE_GCDS.map(key => this.data.actions[key].id)\n\tprivate otherGcdIds = OTHER_GCDS.map(key => this.data.actions[key].id)\n\n\tprivate gcdFilter = filter<Event>()\n\t\t.source(this.parser.actor.id)\n\t\t.type('action')\n\t\t.action(oneOf([...this.reassembleGcdIds, ...this.otherGcdIds]))\n\n\toverride initialise() {\n\t\tconst reassembleFilter = filter<Event>()\n\t\t\t.source(this.parser.actor.id)\n\t\t\t.status(this.data.statuses.REASSEMBLED.id)\n\n\t\tthis.addEventHook(reassembleFilter.type('statusApply'), this.onReassemble)\n\t\tthis.addEventHook(reassembleFilter.type('statusRemove'), this.onRemove)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onReassemble() {\n\t\tif (this.state.active) {\n\t\t\tthis.history.droppedUses += 1\n\t\t}\n\t\tthis.state.gcdHook = this.addEventHook(this.gcdFilter, this.onCast)\n\t\tthis.state.active = true\n\t}\n\n\tprivate onCast(event: Events['action']) {\n\t\tif (this.state.active && !this.reassembleGcdIds.includes(event.action)) {\n\t\t\tthis.history.badUses += 1\n\t\t}\n\t\tthis.state.lastGcdTime = event.timestamp\n\t}\n\n\tprivate onRemove(event: Events['statusRemove']) {\n\t\tif (event.timestamp > this.state.lastGcdTime + DELAY_THRESHOLD_MS) {\n\t\t\tthis.history.droppedUses += 1\n\t\t}\n\t\tif (this.state.gcdHook != null) {\n\t\t\tthis.removeEventHook(this.state.gcdHook)\n\t\t}\n\t\tthis.state.active = false\n\t}\n\n\tonComplete() {\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.REASSEMBLE.icon,\n\t\t\tcontent: <Trans id=\"mch.reassemble.suggestions.bad-gcds.content\">\n\t\t\t\tOn single targets <DataLink action=\"REASSEMBLE\" /> should be used on <DataLink action=\"CHAIN_SAW\" />, <DataLink action=\"DRILL\" />, or <DataLink action=\"AIR_ANCHOR\" />, as they're your strongest GCDs. On multiple targets, you can also use it on <DataLink action=\"SCATTERGUN\" />.\n\t\t\t</Trans>,\n\t\t\ttiers: SEVERITIES.BAD_USES,\n\t\t\tvalue: this.history.badUses,\n\t\t\twhy: <Trans id=\"mch.reassemble.suggestions.bad-gcds.why\">\n\t\t\t\tYou used Reassemble on a non-optimal GCD <Plural value={this.history.badUses} one=\"# time\" other=\"# times\"/>.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.REASSEMBLE.icon,\n\t\t\tcontent: <Trans id=\"mch.reassemble.suggestions.dropped.content\">\n\t\t\t\tAvoid using <DataLink action=\"REASSEMBLE\" /> when a boss is about to go untargetable so you don't waste the buff.\n\t\t\t</Trans>,\n\t\t\ttiers: SEVERITIES.DROPPED_USES,\n\t\t\tvalue: this.history.droppedUses,\n\t\t\twhy: <Trans id=\"mch.reassemble.suggestions.dropped.why\">\n\t\t\t\tYou allowed Reassemble to fall off unused <Plural value={this.history.droppedUses} one=\"# time\" other=\"# times\"/>.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n}\n","import {Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Event, Events} from 'event'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {EvaluatedAction, ExpectedActionsEvaluator, TrackedAction, TrackedActionsOptions} from 'parser/core/modules/ActionWindow'\nimport {HistoryEntry} from 'parser/core/modules/ActionWindow/History'\nimport {SEVERITY} from 'parser/core/modules/Suggestions'\nimport {Tincture as CoreTincture} from 'parser/core/modules/Tincture'\nimport React from 'react'\n\ninterface reassembleOptions extends TrackedActionsOptions {\n\treassembleId: number\n\twasReassembleUsed: (window: HistoryEntry<EvaluatedAction[]>) => boolean\n}\n\nclass ReassembleEvaluator extends ExpectedActionsEvaluator {\n\t// Because this class is not an Analyser, it cannot use Data directly\n\t// to get the id for Reassemble, so it has to take it in here.\n\tprivate reassembleId: number\n\tprivate wasReassembleUsed: (window: HistoryEntry<EvaluatedAction[]>) => boolean\n\n\tconstructor(opts: reassembleOptions) {\n\t\tsuper(opts)\n\t\tthis.reassembleId = opts.reassembleId\n\t\tthis.wasReassembleUsed = opts.wasReassembleUsed\n\t}\n\n\toverride countUsed(window: HistoryEntry<EvaluatedAction[]>, action: TrackedAction) {\n\t\tif (action.action.id === this.reassembleId) {\n\t\t\treturn this.wasReassembleUsed(window) ? 1 : 0\n\t\t}\n\t\treturn super.countUsed(window, action)\n\t}\n}\n\nexport class Tincture extends CoreTincture {\n\tprivate reassembledRemoves: number[] = []\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tthis.addEventHook(filter<Event>().source(this.parser.actor.id).status(this.data.statuses.REASSEMBLED.id)\n\t\t\t.type('statusRemove'), this.onRemoveReassembled)\n\t\tconst pets = this.parser.pull.actors\n\t\t\t.filter(actor => actor.owner === this.parser.actor)\n\t\t\t.map(actor => actor.id)\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.source(oneOf(pets))\n\t\t\t\t.action(oneOf([this.data.actions.PILE_BUNKER.id, this.data.actions.CROWNED_COLLIDER.id]))\n\t\t\t\t.type('action'),\n\t\t\tthis.onWindowAction\n\t\t)\n\n\t\tthis.addEvaluator(new ReassembleEvaluator({\n\t\t\texpectedActions: [\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.WILDFIRE,\n\t\t\t\t\texpectedPerWindow: 1,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.REASSEMBLE,\n\t\t\t\t\texpectedPerWindow: 1,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.CROWNED_COLLIDER,\n\t\t\t\t\texpectedPerWindow: 1,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.DRILL,\n\t\t\t\t\texpectedPerWindow: 2,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.CHAIN_SAW,\n\t\t\t\t\texpectedPerWindow: 1,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.AIR_ANCHOR,\n\t\t\t\t\texpectedPerWindow: 1,\n\t\t\t\t},\n\t\t\t],\n\t\t\tsuggestionIcon: this.data.actions.INFUSION_DEX.icon,\n\t\t\tsuggestionContent: <Trans id=\"mch.tincture.suggestions.trackedActions.content\">\n\t\t\t\tTry to cover as much damage as possible with your Tinctures of Dexterity.\n\t\t\t</Trans>,\n\t\t\tsuggestionWindowName: <DataLink action=\"INFUSION_DEX\" showIcon={false} />,\n\t\t\tseverityTiers: {\n\t\t\t\t2: SEVERITY.MINOR,\n\t\t\t\t4: SEVERITY.MEDIUM,\n\t\t\t\t6: SEVERITY.MAJOR,\n\t\t\t},\n\t\t\treassembleId: this.data.actions.REASSEMBLE.id,\n\t\t\twasReassembleUsed: this.wasReassembleUsed.bind(this),\n\t\t}))\n\t}\n\n\tprivate onRemoveReassembled(event: Events['statusRemove']) {\n\t\tthis.reassembledRemoves.push(event.timestamp)\n\t}\n\n\tprivate wasReassembleUsed(window: HistoryEntry<EvaluatedAction[]>) {\n\t\tconst gcdTimestamps = window.data\n\t\t\t.filter(e => e.action.onGcd)\n\t\t\t.map(e => e.timestamp)\n\t\tif (gcdTimestamps.length === 0) { return false }\n\n\t\t// Check to make sure at least one GCD happened before the status expired\n\t\tconst firstGcd = gcdTimestamps[0]\n\t\treturn this.reassembledRemoves.some(timestamp => firstGcd <= timestamp && timestamp <= (window.end ?? window.start))\n\t}\n\n}\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {RotationTable} from 'components/ui/RotationTable'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {EventHook, TimestampHook} from 'parser/core/Dispatcher'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {History} from 'parser/core/modules/ActionWindow/History'\nimport {Data} from 'parser/core/modules/Data'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport {Timeline} from 'parser/core/modules/Timeline'\nimport React, {Fragment} from 'react'\nimport {Message} from 'semantic-ui-react'\n\n// We always want 6 GCDs in WF\nconst EXPECTED_GCDS = 6\n\nconst SEVERITIES = {\n\tBAD_WILDFIRE: {\n\t\t1: SEVERITY.MINOR,\n\t\t2: SEVERITY.MEDIUM,\n\t\t3: SEVERITY.MAJOR,\n\t},\n\tFIZZLED_WILDFIRE: {\n\t\t1: SEVERITY.MEDIUM,\n\t\t2: SEVERITY.MAJOR,\n\t},\n}\n\ninterface WildfireWindow {\n\tevents: Array<Events['action']>\n\tstacks: number\n\tdamage?: number\n}\n\nexport class Wildfire extends Analyser {\n\tstatic override handle = 'wildfire'\n\tstatic override title = t('mch.wildfire.title')`Wildfire`\n\n\t@dependency private data!: Data\n\t@dependency private suggestions!: Suggestions\n\t@dependency private timeline!: Timeline\n\n\tprivate history = new History<WildfireWindow>(\n\t\t() => ({\n\t\t\tevents: [],\n\t\t\tstacks: 0,\n\t\t})\n\t)\n\n\tprivate actionHook?: EventHook<Events['action']>\n\tprivate durationHook?: TimestampHook\n\n\tprivate actionFilter = filter<Event>()\n\t\t.source(this.parser.actor.id)\n\t\t.type('action')\n\n\toverride initialise() {\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\n\t\tthis.addEventHook(playerFilter\n\t\t\t.type('statusApply')\n\t\t\t.status(this.data.statuses.WILDFIRE.id)\n\t\t, this.onApply)\n\n\t\tthis.addEventHook(playerFilter\n\t\t\t.type('damage')\n\t\t\t.cause(this.data.matchCauseStatusId([this.data.statuses.WILDFIRE.id]))\n\t\t, this.onDamage)\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate closeWindow(timestamp: number) {\n\t\tthis.history.closeCurrent(timestamp)\n\n\t\tif (this.actionHook != null) {\n\t\t\tthis.removeEventHook(this.actionHook)\n\t\t\tthis.actionHook = undefined\n\t\t}\n\n\t\tif (this.durationHook != null) {\n\t\t\tthis.removeTimestampHook(this.durationHook)\n\t\t\tthis.durationHook = undefined\n\t\t}\n\t}\n\n\tprivate onApply(event: Events['statusApply']) {\n\t\tif (this.history.getCurrent() != null) {\n\t\t\tthis.history.doIfOpen(current => current.stacks++)\n\t\t\treturn\n\t\t}\n\n\t\t// First application of WF, start a new window\n\t\tthis.history.openNew(event.timestamp)\n\n\t\tif (this.actionHook == null) {\n\t\t\tthis.actionHook = this.addEventHook(this.actionFilter, this.onAction)\n\t\t}\n\n\t\tconst expectedEnd = event.timestamp + this.data.statuses.WILDFIRE.duration\n\t\tthis.durationHook = this.addTimestampHook(expectedEnd, () => this.closeWindow(expectedEnd))\n\t}\n\n\tprivate onDamage(event: Events['damage']) {\n\t\tthis.history.doIfOpen(current => current.damage = event.targets[0].amount)\n\t\tthis.closeWindow(event.timestamp)\n\t}\n\n\tprivate onAction(event: Events['action']) {\n\t\tthis.history.doIfOpen(current => current.events.push(event))\n\t}\n\n\tprivate onComplete() {\n\t\tthis.history.closeCurrent(this.parser.currentEpochTimestamp)\n\n\t\tconst badWildfires = this.history.entries\n\t\t\t.filter(wildfire => wildfire.data.stacks < EXPECTED_GCDS)\n\t\t\t.length\n\n\t\tconst fizzledWildfires = this.history.entries\n\t\t\t.filter(wildfire => wildfire.data.damage == null || wildfire.data.damage === 0)\n\t\t\t.length\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.WILDFIRE.icon,\n\t\t\tcontent: <Trans id=\"mch.wildfire.suggestions.gcds.content\">\n\t\t\t\tTry to ensure you have a Hypercharge prepared for every <ActionLink action=\"WILDFIRE\"/> cast to maximize damage. Each GCD in a Wildfire window is worth 150 potency, so maximizing the GCD count with <ActionLink action=\"HEAT_BLAST\"/> is important.\n\t\t\t</Trans>,\n\t\t\ttiers: SEVERITIES.BAD_WILDFIRE,\n\t\t\tvalue: badWildfires,\n\t\t\twhy: <Trans id=\"mch.wildfire.suggestions.gcds.why\">\n\t\t\t\t{badWildfires} of your Wildfire windows contained fewer than {EXPECTED_GCDS} GCDs.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.WILDFIRE.icon,\n\t\t\tcontent: <Trans id=\"mch.wildfire.suggestions.fizzle.content\">\n\t\t\t\tBe careful to time your <ActionLink action=\"WILDFIRE\"/> windows so that the damage resolves during uptime, or detonate them early if necessary to at least get partial potency.\n\t\t\t</Trans>,\n\t\t\ttiers: SEVERITIES.FIZZLED_WILDFIRE,\n\t\t\tvalue: fizzledWildfires,\n\t\t\twhy: <Trans id=\"mch.wildfire.suggestions.fizzle.why\">\n\t\t\t\t{fizzledWildfires} of your Wildfire windows ghosted or resolved for 0 damage.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n\n\toverride output() {\n\t\tif (this.history.entries.length === 0) { return undefined }\n\n\t\tconst gcdHeader = {\n\t\t\theader: <Trans id=\"mch.wildfire.rotation-table.header.gcd-count\">GCDs</Trans>,\n\t\t\taccessor: 'gcds',\n\t\t}\n\n\t\tconst damageHeader = {\n\t\t\theader: <Trans id=\"mch.wildfire.rotation-table.header.damage\">Damage</Trans>,\n\t\t\taccessor: 'damage',\n\t\t}\n\n\t\tconst rotationData = this.history.entries.map(wildfire => ({\n\t\t\tstart: wildfire.start - this.parser.pull.timestamp,\n\t\t\tend: (wildfire.end ?? wildfire.start) - this.parser.pull.timestamp,\n\t\t\ttargetsData: {\n\t\t\t\tgcds: {\n\t\t\t\t\tactual: wildfire.data.stacks,\n\t\t\t\t\texpected: EXPECTED_GCDS,\n\t\t\t\t},\n\t\t\t},\n\t\t\tnotesMap: {\n\t\t\t\tdamage: wildfire.data.damage ?? 0,\n\t\t\t},\n\t\t\trotation: wildfire.data.events.map(event => ({action: event.action})),\n\t\t}))\n\n\t\treturn <Fragment>\n\t\t\t<Message>\n\t\t\t\t<Trans id=\"mch.wildfire.table.message\">Every <ActionLink action=\"WILDFIRE\"/> window should ideally include {EXPECTED_GCDS} GCDs to maximize the debuff's potency. Note that a GCD only counts toward Wildfire if the damage lands on the target before Wildfire expires.</Trans>\n\t\t\t</Message>\n\t\t\t<RotationTable\n\t\t\t\ttargets={[gcdHeader]}\n\t\t\t\tnotes={[damageHeader]}\n\t\t\t\tdata={rotationData}\n\t\t\t\tonGoto={this.timeline.show}\n\t\t\t/>\n\t\t</Fragment>\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport Rotation from 'components/ui/Rotation'\nimport {ActionKey} from 'data/ACTIONS'\nimport {Cause, Event, Events} from 'event'\nimport _ from 'lodash'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport BrokenLog from 'parser/core/modules/BrokenLog'\nimport {Data} from 'parser/core/modules/Data'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React, {Fragment} from 'react'\nimport {Accordion, Message} from 'semantic-ui-react'\nimport {isDefined} from 'utilities'\nimport {Gauge} from './Gauge'\n\nconst QUEEN_WEAPONSKILLS: ActionKey[] = [\n\t'ARM_PUNCH',\n\t'ROLLER_DASH',\n\t'PILE_BUNKER',\n\t'CROWNED_COLLIDER',\n]\n\ninterface QueenAttack {\n\tevent: Events['damage']\n\taction: number\n\tdamage: number\n}\n\ninterface QueenUsage {\n\tstart: number\n\tend?: number\n\tbattery: number\n\trotation: QueenAttack[]\n}\n\nexport class YassQueen extends Analyser {\n\tstatic override handle = 'queen'\n\tstatic override title = t('mch.queen.title')`Automaton Queen Usage`\n\n\t@dependency private brokenLog!: BrokenLog\n\t@dependency private data!: Data\n\t@dependency private gauge!: Gauge\n\t@dependency private suggestions!: Suggestions\n\n\tprivate summons: QueenUsage[] = []\n\n\toverride initialise() {\n\t\tconst queenWeaponskillIds = QUEEN_WEAPONSKILLS.map(actionKey => this.data.actions[actionKey].id)\n\n\t\tconst queens = this.parser.pull.actors\n\t\t\t.filter(actor => actor.owner === this.parser.actor)\n\t\t\t.map(actor => actor.id)\n\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\t\tconst queenDamageFilter = filter<Event>()\n\t\t\t.source(oneOf(queens))\n\t\t\t.type('damage')\n\t\t\t.cause(filter<Cause>()\n\t\t\t\t.type('action')\n\t\t\t\t.action(oneOf(queenWeaponskillIds)))\n\n\t\tthis.addEventHook(playerFilter.action(this.data.actions.AUTOMATON_QUEEN.id), this.onSummon)\n\t\tthis.addEventHook(queenDamageFilter, this.onDamage)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate get activeQueen(): QueenUsage | undefined {\n\t\tconst lastQueen = _.last(this.summons)\n\t\tif (lastQueen && !isDefined(lastQueen.end)) {\n\t\t\treturn lastQueen\n\t\t}\n\t\treturn undefined\n\t}\n\n\tprivate handleBrokenLog(actionId: number) {\n\t\tconst action = this.data.getAction(actionId)\n\t\tthis.brokenLog.trigger(this, 'queenless queen attack', (\n\t\t\t<Trans id=\"mch.queen.trigger.queenless-queen-attack\">\n\t\t\t\tA cast of <ActionLink {...action}/> was recorded without the Automaton Queen on the field.\n\t\t\t</Trans>\n\t\t))\n\t\treturn\n\t}\n\n\tprivate onSummon(event: Events['action']) {\n\t\tif (this.activeQueen) {\n\t\t\tthis.activeQueen.end = event.timestamp\n\t\t}\n\n\t\tthis.summons.push({\n\t\t\tstart: event.timestamp,\n\t\t\tbattery: this.gauge.lastQueenCost,\n\t\t\trotation: [],\n\t\t})\n\t}\n\n\tprivate onDamage(event: Events['damage']) {\n\t\tif (event.cause.type !== 'action') { return }\n\n\t\tif (!this.activeQueen) {\n\t\t\treturn this.handleBrokenLog(event.cause.action)\n\t\t}\n\n\t\tthis.activeQueen.rotation.push({\n\t\t\tevent: event,\n\t\t\taction: event.cause.action,\n\t\t\tdamage: event.targets[0].amount,\n\t\t})\n\n\t\tif (event.cause.action === this.data.actions.CROWNED_COLLIDER.id) {\n\t\t\tthis.activeQueen.end = event.timestamp\n\t\t}\n\t}\n\n\tprivate onComplete() {\n\t\tthis.summons.forEach(q => this.debug(q))\n\n\t\tconst missedColliders = this.summons\n\t\t\t.filter(queen => _.last(queen.rotation)?.action !== this.data.actions.CROWNED_COLLIDER.id)\n\t\t\t.length\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.AUTOMATON_QUEEN.icon,\n\t\t\tcontent: <Trans id=\"mch.queen.suggestions.missing-collider.content\">\n\t\t\t\tTry to time your <ActionLink action=\"AUTOMATON_QUEEN\"/> windows so that they end while the boss is targetable, as Crowned Collider is a significant chunk of its damage. If the boss is about to jump or die, use <ActionLink action=\"QUEEN_OVERDRIVE\"/> to end the window early and get the hit in.\n\t\t\t</Trans>,\n\t\t\ttiers: {\n\t\t\t\t1: SEVERITY.MEDIUM,\n\t\t\t\t3: SEVERITY.MAJOR,\n\t\t\t},\n\t\t\tvalue: missedColliders,\n\t\t\twhy: <Trans id=\"mch.queen.suggestions.missing-collider.why\">\n\t\t\t\t{missedColliders} of your Automaton Queen windows ended without a Crowned Collider.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n\n\toverride output() {\n\t\tconst panels = this.summons.map(queen => {\n\t\t\tconst totalDamage = queen.rotation\n\t\t\t\t.reduce((total, attack) => total + attack.damage, 0)\n\n\t\t\treturn {\n\t\t\t\ttitle: {\n\t\t\t\t\tkey: 'title-' + queen.start,\n\t\t\t\t\tcontent: <Trans id=\"mch.queen.panel.content\">\n\t\t\t\t\t\t{this.parser.formatEpochTimestamp(queen.start)}\n\t\t\t\t\t\t<span> - </span>\n\t\t\t\t\t\t{queen.battery} Battery spent, {totalDamage} total damage\n\t\t\t\t\t</Trans>,\n\t\t\t\t},\n\t\t\t\tcontent: {\n\t\t\t\t\tkey: 'content-' + queen.start,\n\t\t\t\t\tcontent: <Rotation events={queen.rotation.map(attack => attack.event)}/>,\n\t\t\t\t},\n\t\t\t}\n\t\t})\n\n\t\treturn <Fragment>\n\t\t\t<Message>\n\t\t\t\t<Trans id=\"mch.queen.accordion.message\">The list below contains every <ActionLink action=\"AUTOMATON_QUEEN\"/> window from the fight, indicating when it started, its Battery cost and duration, and how much total damage the Queen did to its target. Expanding an individual window below will display every cast by the Automaton Queen made during it.</Trans>\n\t\t\t</Message>\n\t\t\t<Accordion\n\t\t\t\texclusive={false}\n\t\t\t\tpanels={panels}\n\t\t\t\tstyled\n\t\t\t\tfluid\n\t\t\t/>\n\t\t</Fragment>\n\t}\n}\n","import {ActionTimeline} from './ActionTimeline'\nimport {AlwaysBeCasting} from './AlwaysBeCasting'\nimport {Combos} from './Combos'\nimport {Drift} from './Drift'\nimport {Gauge} from './Gauge'\nimport GeneralCDDowntime from './GeneralCDDowntime'\nimport {Hypercharge} from './Hypercharge'\nimport {Mitigation} from './Mitigation'\nimport MultiHitSkills from './MultiHitSkills'\nimport QueenTimeline from './QueenTimeline'\nimport {Reassemble} from './Reassemble'\nimport {Tincture} from './Tincture'\nimport {Wildfire} from './Wildfire'\nimport {YassQueen} from './YassQueen'\n\nexport default [\n\tActionTimeline,\n\tAlwaysBeCasting,\n\tCombos,\n\tDrift,\n\tGauge,\n\tGeneralCDDowntime,\n\tHypercharge,\n\tMitigation,\n\tMultiHitSkills,\n\tQueenTimeline,\n\tReassemble,\n\tTincture,\n\tWildfire,\n\tYassQueen,\n]\n"],"names":["ItemDepth","ActionTimeline","CastTime","Cooldowns","Data","Timeline","resolvedRows","groupRows","action","this","addRow","content","constructor","rows","config","resolvedConfig","resolveConfig","push","addEventHook","onComplete","populatedGroups","row","populateRow","forEach","specifier","cooldowns","groups","group","add","allGroups","has","finalConfig","Array","isArray","ensureArray","existingRow","get","isDefined","firstContent","label","Trans","id","data","actions","name","cooldownHistory","timeline","ContainerRow","order","collapse","set","addCooldownItems","addChargeItems","chargeHistory","history","entry","duration","getCooldownDuration","start","parser","pull","timestamp","end","addItem","SimpleItem","className","item","delta","ActionItem","depth","ACTION","ChargeGainItem","CHARGE_GAIN","endReason","CooldownEndReason","castTime","forAction","Math","max","Analyser","handle","debug","dependency","Content","styles","Icon","BaseItem","AlwaysBeCasting","Checklist","Downtime","GlobalCooldown","SpeedAdjustments","gcdUptime","gcdsCounted","lastBeginCast","filter","source","actor","type","onBeginCast","onCast","event","getAction","onGcd","forEvent","globalCooldown","getDuration","ANIMATION_LOCK","recastTime","recastForEvent","castStart","considerCast","relativeTimestamp","formatEpochTimestamp","undefined","_action","downtime","isDowntime","fightDuration","currentDuration","getDowntime","uptime","checklist","Rule","description","displayOrder","requirements","Requirement","percent","getUptimePercent","target","speedAdjustments","estimateHelp","__all","legacyFflogs","Statistics","getAdjustedDuration","BASE_GCD","isAdjustmentEstimated","estimated","isEstimated","statistics","SimpleStatistic","title","icon","ATTACK","value","formatDuration","info","report","meta","PetTimeline","timelineGroupName","timelineSummonAction","timelineAutosName","timelineCommandsName","canPetBeCommanded","autoCasts","commandCasts","_event","actorPets","actors","owner","pet","oneOf","isCommandedEvent","autoRow","parentrow","SimpleRow","commandRow","addCastsToRow","summonAction","Error","actionTimeline","getRow","casts","cast","Tincture","buffStatus","statuses","MEDICATED","BuffWindow","CoreActionTimeline","flameHistory","currentFlame","flamethrowerInterruptingActionHook","playerFilter","flamethrowerCastFilter","FLAMETHROWER","flamethrowerStatusFilter","status","onApplyFlamethrower","onRemoveFlamethrower","anyActionFilter","noneOf","removeEventHook","flameDuration","acc","flame","CoreAlwaysBeCasting","Combos","suggestionIcon","ACTIONS","CoreCombos","DRIFT_GCDS","Drift","driftIds","driftedWindows","currentWindows","AIR_ANCHOR","DRILL","cooldownGroup","CHAIN_SAW","actionKey","castFilter","onDriftableCast","cooldown","window","observedUseTime","earliestUseTime","min","expectedUseTime","downtimeWindow","getDowntimeWindows","drift","driftedActionId","length","driftTable","Table","collapsing","unstackable","compact","Button","onClick","show","Fragment","Message","OVERCAP_SEVERITY","HEAT","SEVERITY","BATTERY","HEAT_COLOR","Color","fade","BATTERY_COLOR","Gauge","Suggestions","heat","CounterGauge","graph","color","battery","heatModifiers","HEATED_SPLIT_SHOT","amount","HEATED_SLUG_SHOT","HEATED_CLEAN_SHOT","SPREAD_SHOT","SCATTERGUN","BARREL_STABILIZER","HYPERCHARGE","batteryModifiers","AUTOMATON_QUEEN","_lastQueenCost","gauge","modifiers","damageActions","castActions","baseFilter","actionFilter","damageFilter","cause","onAction","onDamage","addGaugeHooks","modifier","modifyGauge","isSuccessfulHit","reset","generate","spend","suggestions","TieredSuggestion","tiers","overCap","why","CoreGauge","DOWNTIME_ALLOWED_GCD","GeneralCDDowntime","trackedCds","WILDFIRE","firstUseOffset","REASSEMBLE","allowedAverageDowntime","BIOBLASTER","GAUSS_ROUND","resetBy","HEAT_BLAST","refundAmount","RICOCHET","CooldownDowntime","HYPERCHARGE_GCDS","Hypercharge","History","rotationHook","hyperchargeGcds","key","hyperchargeDuration","patch","before","createTimelineButton","circular","size","hyperchargeFilter","onHypercharge","endCurrentWindow","closeCurrent","openNew","currentWindow","getCurrent","count","panels","hyperchargeGcdCount","formatGcdCount","Rotation","events","HYPERCHARGE_GCD_TARGET","Accordion","exclusive","styled","fluid","Mitigation","trackedDefensives","DISMANTLE","TACTICIAN","Defensives","MultiHitSkills","trackedActions","aoeAction","stActions","minTargets","AoEUsages","QueenTimeline","REASSEMBLE_GCDS","OTHER_GCDS","SEVERITIES","BAD_USES","DROPPED_USES","Reassemble","state","active","lastGcdTime","badUses","droppedUses","reassembleGcdIds","otherGcdIds","gcdFilter","reassembleFilter","REASSEMBLED","onReassemble","onRemove","gcdHook","ReassembleEvaluator","opts","reassembleId","wasReassembleUsed","ExpectedActionsEvaluator","reassembledRemoves","onRemoveReassembled","pets","PILE_BUNKER","CROWNED_COLLIDER","onWindowAction","addEvaluator","expectedActions","expectedPerWindow","INFUSION_DEX","suggestionContent","suggestionWindowName","showIcon","severityTiers","bind","gcdTimestamps","e","firstGcd","some","CoreTincture","BAD_WILDFIRE","FIZZLED_WILDFIRE","Wildfire","stacks","actionHook","durationHook","onApply","matchCauseStatusId","removeTimestampHook","expectedEnd","addTimestampHook","closeWindow","doIfOpen","current","damage","targets","currentEpochTimestamp","badWildfires","wildfire","fizzledWildfires","EXPECTED_GCDS","gcdHeader","header","accessor","damageHeader","rotationData","targetsData","gcds","actual","expected","notesMap","rotation","RotationTable","notes","onGoto","QUEEN_WEAPONSKILLS","YassQueen","BrokenLog","summons","queenWeaponskillIds","queens","queenDamageFilter","onSummon","lastQueen","actionId","brokenLog","trigger","activeQueen","lastQueenCost","handleBrokenLog","q","missedColliders","queen","totalDamage","total","attack"],"sourceRoot":""}