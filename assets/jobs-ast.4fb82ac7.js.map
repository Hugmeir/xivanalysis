{"version":3,"file":"assets/jobs-ast.4fb82ac7.js","mappings":"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","sources":["webpack://@xivanalysis/client/./src/parser/core/modules/Interrupts.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/LucidDreaming.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/StatusTimeline.ts","webpack://@xivanalysis/client/./src/parser/core/modules/Tincture.ts","webpack://@xivanalysis/client/./src/parser/jobs/ast/modules/ActionTimeline.tsx","webpack://@xivanalysis/client/./src/parser/jobs/ast/modules/ArcanaTracking/ArcanaTracking.tsx","webpack://@xivanalysis/client/./src/parser/jobs/ast/modules/ArcanaGroups.ts","webpack://@xivanalysis/client/./src/parser/jobs/ast/modules/DISPLAY_ORDER.ts","webpack://@xivanalysis/client/./src/parser/jobs/ast/modules/ArcanaTracking/ArcanaSuggestions.module.css?a191","webpack://@xivanalysis/client/./src/parser/jobs/ast/modules/ArcanaTracking/ArcanaSuggestions.tsx","webpack://@xivanalysis/client/./src/parser/jobs/ast/modules/ArcanaUndrawUsage.tsx","webpack://@xivanalysis/client/./src/parser/jobs/ast/modules/CastTime.tsx","webpack://@xivanalysis/client/./src/parser/jobs/ast/modules/Combust.tsx","webpack://@xivanalysis/client/./src/parser/jobs/ast/modules/CrownPlay.tsx","webpack://@xivanalysis/client/./src/parser/jobs/ast/modules/Defensives.tsx","webpack://@xivanalysis/client/./src/parser/jobs/ast/modules/Divination.tsx","webpack://@xivanalysis/client/./src/parser/jobs/ast/modules/Draw.tsx","webpack://@xivanalysis/client/./src/parser/jobs/ast/modules/EarthlyStar.tsx","webpack://@xivanalysis/client/./src/parser/jobs/ast/modules/Helios.tsx","webpack://@xivanalysis/client/./src/parser/jobs/ast/modules/Lightspeed.tsx","webpack://@xivanalysis/client/./src/parser/jobs/ast/modules/Macrocosmos.tsx","webpack://@xivanalysis/client/./src/parser/jobs/ast/modules/oGCDs.tsx","webpack://@xivanalysis/client/./src/parser/jobs/ast/modules/Overheal.tsx","webpack://@xivanalysis/client/./src/parser/jobs/ast/modules/StatusTimeline.ts","webpack://@xivanalysis/client/./src/parser/jobs/ast/modules/Synastry.tsx","webpack://@xivanalysis/client/./src/parser/jobs/ast/modules/Tincture.tsx","webpack://@xivanalysis/client/./src/parser/jobs/ast/modules/index.ts","webpack://@xivanalysis/client/./node_modules/lodash/_arrayEachRight.js","webpack://@xivanalysis/client/./node_modules/lodash/_baseEachRight.js","webpack://@xivanalysis/client/./node_modules/lodash/_baseForOwnRight.js","webpack://@xivanalysis/client/./node_modules/lodash/_baseForRight.js","webpack://@xivanalysis/client/./node_modules/lodash/_baseZipObject.js","webpack://@xivanalysis/client/./node_modules/lodash/_castFunction.js","webpack://@xivanalysis/client/./node_modules/lodash/forEachRight.js","webpack://@xivanalysis/client/./node_modules/lodash/zipObject.js"],"sourcesContent":["import {MessageDescriptor} from '@lingui/core'\nimport {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport ACTIONS from 'data/ACTIONS'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport {Timeline} from 'parser/core/modules/Timeline'\nimport React from 'react'\nimport {Button, Table} from 'semantic-ui-react'\nimport {filter} from '../filter'\nimport {dependency} from '../Injectable'\nimport CastTime from './CastTime'\nimport {Data} from './Data'\n\ninterface SeverityTiers {\n\t[key: number]: number\n}\n\n// used for timeline viewing by giving you a nice 30s window\nconst TIMELINE_UPPER_MOD: number = 30000\n\nexport class Interrupts extends Analyser {\n\tstatic override handle: string = 'interrupts'\n\tstatic override title: MessageDescriptor = t('core.interrupts.title')`Interrupted Casts`\n\tstatic override debug: boolean = false\n\n\t@dependency private castTime!: CastTime\n\t@dependency protected data!: Data\n\t@dependency private suggestions!: Suggestions\n\t@dependency private timeline!: Timeline\n\n\tprivate currentCast?: Events['prepare']\n\tprivate droppedCasts: Array<Events['interrupt']> = []\n\tprivate missedTimeMS: number = 0\n\n\t/**\n\t * Implementing modules MAY override the icon to be used for the suggestion,\n\t * though, let's face it – interject is pretty much the perfect one.\n\t */\n\tprotected icon: string = ACTIONS.INTERJECT.icon\n\n\t/**\n\t * Implementing modules MAY override the severity tiers for interrupted casts\n\t */\n\tprotected severity: SeverityTiers = {\n\t\t2: SEVERITY.MEDIUM,\n\t\t5: SEVERITY.MAJOR,\n\t}\n\n\t/**\n\t * Implementing modules MAY override the default suggestion text\n\t */\n\tprotected suggestionContent: JSX.Element = <Trans id=\"core.interrupts.suggestion.content\">\n\t\tAvoid interrupting casts by either prepositioning yourself or utilizing slidecasting where possible. If you have to move, try to save an instant cast to keep your GCD rolling.\n\t</Trans>\n\n\t/**\n\t * Implementing modules MAY override this function to provide specific text if they wish for the 'why'\n\t * The default is to complain that they missed a number of casts and give them an estimate\n\t * @param missedCasts The array of missed casts\n\t * @param missedTime The approximate time wasted via interrupts\n\t * @returns JSX that conforms to your suggestion content\n\t */\n\tprotected suggestionWhy(missedCasts: Array<Events['interrupt']>, missedTime: number): JSX.Element {\n\t\treturn <Trans id=\"core.interrupts.suggestion.why\">You missed { missedCasts.length } casts (approximately { this.parser.formatDuration(missedTime) } of total casting time) due to interruption.</Trans>\n\t}\n\n\t/**\n\t * Implementing modules MAY override this function to provide alternative output if there's 0 interrupted\n\t * casts (in lieu of an empty table)\n\t */\n\tprotected noInterruptsOutput(): JSX.Element | undefined {\n\t\treturn undefined\n\t}\n\n\tpublic override initialise() {\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.type('prepare')\n\t\t\t\t.source(this.parser.actor.id),\n\t\t\tthis.onBeginCast\n\t\t)\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.type('interrupt')\n\t\t\t\t.source(this.parser.actor.id),\n\t\t\tthis.pushDropCasts\n\t\t)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onBeginCast(event: Events['prepare']) {\n\t\tthis.currentCast = event\n\t}\n\n\tprivate pushDropCasts(event: Events['interrupt']) {\n\t\tif (this.currentCast == null) { return }\n\n\t\tconst castTime = this.castTime.forAction(this.currentCast.action, this.currentCast.timestamp) ?? 0\n\n\t\tthis.missedTimeMS += Math.min(\n\t\t\tevent.timestamp - (this.currentCast?.timestamp ?? this.parser.currentEpochTimestamp),\n\t\t\tcastTime\n\t\t)\n\t\tthis.droppedCasts.push(event)\n\t\tthis.currentCast = undefined\n\t}\n\n\tprivate onComplete() {\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.icon,\n\t\t\ttiers: this.severity,\n\t\t\tvalue: this.droppedCasts.length,\n\t\t\tcontent: this.suggestionContent,\n\t\t\twhy: this.suggestionWhy(this.droppedCasts, this.missedTimeMS),\n\t\t}))\n\t}\n\n\toverride output() {\n\t\tif (this.droppedCasts.length === 0) {\n\t\t\treturn this.noInterruptsOutput()\n\t\t}\n\n\t\treturn <Table compact unstackable celled collapsing>\n\t\t\t<Table.Header>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.HeaderCell collapsing>\n\t\t\t\t\t\t<strong><Trans id=\"core.interrupts.table.time\">Time</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong><Trans id=\"core.interrupts.table.cast\">Cast</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{\n\t\t\t\t\tthis.droppedCasts.map((cast) => {\n\t\t\t\t\t\tconst action = this.data.getAction(cast.action)\n\t\t\t\t\t\treturn <Table.Row key={cast.timestamp}>\n\t\t\t\t\t\t\t<Table.Cell textAlign=\"center\">\n\t\t\t\t\t\t\t\t<span style={{marginRight: 5}}>{this.parser.formatEpochTimestamp(cast.timestamp)}</span>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tcircular\n\t\t\t\t\t\t\t\t\tcompact\n\t\t\t\t\t\t\t\t\tsize=\"mini\"\n\t\t\t\t\t\t\t\t\ticon=\"time\"\n\t\t\t\t\t\t\t\t\tonClick={() => this.timeline.show(cast.timestamp - this.parser.pull.timestamp, cast.timestamp - this.parser.pull.timestamp + TIMELINE_UPPER_MOD)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t<Table.Cell>\n\t\t\t\t\t\t\t\t<ActionLink {...action} />\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t</Table.Row>\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</Table.Body>\n\t\t</Table>\n\n\t}\n}\n","import {Plural, Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Data} from 'parser/core/modules/Data'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React, {Fragment} from 'react'\n\n//assumptions listed after each severity\nconst SEVERITIES = {\n\tUSE_PERCENT_THRESHOLD: {\n\t\t0.8: SEVERITY.MAJOR, //less than 20% of the available time is close to not using it at all or barely\n\t\t0.4: SEVERITY.MEDIUM, //60% is not using it enough -- risks not having enough mana throughout the fight, but with cards, this may not be as applicable\n\t\t0.2: SEVERITY.MINOR, //80% of the time is used to keep it on the radar, but not punish\n\t},\n}\n\nexport class LucidDreaming extends Analyser {\n\tstatic override handle = 'lucid'\n\tstatic override dependencies = [\n\t\t'suggestions',\n\t]\n\n\t@dependency private data!: Data\n\t@dependency private suggestions!: Suggestions\n\n\tprivate lastUse = 0\n\tprivate uses = 0\n\tprivate totalHeld = 0\n\n\toverride initialise() {\n\n\t\tthis.addEventHook(filter<Event>()\n\t\t\t.source(this.parser.actor.id)\n\t\t\t.type('action')\n\t\t\t.action(this.data.actions.LUCID_DREAMING.id), this.onCastLucid)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onCastLucid(event: Events['action']) {\n\t\tthis.uses++\n\n\t\tif (this.lastUse === 0) { this.lastUse = this.parser.pull.timestamp }\n\n\t\tlet _held = 0\n\n\t\tif (this.uses === 1) {\n\t\t\t// The first use, take holding as from the first minute of the fight\n\t\t\t_held = event.timestamp - this.parser.pull.timestamp\n\t\t} else {\n\t\t\t// Take holding as from the time it comes off cooldown\n\t\t\t_held = event.timestamp - this.lastUse - this.data.actions.LUCID_DREAMING.cooldown\n\t\t}\n\n\t\tif (_held > 0) {\n\t\t\tthis.totalHeld += _held\n\t\t}\n\t\t//update the last use\n\t\tthis.lastUse = event.timestamp\n\t}\n\n\tprotected suggestionContent: JSX.Element = <Fragment>\n\t\t<Trans id=\"core.lucid-dreaming.suggestion.content\">\n\t\t\tTry to keep <DataLink action=\"LUCID_DREAMING\" /> on cooldown for better MP management.\n\t\t</Trans>\n\t</Fragment>\n\n\tprotected suggestionWhy(usesMissed: number, holdDuration: number): JSX.Element {\n\t\treturn <Fragment>\n\t\t\t<Trans id=\"core.lucid-dreaming.suggestion.why\">\n\t\t\t\t<Plural value={usesMissed} one=\"# use\" other=\"# uses\" /> of Lucid Dreaming <Plural value={usesMissed} one=\"was\" other=\"were\" /> missed by holding it for at least a total of {this.parser.formatDuration(holdDuration)}.\n\t\t\t</Trans>\n\t\t</Fragment>\n\t}\n\n\tprivate onComplete() {\n\t\t//uses missed reported in 1 decimal\n\t\tconst holdDuration = this.uses === 0 ? this.parser.pull.duration : this.totalHeld\n\t\tconst usesMissed = Math.floor(holdDuration / this.data.actions.LUCID_DREAMING.cooldown)\n\t\tconst notUsesPercent = usesMissed === 0 ? 0 : holdDuration/this.parser.pull.duration\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.LUCID_DREAMING.icon,\n\t\t\tcontent: this.suggestionContent,\n\t\t\ttiers: SEVERITIES.USE_PERCENT_THRESHOLD,\n\t\t\twhy: this.suggestionWhy(usesMissed, holdDuration),\n\t\t\tvalue: notUsesPercent,\n\t\t}))\n\t}\n}\n","import {Action} from 'data/ACTIONS'\nimport {Status} from 'data/STATUSES'\nimport {Event, Events} from 'event'\nimport _ from 'lodash'\nimport {Analyser} from '../Analyser'\nimport {filter, noneOf, oneOf} from '../filter'\nimport {dependency} from '../Injectable'\nimport {ActionTimeline} from './ActionTimeline'\nimport {Actor, Actors} from './Actors'\nimport {Data} from './Data'\nimport {SimpleRow, StatusItem} from './Timeline'\n\ninterface Usage {\n\tstart: number\n\tend?: number\n}\n\ninterface StatusTarget {\n\tusages: Usage[]\n\trow: SimpleRow\n}\n\nexport class StatusTimeline extends Analyser {\n\tstatic override handle = 'statusTimeline'\n\n\tstatic statusesStackMapping: Record<number, number> = {}\n\n\t@dependency private actionTimeline!: ActionTimeline;\n\t@dependency private actors!: Actors;\n\t@dependency private data!: Data\n\n\tprivate statusActionMap = new Map<Status['id'], Action>();\n\tprivate usages = new Map<Status['id'], Map<Actor['id'], StatusTarget>>()\n\tprivate rows = new Map<string, SimpleRow>()\n\n\toverride initialise() {\n\t\t// Hook status events\n\t\tconst playerPetIds = this.parser.pull.actors\n\t\t\t.filter(actor => actor.owner === this.parser.actor)\n\t\t\t.map(pet => pet.id)\n\n\t\tconst allPetIds = this.parser.pull.actors\n\t\t\t.filter(actor => actor.owner?.playerControlled === true)\n\t\t\t.map(pet => pet.id)\n\n\t\tconst actorFilter = filter<Event>()\n\t\t\t.source(oneOf([this.parser.actor.id, ...playerPetIds]))\n\t\t\t.target(noneOf(allPetIds))\n\n\t\tthis.addEventHook(actorFilter.type('statusApply'), this.onApply)\n\t\tthis.addEventHook(actorFilter.type('statusRemove'), this.onRemove)\n\t\tthis.addEventHook('complete', this.onComplete)\n\n\t\t// Pre-cache status->action mappings\n\t\tfor (const action of Object.values(this.data.actions)) {\n\t\t\tif (action.statusesApplied == null) { continue }\n\t\t\tfor (const status of action.statusesApplied) {\n\t\t\t\tconst statusId = this.data.statuses[status].id\n\t\t\t\tthis.statusActionMap.set(statusId, action)\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onApply(event: Events['statusApply']) {\n\t\tlet statusUsages = this.usages.get(event.status)\n\t\tif (statusUsages == null) {\n\t\t\tstatusUsages = new Map()\n\t\t\tthis.usages.set(event.status, statusUsages)\n\t\t}\n\n\t\tlet statusTarget = statusUsages.get(event.target)\n\t\tif (statusTarget == null) {\n\t\t\tconst row = this.createStatusTargetRow(event.status, event.target)\n\t\t\tif (row == null) { return }\n\t\t\tstatusTarget = {\n\t\t\t\tusages: [],\n\t\t\t\trow,\n\t\t\t}\n\t\t\tstatusUsages.set(event.target, statusTarget)\n\t\t}\n\n\t\t// If there's an existing usage on the target, this can be considered to be a refresh\n\t\tconst lastUsage = _.last(statusTarget.usages)\n\t\tif (lastUsage != null && lastUsage.end == null) {\n\t\t\treturn\n\t\t}\n\n\t\tstatusTarget.usages.push({\n\t\t\tstart: event.timestamp,\n\t\t})\n\t}\n\n\tprivate onRemove(event: Events['statusRemove']) {\n\t\tconst lastUsage = _.last(this.usages.get(event.status)?.get(event.target)?.usages)\n\t\tif (lastUsage == null) { return }\n\n\t\tlastUsage.end = event.timestamp\n\t}\n\n\tprivate onComplete() {\n\t\tfor (const [statusId, statusUsages] of this.usages) {\n\t\t\tconst status = this.data.getStatus(statusId)\n\t\t\tif (status == null) { continue }\n\n\t\t\tfor (const statusTarget of statusUsages.values()) {\n\t\t\t\tfor (const usage of statusTarget.usages) {\n\t\t\t\t\tstatusTarget.row.addItem(new StatusItem({\n\t\t\t\t\t\tstatus,\n\t\t\t\t\t\tstart: usage.start - this.parser.pull.timestamp,\n\t\t\t\t\t\tend: (usage.end ?? this.parser.pull.timestamp + this.parser.pull.duration) - this.parser.pull.timestamp,\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate createStatusTargetRow(statusId: Status['id'], targetId: Actor['id']) {\n\t\tconst mapping = (this.constructor as typeof StatusTimeline).statusesStackMapping\n\t\tconst remappedStatusId = mapping[statusId] ?? statusId\n\n\t\tconst rowKey = this.getRowKey(remappedStatusId, targetId)\n\n\t\tconst cachedRow = this.rows.get(rowKey)\n\t\tif (cachedRow != null) { return cachedRow }\n\n\t\tconst statusRow = this.createStatusRow(remappedStatusId)\n\t\tif (statusRow == null) { return }\n\n\t\tconst actor = this.actors.get(targetId)\n\n\t\tconst row = statusRow.addRow(new SimpleRow({\n\t\t\tlabel: actor.name,\n\t\t}))\n\n\t\tthis.rows.set(rowKey, row)\n\t\treturn row\n\t}\n\n\tprivate createStatusRow(statusId: Status['id']) {\n\t\tconst rowKey = this.getRowKey(statusId)\n\n\t\tconst cachedRow = this.rows.get(rowKey)\n\t\tif (cachedRow != null) { return cachedRow }\n\n\t\tconst action = this.statusActionMap.get(statusId)\n\t\tif (action == null) { return }\n\n\t\tconst row = this.actionTimeline.getRow(action).addRow(new SimpleRow({\n\t\t\tlabel: this.data.getStatus(statusId)?.name ?? statusId,\n\t\t\thideCollapsed: true,\n\t\t\tcollapse: true,\n\t\t}))\n\n\t\tthis.rows.set(rowKey, row)\n\t\treturn row\n\t}\n\n\tprivate getRowKey = (statusId: Status['id'], targetId?: Actor['id']) =>\n\t\t`${statusId}:${targetId}`\n}\n","import {t} from '@lingui/macro'\nimport {BuffWindow} from './ActionWindow/windows/BuffWindow'\n\nexport class Tincture extends BuffWindow {\n\tstatic override handle = 'tincture'\n\tstatic override title = t('core.tincture.title')`Tinctures`\n\n\tbuffStatus = this.data.statuses.MEDICATED\n\n\t// No initialise since only the table display is desired without\n\t// any evaluation as to expected actions.\n}\n","import {ActionRow, ActionTimeline as CoreActionTimeline} from 'parser/core/modules/ActionTimeline'\n\nexport class ActionTimeline extends CoreActionTimeline {\n\tstatic override rows: ActionRow[] = [\n\t\t...CoreActionTimeline.rows,\n\t\t// Arcanum\n\t\t['DRAW', 'UNDRAW'],\n\t\t'PLAY',\n\t\t'ASTRODYNE',\n\t\t['CROWN_PLAY', 'MINOR_ARCANA'],\n\t\t//other AST or party buffs\n\t\t'DIVINATION',\n\t\t'LIGHTSPEED',\n\t\t// oGCD ST heals\n\t\t'ESSENTIAL_DIGNITY',\n\t\t'SYNASTRY',\n\t\t'CELESTIAL_INTERSECTION',\n\t\t// oGCD AoE heals\n\t\t'CELESTIAL_OPPOSITION',\n\t\t['EARTHLY_STAR', 'STELLAR_DETONATION'],\n\t\t//Delayed oGCD Heals\n\t\t['MACROCOSMOS', 'MICROCOSMOS'],\n\t\t'EXALTATION',\n\t\t['HOROSCOPE', 'HOROSCOPE_ACTIVATION'],\n\t\t// Healing buff\n\t\t'NEUTRAL_SECT',\n\t\t// Party mitigation\n\t\t'COLLECTIVE_UNCONSCIOUS',\n\t\t// Role actions\n\t\t'LUCID_DREAMING',\n\t]\n}\n","import {t} from '@lingui/macro'\nimport {Action} from 'data/ACTIONS'\nimport {ActionRoot} from 'data/ACTIONS/root'\nimport {Status} from 'data/STATUSES'\nimport {Event, Events} from 'event'\nimport _ from 'lodash'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Data} from 'parser/core/modules/Data'\nimport {InitEvent} from 'parser/core/Parser'\nimport {ARCANA_STATUSES, CELESTIAL_SEAL_ARCANA, DRAWN_ARCANA, LUNAR_SEAL_ARCANA, PLAY, SOLAR_SEAL_ARCANA} from '../ArcanaGroups'\nimport DISPLAY_ORDER from '../DISPLAY_ORDER'\n\nconst LINKED_EVENT_THRESHOLD = 20\nconst DEATH_EVENT_STATUS_DROP_DELAY = 2000\n\nconst CARD_GRANTING_ABILITIES: Array<keyof ActionRoot> = ['DRAW', 'REDRAW', ...PLAY]\n\nconst CARD_ACTIONS: Array<keyof ActionRoot> = [\n\t'DRAW',\n\t'REDRAW',\n\t'UNDRAW',\n\t'ASTRODYNE',\n\t...PLAY,\n]\nexport enum SealType {\n\tNOTHING = 0,\n\tSOLAR = 1,\n\tLUNAR = 2,\n\tCELESTIAL = 3,\n}\nconst CLEAN_SEAL_STATE = [SealType.NOTHING, SealType.NOTHING, SealType.NOTHING]\n\nexport enum SleeveType {\n\tNOTHING = 0,\n\tONE_STACK = 1,\n\tTWO_STACK = 2,\n}\n\nexport interface CardState {\n\tlastEvent: InitEvent | Events['action'] | Events['death']\n\tdrawState?: number // typeof DRAWN_ARCANA status ID. Only loaded at runtime. TODO: Types\n\tsealState: SealType[]\n\tsleeveState: SleeveType\n}\n\n// TODO: Try to track for when a seal was not given on pull due to latency?\nexport default class ArcanaTracking extends Analyser {\n\tstatic override handle = 'arcanaTracking'\n\tstatic override title = t('ast.arcana-tracking.title')`Arcana Tracking`\n\tstatic override displayOrder = DISPLAY_ORDER.ARCANA_TRACKING\n\n\t@dependency private data!: Data\n\n\tprivate play: Array<Action['id']> = []\n\tprivate arcanaStatuses: Array<Status['id']> = []\n\tprivate cardGrantingAbilities: Array<Action['id']> = []\n\tprivate cardActions: Array<Action['id']> = []\n\tprivate drawnArcana: Array<Status['id']> = []\n\tprivate celestialSealArcana: Array<Action['id']> = []\n\tprivate lunarSealArcana: Array<Action['id']> = []\n\tprivate solarSealArcana: Array<Action['id']> = []\n\n\tprivate playToStatusLookup: { [key: number]: number } = {}\n\tprivate statusToDrawnLookup: { [key: number]: number } = {}\n\tprivate statusToPlayLookup: { [key: number]: number } = {}\n\tprivate drawnToPlayLookup: { [key: number]: number } = {}\n\n\tprivate cardStateLog: CardState[] = [{\n\t\tlastEvent: {\n\t\t\ttype: 'init',\n\t\t\ttimestamp: this.parser.pull.timestamp,\n\t\t},\n\t\tdrawState: undefined,\n\t\tsealState: CLEAN_SEAL_STATE,\n\t\tsleeveState: SleeveType.NOTHING,\n\t}]\n\n\tprivate lastDrawnBuff?: Events['statusApply']\n\tprivate pullStateInitialized = false\n\tprivate pullIndex = 0\n\n\tprivate on_prepullArcanas?: Array<Events['statusApply']>\n\tprivate off_prepullArcanas?: Array<Events['statusRemove']>\n\n\toverride initialise() {\n\t\t// Initialize grouped reference to actions/statuses data\n\t\tthis.play = PLAY.map(actionKey => this.data.actions[actionKey].id)\n\t\tthis.arcanaStatuses = ARCANA_STATUSES.map(statusKey => this.data.statuses[statusKey].id)\n\t\tthis.cardGrantingAbilities = CARD_GRANTING_ABILITIES.map(actionKey => this.data.actions[actionKey].id)\n\t\tthis.cardActions = CARD_ACTIONS.map(actionKey => this.data.actions[actionKey].id)\n\t\tthis.drawnArcana = DRAWN_ARCANA.map(statusKey => this.data.statuses[statusKey].id)\n\t\tthis.celestialSealArcana = CELESTIAL_SEAL_ARCANA.map(actionKey => this.data.actions[actionKey].id)\n\t\tthis.lunarSealArcana = LUNAR_SEAL_ARCANA.map(actionKey => this.data.actions[actionKey].id)\n\t\tthis.solarSealArcana = SOLAR_SEAL_ARCANA.map(actionKey => this.data.actions[actionKey].id)\n\n\t\tthis.playToStatusLookup = _.zipObject(this.play, this.drawnArcana)\n\t\tthis.statusToDrawnLookup = _.zipObject(this.arcanaStatuses, this.drawnArcana)\n\t\tthis.statusToPlayLookup = _.zipObject(this.arcanaStatuses, this.play)\n\t\tthis.drawnToPlayLookup = _.zipObject(this.drawnArcana, this.play)\n\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\n\t\tthis.addEventHook(\n\t\t\tplayerFilter\n\t\t\t\t.type('action')\n\t\t\t\t.action(oneOf(this.cardActions)),\n\t\t\tthis.onCast\n\t\t)\n\n\t\tthis.addEventHook(\n\t\t\tplayerFilter\n\t\t\t\t.type('statusApply')\n\t\t\t\t.status(oneOf(this.arcanaStatuses)),\n\t\t\tthis.onPrepullArcana\n\t\t)\n\t\tthis.addEventHook(\n\t\t\tplayerFilter\n\t\t\t\t.type('statusRemove')\n\t\t\t\t.status(oneOf(this.arcanaStatuses)),\n\t\t\tthis.offPrepullArcana\n\t\t)\n\n\t\tthis.addEventHook(\n\t\t\tplayerFilter\n\t\t\t\t.type('statusApply')\n\t\t\t\t.status(oneOf(this.drawnArcana)),\n\t\t\tthis.onDrawnStatus\n\t\t)\n\t\tthis.addEventHook(\n\t\t\tplayerFilter\n\t\t\t\t.type('statusRemove')\n\t\t\t\t.status(oneOf(this.drawnArcana)),\n\t\t\tthis.offDrawnStatus\n\t\t)\n\n\t\tthis.addEventHook({\n\t\t\ttype: 'death',\n\t\t\tactor: this.parser.actor.id,\n\t\t}, this.onDeath)\n\n\t}\n\n\tpublic get cardLogs() {\n\t\treturn this.cardStateLog\n\t}\n\n\t/**\n\t * @param {number} timestamp - desired timestamp to get the state. Defaults to pull state.\n\t * @returns {CardState} - object containing the card state and last event\n\t */\n\tpublic getCardState(timestamp = this.parser.pull.timestamp): CardState | undefined {\n\t\tconst stateItem = this.cardStateLog.find(artifact => artifact.lastEvent && timestamp > artifact.lastEvent.timestamp)\n\t\treturn stateItem\n\t}\n\n\t/**\n\t * @returns {CardState} - object containing the card state of the pull\n\t */\n\tpublic getPullState(): CardState {\n\t\tconst stateItem = this.cardStateLog.find(artifact => artifact.lastEvent && artifact.lastEvent.type === 'init') as CardState\n\t\treturn stateItem\n\t}\n\n\t/**\n\t * Adds the Arcana Buff to _prepullArcanas if it was a precast status\n\t */\n\tprivate onPrepullArcana(event: Events['statusApply']) {\n\t\tif (event.timestamp > this.parser.pull.timestamp) {\n\t\t\treturn\n\t\t}\n\t\tif (this.on_prepullArcanas != null) {\n\t\t\tthis.on_prepullArcanas.push(event)\n\t\t}\n\t}\n\n\t/**\n\t * Determine exactly when they casted their prepull arcana\n\t * If they had overwritten this buff, it will falsly pull back the timestamp of their prepull cast, but since we are guessing, it may as well be the same.\n\t */\n\tprivate offPrepullArcana(event: Events['statusRemove']) {\n\t\tif (event.timestamp >= this.parser.pull.timestamp + this.data.statuses.THE_BALANCE.duration) {\n\t\t\treturn\n\t\t}\n\t\tif (this.off_prepullArcanas != null) {\n\t\t\tthis.off_prepullArcanas.forEach(arcanaBuff => {\n\t\t\t\tif (!(arcanaBuff.status === event.status\n\t\t\t\t&& arcanaBuff.target === event.target)) { return }\n\n\t\t\t\tconst cardStateItem: CardState = {..._.last(this.cardStateLog)} as CardState\n\t\t\t\tconst arcanaAction = this.data.getAction(this.arcanaStatusToPlay(event.status))\n\n\t\t\t\tif (arcanaAction == null) { return }\n\n\t\t\t\tconst arcanaCastEvent: Events['action'] = {\n\t\t\t\t\taction: arcanaAction.id as number,\n\t\t\t\t\ttimestamp: event.timestamp - this.data.statuses.THE_BALANCE.duration - this.parser.pull.timestamp,\n\t\t\t\t\ttype: 'action',\n\t\t\t\t\tsource: event.source,\n\t\t\t\t\ttarget: event.target,\n\t\t\t\t}\n\t\t\t\tcardStateItem.lastEvent = {...arcanaCastEvent}\n\t\t\t\tcardStateItem.drawState = undefined\n\t\t\t\tcardStateItem.sealState = CLEAN_SEAL_STATE\n\n\t\t\t\tthis.cardStateLog.unshift(cardStateItem)\n\t\t\t\tthis.pullIndex++\n\n\t\t\t})\n\t\t}\n\n\t}\n\n\t// Just saves a class var for the last drawn status buff event for reference, to help minor arcana plays\n\tprivate onDrawnStatus(event: Events['statusApply']) {\n\t\tif (!this.drawnArcana.includes(event.status)) {\n\t\t\treturn\n\t\t}\n\t\tthis.lastDrawnBuff = event\n\t}\n\n\t/**\n\t * This will run on removebuff. It will look for the loss of Arcanas Drawn statuses\n\t * 5.0: This was a lot more meaningful when we had multiple statuses to track like royal road, held, drawn, etc.\n\t * it's still useful now as it helps mitigate out-of-order log events (if that's still a thing anyway..)\n\t *\n\t * a) If it can't find any clear reason why the player had lost the buff, let's do a retconsearch to figure out since when they had it\n\t *\n\t * b) If they lost the buff with no link to any timestamp, it could be a /statusoff macro.\n\t *    Creates a new entry as this is technically also a card action.\n\t *\n\t */\n\tprivate offDrawnStatus(event: Events['statusRemove']) {\n\n\t\tif (!this.drawnArcana.includes(event.status)) {\n\t\t\treturn\n\t\t}\n\n\t\t// a) check if this card was obtained legally, if not, retcon the logs\n\t\tthis.retconSearch(this.arcanaDrawnToPlay(event.status))\n\n\t\t// b) check if this was a standalone statusoff/undraw, if so, fab undraw event and add to logs\n\t\tconst isPaired = this.cardStateLog.some(stateItem => stateItem.lastEvent\n\t\t\t&& _.inRange(event.timestamp, stateItem.lastEvent.timestamp - LINKED_EVENT_THRESHOLD, stateItem.lastEvent.timestamp + LINKED_EVENT_THRESHOLD))\n\n\t\tconst isDeathPaired = this.cardStateLog.some(stateItem => stateItem.lastEvent\n\t\t\t&& _.inRange(event.timestamp, stateItem.lastEvent.timestamp - LINKED_EVENT_THRESHOLD - DEATH_EVENT_STATUS_DROP_DELAY, stateItem.lastEvent.timestamp + DEATH_EVENT_STATUS_DROP_DELAY + LINKED_EVENT_THRESHOLD)\n\t\t&& stateItem.lastEvent.type === 'death')\n\n\t\t// TODO: the above logic is ordered chronologically and for some reason doesn't capture deaths even with trying to account for death event types\n\n\t\tif (!isPaired && !isDeathPaired) {\n\t\t\tconst cardStateItem: CardState = {..._.last(this.cardStateLog)} as CardState\n\t\t\t// fabbing an undraw cast event\n\t\t\tconst lastEvent: Events['action'] = {\n\t\t\t\taction: this.data.actions.UNDRAW.id,\n\t\t\t\ttimestamp: event.timestamp,\n\t\t\t\ttype: 'action',\n\t\t\t\tsource: event.source,\n\t\t\t\ttarget: event.target,\n\t\t\t}\n\n\t\t\tcardStateItem.lastEvent = lastEvent\n\t\t\tcardStateItem.drawState = undefined\n\t\t\tthis.cardStateLog.push(cardStateItem)\n\t\t}\n\t}\n\n\t/**\n\t * MAIN DATA GATHERING LOOP\n\t * Creates a CardState duplicated from the previous known state of the Astrologian's spread, then modifies it based on the current action.\n\t * Adds the CardState to cardStateLog\n\t *\n\t */\n\tprivate onCast(event: Events['action']) {\n\t\t// For now, we're not looking at any other precast action other than Plays, which is handled by offPrepullArcana() to check removebuff instead of cast for better estimation\n\n\t\tif (event.timestamp < this.parser.pull.timestamp) {\n\t\t\treturn\n\t\t}\n\t\tconst actionId = event.action\n\t\t// Piecing together what they have on prepull\n\t\tif (!this.pullStateInitialized && this.play.includes(actionId)) {\n\t\t\tthis.initPullState(event)\n\t\t}\n\n\t\tconst cardStateItem: CardState = {..._.last(this.cardStateLog)} as CardState\n\n\t\tcardStateItem.lastEvent = event\n\n\t\tif (this.play.includes(actionId)) {\n\t\t\t// Make sure they have been holding onto this from the last instance of a DRAW/REDRAW/MINOR_ARCANA\n\t\t\tthis.retconSearch(actionId)\n\n\t\t\tcardStateItem.drawState = undefined\n\n\t\t\t// Work out what seal they got\n\t\t\tlet sealObtained: SealType = SealType.NOTHING\n\t\t\tif (this.solarSealArcana.includes(actionId)) {\n\t\t\t\tsealObtained = SealType.SOLAR\n\t\t\t} else if (this.lunarSealArcana.includes(actionId)) {\n\t\t\t\tsealObtained = SealType.LUNAR\n\t\t\t} else if (this.celestialSealArcana.includes(actionId)) {\n\t\t\t\tsealObtained = SealType.CELESTIAL\n\t\t\t}\n\t\t\tconst sealState = [...cardStateItem.sealState]\n\t\t\tcardStateItem.sealState = this.addSeal(sealObtained, sealState)\n\t\t}\n\n\t\tif (actionId === this.data.actions.ASTRODYNE.id) {\n\t\t\tcardStateItem.sealState = CLEAN_SEAL_STATE\n\t\t}\n\n\t\tif (actionId === this.data.actions.UNDRAW.id) {\n\t\t\tcardStateItem.drawState = undefined\n\t\t}\n\n\t\tthis.cardStateLog.push(cardStateItem)\n\t}\n\n\t/**\n\t * Cards scattered all over the floor, covered with your blood\n\t * Inserts a new event into _cardStateLogs\n\t */\n\tprivate onDeath(event: Events['death']) {\n\n\t\t// TODO: This is a duct tape fix\n\t\t// Checks on the previous event - it may be an erroneous drawnArcana flagged by offDrawnArcana. Statuses SEEM to drop 2s + 20ms earlier than the Death event.\n\t\tconst lastCardState = {..._.last(this.cardStateLog)} as CardState\n\t\tif (lastCardState.lastEvent.type === 'action' && lastCardState.lastEvent.action === this.data.actions.UNDRAW.id\n\t\t\t&& (event.timestamp - lastCardState.lastEvent.timestamp <= DEATH_EVENT_STATUS_DROP_DELAY + LINKED_EVENT_THRESHOLD)) {\n\t\t\tthis.cardStateLog.pop()\n\t\t}\n\t\t// Fab a death event\n\t\tthis.cardStateLog.push({\n\t\t\tlastEvent: {\n\t\t\t\t...event,\n\t\t\t},\n\t\t\tdrawState: undefined,\n\t\t\tsealState: lastCardState.sealState,\n\t\t\tsleeveState: SleeveType.NOTHING,\n\t\t})\n\t}\n\n\t/**\n\t * Initializes _cardStateLog pull entry for the first ever PLAY\n\t * Looks for a previous DRAW. If none, then DRAW was made prepull. Updates pull state.\n\t *\n\t */\n\tprivate initPullState(event: Events['action']) {\n\t\tconst actionId = event.action\n\n\t\t// First check that there's no DRAW between this and pullIndex\n\t\tconst lookupLog = this.cardStateLog.slice(this.pullIndex + 1)\n\t\tif (lookupLog.length > 0) {\n\t\t\tlookupLog.forEach(cardState => {\n\t\t\t\tif (cardState.lastEvent.type === 'action'\n\t\t\t\t\t&& this.cardGrantingAbilities.includes(cardState.lastEvent.action)) {\n\t\t\t\t\t// We're done since they had a DRAW\n\t\t\t\t\treturn this.pullStateInitialized = true\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tif (!this.pullStateInitialized && this.play.includes(actionId)) {\n\t\t\t// They had something in the draw slot\n\t\t\tconst drawnStatus = this.arcanaActionToStatus(actionId)\n\t\t\tthis.cardStateLog.forEach((cardState, index) => {\n\t\t\t\tif (cardState.lastEvent.type === 'init') {\n\t\t\t\t\tthis.cardStateLog[index].drawState = drawnStatus ? drawnStatus : undefined\n\t\t\t\t\treturn this.pullStateInitialized = true\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\t/**\n\t * Loops back to see if the specified card was in possession without the possiblity of it being obtained via legal abilities.\n\t * This is presumed to mean they had it prepull, or since that latest ability. This function will then retcon the history since we know they had it.\n\t * The reason why this is necessary is because some logs come with draw/buff/play out of order.\n\t * Would be done in normaliser except we won't\n\t *\n\t * 5.0: Haha we only have one card slot now.\n\t *\n\t * @param actionId{array} The specified card drawn id\n\t * @return {void} null\n\t */\n\tprivate retconSearch(cardActionId: number) {\n\t\tlet searchLatest = true\n\t\tconst lastLog = _.last(this.cardStateLog) as CardState\n\t\tconst latestActionId = lastLog.lastEvent.type === 'action' ? lastLog.lastEvent.action : -1\n\n\t\t// We can skip search+replace for the latest card event if that was a way to lose a card in draw slot.\n\t\t// 1. The standard ways of losing something in draw slot.\n\t\t// 2. If they used Draw while holding a Minor Arcana or Draw\n\t\tif (\n\t\t\t[this.data.actions.UNDRAW.id, ...this.play, this.data.actions.REDRAW.id].includes(latestActionId)\n\t\t\t|| (this.data.actions.DRAW.id === latestActionId && lastLog.drawState && this.drawnArcana.includes(lastLog.drawState))\n\t\t) {\n\t\t\tsearchLatest = false\n\t\t}\n\n\t\tconst searchLog = searchLatest ? this.cardStateLog : this.cardStateLog.slice(0, this.cardStateLog.length - 1)\n\n\t\t// Looking for those abilities in CARD_GRANTING_ABILITIES that could possibly get us this card\n\t\tlet lastIndex = _.findLastIndex(searchLog,\n\t\t\tstateItem => stateItem.lastEvent.type === 'init' || stateItem.lastEvent.type === 'action' && this.cardGrantingAbilities.includes(stateItem.lastEvent.action),\n\t\t)\n\n\t\t// There were no finds of specified abilities, OR it wasn't logged.\n\t\tif (lastIndex === -1 || this.cardStateLog[lastIndex].drawState === undefined) {\n\n\t\t\t// If none were found, they had it prepull, so assume this is pullIndex\n\t\t\tlastIndex = lastIndex < 0 ? this.pullIndex : lastIndex\n\n\t\t\t// Modify log, they were holding onto this card since index\n\t\t\t// Differenciate depending on searchLatest\n\t\t\tconst arcanaStatus: number | undefined = this.arcanaActionToStatus(cardActionId)\n\n\t\t\t_.forEachRight(this.cardStateLog,\n\t\t\t\t(stateItem, index) => {\n\t\t\t\t\tif (searchLatest && index >= lastIndex) {\n\t\t\t\t\t\tstateItem.drawState = arcanaStatus\n\t\t\t\t\t} else if (index >= lastIndex && index !== this.cardStateLog.length - 1) {\n\t\t\t\t\t\tstateItem.drawState = arcanaStatus\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t}\n\t}\n\n\t// Helpers\n\tprivate addSeal(seal: SealType, sealState: SealType[]): SealType[] {\n\t\tif (!seal) {\n\t\t\treturn sealState\n\t\t}\n\t\tsealState.shift()\n\t\tsealState.push(seal)\n\t\treturn sealState\n\t}\n\n\t/**\n\t * Flips an arcana action id to the matching arcana status id\n\t *\n\t * @param arcanaId{int} The ID of an arcana.\n\t * @return {int} the ID of the arcana in status, or the same id received if it didn't match the flip lookup.\n\t */\n\tpublic arcanaActionToStatus(arcanaId: number) {\n\t\tif (this.play.includes(arcanaId)) {\n\t\t\treturn this.playToStatusLookup[arcanaId]\n\t\t}\n\n\t\treturn undefined\n\t}\n\n\t/**\n\t * Flips an arcana status id to the matching arcana drawn id\n\t *\n\t * @param arcanaId{int} The ID of an arcana status.\n\t * @return {int} the ID of the arcana in drawn arcanas, or the same id received if it didn't match the flip lookup.\n\t */\n\tpublic arcanaStatusToDrawn(arcanaId: number) {\n\t\tif (this.arcanaStatuses.includes(arcanaId)) {\n\t\t\tarcanaId = this.statusToDrawnLookup[arcanaId]\n\t\t}\n\n\t\treturn arcanaId\n\t}\n\n\t/**\n\t * Flips an arcana status id to the matching arcana action id\n\t *\n\t * @param arcanaId{int} The ID of an arcana status.\n\t * @return {int} the ID of the arcana in play, or the same id received if it didn't match the flip lookup.\n\t */\n\tpublic arcanaStatusToPlay(arcanaId: number) {\n\t\tif (this.arcanaStatuses.includes(arcanaId)) {\n\t\t\tarcanaId = this.statusToPlayLookup[arcanaId]\n\t\t}\n\n\t\treturn arcanaId\n\t}\n\n\t/**\n\t * Flips a drawn arcana status id to the matching arcana action id\n\t *\n\t * @param arcanaId{int} The ID of an arcana drawn status.\n\t * @return {int} the ID of the arcana in play, or the same id received if it didn't match the flip lookup.\n\t */\n\tpublic arcanaDrawnToPlay(arcanaId: number) {\n\t\tif (this.drawnArcana.includes(arcanaId)) {\n\t\t\tarcanaId = this.drawnToPlayLookup[arcanaId]\n\t\t}\n\n\t\treturn arcanaId\n\t}\n}\n","import {ActionRoot} from 'data/ACTIONS/root'\nimport {StatusRoot} from 'data/STATUSES/root'\n// Grouped cards for future convenience - whatever processing desired\n\n/* Grouped actions */\n\nexport const PLAY: Array<keyof ActionRoot> = [\n\t'THE_BALANCE',\n\t'THE_BOLE',\n\t'THE_ARROW',\n\t'THE_SPEAR',\n\t'THE_EWER',\n\t'THE_SPIRE',\n]\n\nexport const MINOR_ARCANA: Array<keyof ActionRoot> = [\n\t'LORD_OF_CROWNS',\n\t'LADY_OF_CROWNS',\n]\n\nexport const SOLAR_SEAL_ARCANA: Array<keyof ActionRoot> = [\n\t'THE_BALANCE',\n\t'THE_BOLE',\n]\n\nexport const LUNAR_SEAL_ARCANA: Array<keyof ActionRoot> = [\n\t'THE_ARROW',\n\t'THE_EWER',\n]\n\nexport const CELESTIAL_SEAL_ARCANA: Array<keyof ActionRoot> = [\n\t'THE_SPEAR',\n\t'THE_SPIRE',\n]\n\n/* Arcana spread states */\n\nexport const DRAWN_ARCANA: Array<keyof StatusRoot> = [\n\t'BALANCE_DRAWN',\n\t'BOLE_DRAWN',\n\t'ARROW_DRAWN',\n\t'SPEAR_DRAWN',\n\t'EWER_DRAWN',\n\t'SPIRE_DRAWN',\n]\n\nexport const DRAWN_CROWN_ARCANA: Array<keyof StatusRoot> = [\n\t'LORD_OF_CROWNS_DRAWN',\n\t'LADY_OF_CROWNS_DRAWN',\n]\n\nexport const ARCANA_STATUSES: Array<keyof StatusRoot> = [\n\t'THE_BALANCE',\n\t'THE_BOLE',\n\t'THE_ARROW',\n\t'THE_SPEAR',\n\t'THE_EWER',\n\t'THE_SPIRE',\n]\n","export default {\n\tDRAW_CHECKLIST: 40,\n\tCROWN_PLAY_CHECKLIST: 51,\n\tLIGHTSPEED: 52,\n\tDIVINATION: 53,\n\tARCANA_TRACKING: 55,\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"jobIcon\":\"ArcanaSuggestions-module_jobIcon__3eoSZ\",\"cardActionRow\":\"ArcanaSuggestions-module_cardActionRow__9Mu-e\",\"cardActionTable\":\"ArcanaSuggestions-module_cardActionTable__3wair\",\"buffIcon\":\"ArcanaSuggestions-module_buffIcon__3buJ7\",\"buffPlaceholder\":\"ArcanaSuggestions-module_buffPlaceholder__2TqDK\",\"buffUnknown\":\"ArcanaSuggestions-module_buffUnknown__23K4I\",\"sealIconContainer\":\"ArcanaSuggestions-module_sealIconContainer__1ZN2u\",\"sealIcon\":\"ArcanaSuggestions-module_sealIcon__2Twz3\"};","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {JobIcon} from 'components/ui/JobIcon'\nimport {Action} from 'data/ACTIONS'\nimport {JOBS} from 'data/JOBS'\nimport {Analyser} from 'parser/core/Analyser'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actor, Actors} from 'parser/core/modules/Actors'\nimport {Data} from 'parser/core/modules/Data'\nimport {Timeline} from 'parser/core/modules/Timeline'\nimport React from 'react'\nimport {Button, Table} from 'semantic-ui-react'\nimport {PLAY} from '../ArcanaGroups'\nimport DISPLAY_ORDER from '../DISPLAY_ORDER'\nimport styles from './ArcanaSuggestions.module.css'\nimport ArcanaTracking, {CardState, SealType} from './ArcanaTracking'\nimport sealCelestial from './seal_celestial.png'\nimport sealLunar from './seal_lunar.png'\nimport sealSolar from './seal_solar.png'\n\nconst TIMELINE_UPPER_MOD = 30000 // in ms\n\nconst SEAL_ICON = {\n\t[SealType.NOTHING]: '',\n\t[SealType.SOLAR]: sealSolar,\n\t[SealType.LUNAR]: sealLunar,\n\t[SealType.CELESTIAL]: sealCelestial,\n}\n\ninterface CardLog extends CardState {\n\ttargetName: Actor['name']\n\ttargetJob: Actor['job']\n}\n\nexport default class ArcanaSuggestions extends Analyser {\n\tstatic override handle = 'arcanaSuggestions'\n\n\tstatic override title = t('ast.arcana-suggestions.title')`Arcana Logs`\n\tstatic override displayOrder = DISPLAY_ORDER.ARCANA_TRACKING\n\n\t@dependency private data!: Data\n\t@dependency private arcanaTracking!: ArcanaTracking\n\t@dependency private timeline!: Timeline\n\t@dependency private actors!: Actors\n\n\tprivate cardLogs: CardLog[] = []\n\tprivate play: Array<Action['id']> = []\n\n\toverride initialise() {\n\t\tthis.play = PLAY.map(actionKey => this.data.actions[actionKey].id)\n\n\t\tthis.addEventHook('complete', this._onComplete)\n\t}\n\n\tprivate _onComplete() {\n\t\tthis.cardLogs = this.arcanaTracking.cardLogs.map(artifact => {\n\t\t\tif (artifact.lastEvent.type === 'action') {\n\t\t\t\tconst targetId = artifact.lastEvent.target\n\t\t\t\tconst target = this.actors.get(targetId)\n\t\t\t\tconst cardLog: CardLog = {\n\t\t\t\t\t...artifact,\n\t\t\t\t\ttargetName: target.name,\n\t\t\t\t\ttargetJob: target.job,\n\t\t\t\t}\n\t\t\t\treturn cardLog\n\t\t\t}\n\t\t\tconst cardLog: CardLog = {\n\t\t\t\t...artifact,\n\t\t\t\ttargetName: '',\n\t\t\t\ttargetJob: 'UNKNOWN',\n\t\t\t}\n\t\t\treturn cardLog\n\t\t})\n\t}\n\n\toverride output() {\n\t\treturn <>\n\t\t\t<p>\n\t\t\t\t<Trans id=\"ast.arcana-suggestions.messages.explanation\">\n\t\t\t\tThis section keeps track of every card action made during the fight, and the state of the spread after each action.\n\t\t\t\t</Trans>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\t<Trans id=\"ast.arcana-suggestions.messages.footnote\">\n\t\t\t\t* No pre-pull actions are being represented aside from <ActionLink action=\"PLAY\" />, and this is only an approximation based on the buff duration.\n\t\t\t\t</Trans>\n\t\t\t</p>\n\t\t\t<Table collapsing unstackable className={styles.cardActionTable}>\n\t\t\t\t<Table.Header>\n\t\t\t\t\t<Table.Row>\n\t\t\t\t\t\t<Table.HeaderCell width={1}>\n\t\t\t\t\t\t\t<Trans id=\"ast.arcana-suggestions.messages.time\">\n\t\t\t\t\t\t\t\t\t\t\tTime\n\t\t\t\t\t\t\t</Trans>\n\t\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t\t<Table.HeaderCell width={1}>\n\t\t\t\t\t\t\t<Trans id=\"ast.arcana-suggestions.messages.latest-action\">Lastest Action</Trans>\n\t\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t\t<Table.HeaderCell width={2}>\n\t\t\t\t\t\t\t<Trans id=\"ast.arcana-suggestions.messages.target\">Target</Trans>\n\t\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t\t<Table.HeaderCell width={2}>\n\t\t\t\t\t\t\t<Trans id=\"ast.arcana-suggestions.messages.spread-state\">Spread State</Trans>\n\t\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t</Table.Row>\n\t\t\t\t</Table.Header>\n\t\t\t\t<Table.Body>\n\t\t\t\t\t{this.cardLogs.map(artifact => {\n\t\t\t\t\t\tif (artifact.lastEvent.type === 'init') {\n\t\t\t\t\t\t\treturn <Table.Row key={artifact.lastEvent.timestamp} className={styles.cardActionRow}>\n\t\t\t\t\t\t\t\t<Table.Cell>\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tcircular\n\t\t\t\t\t\t\t\t\t\tcompact\n\t\t\t\t\t\t\t\t\t\tsize=\"mini\"\n\t\t\t\t\t\t\t\t\t\ticon=\"time\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => this.timeline.show(0, TIMELINE_UPPER_MOD)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t{this.parser.formatDuration(artifact.lastEvent.timestamp - this.parser.pull.timestamp)}</Table.Cell>\n\t\t\t\t\t\t\t\t<Table.Cell>\n\t\t\t\t\t\t\t\t\t<Trans id=\"ast.arcana-suggestions.messages.pull\">\n\t\t\t\t\t\t\t\t\t\t\t\tPull\n\t\t\t\t\t\t\t\t\t</Trans>\n\t\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t\t<Table.Cell>\n\t\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t\t{this.RenderSpreadState(artifact)}\n\t\t\t\t\t\t\t</Table.Row>\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst start = artifact.lastEvent.timestamp - this.parser.pull.timestamp\n\t\t\t\t\t\tconst end = start + TIMELINE_UPPER_MOD\n\t\t\t\t\t\tconst formattedTime = this.parser.formatDuration(start)\n\n\t\t\t\t\t\treturn <Table.Row key={artifact.lastEvent.timestamp} className={styles.cardActionRow}>\n\t\t\t\t\t\t\t<Table.Cell>\n\t\t\t\t\t\t\t\t{start >= 0 && <Button\n\t\t\t\t\t\t\t\t\tcircular\n\t\t\t\t\t\t\t\t\tcompact\n\t\t\t\t\t\t\t\t\tsize=\"mini\"\n\t\t\t\t\t\t\t\t\ticon=\"time\"\n\t\t\t\t\t\t\t\t\tonClick={() => this.timeline.show(start, end)}\n\t\t\t\t\t\t\t\t/>}\n\t\t\t\t\t\t\t\t<span style={{marginRight: 10}}>{formattedTime}</span>\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t{this.RenderAction(artifact)}\n\t\t\t\t\t\t\t{this.RenderSpreadState(artifact)}\n\t\t\t\t\t\t</Table.Row>\n\t\t\t\t\t})}\n\t\t\t\t</Table.Body>\n\t\t\t</Table>\n\t\t\t<Button onClick={() => this.parser.scrollTo(ArcanaSuggestions.handle)}>\n\t\t\t\t<Trans id=\"ast.arcana-suggestions.scroll-to-top-button\">Jump to start of Arcana Logs</Trans>\n\t\t\t</Button>\n\t\t</>\n\t}\n\n\t// Helper for override output()\n\tRenderAction(artifact: CardLog) {\n\t\tif (artifact.lastEvent.type === 'action' && this.play.includes(artifact.lastEvent.action) && artifact.targetJob != null) {\n\t\t\tconst targetJob = JOBS[artifact.targetJob]\n\n\t\t\treturn <>\n\t\t\t\t<Table.Cell>\n\t\t\t\t\t<ActionLink {...this.data.getAction(artifact.lastEvent.action)}/>\n\t\t\t\t</Table.Cell>\n\t\t\t\t<Table.Cell>\n\t\t\t\t\t{targetJob && <JobIcon job={targetJob}/>}\n\t\t\t\t\t{artifact.targetName}\n\t\t\t\t</Table.Cell>\n\t\t\t</>\n\t\t}\n\n\t\tif (artifact.lastEvent.type === 'action') {\n\t\t\treturn <>\n\t\t\t\t<Table.Cell>\n\t\t\t\t\t<ActionLink {...this.data.getAction(artifact.lastEvent.action)} />\n\t\t\t\t</Table.Cell>\n\t\t\t\t<Table.Cell>\n\t\t\t\t</Table.Cell>\n\t\t\t</>\n\t\t}\n\n\t\tif (artifact.lastEvent.type === 'death') {\n\t\t\treturn <><Table.Cell>\n\t\t\t\t<Trans id=\"ast.arcana-tracking.messages.death\">Death</Trans>\n\t\t\t</Table.Cell>\n\t\t\t<Table.Cell>\n\t\t\t</Table.Cell>\n\t\t\t</>\n\t\t}\n\n\t\treturn <>\n\t\t\t<Table.Cell>\n\t\t\t</Table.Cell>\n\t\t\t<Table.Cell>\n\t\t\t</Table.Cell>\n\t\t</>\n\t}\n\n\t// Helper for override output()\n\tRenderSpreadState(artifact: CardLog) {\n\t\tconst drawnArcana = artifact.drawState ? this.data.getStatus(artifact.drawState) : undefined\n\n\t\treturn <Table.Cell>\n\t\t\t<span style={{marginRight: 10, marginLeft: 0}}>\n\t\t\t\t{drawnArcana && <img\n\t\t\t\t\tsrc={drawnArcana.icon}\n\t\t\t\t\tclassName={styles.buffIcon}\n\t\t\t\t\talt={drawnArcana.name}\n\t\t\t\t/>}\n\t\t\t\t{!drawnArcana && <span className={styles.buffPlaceholder} />}\n\t\t\t</span>\n\t\t\t<span className={styles.sealIconContainer}>\n\t\t\t\t{artifact.sealState.map((sealType, index) => {\n\t\t\t\t\tif (sealType > 0) {\n\t\t\t\t\t\treturn <img key={index} src={SEAL_ICON[sealType]} className={styles.sealIcon} alt=\"Seal icon\" />\n\t\t\t\t\t}\n\t\t\t\t\treturn <span key={index} className={styles.sealIcon}></span>\n\t\t\t\t})}\n\t\t\t</span>\n\t\t</Table.Cell>\n\t}\n}\n","import {Trans, Plural} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Event} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Data} from 'parser/core/modules/Data'\nimport Suggestions, {Suggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\nexport class ArcanaUndrawUsage extends Analyser {\n\tstatic override handle = 'arcanaundraws'\n\tprivate undraws: number = 0\n\n\t@dependency private data!: Data\n\t@dependency private suggestions!: Suggestions\n\n\toverride initialise() {\n\t\tthis.addEventHook(filter<Event>()\n\t\t\t.source(this.parser.actor.id)\n\t\t\t.type('action')\n\t\t\t.action(this.data.actions.UNDRAW.id), this.onUndraw)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onUndraw() {\n\t\tthis.undraws += 1\n\t}\n\n\tprivate onComplete() {\n\t\tif (this.undraws > 0) {\n\t\t\tthis.suggestions.add(new Suggestion({\n\t\t\t\ticon: this.data.actions.UNDRAW.icon,\n\t\t\t\tcontent: <Trans id=\"ast.arcana-undraw-usage.suggestions.content\" >\n\t\t\t\t\t\tDue to Draw starting its cooldown the moment it's used, there is no longer any reason to <DataLink action=\"UNDRAW\" /> instead of playing it or directly overwriting it with <DataLink action=\"DRAW\" />.\n\t\t\t\t</Trans>,\n\t\t\t\tseverity: SEVERITY.MAJOR,\n\t\t\t\twhy: <Trans id=\"ast.arcana-undraw-usage.suggestions.why\">\n\t\t\t\t\t<Plural value={this.undraws} one=\"# instance\" other=\"# instances\" /> of using undraw.\n\t\t\t\t</Trans>,\n\t\t\t}))\n\t\t}\n\t}\n}\n","import {Event} from 'event'\nimport {filter} from 'parser/core/filter'\nimport CoreCastTime from 'parser/core/modules/CastTime'\n\nexport class CastTime extends CoreCastTime {\n\tprivate hobIndex: number | null = null\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tconst harmonyOfBodyFilter = filter<Event>()\n\t\t\t.target(this.parser.actor.id)\n\t\t\t.status(this.data.statuses.HARMONY_OF_BODY.id)\n\n\t\tthis.addEventHook(harmonyOfBodyFilter.type('statusApply'), this.onApplyBody)\n\t\tthis.addEventHook(harmonyOfBodyFilter.type('statusRemove'), this.onRemoveBody)\n\t}\n\n\tprivate onApplyBody(): void {\n\t\tconst harmonyOfBody = this.data.statuses.HARMONY_OF_BODY\n\t\tthis.hobIndex = this.setPercentageAdjustment('all', harmonyOfBody.speedModifier, 'both')\n\t}\n\n\tprivate onRemoveBody(): void {\n\t\tthis.reset(this.hobIndex)\n\t\tthis.hobIndex = null\n\t}\n}\n","import {Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {dependency} from 'parser/core/Injectable'\nimport Checklist, {Requirement, TARGET, TieredRule} from 'parser/core/modules/Checklist'\nimport {DoTs} from 'parser/core/modules/DoTs'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\nconst SEVERITIES = {\n\tCLIPPING: {\n\t\t6000: SEVERITY.MINOR,\n\t\t9000: SEVERITY.MEDIUM,\n\t\t12000: SEVERITY.MAJOR,\n\t},\n\tUPTIME: {\n\t\t90: TARGET.WARN,\n\t\t95: TARGET.SUCCESS,\n\t},\n}\n\nexport class Combust extends DoTs {\n\tstatic override handle = 'combust'\n\n\t@dependency private checklist!: Checklist\n\t@dependency private suggestions!: Suggestions\n\n\toverride trackedStatuses = [\n\t\tthis.data.statuses.COMBUST_III.id,\n\t]\n\n\toverride addChecklistRules() {\n\t\tthis.checklist.add(new TieredRule({\n\t\t\tname: <Trans id=\"ast.dots.rule.name\">Keep your DoT up</Trans>,\n\t\t\tdescription: <Trans id=\"ast.dots.rule.description\">\n\t\t\t\tCombust III makes up a good portion of your damage. Aim to keep this DoT up at all times. It also can be used to weave (<DataLink action=\"DRAW\" />) and manage cards, or maneuver around without dropping GCD uptime.\n\t\t\t</Trans>,\n\t\t\ttiers: SEVERITIES.UPTIME,\n\t\t\trequirements: [\n\t\t\t\tnew Requirement({\n\t\t\t\t\tname: <Trans id=\"ast.dots.requirement.uptime.name\"><DataLink action=\"COMBUST_III\" /> uptime</Trans>,\n\t\t\t\t\tpercent: () => this.getUptimePercent(this.data.statuses.COMBUST_III.id),\n\t\t\t\t}),\n\t\t\t],\n\t\t}))\n\t}\n\n\toverride addClippingSuggestions() {\n\t\tconst combustClipPerMinute = this.getClippingAmount(this.data.statuses.COMBUST_III.id)\n\t\t// Suggestion for DoT clipping\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.COMBUST_III.icon,\n\t\t\tcontent: <Trans id=\"ast.dots.suggestion.clip.content\">\n\t\t\t\t\tAvoid refreshing <DataLink action=\"COMBUST_III\" /> significantly before it expires.\n\t\t\t</Trans>,\n\t\t\twhy: <Trans id=\"ast.dots.suggestion.clip.why\">\n\t\t\t\tAn average of {this.parser.formatDuration(combustClipPerMinute, 1)} seconds of <DataLink status=\"COMBUST_III\" /> clipped per minute due to early refreshes.\n\t\t\t</Trans>,\n\t\t\ttiers: SEVERITIES.CLIPPING,\n\t\t\tvalue: combustClipPerMinute,\n\t\t}))\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Plural, Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Action} from 'data/ACTIONS'\nimport {Status} from 'data/STATUSES'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport Checklist, {Requirement, TARGET, TieredRule} from 'parser/core/modules/Checklist'\nimport {Data} from 'parser/core/modules/Data'\nimport Suggestions, {SEVERITY, Suggestion, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport DISPLAY_ORDER from 'parser/jobs/ast/modules/DISPLAY_ORDER'\nimport React from 'react'\nimport {MINOR_ARCANA, DRAWN_CROWN_ARCANA} from './ArcanaGroups'\n\nconst oGCD_ALLOWANCE = 5000 //used in the case of the last few seconds of the fight. AST would have to use CROWN_PLAY and then use LORD_OF_CROWNS. Therefore, if used between actions, at least two GCDs is necessary for an AST to consider this. Note: lady of crowns is not applicable\n\nconst TARGETS = {\n\tSCORE: {\n\t\t70: TARGET.FAIL,\n\t\t80: TARGET.WARN,\n\t\t90: TARGET.SUCCESS,\n\t},\n\tWEIGHT: { //weights chosen such that 1 LORD + 1 LADY = 1 MINOR_ARCANA since MINOR_ARCANA can bring either\n\t\tMINOR_ARCANA: 1,\n\t\tLORD: 0.8,\n\t\tLADY: 0.2,\n\t},\n}\n\nconst SEVERITIES = {\n\tLORD: {\n\t\t1: SEVERITY.MINOR,\n\t\t2: SEVERITY.MEDIUM,\n\t\t6: SEVERITY.MAJOR,\n\t},\n\tLADY: {\n\t\t1: SEVERITY.MINOR,\n\t\t2: SEVERITY.MEDIUM,\n\t\t6: SEVERITY.MAJOR,\n\t},\n\tMINOR_ARCANA: {\n\t\t1: SEVERITY.MINOR,\n\t\t2: SEVERITY.MEDIUM,\n\t\t6: SEVERITY.MAJOR,\n\t},\n}\n\nexport default class CrownPlay extends Analyser {\n\tstatic override handle = 'crown_play'\n\tstatic override title = t('ast.crown-play.title')`Crown Play`\n\n\t@dependency private data!: Data\n\t@dependency private checklist!: Checklist\n\t@dependency private suggestions!: Suggestions\n\n\tprivate lastCrownTimestamp: number = 0\n\tprivate minorArcana: number = 0\n\tprivate minorArcanaDrift: number = 0\n\tprivate minorArcanaTotalDrift: number = 0\n\n\tprivate lastEventType: Event['type'] = 'prepare' //prepare used as default since preparing for module I guess\n\tprivate lastCardType: Status['id'] = 0\n\tprivate ladyObtained: number = 0\n\tprivate ladyCasts: number = 0\n\tprivate lordObtained: number = 0\n\tprivate lordCasts: number = 0\n\n\tprivate crownActions: Array<Action['id']> = []\n\tprivate arcanaStatuses: Array<Status['id']> = []\n\n\toverride initialise() {\n\n\t\tthis.crownActions = MINOR_ARCANA.map(actionKey => this.data.actions[actionKey].id)\n\t\tthis.arcanaStatuses = DRAWN_CROWN_ARCANA.map(statusKey => this.data.statuses[statusKey].id)\n\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\n\t\tthis.addEventHook(playerFilter\n\t\t\t.type('action')\n\t\t\t.action(this.data.actions.MINOR_ARCANA.id)\n\t\t, this.onMinorArcana)\n\t\tthis.addEventHook(playerFilter\n\t\t\t.type('action')\n\t\t\t.action(oneOf(this.crownActions))\n\t\t, this.onCrownAction)\n\n\t\tthis.addEventHook(playerFilter\n\t\t\t.type('statusApply')\n\t\t\t.status(oneOf(this.arcanaStatuses))\n\t\t, this.onCrownBuff)\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onMinorArcana(event: Events['action']) {\n\n\t\tthis.minorArcana++\n\n\t\tif (this.lastCrownTimestamp === 0) {\n\t\t\t// The first use, take holding as from the start of the fight. assumes that crown play is not on CD\n\t\t\tthis.minorArcanaDrift = event.timestamp - this.parser.pull.timestamp\n\t\t} else {\n\t\t\t// Take holding as from the time it comes off cooldown\n\t\t\tthis.minorArcanaDrift = event.timestamp - this.lastCrownTimestamp - this.data.actions.MINOR_ARCANA.cooldown\n\t\t}\n\n\t\t// Keep track of total drift time not using crown play\n\t\tif (this.minorArcanaDrift > 0) {\n\t\t\tthis.minorArcanaTotalDrift += this.minorArcanaDrift\n\t\t}\n\n\t\t//catch any cards that were overwritten on the last cast. this only happens if AST redraws the same arcana\n\t\tif (this.lastEventType === event.type) {\n\t\t\tif (this.lastCardType === this.data.statuses.LORD_OF_CROWNS_DRAWN.id) { this.lordObtained++ }\n\t\t\tif (this.lastCardType === this.data.statuses.LADY_OF_CROWNS_DRAWN.id) { this.ladyObtained++ }\n\t\t}\n\n\t\t// update the last use\n\t\tthis.lastCrownTimestamp = event.timestamp\n\t\tthis.lastEventType = event.type\n\t}\n\n\tprivate onCrownAction(event: Events['action']) {\n\t\tif (event.action === this.data.actions.LORD_OF_CROWNS.id) {\n\t\t\tthis.lordCasts++\n\t\t\t//to catch prepulls\n\t\t\tif (this.lordObtained === 0 && this.parser.pull.timestamp + this.data.actions.MINOR_ARCANA.cooldown < event.timestamp) { this.lordObtained++ }\n\t\t}\n\t\tif (event.action === this.data.actions.LADY_OF_CROWNS.id) {\n\t\t\tthis.ladyCasts++\n\t\t\t//to catch prepulls\n\t\t\tif (this.ladyObtained === 0 && this.parser.pull.timestamp + this.data.actions.MINOR_ARCANA.cooldown < event.timestamp) { this.ladyObtained++ }\n\t\t}\n\t}\n\n\tprivate onCrownBuff(event: Events['statusApply']) {\n\t\tif (event.status === this.data.statuses.LORD_OF_CROWNS_DRAWN.id) {\n\t\t\tthis.lordObtained++\n\t\t\tthis.lastCardType = this.data.statuses.LORD_OF_CROWNS_DRAWN.id\n\t\t\tthis.lastEventType = event.type\n\t\t}\n\t\tif (event.status === this.data.statuses.LADY_OF_CROWNS_DRAWN.id) {\n\t\t\tthis.ladyObtained++\n\t\t\tthis.lastCardType = this.data.statuses.LADY_OF_CROWNS_DRAWN.id\n\t\t\tthis.lastEventType = event.type\n\t\t}\n\t}\n\n\tprivate onComplete() {\n\n\t\t// If they stopped using crown play at any point in the fight, this'll calculate the drift \"accurately\"\n\t\tconst fightEnd = this.parser.pull.duration + this.parser.pull.timestamp\n\t\tif (this.lastCrownTimestamp === 0) {\n\t\t\tthis.minorArcanaTotalDrift = this.parser.pull.duration\n\t\t} else {\n\t\t\tthis.minorArcanaTotalDrift += Math.max(0, fightEnd - this.lastCrownTimestamp - this.data.actions.MINOR_ARCANA.cooldown)\n\t\t}\n\n\t\t//if they overwrote a card but didn't play another, this will catch the last cast\n\t\tif (this.lastEventType === 'action') {\n\t\t\tif (this.lastCardType === this.data.statuses.LORD_OF_CROWNS_DRAWN.id) { this.lordObtained++ }\n\t\t\tif (this.lastCardType === this.data.statuses.LADY_OF_CROWNS_DRAWN.id) { this.ladyObtained++ }\n\t\t}\n\n\t\t// Begin Theoretical Max Plays calc\t\t//assumes that crown-play is not on cooldown at the start of the fight\n\t\tconst playsFromCrownPlay = Math.ceil(Math.max(0, (this.parser.pull.duration - oGCD_ALLOWANCE)) / this.data.actions.MINOR_ARCANA.cooldown)\n\n\t\t//requirements are set up to avoid NaN when either lady or lord obtained = 0\n\t\tconst requirements = [new Requirement({\n\t\t\tname: <Trans id=\"ast.crown-play.checklist.requirement.name\">\n\t\t\t\t<DataLink action=\"MINOR_ARCANA\" /> uses\n\t\t\t</Trans>,\n\t\t\tvalue: this.minorArcana,\n\t\t\ttarget: playsFromCrownPlay,\n\t\t\tweight: TARGETS.WEIGHT.MINOR_ARCANA,\n\t\t})]\n\n\t\tif (this.ladyObtained !== 0) {\n\t\t\trequirements.push(new Requirement({\n\t\t\t\tname: <Trans id=\"ast.crown-play.checklist.lady\">\n\t\t\t\t\t<DataLink action=\"LADY_OF_CROWNS\" /> uses\n\t\t\t\t</Trans>,\n\t\t\t\tvalue: this.ladyCasts,\n\t\t\t\ttarget: this.ladyObtained,\n\t\t\t\tweight: TARGETS.WEIGHT.LADY,\n\t\t\t}))\n\t\t}\n\n\t\tif (this.lordObtained !== 0) {\n\t\t\trequirements.push(new Requirement({\n\t\t\t\tname: <Trans id=\"ast.crown-play.checklist.lord\">\n\t\t\t\t\t<DataLink action=\"LORD_OF_CROWNS\" /> uses\n\t\t\t\t</Trans>,\n\t\t\t\tvalue: this.lordCasts,\n\t\t\t\ttarget: this.lordObtained,\n\t\t\t\tweight: TARGETS.WEIGHT.LORD,\n\t\t\t}))\n\t\t}\n\n\t\t/*\n\t\t\tCHECKLIST: Number of cards played\n\t\t*/\n\t\tthis.checklist.add(new TieredRule({\n\t\t\tdisplayOrder: DISPLAY_ORDER.CROWN_PLAY_CHECKLIST,\n\t\t\tname: <Trans id=\"ast.crown=play.checklist.name\">\n\t\t\t\tUse <DataLink action=\"MINOR_ARCANA\" showIcon={false} /> to your advantage.\n\t\t\t</Trans>,\n\t\t\tdescription: <><Trans id=\"ast.crown-play.checklist.description\">\n\t\t\t\tPlaying <DataLink action=\"MINOR_ARCANA\" /> will allow for extra oGCD damage through <DataLink action=\"LORD_OF_CROWNS\" /> or extra oGCD healing through <DataLink action=\"LADY_OF_CROWNS\" />.\n\t\t\t\tTry to play <DataLink action=\"MINOR_ARCANA\" /> as much as possible to allow for possible extra damage or extra healing without wasting additional resources.\n\t\t\t</Trans></>,\n\t\t\ttiers: TARGETS.SCORE,\n\t\t\trequirements: requirements,\n\t\t}))\n\n\t\tconst crownPlaysMissed = Math.floor(this.minorArcanaTotalDrift / this.data.actions.MINOR_ARCANA.cooldown)\n\t\tif (this.minorArcana === 0) {\n\t\t/*\n\t\tSUGGESTION: Didn't use minor arcana at all\n\t\t*/\n\t\t\tthis.suggestions.add(new Suggestion({\n\t\t\t\ticon: this.data.actions.MINOR_ARCANA.icon,\n\t\t\t\tcontent: <Trans id=\"ast.crown-play.suggestions.crown-play-no-usage.content\">\n\t\t\t\t\t\tNo uses of <DataLink action=\"MINOR_ARCANA\" /> at all.\n\t\t\t\t</Trans>,\n\t\t\t\twhy: <Trans id=\"ast.crown-play.suggestions.crown-play-no-usage.why\">\n\t\t\t\t\tNo <DataLink action=\"MINOR_ARCANA\" /> used when {crownPlaysMissed} could have been played.\n\t\t\t\t</Trans>,\n\t\t\t\tseverity: SEVERITY.MAJOR,\n\t\t\t}))\n\t\t} else {\n\t\t/*\n\t\tSUGGESTION: Didn't use minor arcana enough\n\t\t*/\n\t\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\t\ticon: this.data.actions.MINOR_ARCANA.icon,\n\t\t\t\tcontent: <Trans id=\"ast.crown-play.suggestions.crown-play-uses.content\">\n\t\t\t\t\t\tTry casting <DataLink action=\"MINOR_ARCANA\" /> as soon as its available to maximize utility of both damage and healing oGCDs.\n\t\t\t\t</Trans>,\n\t\t\t\ttiers: SEVERITIES.MINOR_ARCANA,\n\t\t\t\tvalue: crownPlaysMissed,\n\t\t\t\twhy: <Trans id=\"ast.crown-play.suggestions.crown-play-uses.why\">\n\t\t\t\t\tAbout <Plural value={crownPlaysMissed} one=\"# use\" other=\"# uses\" /> of <DataLink action=\"MINOR_ARCANA\" /> were missed by holding <DataLink action=\"MINOR_ARCANA\" showIcon={false} /> on full cooldown for at least {this.parser.formatDuration(this.minorArcanaTotalDrift)}.\n\t\t\t\t</Trans>,\n\t\t\t}))\n\t\t}\n\t}\n}\n","import {Defensives as CoreDefensives} from 'parser/core/modules/Defensives'\n\nexport class Defensives extends CoreDefensives {\n\tprotected override trackedDefensives = [\n\t\tthis.data.actions.EXALTATION,\n\t\tthis.data.actions.CELESTIAL_INTERSECTION,\n\t\tthis.data.actions.CELESTIAL_OPPOSITION,\n\t]\n}\n","import {t} from '@lingui/macro'\nimport {Plural, Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {RotationTable} from 'components/ui/RotationTable'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {EventHook} from 'parser/core/Dispatcher'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actor, Actors} from 'parser/core/modules/Actors'\nimport {Data} from 'parser/core/modules/Data'\nimport Suggestions, {SEVERITY, Suggestion} from 'parser/core/modules/Suggestions'\nimport {Timeline} from 'parser/core/modules/Timeline'\nimport React, {Fragment} from 'react'\nimport {Icon, Message} from 'semantic-ui-react'\nimport DISPLAY_ORDER from './DISPLAY_ORDER'\n\nconst BASE_GCDS_PER_WINDOW = 6\nconst PLAYERS_BUFFED_TARGET = 8\n\ninterface DivinationWindow {\n\tstart: number\n\tend?: number\n\tsource: Actor['id']\n\n\trotation: Array<Events['action']>\n\tgcdCount: number\n\ttrailingGcdEvent?: Events['action']\n\tplayersBuffed: Array<Actor['id']>\n\toverlap: boolean\n}\n\n// in this module we only want to track Divination windows opened by\n// the character selected for analysis. windows that clip into\n// AST Divination will be marked.\n// Used DNC Technicalities as basis for this module. Rewritten from previous module for consistency purposes\nexport class Divination extends Analyser {\n\tstatic override handle = 'Divination'\n\tstatic override title = t('ast.divination.title')`Divination`\n\tstatic override displayOrder = DISPLAY_ORDER.DIVINATION\n\n\t@dependency private timeline!: Timeline\n\t@dependency private data!: Data\n\t@dependency private suggestions!: Suggestions\n\t@dependency private actors!: Actors\n\n\tprivate history: DivinationWindow[] = []\n\tprivate currentWindow: DivinationWindow | undefined = undefined\n\tprivate castHook?: EventHook<Events['action']>\n\n\tprivate otherAst: {\n\t\ttimeOverwritten: number,\n\t\tcountOverwritten: number,\n\t\tactive: boolean,\n\t\tstart: number\n\t} = {\n\t\ttimeOverwritten: 0,\n\t\tcountOverwritten: 0,\n\t\tactive: false,\n\t\tstart: 0,\n\t}\n\n\toverride initialise() {\n\t\tconst divinationFilter = filter<Event>().status(this.data.statuses.DIVINATION.id)\n\n\t\tthis.addEventHook(divinationFilter.source(this.parser.actor.id), this.countDivinationBuffs)\n\t\tthis.addEventHook(divinationFilter.type('statusApply')\n\t\t\t.target(this.parser.actor.id), this.tryOpenWindow)\n\t\tthis.addEventHook(divinationFilter.type('statusRemove')\n\t\t\t.target(this.parser.actor.id), this.tryCloseWindow)\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate countDivinationBuffs(event: Events['statusApply']) {\n\t\tif (this.currentWindow != null && !this.currentWindow.playersBuffed.includes(event.target) && this.actors.get(event.target).playerControlled) {\n\t\t\tthis.currentWindow.playersBuffed.push(event.target)\n\t\t}\n\t}\n\n\tprivate tryOpenWindow(event: Events['statusApply']) {\n\t\t//open window for other AST\n\t\tif (this.parser.actor.id !== event.source) {\n\t\t\tthis.otherAst.active = true\n\t\t\tthis.otherAst.start = event.timestamp\n\t\t\t//if window was open. close it prematurely since now dealing with other AST window :(\n\t\t\tif (this.currentWindow != null) {\n\t\t\t\tthis.forceCloseWindow(event.timestamp)\n\t\t\t}\n\t\t}\n\n\t\tif (this.currentWindow === undefined && this.parser.actor.id === event.source) {\n\t\t\t//open window for ast\n\t\t\tthis.currentWindow = {\n\t\t\t\tstart: event.timestamp,\n\t\t\t\trotation: [],\n\t\t\t\tgcdCount: 0,\n\t\t\t\tsource: event.source,\n\n\t\t\t\tplayersBuffed: [],\n\t\t\t\toverlap: false,\n\t\t\t}\n\t\t\tthis.castHook = this.addEventHook(\n\t\t\t\tfilter<Event>()\n\t\t\t\t\t.source(this.parser.actor.id)\n\t\t\t\t\t.type('action'),\n\t\t\t\tthis.onCast,\n\t\t\t)\n\n\t\t\t//to set other ast information if active and overwritten\n\t\t\t//note assumption that overwritten happens if duration hasn't passed\n\t\t\tif (this.data.statuses.DIVINATION.duration > this.currentWindow.start - this.otherAst.start) {\n\t\t\t\tthis.otherAst.countOverwritten++\n\t\t\t\tthis.otherAst.timeOverwritten += (this.otherAst.start + this.data.statuses.DIVINATION.duration) - event.timestamp\n\t\t\t\tthis.currentWindow.overlap = true\n\t\t\t}\n\t\t\tthis.otherAst.active = false\n\t\t\tthis.otherAst.start = 0\n\t\t}\n\t}\n\n\tprivate tryCloseWindow(event: Events['statusRemove']) {\n\t\t//note: closing other AST window handled in open window since closing the window doesn't catch what we need because status remove happens before status apply\n\t\t//close window and push to history\n\t\tif (event.source === this.parser.actor.id) {\n\t\t\tthis.forceCloseWindow(event.timestamp)\n\t\t}\n\t}\n\n\tprivate forceCloseWindow(timestamp: number) {\n\t\t//to stop using function if window isn't even open. used when splicing\n\t\tif (this.currentWindow == null) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.currentWindow.end = timestamp\n\t\tthis.history.push(this.currentWindow)\n\t\tthis.currentWindow = undefined\n\t\tif (this.castHook != null) {\n\t\t\tthis.removeEventHook(this.castHook)\n\t\t\tthis.castHook = undefined\n\t\t}\n\t}\n\n\tprivate onCast(event: Events['action']) {\n\n\t\t// If we don't have a window, bail\n\t\tif (this.currentWindow == null) {\n\t\t\treturn\n\t\t}\n\n\t\tconst action = this.data.getAction(event.action)\n\n\t\t// Can't do anything else if we didn't get a valid action object\n\t\tif (action == null) {\n\t\t\treturn\n\t\t}\n\n\t\t// Add the action to the list\n\t\tthis.currentWindow.rotation.push(event)\n\n\t\tif (action.onGcd) {\n\t\t\tthis.currentWindow.gcdCount++\n\n\t\t\t// If we haven't recorded a trailing GCD event for this closed window, do so now\n\t\t\tif (this.currentWindow.end != null && this.currentWindow.trailingGcdEvent == null) {\n\t\t\t\tthis.currentWindow.trailingGcdEvent = event\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onComplete() {\n\t\tif (this.otherAst.countOverwritten !== 0) {\n\t\t\t/*\n\t\t\t\tSUGGESTION: Overwriting other AST's divination\n\t\t\t*/\n\t\t\tthis.suggestions.add(new Suggestion({\n\t\t\t\ticon: this.data.actions.DIVINATION.icon,\n\t\t\t\tcontent: <Trans id=\"ast.divination.suggestion.usage.content\">\n\t\t\t\t\tConsider coordinating with your co-Astrologian to maximize the amount of time <DataLink action=\"DIVINATION\" /> is up so the party can benefit from extra damage for longer.\n\t\t\t\t</Trans>,\n\t\t\t\tseverity: SEVERITY.MAJOR,\n\t\t\t\twhy: <Trans id=\"ast.divination.suggestion.usage.why\">\n\t\t\t\t\t{this.otherAst.countOverwritten} <Plural value={this.otherAst.countOverwritten} one=\"cast\" other=\"casts\" /> of <DataLink action=\"DIVINATION\" /> were overwritten resulting in a loss of at least {this.parser.formatDuration(this.otherAst.timeOverwritten)}.\n\t\t\t\t</Trans>,\n\t\t\t}))\n\t\t}\n\t}\n\n\toverride output() {\n\n\t\t//in the case when the encounter ends prior to status remove. splicing the event to log it. note: since close event checks for null, this will not be applicable if the window isn't already open\n\t\tthis.forceCloseWindow(this.parser.pull.duration)\n\n\t\tconst tableData = this.history.map(window => {\n\t\t\tconst end = window.end != null ?\n\t\t\t\twindow.end - this.parser.pull.timestamp :\n\t\t\t\tthis.parser.pull.duration\n\t\t\tconst start = window.start - this.parser.pull.timestamp\n\n\t\t\treturn ({\n\t\t\t\tstart,\n\t\t\t\tend,\n\t\t\t\trotation: window.rotation,\n\t\t\t\ttargetsData: {\n\t\t\t\t\tgcds: {\n\t\t\t\t\t\tactual: window.gcdCount,\n\t\t\t\t\t\texpected: (BASE_GCDS_PER_WINDOW),\n\t\t\t\t\t},\n\t\t\t\t\tplayersBuffed: {\n\t\t\t\t\t\tactual: window.playersBuffed.length,\n\t\t\t\t\t\texpected: (PLAYERS_BUFFED_TARGET),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tnotesMap: {\n\t\t\t\t\totherAst: <>{this.getNotesIcon(window.overlap)}</>,\n\t\t\t\t},\n\t\t\t})\n\t\t})\n\n\t\tconst actualCasts = tableData.length\n\t\tconst noCastsMessage = <p><span className=\"text-error\"><Trans id=\"ast.divination.messages.no-casts\"> There were no casts recorded for <DataLink action=\"DIVINATION\" />.</Trans></span></p>\n\n\t\t//for now, the message is copied directly from DivinationDowntime\n\t\tconst message = <p><Trans id=\"ast.divination.description\">\n\t\t\t<DataLink action=\"DIVINATION\" /> provides Astrologian with a strong amount of raid DPS when stacked together with arcanum.\n\t\t\tTry to time the usage to match raid buffs and high output phases of other party members - it's more important to use it on time rather than hold it.\n\t\t</Trans></p>\n\n\t\tif (this.otherAst.countOverwritten !== 0) {\n\t\t\treturn <Fragment>\n\t\t\t\t{message}\n\t\t\t\t{<RotationTable\n\t\t\t\t\ttargets={[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\theader: <Trans id=\"ast.arcana-tracking.divination.playertarget\">{'Players Buffed'}</Trans>,\n\t\t\t\t\t\t\taccessor: 'playersBuffed',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\theader: <Trans id=\"ast.divination.rotation-table.header.gcd-count\">GCDs</Trans>,\n\t\t\t\t\t\t\taccessor: 'gcds',\n\t\t\t\t\t\t},\n\t\t\t\t\t]}\n\t\t\t\t\tnotes = {[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\theader: <Trans id=\"ast.divination.rotation-table.header.overwrite\">Overwrote other AST</Trans>,\n\t\t\t\t\t\t\taccessor: 'otherAst',\n\t\t\t\t\t\t},\n\t\t\t\t\t]}\n\t\t\t\t\tdata={tableData}\n\t\t\t\t\tonGoto={this.timeline.show}\n\t\t\t\t/>}\n\t\t\t</Fragment>\n\t\t}\n\t\treturn <Fragment>\n\t\t\t{message}\n\t\t\t{actualCasts > 0 ? '' : <Message>{noCastsMessage}</Message>}\n\t\t\t{actualCasts > 0 ?\n\t\t\t\t<RotationTable\n\t\t\t\t\ttargets={[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\theader: <Trans id=\"ast.arcana-tracking.divination.playertarget\">{'Players Buffed'}</Trans>,\n\t\t\t\t\t\t\taccessor: 'playersBuffed',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\theader: <Trans id=\"ast.divination.rotation-table.header.gcd-count\">GCDs</Trans>,\n\t\t\t\t\t\t\taccessor: 'gcds',\n\t\t\t\t\t\t},\n\t\t\t\t\t]}\n\t\t\t\t\tdata={tableData}\n\t\t\t\t\tonGoto={this.timeline.show}\n\t\t\t\t/>\n\t\t\t\t: ''}\n\t\t</Fragment>\n\t}\n\n\tprivate getNotesIcon(ruleFailed: boolean) {\n\t\treturn ruleFailed ? <Icon\n\t\t\tname={'remove'}\n\t\t\tclassName={'text-error'}\n\t\t/>\n\t\t\t: ''\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Plural, Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Action} from 'data/ACTIONS'\nimport {Status} from 'data/STATUSES'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport Checklist, {Requirement, TARGET, TieredRule} from 'parser/core/modules/Checklist'\nimport {Data} from 'parser/core/modules/Data'\nimport Suggestions, {SEVERITY, Suggestion, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport DISPLAY_ORDER from 'parser/jobs/ast/modules/DISPLAY_ORDER'\nimport React from 'react'\nimport {ARCANA_STATUSES, PLAY} from './ArcanaGroups'\nimport ArcanaTracking from './ArcanaTracking/ArcanaTracking'\n\nconst oGCD_ALLOWANCE = 7500 //used in case the last draw comes up in the last second of the fight. Since plays are typically done in a separate weave, a full GCD would be needed to play the card. Takes another second to cast PLAY and therefore an AST would not DRAW if they couldn't even PLAY. Additionally, an AST would not play if not even a GCD could be cast before the end of the fight. Therefore, the oGCD_ALLOWANCE should be approcimately 3 GCDs (2 for AST to cast, 1 for job to do an action) = 3 * 2500\n\nconst WARN_TARGET_MAXPLAYS = 2\nconst FAIL_TARGET_MAXPLAYS = 3\n\nconst SEVERITIES = {\n\tDRAW_HOLDING: { //low thresholds were chosen since draw's charges allow for greater flexibility\n\t\t1: SEVERITY.MINOR,\n\t\t2: SEVERITY.MEDIUM,\n\t\t6: SEVERITY.MAJOR,\n\t},\n}\n\nexport default class Draw extends Analyser {\n\tstatic override handle = 'draw'\n\tstatic override title = t('ast.draw.title')`Draw`\n\n\t@dependency private data!: Data\n\t@dependency private checklist!: Checklist\n\t@dependency private suggestions!: Suggestions\n\t@dependency private arcanaTracking!: ArcanaTracking\n\n\tprivate draws: number = 0\n\tprivate cooldownEndTime: number = this.parser.pull.timestamp\n\tprivate drawTotalDrift: number = 0\n\tprivate plays: number = 0\n\n\tprivate prepullPrepped: boolean = false\n\n\tprivate playActions: Array<Action['id']> = []\n\tprivate arcanaStatuses: Array<Status['id']> = []\n\n\toverride initialise() {\n\n\t\tthis.playActions = PLAY.map(actionKey => this.data.actions[actionKey].id)\n\t\tthis.arcanaStatuses = ARCANA_STATUSES.map(statusKey => this.data.statuses[statusKey].id)\n\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\n\t\tthis.addEventHook(playerFilter\n\t\t\t.type('action')\n\t\t\t.action(this.data.actions.DRAW.id)\n\t\t, this.onDraw)\n\t\tthis.addEventHook(playerFilter\n\t\t\t.type('action')\n\t\t\t.action(oneOf(this.playActions))\n\t\t, this.onPlay)\n\n\t\tthis.addEventHook(playerFilter\n\t\t\t.type('statusApply')\n\t\t\t.status(oneOf(this.arcanaStatuses))\n\t\t, this.onPlayBuff)\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onDraw(event: Events['action']) {\n\n\t\t// ignore precasted draws\n\t\tif (event.timestamp > this.parser.pull.timestamp) {\n\n\t\t\tthis.drawTotalDrift += Math.max(0, event.timestamp - this.cooldownEndTime)\n\n\t\t\t// update the last use\n\t\t\tthis.cooldownEndTime = this.data.actions.DRAW.cooldown + Math.max(this.cooldownEndTime, event.timestamp)\n\t\t\tthis.draws++\n\t\t}\n\t}\n\n\tprivate onPlay() {\n\t\tthis.plays++\n\t}\n\n\tprivate onPlayBuff(event: Events['statusApply']) {\n\t\tif (event.timestamp > this.parser.pull.timestamp) {\n\t\t\treturn\n\t\t}\n\t\tthis.prepullPrepped = true\n\t\tthis.plays++\n\t}\n\n\tprivate onComplete() {\n\n\t\t// If they stopped using Draw at any point in the fight, this'll calculate the drift \"accurately\"\n\t\tconst fightEnd = this.parser.pull.duration + this.parser.pull.timestamp\n\t\tthis.drawTotalDrift += Math.max(0, fightEnd - this.cooldownEndTime) - oGCD_ALLOWANCE\n\t\tthis.drawTotalDrift = Math.min(this.parser.pull.duration, this.drawTotalDrift)\n\n\t\t// Max plays:\n\t\t// [(fight time / 30s draw time + 1) - 1 if fight time doesn't end between xx:05-xx:29s, and xx:45-xx:60s]\n\t\t// eg 7:00: 14 -1 = 13  draws by default. 7:17 fight time would mean 14 draws, since they can play the last card at least.\n\t\t// in otherwords, fightDuration - 15s (for the buff @ CARD_DURATION)\n\n\t\t// Begin Theoretical Max Plays calc\t\t//assumes that draw is not on cooldown at the start of the fight\n\t\tconst playsFromDraw = Math.ceil(Math.max(0, (this.parser.pull.duration - oGCD_ALLOWANCE)) / this.data.actions.DRAW.cooldown) + (this.data.actions.DRAW.charges - 1)\n\n\t\t// TODO: Include downtime calculation for each fight??\n\t\t// TODO: Suggest how to redraw effectively (maybe in ArcanaSuggestions)\n\n\t\t// Confirm they had preprepped a card on pull\n\t\tconst pullState = this.arcanaTracking.getPullState()\n\t\tthis.prepullPrepped = !!pullState.drawState\n\n\t\tconst theoreticalMaxPlays = playsFromDraw + (this.prepullPrepped ? 1 : 0)\n\t\tconst totalCardsObtained = (this.prepullPrepped ? 1 : 0) + this.draws\n\n\t\t/*\n\t\t\tCHECKLIST: Number of cards played\n\t\t*/\n\t\tconst warnTarget = Math.floor(((theoreticalMaxPlays - WARN_TARGET_MAXPLAYS) / theoreticalMaxPlays) * 100)\n\t\tconst failTarget = Math.floor(((theoreticalMaxPlays - FAIL_TARGET_MAXPLAYS) / theoreticalMaxPlays) * 100)\n\t\tthis.checklist.add(new TieredRule({\n\t\t\tdisplayOrder: DISPLAY_ORDER.DRAW_CHECKLIST,\n\t\t\tname: <Trans id=\"ast.draw.checklist.name\">\n\t\t\t\tPlay as many cards as possible\n\t\t\t</Trans>,\n\t\t\tdescription: <><Trans id=\"ast.draw.checklist.description\">\n\t\t\t\tPlaying cards provides seals for <DataLink action=\"ASTRODYNE\" /> and casting <DataLink action=\"DRAW\" /> will help with mana management.\n\t\t\t</Trans>\n\t\t\t<ul>\n\t\t\t\t<li><Trans id=\"ast.draw.checklist.description.prepull\">Prepared before pull:</Trans>&nbsp;{this.prepullPrepped ? 1 : 0}/1</li>\n\t\t\t\t<li><Trans id=\"ast.draw.checklist.description.draws\">Obtained from <DataLink action=\"DRAW\" />:</Trans>&nbsp;{this.draws}/{playsFromDraw}</li>\n\t\t\t\t<li><Trans id=\"ast.draw.checklist.description.total\">Total cards obtained:</Trans>&nbsp;{totalCardsObtained}/{theoreticalMaxPlays}</li>\n\t\t\t</ul></>,\n\t\t\ttiers: {[warnTarget]: TARGET.WARN, [failTarget]: TARGET.FAIL, [100]: TARGET.SUCCESS},\n\t\t\trequirements: [\n\t\t\t\tnew Requirement({\n\t\t\t\t\tname: <Trans id=\"ast.draw.checklist.requirement.name\">\n\t\t\t\t\t\t<DataLink action=\"PLAY\" /> uses\n\t\t\t\t\t</Trans>,\n\t\t\t\t\tvalue: this.plays,\n\t\t\t\t\ttarget: theoreticalMaxPlays,\n\t\t\t\t}),\n\t\t\t],\n\t\t}))\n\n\t\tconst drawsMissed = Math.floor(this.drawTotalDrift / this.data.actions.DRAW.cooldown)\n\t\tif (this.draws === 0) {\n\t\t/*\n\t\tSUGGESTION: Didn't use draw at all\n\t\t*/\n\t\t\tthis.suggestions.add(new Suggestion({\n\t\t\t\ticon: this.data.actions.DRAW.icon,\n\t\t\t\tcontent: <Trans id=\"ast.draw.suggestions.draw-no-usage.content\">\n\t\t\t\t\t\tNo uses of <DataLink action=\"DRAW\" /> at all.\n\t\t\t\t</Trans>,\n\t\t\t\twhy: <Trans id=\"ast.draw.suggestions.draw-no-usage.why\">\n\t\t\t\t\tNo draws used.\n\t\t\t\t</Trans>,\n\t\t\t\tseverity: SEVERITY.MAJOR,\n\t\t\t}))\n\t\t} else {\n\t\t/*\n\t\tSUGGESTION: Didn't use draw enough\n\t\t*/\n\t\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\t\ticon: this.data.actions.DRAW.icon,\n\t\t\t\tcontent: <Trans id=\"ast.draw.suggestions.draw-uses.content\">\n\t\t\t\t\t\tConsider casting <DataLink action=\"DRAW\" /> as soon as its available to maximize both MP regen and the number of cards played.\n\t\t\t\t</Trans>,\n\t\t\t\ttiers: SEVERITIES.DRAW_HOLDING,\n\t\t\t\tvalue: drawsMissed,\n\t\t\t\twhy: <Trans id=\"ast.draw.suggestions.draw-uses.why\">\n\t\t\t\t\tAbout <Plural value={drawsMissed} one=\"# use\" other=\"# uses\" /> of <DataLink action=\"DRAW\" /> <Plural value={drawsMissed} one=\"was\" other=\"were\" /> missed by holding two cards on full cooldown for at least a total of {this.parser.formatDuration(this.drawTotalDrift)}.\n\t\t\t\t</Trans>,\n\t\t\t}))\n\t\t}\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Plural, Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Action} from 'data/ACTIONS'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Data} from 'parser/core/modules/Data'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\n// Tiny module to count the number of early detonations on Earthly Star.\n// TODO: Could expand to analyse Earthly Star usage, timing, overheal, etc - Sushi\n\nconst SEVERETIES = {\n\tUNCOOKED: {\n\t\t1: SEVERITY.MEDIUM,\n\t\t2: SEVERITY.MAJOR,\n\t},\n\tUSES_MISSED: {\n\t\t1: SEVERITY.MEDIUM,\n\t\t2: SEVERITY.MAJOR,\n\t},\n}\n\nexport class EarthlyStar extends Analyser {\n\tstatic override handle = 'earthlystar'\n\tstatic override title = t('ast.earthly-star.title')`Earthly Star`\n\n\t@dependency private data!: Data\n\t@dependency private suggestions!: Suggestions\n\n\tprivate prepull = false\n\tprivate uses = 0\n\tprivate lastUse = 0\n\tprivate totalHeld = 0\n\tprivate earlyBurstCount = 0\n\n\tprivate petCasts: Array<Action['id']> = [this.data.actions.STELLAR_BURST.id, this.data.actions.STELLAR_EXPLOSION.id]\n\n\toverride initialise() {\n\t\tthis.addEventHook(filter<Event>()\n\t\t\t.source(this.parser.actor.id)\n\t\t\t.type('action')\n\t\t\t.action(this.data.actions.EARTHLY_STAR.id), this.onPlace)\n\t\tthis.addEventHook(filter<Event>()\n\t\t\t.source('pet')\n\t\t\t.type('action')\n\t\t\t.action(oneOf(this.petCasts)), this.onPetCast)\n\n\t\tthis.addEventHook('complete', this._onComplete)\n\t}\n\n\tprivate onPlace(event: Events['action']) {\n\t\tthis.uses++\n\n\t\t// this was prepull\n\t\tif (event.timestamp < this.parser.pull.timestamp) {\n\t\t\tthis.prepull = true\n\t\t}\n\n\t\t// TODO: Instead determine how far back they used it prepull by checking explosion time.\n\t\tif (this.lastUse === 0) {\n\t\t\tthis.lastUse = this.parser.pull.timestamp\n\t\t}\n\n\t\tlet drift = 0\n\n\t\tif (this.uses === 1 && !this.prepull) {\n\t\t\t// The first use, take holding as from the start of the fight\n\t\t\tdrift = event.timestamp - this.parser.pull.timestamp\n\t\t} else {\n\t\t\t// Take holding as from the time it comes off cooldown\n\t\t\tdrift = event.timestamp - this.lastUse - this.data.actions.EARTHLY_STAR.cooldown\n\t\t}\n\n\t\t// Keep track of total drift time not using star\n\t\tthis.totalHeld += Math.max(0, drift)\n\n\t\t// update the last use\n\t\tthis.lastUse = event.timestamp\n\t}\n\n\tprivate onPetCast(event: Events['action']) {\n\t\tconst actionID = event.action\n\n\t\tif (actionID === this.data.actions.STELLAR_BURST.id) {\n\t\t\tthis.earlyBurstCount++\n\t\t}\n\t}\n\n\t_onComplete() {\n\n\t\t/*\n\t\t\tSUGGESTION: Early detonations\n\t\t*/\n\t\tconst earlyBurstCount = this.earlyBurstCount\n\t\tif (earlyBurstCount > 0) {\n\t\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\t\ticon: this.data.actions.STELLAR_DETONATION.icon,\n\t\t\t\tcontent: <Trans id=\"ast.earthly-star.suggestion.uncooked.content\">\n\t\t\t\t\tPlan your <DataLink action=\"EARTHLY_STAR\" /> placements so that it's always cooked enough for the full potency when you need it.\n\t\t\t\t</Trans>,\n\t\t\t\twhy: <Trans id=\"ast.earthly-star.suggestion.uncooked.why\">\n\t\t\t\t\t<Plural value={earlyBurstCount} one=\"# detonation\" other=\"# detonations\" /> of an uncooked Earthly Star.\n\t\t\t\t</Trans>,\n\t\t\t\ttiers: SEVERETIES.UNCOOKED,\n\t\t\t\tvalue: earlyBurstCount,\n\t\t\t}))\n\t\t}\n\n\t\t// If they stopped using Star at any point in the fight, this'll calculate the drift \"accurately\"\n\t\tif (this.parser.pull.duration + this.parser.pull.timestamp - this.lastUse > this.data.actions.EARTHLY_STAR.cooldown) {\n\t\t\tthis.totalHeld += (this.parser.pull.duration + this.parser.pull.timestamp - (this.lastUse + this.data.actions.EARTHLY_STAR.cooldown))\n\t\t}\n\n\t\t/*\n\t\t\tSUGGESTION: Missed uses\n\t\t*/\n\t\tconst holdDuration = this.uses === 0 ? this.parser.pull.duration : this.totalHeld\n\t\tconst usesMissed = Math.floor(holdDuration / this.data.actions.EARTHLY_STAR.cooldown)\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.EARTHLY_STAR.icon,\n\t\t\tcontent: <Trans id=\"ast.earthly-star.suggestion.missed-use.content\">\n\t\t\t\tUse <DataLink action=\"EARTHLY_STAR\" /> more frequently. It may save a healing GCD and results in more damage output.\n\t\t\t</Trans>,\n\t\t\ttiers: SEVERETIES.USES_MISSED,\n\t\t\tvalue: usesMissed,\n\t\t\twhy: <Trans id=\"ast.earthly-star.suggestion.missed-use.why\">\n\t\t\t\tAbout {usesMissed} uses of Earthly Star were missed by holding it for at least a total of {this.parser.formatDuration(holdDuration)}.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n\n}\n","import {t} from '@lingui/macro'\nimport {Plural, Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Event} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Cooldowns} from 'parser/core/modules/Cooldowns'\nimport {Data} from 'parser/core/modules/Data'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\n// Things to track:\n// Did they cast a Helios/Aspected Helios without Horoscope or Neutral Sect despite having either up?\n// Maybe track how they used it?\n\nconst SEVERITIES = {\n\tWASTED_AOE_HEAL_TIERS: {\n\t\t1: SEVERITY.MINOR,\n\t\t5: SEVERITY.MEDIUM,\n\t},\n}\n\nexport class Helios extends Analyser {\n\tstatic override handle = 'horoscope'\n\tstatic override title = t('ast.horoscope.title')`Horoscope`\n\n\t@dependency private data!: Data\n\t@dependency private cooldowns!: Cooldowns\n\t@dependency private suggestions!: Suggestions\n\n\tprivate nonHoroscopeHeals: number = 0\n\n\toverride initialise() {\n\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\n\t\tthis.addEventHook(playerFilter\n\t\t\t.type('action')\n\t\t\t.action(this.data.actions.HELIOS.id), this.onHeliosCast)\n\t\t//aspected vs regular helios differentiated since Neutral Sect cannot be activated with regular Helios\n\t\tthis.addEventHook(playerFilter\n\t\t\t.type('action')\n\t\t\t.action(this.data.actions.ASPECTED_HELIOS.id), this.onAspectedHeliosCast)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onAspectedHeliosCast() {\n\t\tif (this.data.actions.HOROSCOPE.cooldown -  this.cooldowns.remaining('HOROSCOPE') < this.data.statuses.HOROSCOPE.duration //checks whether horoscope was just used\n\t\t|| this.data.actions.NEUTRAL_SECT.cooldown -  this.cooldowns.remaining('NEUTRAL_SECT') < this.data.statuses.NEUTRAL_SECT.duration //checks whether neutral sect was just used\n\t\t|| (this.cooldowns.remaining('NEUTRAL_SECT') > 0 && this.cooldowns.remaining('HOROSCOPE') > 0)) { //if neither were just used, check if they're on CD\n\t\t\treturn\n\t\t}\n\t\tthis.nonHoroscopeHeals++\n\t}\n\n\tprivate onHeliosCast() {\n\t\tif (this.data.actions.HOROSCOPE.cooldown -  this.cooldowns.remaining('HOROSCOPE') < this.data.statuses.HOROSCOPE.duration //checks whether horoscope was just used\n\t\t|| (this.cooldowns.remaining('HOROSCOPE') > 0)) { //if horoscope was just used, check if it's on CD\n\t\t\treturn\n\t\t}\n\t\tthis.nonHoroscopeHeals++\n\t}\n\n\tprivate onComplete() {\n\t\t/*\n\t\t\tSUGGESTION: AOE heal without horoscope or neutral sect\n\t\t*/\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.HELIOS.icon,\n\t\t\tcontent: <Trans id=\"ast.horoscope.suggestion.usage.content\">\n\t\t\t\tTry to plan your <DataLink action=\"HOROSCOPE\" /> or <DataLink action=\"NEUTRAL_SECT\" /> usages to have either up before you need to cast <DataLink action=\"HELIOS\" /> or <DataLink action=\"ASPECTED_HELIOS\" />.\n\t\t\t\t<DataLink status=\"HOROSCOPE_HELIOS\" showIcon={false} /> and <DataLink action=\"NEUTRAL_SECT\" showIcon={false} /> may help to cover more damage later without needing to cast additional AOE heals.\n\t\t\t</Trans>,\n\t\t\ttiers: SEVERITIES.WASTED_AOE_HEAL_TIERS,\n\t\t\tvalue: this.nonHoroscopeHeals,\n\t\t\twhy: <Trans id=\"ast.horoscope.suggestion.usage.why\">\n\t\t\t\t<Plural value={this.nonHoroscopeHeals} one=\"# AOE GCD heal was cast\" other=\"# AOE GCD heals were cast\" /> without <DataLink action=\"HOROSCOPE\" /> or <DataLink action=\"NEUTRAL_SECT\" /> even though one of the two abilities were available.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {RotationTable} from 'components/ui/RotationTable'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {EventHook} from 'parser/core/Dispatcher'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport CastTime from 'parser/core/modules/CastTime'\nimport {Data} from 'parser/core/modules/Data'\nimport {Timeline} from 'parser/core/modules/Timeline'\nimport React, {Fragment} from 'react'\nimport {Icon, Message} from 'semantic-ui-react'\nimport DISPLAY_ORDER from './DISPLAY_ORDER'\n\nconst BASE_GCDS_PER_WINDOW = 6\nconst LIGHTSPEED_REDUCTION = -2500\n\ninterface LightspeedWindow {\n\tstart: number\n\tend?: number\n\n\trotation: Array<Events['action']>\n\tgcdCount: number\n\tmpSavings: number\n\ttrailingGcdEvent?: Events['action']\n\n\tdeathTruncated: boolean\n}\n\n// in this module we only want to track Lightspeed windows opened by\n// the character selected for analysis. windows that clip into\n// AST Lightspeed will be marked.\n// Used DNC Technicalities as basis for this module. Rewritten from previous module for consistency purposes\nexport class Lightspeed extends Analyser {\n\tstatic override handle = 'Lightspeed'\n\tstatic override title = t('ast.lightspeed.title')`Lightspeed`\n\tstatic override displayOrder = DISPLAY_ORDER.LIGHTSPEED\n\n\t@dependency private timeline!: Timeline\n\t@dependency private data!: Data\n\t@dependency private castTime!: CastTime\n\n\tprivate history: LightspeedWindow[] = []\n\tprivate currentWindow: LightspeedWindow | undefined = undefined\n\tprivate castHook?: EventHook<Events['action']>\n\tprivate castTimeIndex: number | null = null\n\n\toverride initialise() {\n\t\tconst lightspeedFilter = filter<Event>().status(this.data.statuses.LIGHTSPEED.id)\n\n\t\tthis.addEventHook(lightspeedFilter.type('statusApply')\n\t\t\t.target(this.parser.actor.id), this.tryOpenWindow)\n\t\tthis.addEventHook(lightspeedFilter.type('statusRemove')\n\t\t\t.target(this.parser.actor.id), this.tryCloseWindow)\n\t}\n\n\tprivate tryOpenWindow(event: Events['statusApply']) {\n\t\tif (this.currentWindow === undefined) {\n\t\t\tthis.currentWindow = {\n\t\t\t\tstart: event.timestamp,\n\t\t\t\trotation: [],\n\t\t\t\tgcdCount: 0,\n\t\t\t\tmpSavings: 0,\n\n\t\t\t\tdeathTruncated: false,\n\n\t\t\t}\n\t\t\tthis.castHook = this.addEventHook(\n\t\t\t\tfilter<Event>()\n\t\t\t\t\t.source(this.parser.actor.id)\n\t\t\t\t\t.type('action'),\n\t\t\t\tthis.onCast,\n\t\t\t)\n\t\t\tthis.castTimeIndex = this.castTime.setTimeAdjustment('all', LIGHTSPEED_REDUCTION)\n\t\t}\n\t}\n\n\tprivate tryCloseWindow(event: Events['statusRemove']) {\n\n\t\tif (this.currentWindow == null) {\n\t\t\treturn\n\t\t}\n\n\t\t// Make sure all applicable statuses have fallen off before the window closes\n\t\tthis.currentWindow.end = event.timestamp\n\t\tthis.history.push(this.currentWindow)\n\t\tthis.currentWindow = undefined\n\t\tif (this.castHook != null) {\n\t\t\tthis.removeEventHook(this.castHook)\n\t\t\tthis.castHook = undefined\n\t\t}\n\t\tthis.castTime.reset(this.castTimeIndex)\n\t\tthis.castTimeIndex = null\n\t}\n\n\tprivate onCast(event: Events['action']) {\n\n\t\t// If we don't have a window, bail\n\t\tif (this.currentWindow == null) {\n\t\t\treturn\n\t\t}\n\n\t\tconst action = this.data.getAction(event.action)\n\n\t\t// Can't do anything else if we didn't get a valid action object\n\t\tif (action == null) {\n\t\t\treturn\n\t\t}\n\n\t\t// Add the action to the list\n\t\tthis.currentWindow.rotation.push(event)\n\n\t\tif (action.onGcd) {\n\t\t\tthis.currentWindow.gcdCount++\n\n\t\t\t// If we haven't recorded a trailing GCD event for this closed window, do so now\n\t\t\tif (this.currentWindow.end != null && this.currentWindow.trailingGcdEvent == null) {\n\t\t\t\tthis.currentWindow.trailingGcdEvent = event\n\t\t\t}\n\t\t}\n\t}\n\n\t// just output, no suggestions for now.\n\toverride output() {\n\n\t\t//in the case when the encounter ends prior to status remove. splicing the event to log it. note: since close event checks for null, this will not be applicable if the window isn't already open\n\t\tconst eventClose: Events['statusRemove'] = {\n\t\t\ttimestamp: this.parser.pull.duration,\n\t\t\tstatus: this.data.statuses.LIGHTSPEED.id,\n\t\t\ttype: 'statusRemove',\n\t\t\tsource: this.parser.actor.id,\n\t\t\ttarget: this.parser.actor.id,\n\t\t}\n\t\tthis.tryCloseWindow(eventClose)\n\n\t\tconst tableData = this.history.map(window => {\n\t\t\tconst end = window.end != null ?\n\t\t\t\twindow.end - this.parser.pull.timestamp :\n\t\t\t\tthis.parser.pull.duration\n\t\t\tconst start = window.start - this.parser.pull.timestamp\n\t\t\t// how long (or short, really) a window needs to be in order to be considered truncated\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-magic-numbers\n\t\t\tconst LIGHTSPEED_TRUNCATE_DURATION = this.data.statuses.LIGHTSPEED.duration - 2000\n\n\t\t\t// overlapped if: we detected an overwrite of this player onto another player, or if\n\t\t\t// this player's buff had a duration that was too short and they didn't die\n\t\t\tconst overlap =  (!window.deathTruncated && (end !== start) && (end - start < LIGHTSPEED_TRUNCATE_DURATION))\n\n\t\t\treturn ({\n\t\t\t\tstart,\n\t\t\t\tend,\n\t\t\t\toverlap,\n\t\t\t\tnotesMap: {\n\t\t\t\t\toverlapped: <>{overlap ? <Icon name=\"x\" color=\"red\" /> : <Icon name=\"check\" color=\"green\" />}</>,\n\t\t\t\t\ttotalSavings: <>{window.mpSavings}</>,\n\t\t\t\t},\n\t\t\t\trotation: window.rotation,\n\t\t\t\ttargetsData: {\n\t\t\t\t\tgcds: {\n\t\t\t\t\t\tactual: window.gcdCount,\n\t\t\t\t\t\texpected: (BASE_GCDS_PER_WINDOW),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t})\n\t\t})\n\n\t\tconst actualCasts = tableData.length\n\t\tconst totalPossibleCasts = Math.ceil(this.parser.pull.duration / this.data.actions.LIGHTSPEED.cooldown)\n\n\t\tconst noCastsMessage = <p><span className=\"text-error\"><Trans id=\"ast.lightspeed.messages.no-casts\"> There were no casts recorded for <DataLink action=\"LIGHTSPEED\" />.</Trans></span></p>\n\t\tconst castsMessage = <p><Trans id=\"ast.lightspeed.messages.num-casts\"> There were a total of {actualCasts} out of a possible {totalPossibleCasts} <DataLink action=\"LIGHTSPEED\" /> casts noted.</Trans></p>\n\n\t\tconst message = <p><Trans id=\"ast.lightspeed.messages.explanation\">\n\t\tThe main use of <DataLink action=\"LIGHTSPEED\" /> should be for weaving card actions during <DataLink action=\"DIVINATION\" /> and <DataLink action=\"ASTRODYNE\" /> windows.<br />\n\t\tIt can also be used for keeping casts up while on the move and other specific scenarios.<br />\n\t\tEach fight calls for a different strategy, but consider utilizing it as much as possible.<br />\n\t\tUnless it's being used for <DataLink action=\"ASCEND\" />, lightspeed can fit at least 6 GCDs.<br />\n\t\t</Trans></p>\n\n\t\treturn <Fragment>\n\t\t\t{message}\n\t\t\t<Message>{actualCasts > 0 ? castsMessage : noCastsMessage}</Message>\n\t\t\t{actualCasts > 0 ?\n\t\t\t\t<RotationTable\n\t\t\t\t\ttargets={[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\theader: <Trans id=\"ast.lightspeed.rotation-table.header.gcd-count\">GCDs</Trans>,\n\t\t\t\t\t\t\taccessor: 'gcds',\n\t\t\t\t\t\t},\n\t\t\t\t\t]}\n\t\t\t\t\tdata={tableData}\n\t\t\t\t\tonGoto={this.timeline.show}\n\t\t\t\t/>\n\t\t\t\t: ''}\n\t\t</Fragment>\n\t}\n}\n","import {Plural, Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Event} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Cooldowns} from 'parser/core/modules/Cooldowns'\nimport {Data} from 'parser/core/modules/Data'\nimport {Invulnerability} from 'parser/core/modules/Invulnerability'\nimport Suggestions, {SEVERITY, Suggestion, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\n/**some notes for macrocosmos. Its potency is 250 and then 40% less (150 potency) for all other adds.\n* it it noteworthy that fall malefic's potency is also 250 and that gravity II's potency is 130.\n* therefore, macrocosmos for single targets would be only as useful as the delayed heal and the instant cast (similar to combust III)\n* for multiple targets, macrocosmos would be best used on CD unless the AST is aware of any significant healing needed\n* recommendations below will include gravity casts instead of macrocosmos and will show possible casts for the fight\n**/\n\nconst SEVERITY_MOD = {\n\tGRAVITY: {\n\t\t1: SEVERITY.MINOR,\n\t\t3: SEVERITY.MEDIUM,\n\t\t10: SEVERITY.MAJOR,\n\t},\n\tNOTGRAVITY: {\n\t\t0.2: SEVERITY.MINOR,\n\t\t0.6: SEVERITY.MEDIUM,\n\t\t0.8: SEVERITY.MAJOR,\n\t},\n}\n\nconst GCD_ALLOWANCE = 2500\n\n// Lifted from WHM benison and adapted to AST and TSX\nexport class Macrocosmos extends Analyser {\n\tstatic override handle = 'macrocosmos'\n\n\t@dependency private data!: Data\n\t@dependency private suggestions!: Suggestions\n\t@dependency private invulnerability!: Invulnerability\n\t@dependency private cooldowns!: Cooldowns\n\n\tprivate macrocosmosUses: number = 0\n\tprivate gravityIIUses: number = 0\n\n\toverride initialise() {\n\t\tthis.addEventHook(filter<Event>()\n\t\t\t.source(this.parser.actor.id)\n\t\t\t.type('action')\n\t\t\t.action(this.data.actions.MACROCOSMOS.id), this.onMacrocosmosCast)\n\t\tthis.addEventHook(filter<Event>()\n\t\t\t.source(this.parser.actor.id)\n\t\t\t.type('action')\n\t\t\t.action(this.data.actions.GRAVITY_II.id), this.onGravityIICast)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onMacrocosmosCast() {\n\t\tthis.macrocosmosUses++\n\t}\n\n\tprivate onGravityIICast() {\n\t\t//check whether Macrocosmos is on CD. if not, then count it\n\t\tif (this.cooldowns.remaining('MACROCOSMOS') + GCD_ALLOWANCE > 0) {\n\t\t\treturn\n\t\t}\n\t\tthis.gravityIIUses++\n\t}\n\n\tprivate onComplete() {\n\t\tconst macrocosmosMaxUses = Math.ceil((this.parser.pull.duration - - this.invulnerability.getDuration({types: ['invulnerable']})) / this.data.actions.MACROCOSMOS.cooldown)\n\t\tconst macrocosmosPercentUsed = this.macrocosmosUses / macrocosmosMaxUses\n\n\t\tconst gravityIIContent =\n\t\t\t<Trans id=\"ast.macrocosmos.content.multiple-target\">\n\t\t\t\t<DataLink action=\"MACROCOSMOS\" showIcon={false} /> has a higher potency per target than <DataLink action=\"GRAVITY_II\" /> and <DataLink action=\"MACROCOSMOS\" showIcon={false} /> should be utilized as much as possible in lieu of <DataLink action=\"GRAVITY_II\" showIcon={false} />.\n\t\t\t</Trans>\n\n\t\tconst generalContent =\n\t\t\t<Trans id=\"ast.macrocosmos.content.general\">\n\t\t\t\tConsider utilizing <DataLink action=\"MACROCOSMOS\" /> more frequently. <DataLink action=\"MACROCOSMOS\" showIcon={false} /> has the same potency as <DataLink action=\"FALL_MALEFIC\" />; however, <DataLink action=\"MACROCOSMOS\" showIcon={false} /> can be utilized to weave in healing for incoming raid wide attacks leading to more value for your GCD. <br/>\n\t\t\t</Trans>\n\n\t\tconst gravityIIWhy =\n\t\t\t<Trans id=\"ast.macrocosmos.why.multiple-target\">\n\t\t\t\tThere <Plural value={this.gravityIIUses} one=\"was\" other=\"were\" /> {this.gravityIIUses} <Plural value={this.gravityIIUses} one=\"cast\" other=\"casts\" /> noted for <DataLink action=\"GRAVITY_II\" /> when <DataLink action=\"MACROCOSMOS\" /> was available.\n\t\t\t</Trans>\n\n\t\tconst generalWhy =\n\t\t\t<Trans id=\"ast.macrocosmos.why.general\">\n\t\t\t\tOut of a possible {macrocosmosMaxUses} <Plural value={macrocosmosMaxUses} one=\"cast\" other=\"casts\" /> during available dps uptime, there <Plural value={this.macrocosmosUses} one=\"was\" other=\"were\" /> {this.macrocosmosUses} <Plural value={this.macrocosmosUses} one=\"cast\" other=\"casts\" /> noted. <br />\n\t\t\t</Trans>\n\n\t\tconst noCastWhy =<p><span className=\"text-error\"><Trans id=\"ast.macrocosmos.why.nocasts\">\n\t\t\tThere were no casts recorded for <DataLink action=\"MACROCOSMOS\" />.\n\t\t</Trans></span></p>\n\n\t\tconst content = this.gravityIIUses === 0 ? [generalContent] : [gravityIIContent]\n\t\tconst why = this.macrocosmosUses === 0 ? [noCastWhy] : [generalWhy]\n\t\tthis.gravityIIUses !== 0 ? why.push(gravityIIWhy) : ''\n\n\t\tif (this.macrocosmosUses === 0 && this.gravityIIUses === 0) {\n\t\t\tthis.suggestions.add(new Suggestion({\n\t\t\t\ticon: this.data.actions.MACROCOSMOS.icon,\n\t\t\t\tcontent: content,\n\t\t\t\tseverity: SEVERITY.MAJOR,\n\t\t\t\twhy: why,\n\t\t\t}))\n\t\t} else if (this.macrocosmosUses !== 0 && this.gravityIIUses === 0) {\n\t\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\t\ticon: this.data.actions.MACROCOSMOS.icon,\n\t\t\t\tcontent: content,\n\t\t\t\ttiers: SEVERITY_MOD.NOTGRAVITY,\n\t\t\t\tvalue: 1 - macrocosmosPercentUsed,\n\t\t\t\twhy: why,\n\t\t\t}))\n\t\t} else {\n\t\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\t\ticon: this.data.actions.MACROCOSMOS.icon,\n\t\t\t\tcontent: content,\n\t\t\t\ttiers: SEVERITY_MOD.GRAVITY,\n\t\t\t\tvalue: this.gravityIIUses,\n\t\t\t\twhy: why,\n\t\t\t}))\n\t\t}\n\t}\n}\n","import {Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {CooldownDowntime} from 'parser/core/modules/CooldownDowntime'\nimport React from 'react'\n\nexport class oGCDs extends CooldownDowntime {\n\n\toverride checklistName =  <Trans id=\"ast.ogcd-downtime.divination.name\">Use Divination</Trans>\n\toverride checklistDescription = <Trans id=\"ast.ogcd-downtime.divination.description\">\n\t\t<DataLink action=\"DIVINATION\" /> provides Astrologian with a strong amount of raid DPS when stacked together with arcanum.\n\t\tTry to time the usage to match raid buffs and high output phases of other party members - it's more important to use it on time rather than hold it.\n\t</Trans>\n\t// eslint-disable-next-line @typescript-eslint/no-magic-numbers\n\toverride checklistTarget = 100\n\n\tprivate DPS_COOLDOWNS_TRACKED = [\n\t\t//dps actions\n\t\t{\n\t\t\tcooldowns: [this.data.actions.DIVINATION],\n\t\t\tcontent: <Trans id=\"ast.ogcds_dps.divination.content\">\n\t\t\t\tConsider using <DataLink action=\"DIVINATION\" /> more frequently. <DataLink action=\"DIVINATION\" /> provides an Astrologian with a strong amount of raid DPS.\n\t\t\t</Trans>,\n\t\t\tallowedAverageDowntime: 2500,\n\t\t},\n\t]\n\n\toverride trackedCds = this.DPS_COOLDOWNS_TRACKED\n}\n","import {Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Overheal as CoreOverheal, SuggestedColors, TrackedOverheal} from 'parser/core/modules/Overheal'\nimport React from 'react'\n\nexport class Overheal extends CoreOverheal {\n\tstatic override handle = 'overheal'\n\n\tprotected override checklistRuleBreakout = true\n\tprotected override displayPieChart = true\n\tprotected override displaySuggestion = true\n\n\tprotected content = <Trans id=\"ast.overheal.suggestion.content\">\n\t\tAvoid healing your party for more than is needed. Cut back on unnecessary heals and coordinate with your co-healer to plan resources efficiently. <br/>\n\t\t* Delayed heals include heals such as <DataLink action=\"EXALTATION\" />, <DataLink action=\"HOROSCOPE\" />, and <DataLink action=\"MACROCOSMOS\" /> when not manually activated.\n\t</Trans>\n\n\tprotected override checklistDescription(_overheals: TrackedOverheal[]): JSX.Element {\n\t\treturn this.content\n\t}\n\n\tprotected override trackedHealCategories = [\n\t\t{\n\t\t\tname: <Trans id=\"ast.overheal.hot.name\">Healing over Time</Trans>,\n\t\t\tcolor: SuggestedColors[1],\n\t\t\ttrackedHealIds: [\n\t\t\t\tthis.data.statuses.ASPECTED_HELIOS.id,\n\t\t\t\tthis.data.statuses.WHEEL_OF_FORTUNE.id,\n\t\t\t\tthis.data.statuses.ASPECTED_BENEFIC.id,\n\t\t\t\tthis.data.statuses.OPPOSITION.id,\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tname: <Trans id=\"ast.overheal.earthlystar.name\">Earthly Star</Trans>,\n\t\t\tcolor: SuggestedColors[2],\n\t\t\ttrackedHealIds: [\n\t\t\t\tthis.data.actions.STELLAR_BURST.id,\n\t\t\t\tthis.data.actions.STELLAR_EXPLOSION.id,\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tname: <Trans id=\"ast.overheal.delayedheals.name\">Delayed Heals*</Trans>, //these heals are ones that are planned a bit of time in advance, but not self-activated. i.e. is the astrologian planning well in advance? an overheal in this sense would imply that they don't trust the heals to top off the party.\n\t\t\tcolor: SuggestedColors[3],\n\t\t\ttrackedHealIds: [\n\t\t\t\tthis.data.statuses.HOROSCOPE_HELIOS.id,\n\t\t\t\tthis.data.statuses.EXALTATION.id,\n\t\t\t\tthis.data.statuses.MACROCOSMOS.id,\n\t\t\t],\n\t\t},\n\t]\n}\n","import STATUSES from 'data/STATUSES'\nimport {StatusTimeline as CoreStatusTimeline} from 'parser/core/modules/StatusTimeline'\n\nexport class StatusTimeline extends CoreStatusTimeline {\n\tstatic override statusesStackMapping = {\n\t\t[STATUSES.GIANT_DOMINANCE.id]: STATUSES.EARTHLY_DOMINANCE.id,\n\t}\n}\n","import {Plural, Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Action, ActionKey} from 'data/ACTIONS'\nimport {Event} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Cooldowns} from 'parser/core/modules/Cooldowns'\nimport {Data} from 'parser/core/modules/Data'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\nconst SEVERITIES = {\n\tWASTED_ST_HEAL_TIERS: {\n\t\t1: SEVERITY.MINOR,\n\t\t10: SEVERITY.MEDIUM,\n\t},\n}\n\nconst GCD_ST_HEAL: ActionKey[] = [\n\t'BENEFIC',\n\t'BENEFIC_II',\n]\n\n// Ripped off from WHM and converted to TSX\nexport class Synastry extends Analyser {\n\tstatic override handle = 'synastry'\n\n\t@dependency private data!: Data\n\t@dependency private suggestions!: Suggestions\n\t@dependency private cooldowns!: Cooldowns\n\n\tprivate nonSynastryHeals = 0\n\n\tprivate gcdStHeal: Array<Action['id']> = []\n\n\toverride initialise() {\n\t\tGCD_ST_HEAL.forEach(actionKey => {\n\t\t\tthis.gcdStHeal.push(this.data.actions[actionKey].id)\n\t\t})\n\n\t\tthis.addEventHook(filter<Event>()\n\t\t\t.source(this.parser.actor.id)\n\t\t\t.type('action')\n\t\t\t.action(oneOf(this.gcdStHeal)), this.onSingleTargetHealCast)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onSingleTargetHealCast() {\n\t\t// Ignore if Synastry is still on CD or we already have it up\n\t\tif (this.cooldowns.remaining('SYNASTRY') > 0) {\n\t\t\treturn\n\t\t}\n\t\tthis.nonSynastryHeals++\n\t}\n\n\tonComplete() {\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.SYNASTRY.icon,\n\t\t\tcontent: <Trans id=\"ast.synastry.suggestion.content\">\n\t\t\t\tTry to use <DataLink action=\"SYNASTRY\" /> if you need to cast a single-target GCD heal. The GCD heal itself is already an efficiency loss, so it's better to make it as strong as possible if Synastry is not needed soon.\n\t\t\t</Trans>,\n\t\t\ttiers: SEVERITIES.WASTED_ST_HEAL_TIERS,\n\t\t\tvalue: this.nonSynastryHeals,\n\t\t\twhy: <Trans id=\"ast.synastry.suggestion.why\">\n\t\t\t\t<Plural value={this.nonSynastryHeals} one=\"# single-target GCD heal was cast\" other=\"# single-target GCD heals were cast\" /> without synastry even though it was available.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n}\n","import {Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {ExpectedActionsEvaluator} from 'parser/core/modules/ActionWindow'\nimport {SEVERITY} from 'parser/core/modules/Suggestions'\nimport {Tincture as CoreTincture} from 'parser/core/modules/Tincture'\nimport React from 'react'\nimport {Message} from 'semantic-ui-react'\n\nexport class Tincture extends CoreTincture {\n\n\toverride prependMessages = <Message>\n\t\t<Trans id=\"ast.tincture.prepend.content\">\n\t\t\tTracking for <DataLink action=\"LORD_OF_CROWNS\" /> will be added in a future update, but make sure you get as many uses as possible in each Tincture window.\n\t\t</Trans>\n\t</Message>\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\t\tthis.trackOnlyActions([\n\t\t\tthis.data.actions.FALL_MALEFIC.id,\n\t\t\tthis.data.actions.COMBUST_III.id,\n\t\t\tthis.data.actions.GRAVITY_II.id,\n\t\t\tthis.data.actions.ASTRODYNE.id,\n\t\t\tthis.data.actions.MACROCOSMOS.id,\n\t\t\tthis.data.actions.LORD_OF_CROWNS.id,\n\t\t\tthis.data.actions.EARTHLY_STAR.id,\n\t\t\tthis.data.actions.DIVINATION.id,\n\t\t])\n\t\tthis.addEvaluator(new ExpectedActionsEvaluator({\n\t\t\texpectedActions: [\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.COMBUST_III,\n\t\t\t\t\texpectedPerWindow: 1,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.ASTRODYNE,\n\t\t\t\t\texpectedPerWindow: 1,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.DIVINATION,\n\t\t\t\t\texpectedPerWindow: 1,\n\t\t\t\t},\n\t\t\t],\n\t\t\tsuggestionIcon: this.data.actions.INFUSION_MND.icon,\n\t\t\tsuggestionContent: <Trans id=\"ast.tincture.suggestions.trackedActions.content\">\n\t\t\t\tTry to cover as much damage as possible with your Tinctures of Mind.\n\t\t\t</Trans>,\n\t\t\tsuggestionWindowName: <DataLink action=\"INFUSION_MND\" showIcon={false} />,\n\t\t\tseverityTiers: {\n\t\t\t\t1: SEVERITY.MINOR,\n\t\t\t\t2: SEVERITY.MEDIUM,\n\t\t\t\t3: SEVERITY.MAJOR,\n\t\t\t},\n\t\t}))\n\t}\n}\n","import {Interrupts} from 'parser/core/modules/Interrupts'\nimport {LucidDreaming} from 'parser/core/modules/LucidDreaming'\nimport {ActionTimeline} from './ActionTimeline'\nimport {ArcanaSuggestions, ArcanaTracking} from './ArcanaTracking'\nimport {ArcanaUndrawUsage} from './ArcanaUndrawUsage'\nimport {CastTime} from './CastTime'\nimport {Combust} from './Combust'\nimport CrownPlay from './CrownPlay'\nimport {Defensives} from './Defensives'\nimport {Divination} from './Divination'\nimport Draw from './Draw'\nimport {EarthlyStar} from './EarthlyStar'\nimport {Helios} from './Helios'\nimport {Lightspeed} from './Lightspeed'\nimport {Macrocosmos} from './Macrocosmos'\nimport {oGCDs} from './oGCDs'\nimport {Overheal} from './Overheal'\nimport {StatusTimeline} from './StatusTimeline'\nimport {Synastry} from './Synastry'\nimport {Tincture} from './Tincture'\n\nexport default [\n\tActionTimeline,\n\tArcanaSuggestions,\n\tArcanaTracking,\n\tArcanaUndrawUsage,\n\tCastTime,\n\tCombust,\n\tDefensives,\n\tDivination,\n\tDraw,\n\tCrownPlay,\n\tEarthlyStar,\n\toGCDs,\n\tHelios,\n\tInterrupts,\n\tLightspeed,\n\tLucidDreaming,\n\tMacrocosmos,\n\tOverheal,\n\tStatusTimeline,\n\tSynastry,\n\tTincture,\n]\n","/**\n * A specialized version of `_.forEachRight` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEachRight(array, iteratee) {\n  var length = array == null ? 0 : array.length;\n\n  while (length--) {\n    if (iteratee(array[length], length, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nmodule.exports = arrayEachRight;\n","var baseForOwnRight = require('./_baseForOwnRight'),\n    createBaseEach = require('./_createBaseEach');\n\n/**\n * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEachRight = createBaseEach(baseForOwnRight, true);\n\nmodule.exports = baseEachRight;\n","var baseForRight = require('./_baseForRight'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwnRight(object, iteratee) {\n  return object && baseForRight(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwnRight;\n","var createBaseFor = require('./_createBaseFor');\n\n/**\n * This function is like `baseFor` except that it iterates over properties\n * in the opposite order.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseForRight = createBaseFor(true);\n\nmodule.exports = baseForRight;\n","/**\n * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n *\n * @private\n * @param {Array} props The property identifiers.\n * @param {Array} values The property values.\n * @param {Function} assignFunc The function to assign values.\n * @returns {Object} Returns the new object.\n */\nfunction baseZipObject(props, values, assignFunc) {\n  var index = -1,\n      length = props.length,\n      valsLength = values.length,\n      result = {};\n\n  while (++index < length) {\n    var value = index < valsLength ? values[index] : undefined;\n    assignFunc(result, props[index], value);\n  }\n  return result;\n}\n\nmodule.exports = baseZipObject;\n","var identity = require('./identity');\n\n/**\n * Casts `value` to `identity` if it's not a function.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Function} Returns cast function.\n */\nfunction castFunction(value) {\n  return typeof value == 'function' ? value : identity;\n}\n\nmodule.exports = castFunction;\n","var arrayEachRight = require('./_arrayEachRight'),\n    baseEachRight = require('./_baseEachRight'),\n    castFunction = require('./_castFunction'),\n    isArray = require('./isArray');\n\n/**\n * This method is like `_.forEach` except that it iterates over elements of\n * `collection` from right to left.\n *\n * @static\n * @memberOf _\n * @since 2.0.0\n * @alias eachRight\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n * @see _.forEach\n * @example\n *\n * _.forEachRight([1, 2], function(value) {\n *   console.log(value);\n * });\n * // => Logs `2` then `1`.\n */\nfunction forEachRight(collection, iteratee) {\n  var func = isArray(collection) ? arrayEachRight : baseEachRight;\n  return func(collection, castFunction(iteratee));\n}\n\nmodule.exports = forEachRight;\n","var assignValue = require('./_assignValue'),\n    baseZipObject = require('./_baseZipObject');\n\n/**\n * This method is like `_.fromPairs` except that it accepts two arrays,\n * one of property identifiers and one of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 0.4.0\n * @category Array\n * @param {Array} [props=[]] The property identifiers.\n * @param {Array} [values=[]] The property values.\n * @returns {Object} Returns the new object.\n * @example\n *\n * _.zipObject(['a', 'b'], [1, 2]);\n * // => { 'a': 1, 'b': 2 }\n */\nfunction zipObject(props, values) {\n  return baseZipObject(props || [], values || [], assignValue);\n}\n\nmodule.exports = zipObject;\n"],"names":["Interrupts","CastTime","Data","Suggestions","Timeline","currentCast","droppedCasts","missedTimeMS","icon","ACTIONS","severity","SEVERITY","suggestionContent","Trans","id","missedCasts","missedTime","length","this","parser","formatDuration","addEventHook","filter","type","source","actor","onBeginCast","pushDropCasts","onComplete","event","castTime","forAction","action","timestamp","Math","min","currentEpochTimestamp","push","undefined","suggestions","add","TieredSuggestion","tiers","value","content","why","suggestionWhy","noInterruptsOutput","compact","unstackable","celled","collapsing","cast","data","getAction","textAlign","style","marginRight","formatEpochTimestamp","circular","size","onClick","timeline","show","pull","Analyser","handle","title","debug","dependency","SEVERITIES","USE_PERCENT_THRESHOLD","LucidDreaming","lastUse","uses","totalHeld","Fragment","actions","LUCID_DREAMING","onCastLucid","_held","cooldown","usesMissed","holdDuration","duration","floor","notUsesPercent","dependencies","StatusTimeline","ActionTimeline","Actors","statusActionMap","usages","rows","getRowKey","statusId","targetId","playerPetIds","actors","owner","pet","allPetIds","playerControlled","actorFilter","oneOf","target","noneOf","onApply","onRemove","statusesApplied","status","statuses","set","statusUsages","get","statusTarget","row","createStatusTargetRow","lastUsage","end","start","getStatus","usage","addItem","StatusItem","remappedStatusId","constructor","statusesStackMapping","rowKey","cachedRow","statusRow","createStatusRow","addRow","SimpleRow","label","name","actionTimeline","getRow","hideCollapsed","collapse","Tincture","buffStatus","MEDICATED","BuffWindow","CoreActionTimeline","SealType","PLAY","MINOR_ARCANA","SOLAR_SEAL_ARCANA","LUNAR_SEAL_ARCANA","CELESTIAL_SEAL_ARCANA","DRAWN_ARCANA","DRAWN_CROWN_ARCANA","ARCANA_STATUSES","CARD_GRANTING_ABILITIES","CARD_ACTIONS","SleeveType","CLEAN_SEAL_STATE","NOTHING","ArcanaTracking","play","arcanaStatuses","cardGrantingAbilities","cardActions","drawnArcana","celestialSealArcana","lunarSealArcana","solarSealArcana","playToStatusLookup","statusToDrawnLookup","statusToPlayLookup","drawnToPlayLookup","cardStateLog","lastEvent","drawState","sealState","sleeveState","lastDrawnBuff","pullStateInitialized","pullIndex","on_prepullArcanas","off_prepullArcanas","actionKey","statusKey","playerFilter","onCast","onPrepullArcana","offPrepullArcana","onDrawnStatus","offDrawnStatus","onDeath","stateItem","artifact","THE_BALANCE","forEach","arcanaBuff","cardStateItem","arcanaAction","arcanaStatusToPlay","arcanaCastEvent","unshift","retconSearch","arcanaDrawnToPlay","isPaired","some","isDeathPaired","UNDRAW","actionId","initPullState","sealObtained","SOLAR","LUNAR","CELESTIAL","addSeal","ASTRODYNE","lastCardState","DEATH_EVENT_STATUS_DROP_DELAY","pop","lookupLog","cardState","drawnStatus","arcanaActionToStatus","index","cardActionId","searchLatest","lastLog","latestActionId","REDRAW","DRAW","searchLog","lastIndex","arcanaStatus","seal","shift","arcanaId","displayOrder","DISPLAY_ORDER","SEAL_ICON","ArcanaSuggestions","cardLogs","_onComplete","arcanaTracking","targetName","targetJob","job","Table","className","width","styles","Button","RenderSpreadState","formattedTime","RenderAction","scrollTo","JOBS","JobIcon","marginLeft","src","alt","sealType","ArcanaUndrawUsage","undraws","onUndraw","Suggestion","hobIndex","harmonyOfBodyFilter","HARMONY_OF_BODY","onApplyBody","onRemoveBody","harmonyOfBody","setPercentageAdjustment","speedModifier","reset","CoreCastTime","CLIPPING","UPTIME","TARGET","Combust","Checklist","trackedStatuses","COMBUST_III","checklist","TieredRule","description","requirements","Requirement","percent","getUptimePercent","combustClipPerMinute","getClippingAmount","DoTs","TARGETS","SCORE","WEIGHT","LORD","LADY","CrownPlay","lastCrownTimestamp","minorArcana","minorArcanaDrift","minorArcanaTotalDrift","lastEventType","lastCardType","ladyObtained","ladyCasts","lordObtained","lordCasts","crownActions","onMinorArcana","onCrownAction","onCrownBuff","LORD_OF_CROWNS_DRAWN","LADY_OF_CROWNS_DRAWN","LORD_OF_CROWNS","LADY_OF_CROWNS","fightEnd","max","playsFromCrownPlay","ceil","weight","showIcon","crownPlaysMissed","Defensives","trackedDefensives","EXALTATION","CELESTIAL_INTERSECTION","CELESTIAL_OPPOSITION","CoreDefensives","Divination","history","currentWindow","castHook","otherAst","timeOverwritten","countOverwritten","active","divinationFilter","DIVINATION","countDivinationBuffs","tryOpenWindow","tryCloseWindow","playersBuffed","forceCloseWindow","rotation","gcdCount","overlap","removeEventHook","onGcd","trailingGcdEvent","tableData","window","targetsData","gcds","actual","expected","notesMap","getNotesIcon","actualCasts","noCastsMessage","message","RotationTable","targets","header","accessor","notes","onGoto","Message","ruleFailed","Icon","DRAW_HOLDING","Draw","draws","cooldownEndTime","drawTotalDrift","plays","prepullPrepped","playActions","onDraw","onPlay","onPlayBuff","playsFromDraw","charges","pullState","getPullState","theoreticalMaxPlays","totalCardsObtained","warnTarget","failTarget","drawsMissed","SEVERETIES","UNCOOKED","USES_MISSED","EarthlyStar","prepull","earlyBurstCount","petCasts","STELLAR_BURST","STELLAR_EXPLOSION","EARTHLY_STAR","onPlace","onPetCast","drift","STELLAR_DETONATION","WASTED_AOE_HEAL_TIERS","Helios","Cooldowns","nonHoroscopeHeals","HELIOS","onHeliosCast","ASPECTED_HELIOS","onAspectedHeliosCast","HOROSCOPE","cooldowns","remaining","NEUTRAL_SECT","Lightspeed","castTimeIndex","lightspeedFilter","LIGHTSPEED","mpSavings","deathTruncated","setTimeAdjustment","eventClose","LIGHTSPEED_TRUNCATE_DURATION","overlapped","color","totalSavings","totalPossibleCasts","castsMessage","SEVERITY_MOD","GRAVITY","NOTGRAVITY","Macrocosmos","Invulnerability","macrocosmosUses","gravityIIUses","MACROCOSMOS","onMacrocosmosCast","GRAVITY_II","onGravityIICast","macrocosmosMaxUses","invulnerability","getDuration","types","macrocosmosPercentUsed","gravityIIContent","generalContent","gravityIIWhy","generalWhy","noCastWhy","oGCDs","checklistName","checklistDescription","checklistTarget","DPS_COOLDOWNS_TRACKED","allowedAverageDowntime","trackedCds","CooldownDowntime","Overheal","checklistRuleBreakout","displayPieChart","displaySuggestion","trackedHealCategories","SuggestedColors","trackedHealIds","WHEEL_OF_FORTUNE","ASPECTED_BENEFIC","OPPOSITION","HOROSCOPE_HELIOS","_overheals","CoreOverheal","CoreStatusTimeline","STATUSES","WASTED_ST_HEAL_TIERS","GCD_ST_HEAL","Synastry","nonSynastryHeals","gcdStHeal","onSingleTargetHealCast","SYNASTRY","prependMessages","trackOnlyActions","FALL_MALEFIC","addEvaluator","ExpectedActionsEvaluator","expectedActions","expectedPerWindow","suggestionIcon","INFUSION_MND","suggestionWindowName","severityTiers","CoreTincture","module","exports","array","iteratee","baseForOwnRight","baseEachRight","createBaseEach","baseForRight","keys","object","createBaseFor","props","values","assignFunc","valsLength","result","identity","arrayEachRight","castFunction","isArray","collection","assignValue","baseZipObject"],"sourceRoot":""}