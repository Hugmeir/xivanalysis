{"version":3,"file":"assets/jobs-blm.bb9a1dee.js","mappings":"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","sources":["webpack://@xivanalysis/client/./src/components/ui/RotationTable.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/GlobalCooldown.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/Interrupts.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/Statuses.ts","webpack://@xivanalysis/client/./src/parser/core/modules/Weaving.tsx","webpack://@xivanalysis/client/./src/parser/jobs/blm/modules/AoEUsages.ts","webpack://@xivanalysis/client/./src/parser/jobs/blm/modules/CastTime.ts","webpack://@xivanalysis/client/./src/parser/jobs/blm/modules/Defensives.ts","webpack://@xivanalysis/client/./src/parser/jobs/blm/modules/Elements.ts","webpack://@xivanalysis/client/./src/parser/jobs/blm/modules/Gauge.tsx","webpack://@xivanalysis/client/./src/parser/jobs/blm/modules/Leylines.tsx","webpack://@xivanalysis/client/./src/parser/jobs/blm/modules/DISPLAY_ORDER.ts","webpack://@xivanalysis/client/./src/parser/jobs/blm/modules/NotCasting.tsx","webpack://@xivanalysis/client/./src/parser/jobs/blm/modules/OGCDDowntime.tsx","webpack://@xivanalysis/client/./src/parser/jobs/blm/modules/Procs.tsx","webpack://@xivanalysis/client/./src/parser/jobs/blm/modules/RotationWatchdog.tsx","webpack://@xivanalysis/client/./src/parser/jobs/blm/modules/Sharpcast.tsx","webpack://@xivanalysis/client/./src/parser/jobs/blm/modules/Thunder.tsx","webpack://@xivanalysis/client/./src/parser/jobs/blm/modules/Triplecast.tsx","webpack://@xivanalysis/client/./src/parser/jobs/blm/modules/Weaving.tsx","webpack://@xivanalysis/client/./src/parser/jobs/blm/modules/index.ts"],"sourcesContent":["import {Trans} from '@lingui/react'\nimport Rotation, {RotationEvent} from 'components/ui/Rotation'\nimport React from 'react'\nimport {Button, Table} from 'semantic-ui-react'\nimport {isDefined, formatDuration} from 'utilities'\n\nexport interface RotationTarget {\n\t/**\n\t * Displayed header\n\t */\n\theader: React.ReactNode\n\t/**\n\t * Accessor can either be a string, in which case this will resolve to the value assigned to the same key in the `targetsData` field in each entry,\n\t * or a function resolving the entry to the `RotationTargetData`.\n\t */\n\taccessor: string | ((entry: RotationTableEntry) => RotationTargetData)\n}\n\nexport interface RotationNotes {\n\t/**\n\t * Displayed header\n\t */\n\theader: React.ReactNode\n\t/**\n\t * Accessor can either be a string, in which case this will resolve to the value assigned to the same key in the `targetsData` field in each entry,\n\t * or a function resolving the entry to the `RotationTargetData`.\n\t */\n\taccessor: string | ((entry: RotationTableEntry) => React.ReactNode)\n}\n\n/**\n * Determines how a rotation target gets highlighted (negative = red, positive = green)\n */\nexport enum RotationTargetOutcome { NEGATIVE, NEUTRAL, POSITIVE }\n\nexport interface RotationTargetData {\n\t/**\n\t * Expected target number\n\t */\n\texpected?: number\n\t/**\n\t * Recorded number\n\t */\n\tactual: number\n\t/**\n\t * Optional function to override the default positive/negative highlighting\n\t */\n\ttargetComparator?: (actual: number, expected?: number) => RotationTargetOutcome\n}\n\nexport interface RotationTableTargetData {\n\t/**\n\t * Identifier to Target Data mapping\n\t */\n\t[id: string]: RotationTargetData\n}\n\nexport interface RotationTableNotesMap {\n\t/**\n\t * Identifier to Notes mapping\n\t */\n\t[id: string]: React.ReactNode\n}\n\nexport interface RotationTableEntry {\n\t/**\n\t * Start point relative to fight start\n\t */\n\tstart: number\n\t/**\n\t * End point relative to fight start\n\t */\n\tend: number\n\t/**\n\t * Map of pre calculated target data\n\t */\n\ttargetsData?: RotationTableTargetData\n\t/**\n\t * Map of pre calculated target data\n\t */\n\tnotesMap?: RotationTableNotesMap\n\t/**\n\t * Rotation to display that occurs during this entry\n\t */\n\trotation: RotationEvent[]\n}\n\ninterface RotationTableProps {\n\t/**\n\t * List of Targets to display, consisting of the displayed header and the accessor to resolve the actual and expected values\n\t */\n\ttargets?: RotationTarget[]\n\t/**\n\t * List of Notes to display, consisting of the displayed header and the accessor to resolve the value\n\t */\n\tnotes?: RotationNotes[]\n\t/**\n\t * List of table entries, consisting of a time frame and the rotation, with optionally a pre calculated target data\n\t */\n\tdata: RotationTableEntry[]\n\t/**\n\t * Optional Callback to display the jump to time button.\n\t * Usually this should be a pass through of the `Timeline.show` function.\n\t * @param start\n\t * @param end\n\t * @param scrollTo\n\t */\n\tonGoto?: (start: number, end: number, scrollTo?: boolean) => void\n\t/**\n\t * Optional property to provide a JSX.Element (translation tag) for the header value.\n\t * Defaults to \"Rotation\"\n\t */\n\theaderTitle?: JSX.Element\n}\n\ninterface RotationTableRowProps {\n\t/**\n\t * List of Targets to display, consisting of the displayed header and the accessor to resolve the actual and expected values\n\t */\n\ttargets: RotationTarget[]\n\t/**\n\t * List of Notes to display, consisting of the displayed header and the accessor to resolve the value\n\t */\n\tnotes: RotationNotes[]\n\t/**\n\t * Optional Callback to display the jump to time button.\n\t * Usually this should be a pass through of the `Timeline.show` function.\n\t * @param start\n\t * @param end\n\t * @param scrollTo\n\t */\n\tonGoto?: (start: number, end: number, scrollTo?: boolean) => void\n}\n\nexport class RotationTable extends React.Component<RotationTableProps> {\n\tstatic defaultTargetComparator(actual: number, expected?: number): RotationTargetOutcome {\n\t\tif (!isDefined(expected)) {\n\t\t\treturn RotationTargetOutcome.NEUTRAL\n\t\t}\n\n\t\tif (actual >= expected) {\n\t\t\treturn RotationTargetOutcome.POSITIVE\n\t\t}\n\n\t\treturn RotationTargetOutcome.NEGATIVE\n\t}\n\n\tstatic targetAccessorResolver = (entry: RotationTableEntry, target: RotationTarget): RotationTargetData => {\n\t\tif (typeof target.accessor === 'string' && entry.targetsData != null) {\n\t\t\treturn entry.targetsData[target.accessor]\n\t\t}\n\n\t\tif (typeof target.accessor === 'function') {\n\t\t\treturn target.accessor(entry)\n\t\t}\n\n\t\treturn {\n\t\t\tactual: 0,\n\t\t\texpected: 0,\n\t\t}\n\t}\n\n\tstatic notesAccessorResolver = (entry: RotationTableEntry, note: RotationNotes): React.ReactNode => {\n\t\tif (typeof note.accessor === 'string' && entry.notesMap != null) {\n\t\t\treturn entry.notesMap[note.accessor]\n\t\t}\n\n\t\tif (typeof note.accessor === 'function') {\n\t\t\treturn note.accessor(entry)\n\t\t}\n\n\t\treturn null\n\t}\n\n\tstatic TargetCell = ({actual, expected, targetComparator}: RotationTargetData) => {\n\t\tif (targetComparator === undefined) {\n\t\t\ttargetComparator = RotationTable.defaultTargetComparator\n\t\t}\n\t\tconst targetOutcome = targetComparator(actual, expected)\n\n\t\treturn <Table.Cell\n\t\t\ttextAlign=\"center\"\n\t\t\tpositive={targetOutcome === RotationTargetOutcome.POSITIVE}\n\t\t\tnegative={targetOutcome === RotationTargetOutcome.NEGATIVE}\n\t\t>\n\t\t\t{actual}/{expected === undefined ? '-' : expected}\n\t\t</Table.Cell>\n\t}\n\n\tstatic Row = ({onGoto, targets, notes, notesMap, start, end, targetsData, rotation}: RotationTableRowProps & RotationTableEntry) =>\n\t\t<Table.Row>\n\t\t\t<Table.Cell textAlign=\"center\">\n\t\t\t\t<span style={{marginRight: 5}}>{formatDuration(start, {secondPrecision: 0})}</span>\n\t\t\t\t{typeof onGoto === 'function' && <Button\n\t\t\t\t\tcircular\n\t\t\t\t\tcompact\n\t\t\t\t\tsize=\"mini\"\n\t\t\t\t\ticon=\"time\"\n\t\t\t\t\tonClick={() => onGoto(start, end)}\n\t\t\t\t/>}\n\t\t\t</Table.Cell>\n\t\t\t{\n\t\t\t\ttargets\n\t\t\t\t\t.map(target => RotationTable.targetAccessorResolver({start, end, targetsData, rotation}, target))\n\t\t\t\t\t.map((targetEntry, i) => <RotationTable.TargetCell key={`target_${i}`} {...targetEntry}/>)\n\t\t\t}\n\t\t\t<Table.Cell>\n\t\t\t\t<Rotation events={rotation}/>\n\t\t\t</Table.Cell>\n\t\t\t{\n\t\t\t\tnotes\n\t\t\t\t\t.map(note => RotationTable.notesAccessorResolver({start, end, targetsData, notesMap, rotation}, note))\n\t\t\t\t\t.map((noteEntry, i) =>\n\t\t\t\t\t\t<Table.Cell\n\t\t\t\t\t\t\tkey={`notes_${i}`}\n\t\t\t\t\t\t\ttextAlign=\"center\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{noteEntry}\n\t\t\t\t\t\t</Table.Cell>,\n\t\t\t\t\t)\n\t\t\t}\n\t\t</Table.Row>\n\n\toverride render(): React.ReactNode {\n\t\tconst {\n\t\t\ttargets,\n\t\t\tnotes,\n\t\t\tdata,\n\t\t\tonGoto,\n\t\t\theaderTitle,\n\t\t} = this.props\n\n\t\treturn <Table compact unstackable celled>\n\t\t\t<Table.Header>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.HeaderCell collapsing>\n\t\t\t\t\t\t<strong><Trans id=\"core.ui.rotation-table.header.time\">Time</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t{\n\t\t\t\t\t\t(targets || []).map((target, i) =>\n\t\t\t\t\t\t\t<Table.HeaderCell key={`target_header_${i}`} textAlign=\"center\" collapsing>\n\t\t\t\t\t\t\t\t<strong>{target.header}</strong>\n\t\t\t\t\t\t\t</Table.HeaderCell>,\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong>{(headerTitle)? headerTitle : <Trans id=\"core.ui.rotation-table.header.rotation\">Rotation</Trans>}</strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t{\n\t\t\t\t\t\t(notes || []).map((note, i) =>\n\t\t\t\t\t\t\t<Table.HeaderCell key={`note_header_${i}`} textAlign=\"center\" collapsing>\n\t\t\t\t\t\t\t\t<strong>{note.header}</strong>\n\t\t\t\t\t\t\t</Table.HeaderCell>,\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{\n\t\t\t\t\tdata.map((entry) =>\n\t\t\t\t\t\t<RotationTable.Row key={entry.start} onGoto={onGoto} targets={targets || []} notes={notes || []} {...entry}/>,\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t</Table.Body>\n\t\t</Table>\n\t}\n}\n","import {MessageDescriptor} from '@lingui/core'\nimport {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport TransMarkdown from 'components/ui/TransMarkdown'\nimport {BASE_GCD} from 'data/CONSTANTS'\nimport React from 'react'\nimport {Report} from 'report'\nimport {Analyser} from '../Analyser'\nimport {dependency} from '../Injectable'\nimport {Data} from './Data'\nimport {SpeedAdjustments} from './SpeedAdjustments'\nimport {SimpleStatistic, Statistics} from './Statistics'\n\nconst estimateHelp: Record<Report['meta']['source'] | '__all', MessageDescriptor> = {\n\t__all: t('core.gcd.no-statistics.v2')`This GCD recast is an *estimate*, and may be incorrect. If it is reporting a GCD recast *longer* than reality, you likely need to focus on keeping your GCD rolling.`,\n\tlegacyFflogs: t('core.gcd.estimate-help.fflogs')`Precise attribute values are only available from FF Logs for the player who logged the report in ACT.`,\n}\n\nexport class GlobalCooldown extends Analyser {\n\tstatic override handle = 'gcd'\n\n\t@dependency private data!: Data\n\t@dependency private statistics!: Statistics\n\t@dependency private speedAdjustments!: SpeedAdjustments\n\n\toverride initialise() {\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\t/**\n\t * Get the base recast time of the parsed actor's GCD cooldown group, in milliseconds.\n\t * The value returned from this function _may_ be an estimate - check {@link GlobalCooldown.isEstimated}\n\t * to see if it is.\n\t */\n\tpublic getDuration() {\n\t\treturn this.speedAdjustments.getAdjustedDuration({duration: BASE_GCD})\n\t}\n\n\t/** Returns whether the GCD duration calculated by this module is an estimate. */\n\tpublic isEstimated() {\n\t\treturn this.speedAdjustments.isAdjustmentEstimated()\n\t}\n\n\tprivate onComplete() {\n\t\tconst estimated = this.isEstimated()\n\n\t\tthis.statistics.add(new SimpleStatistic({\n\t\t\ttitle: estimated\n\t\t\t\t? <Trans id=\"core.gcd.estimated-gcd\">Estimated GCD</Trans>\n\t\t\t\t: <Trans id=\"core.gcd.gcd\">GCD Recast</Trans>,\n\t\t\ticon: this.data.actions.ATTACK.icon,\n\t\t\tvalue: this.parser.formatDuration(this.getDuration()),\n\t\t\tinfo: estimated ? <>\n\t\t\t\t<TransMarkdown source={estimateHelp.__all}/>\n\t\t\t\t<TransMarkdown source={estimateHelp[this.parser.report.meta.source]}/>\n\t\t\t</> : undefined,\n\t\t}))\n\t}\n}\n","import {MessageDescriptor} from '@lingui/core'\nimport {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport ACTIONS from 'data/ACTIONS'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport {Timeline} from 'parser/core/modules/Timeline'\nimport React from 'react'\nimport {Button, Table} from 'semantic-ui-react'\nimport {filter} from '../filter'\nimport {dependency} from '../Injectable'\nimport CastTime from './CastTime'\nimport {Data} from './Data'\n\ninterface SeverityTiers {\n\t[key: number]: number\n}\n\n// used for timeline viewing by giving you a nice 30s window\nconst TIMELINE_UPPER_MOD: number = 30000\n\nexport class Interrupts extends Analyser {\n\tstatic override handle: string = 'interrupts'\n\tstatic override title: MessageDescriptor = t('core.interrupts.title')`Interrupted Casts`\n\tstatic override debug: boolean = false\n\n\t@dependency private castTime!: CastTime\n\t@dependency protected data!: Data\n\t@dependency private suggestions!: Suggestions\n\t@dependency private timeline!: Timeline\n\n\tprivate currentCast?: Events['prepare']\n\tprivate droppedCasts: Array<Events['interrupt']> = []\n\tprivate missedTimeMS: number = 0\n\n\t/**\n\t * Implementing modules MAY override the icon to be used for the suggestion,\n\t * though, let's face it – interject is pretty much the perfect one.\n\t */\n\tprotected icon: string = ACTIONS.INTERJECT.icon\n\n\t/**\n\t * Implementing modules MAY override the severity tiers for interrupted casts\n\t */\n\tprotected severity: SeverityTiers = {\n\t\t2: SEVERITY.MEDIUM,\n\t\t5: SEVERITY.MAJOR,\n\t}\n\n\t/**\n\t * Implementing modules MAY override the default suggestion text\n\t */\n\tprotected suggestionContent: JSX.Element = <Trans id=\"core.interrupts.suggestion.content\">\n\t\tAvoid interrupting casts by either prepositioning yourself or utilizing slidecasting where possible. If you have to move, try to save an instant cast to keep your GCD rolling.\n\t</Trans>\n\n\t/**\n\t * Implementing modules MAY override this function to provide specific text if they wish for the 'why'\n\t * The default is to complain that they missed a number of casts and give them an estimate\n\t * @param missedCasts The array of missed casts\n\t * @param missedTime The approximate time wasted via interrupts\n\t * @returns JSX that conforms to your suggestion content\n\t */\n\tprotected suggestionWhy(missedCasts: Array<Events['interrupt']>, missedTime: number): JSX.Element {\n\t\treturn <Trans id=\"core.interrupts.suggestion.why\">You missed { missedCasts.length } casts (approximately { this.parser.formatDuration(missedTime) } of total casting time) due to interruption.</Trans>\n\t}\n\n\t/**\n\t * Implementing modules MAY override this function to provide alternative output if there's 0 interrupted\n\t * casts (in lieu of an empty table)\n\t */\n\tprotected noInterruptsOutput(): JSX.Element | undefined {\n\t\treturn undefined\n\t}\n\n\tpublic override initialise() {\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.type('prepare')\n\t\t\t\t.source(this.parser.actor.id),\n\t\t\tthis.onBeginCast\n\t\t)\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.type('interrupt')\n\t\t\t\t.source(this.parser.actor.id),\n\t\t\tthis.pushDropCasts\n\t\t)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onBeginCast(event: Events['prepare']) {\n\t\tthis.currentCast = event\n\t}\n\n\tprivate pushDropCasts(event: Events['interrupt']) {\n\t\tif (this.currentCast == null) { return }\n\n\t\tconst castTime = this.castTime.forAction(this.currentCast.action, this.currentCast.timestamp) ?? 0\n\n\t\tthis.missedTimeMS += Math.min(\n\t\t\tevent.timestamp - (this.currentCast?.timestamp ?? this.parser.currentEpochTimestamp),\n\t\t\tcastTime\n\t\t)\n\t\tthis.droppedCasts.push(event)\n\t\tthis.currentCast = undefined\n\t}\n\n\tprivate onComplete() {\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.icon,\n\t\t\ttiers: this.severity,\n\t\t\tvalue: this.droppedCasts.length,\n\t\t\tcontent: this.suggestionContent,\n\t\t\twhy: this.suggestionWhy(this.droppedCasts, this.missedTimeMS),\n\t\t}))\n\t}\n\n\toverride output() {\n\t\tif (this.droppedCasts.length === 0) {\n\t\t\treturn this.noInterruptsOutput()\n\t\t}\n\n\t\treturn <Table compact unstackable celled collapsing>\n\t\t\t<Table.Header>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.HeaderCell collapsing>\n\t\t\t\t\t\t<strong><Trans id=\"core.interrupts.table.time\">Time</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong><Trans id=\"core.interrupts.table.cast\">Cast</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{\n\t\t\t\t\tthis.droppedCasts.map((cast) => {\n\t\t\t\t\t\tconst action = this.data.getAction(cast.action)\n\t\t\t\t\t\treturn <Table.Row key={cast.timestamp}>\n\t\t\t\t\t\t\t<Table.Cell textAlign=\"center\">\n\t\t\t\t\t\t\t\t<span style={{marginRight: 5}}>{this.parser.formatEpochTimestamp(cast.timestamp)}</span>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tcircular\n\t\t\t\t\t\t\t\t\tcompact\n\t\t\t\t\t\t\t\t\tsize=\"mini\"\n\t\t\t\t\t\t\t\t\ticon=\"time\"\n\t\t\t\t\t\t\t\t\tonClick={() => this.timeline.show(cast.timestamp - this.parser.pull.timestamp, cast.timestamp - this.parser.pull.timestamp + TIMELINE_UPPER_MOD)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t<Table.Cell>\n\t\t\t\t\t\t\t\t<ActionLink {...action} />\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t</Table.Row>\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</Table.Body>\n\t\t</Table>\n\n\t}\n}\n","import {Status, StatusKey} from 'data/STATUSES'\nimport {Events} from 'event'\nimport {ensureArray} from 'utilities'\nimport {Analyser} from '../Analyser'\nimport {dependency} from '../Injectable'\nimport {Actor, StatusEvent} from './Actors'\nimport {Data} from './Data'\nimport {Invulnerability} from './Invulnerability'\n\ninterface Edge {\n\tside: 'apply' | 'remove'\n\ttimestamp: number\n}\n\nexport class Statuses extends Analyser {\n\tstatic override handle = 'statuses'\n\tstatic override debug = false\n\n\t@dependency private readonly data!: Data\n\t@dependency private readonly invulnerability!: Invulnerability\n\n\t/**\n\t * Calculate the total uptime of the specified status across allspecified actors.\n\t * @param statusSpecifier Status to calculate uptime of.\n\t * @param targetSpecifier Target(s) that should be checked for the status.\n\t * @param source Source of statuses to filter by. Defaults to the parsed actor.\n\t */\n\tgetUptime(\n\t\tstatusSpecifier: StatusKey | Status,\n\t\ttargetSpecifier: Actor | Actor[],\n\t\tsource = this.parser.actor\n\t) {\n\t\t// Resolve arguments.\n\t\tconst status = typeof statusSpecifier === 'string'\n\t\t\t? this.data.statuses[statusSpecifier]\n\t\t\t: statusSpecifier\n\n\t\tconst targets = ensureArray(targetSpecifier)\n\n\t\t// Collect all the status history for the specified status/target/source combo.\n\t\tconst edges = targets.flatMap(target => this.edgesForActor(\n\t\t\ttarget,\n\t\t\ttarget.statusHistory.get(status.id)?.get(source.id) ?? []\n\t\t))\n\n\t\t// Edges are mapped from multiple potential targets; interlace by sorting by timestamp.\n\t\tedges.sort((a, b) => a.timestamp - b.timestamp)\n\n\t\t// Sum time when any of the specified targets had the status.\n\t\tconst meta = {uptime: 0, depth: 0, application: 0}\n\t\tfor (const edge of edges) {\n\t\t\tif (edge.side === 'apply') {\n\t\t\t\tif (meta.depth === 0) {\n\t\t\t\t\tmeta.application = edge.timestamp\n\t\t\t\t}\n\t\t\t\tmeta.depth ++\n\n\t\t\t} else {\n\t\t\t\tmeta.depth --\n\t\t\t\tif (meta.depth === 0) {\n\t\t\t\t\tmeta.uptime += edge.timestamp - meta.application\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.debug(`Status ${status.name} ${edge.side} at ${this.ft(edge.timestamp)}, depth=${meta.depth}`)\n\t\t}\n\n\t\treturn meta.uptime\n\t}\n\n\tprivate edgesForActor(target: Actor, events: StatusEvent[]) {\n\t\t// We can safely assume status events from an actor will alternate between apply and remove.\n\t\tconst edges: Edge[] = []\n\t\tlet apply: Events['statusApply'] | undefined\n\t\tlet refresh: Events['statusApply'] | undefined\n\n\t\tfor (const event of events) {\n\t\t\t// Track the initial application and refreshes.\n\t\t\tif (event.type === 'statusApply') {\n\t\t\t\tapply ??= event\n\t\t\t\trefresh = event\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif (apply == null) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Window has been closed, merge any edges in.\n\t\t\tedges.push(...this.splitRangeForInvulns(\n\t\t\t\ttarget,\n\t\t\t\tapply.timestamp,\n\t\t\t\tevent.timestamp\n\t\t\t))\n\t\t\tapply = undefined\n\t\t}\n\n\t\t// If we've got a dangling apply, build edges for it.\n\t\tif (apply != null) {\n\t\t\t// Try to find a reasonable remove time for the status, if it has a duration.  Cap to the end of the fight.\n\t\t\tconst statusDuration = this.data.getStatus(apply.status)?.duration\n\t\t\tconst remove = statusDuration == null\n\t\t\t\t? this.parser.currentEpochTimestamp\n\t\t\t\t: Math.min((refresh ?? apply).timestamp + statusDuration, this.parser.currentEpochTimestamp)\n\n\t\t\tedges.push(...this.splitRangeForInvulns(\n\t\t\t\ttarget,\n\t\t\t\tapply.timestamp,\n\t\t\t\tremove,\n\t\t\t))\n\t\t}\n\n\t\treturn edges\n\t}\n\n\tprivate splitRangeForInvulns(target: Actor, apply: number, remove: number): Edge[] {\n\t\tlet range = {apply, remove}\n\t\tconst finalRanges = [range]\n\n\t\t// Get the invuln windows that occured during this range\n\t\tconst invulns = this.invulnerability.getWindows({\n\t\t\tstart: apply,\n\t\t\tend: remove,\n\t\t\tactorFilter: actor => actor.kind === target.kind,\n\t\t\ttypes: ['invulnerable'],\n\t\t})\n\n\t\tfor (const invuln of invulns) {\n\t\t\t// Invuln clipped start of range.\n\t\t\tif (invuln.start < range.apply && invuln.end >= range.apply) {\n\t\t\t\tthis.debug(`Start clip, [${this.ft(range.apply)},${this.ft(range.remove)}] -> [${this.ft(invuln.end)},${this.ft(range.remove)}]`)\n\n\t\t\t\trange.apply = invuln.end\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Invuln clipped end of range.\n\t\t\tif (invuln.start <= range.remove && invuln.end > range.remove) {\n\t\t\t\tthis.debug(`End clip, [${this.ft(range.apply)},${this.ft(range.remove)}] -> [${this.ft(range.apply)},${this.ft(invuln.start)}]`)\n\n\t\t\t\trange.remove = invuln.start\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Everything else should be a range split, sanity check.\n\t\t\tif (invuln.start < range.apply || invuln.end > range.remove) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tthis.debug(`Split [${this.ft(range.apply)},${this.ft(range.remove)}] -> [${this.ft(range.apply)},${this.ft(invuln.start)}], [${this.ft(invuln.end)},${this.ft(range.remove)}]`)\n\n\t\t\t// Split the range into two around the invuln.\n\t\t\tconst previousRange = range\n\t\t\trange = {...range}\n\t\t\tfinalRanges.push(range)\n\n\t\t\tpreviousRange.remove = invuln.start\n\t\t\trange.apply = invuln.end\n\t\t}\n\n\t\t// Map the ranges into edges.\n\t\treturn finalRanges.flatMap(range => [\n\t\t\t{side: 'apply', timestamp: range.apply},\n\t\t\t{side: 'remove', timestamp: range.remove},\n\t\t] as const)\n\t}\n\n\t// Small utility for formatting timestamps, as we do it a _lot_ in debug messages\n\tprivate ft = (timestamp: number) => this.parser.formatEpochTimestamp(timestamp, 1)\n}\n","import {t} from '@lingui/macro'\nimport {Trans, Plural} from '@lingui/react'\nimport NormalisedMessage from 'components/ui/NormalisedMessage'\nimport Rotation from 'components/ui/Rotation'\nimport {Action} from 'data/ACTIONS'\nimport {BASE_GCD} from 'data/CONSTANTS'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport CastTime from 'parser/core/modules/CastTime'\nimport {Data} from 'parser/core/modules/Data'\nimport {Invulnerability} from 'parser/core/modules/Invulnerability'\nimport Suggestions, {TieredSuggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport React, {ReactNode} from 'react'\nimport {Accordion} from 'semantic-ui-react'\nimport {matchClosestLower} from 'utilities'\n\nconst CAST_TIME_MAX_WEAVES = {\n\t0: 2,\n\t1000: 1,\n\t2500: 0,\n}\nconst REDUCE_MAX_WEAVES_RECAST_BELOW = 1800\nconst DEFAULT_MAX_WEAVES = 2\n\nconst WEAVING_SEVERITY = {\n\t1: SEVERITY.MEDIUM,\n\t5: SEVERITY.MAJOR,\n}\n\nexport interface Weave {\n\tleadingGcdEvent?: Events['action'],\n\ttrailingGcdEvent: Events['action'],\n\tgcdTimeDiff: number,\n\tweaves: Array<Events['action']>,\n}\n\nexport class Weaving extends Analyser {\n\tstatic override handle = 'weaving'\n\n\t@dependency protected castTime!: CastTime\n\t@dependency protected data!: Data\n\t@dependency private invulnerability!: Invulnerability\n\t@dependency protected suggestions!: Suggestions\n\n\tstatic override title = t('core.weaving.title')`Weaving Issues`\n\n\tprotected suggestionIcon: string = 'https://xivapi.com/i/001000/001785.png' // WVR Focused Synth\n\n\tprotected moduleLink = (\n\t\t<a style={{cursor: 'pointer'}} onClick={() => this.parser.scrollTo(Weaving.handle)}>\n\t\t\t<NormalisedMessage message={Weaving.title}/>\n\t\t</a>\n\t)\n\tprotected suggestionContent: ReactNode = <Trans id=\"core.weaving.content\">\n\t\tAvoid weaving more actions than you have time for in a single GCD window. Doing so will delay your next GCD, reducing possible uptime. Check the {this.moduleLink} module below for more detailed analysis.\n\t</Trans>\n\n\tprotected severity = WEAVING_SEVERITY\n\n\tprivate weaves: Array<Events['action']> = []\n\tprivate ongoingCastEvent?: Events['prepare']\n\tprivate leadingGcdEvent?: Events['action']\n\tprivate trailingGcdEvent?: Events['action']\n\tprivate badWeaves: Weave[] = []\n\n\toverride initialise() {\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\n\t\tthis.addEventHook(playerFilter.type('prepare'), this.onBeginCast)\n\t\tthis.addEventHook(playerFilter.type('action'), this.onCast)\n\t\tthis.addEventHook(filter<Event>().type('complete'), this.onComplete)\n\t\tthis.addEventHook(filter<Event>().type('death'), this.clearWeave)\n\t}\n\n\tprivate onBeginCast(event: Events['prepare']) {\n\t\tthis.ongoingCastEvent = event\n\t}\n\n\tprivate onCast(event: Events['action']) {\n\t\tconst action = this.data.getAction(event.action)\n\n\t\t// If the action is an auto, just ignore it\n\t\tif (!action || action.autoAttack) {\n\t\t\treturn\n\t\t}\n\n\t\t// If it's not a GCD, just bump the weave count\n\t\tif (this.isOgcd(action)) {\n\t\t\tthis.weaves.push(event)\n\t\t\treturn\n\t\t}\n\n\t\tif (this.ongoingCastEvent && this.ongoingCastEvent.action === action.id) {\n\t\t\t// This event is the end of a GCD cast\n\t\t\tthis.trailingGcdEvent = {\n\t\t\t\t...event,\n\t\t\t\t// Override the timestamp of the GCD with when its cast began\n\t\t\t\ttimestamp: this.ongoingCastEvent.timestamp,\n\t\t\t}\n\t\t} else {\n\t\t\t// This event was an instant GCD (or log missed the cast starting)\n\t\t\tthis.trailingGcdEvent = event\n\t\t}\n\n\t\t// Always reset the ongoing cast\n\t\tthis.ongoingCastEvent = undefined\n\n\t\t// Throw the current state onto the history\n\t\tthis.saveIfBad()\n\n\t\t// Reset\n\t\tthis.leadingGcdEvent = this.trailingGcdEvent\n\t\tthis.weaves = []\n\t}\n\n\tprivate onComplete() {\n\t\t// If there's been at least one gcd, run a cleanup on any remnant data\n\t\tif (this.leadingGcdEvent) {\n\t\t\tthis.saveIfBad()\n\t\t}\n\n\t\t// Few triples is medium, any more is major\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.suggestionIcon,\n\t\t\tcontent: this.suggestionContent,\n\t\t\twhy: <Plural\n\t\t\t\tid=\"core.weaving.why\"\n\t\t\t\tvalue={this.badWeaves.length}\n\t\t\t\t_1=\"# instance of incorrect weaving\"\n\t\t\t\tother=\"# instances of incorrect weaving\"\n\t\t\t/>,\n\t\t\ttiers: this.severity,\n\t\t\tvalue: this.badWeaves.length,\n\t\t}))\n\t}\n\n\tprivate saveIfBad() {\n\t\tif (this.trailingGcdEvent == null) { return }\n\n\t\tconst leadingTimestamp = this.leadingGcdEvent?.timestamp ?? this.parser.pull.timestamp\n\t\tconst gcdTimeDiff = this.trailingGcdEvent.timestamp\n\t\t\t- leadingTimestamp\n\t\t\t- this.invulnerability.getDuration({\n\t\t\t\tstart: leadingTimestamp,\n\t\t\t\tend: this.trailingGcdEvent.timestamp,\n\t\t\t})\n\n\t\tconst weave: Weave = {\n\t\t\tleadingGcdEvent: this.leadingGcdEvent,\n\t\t\ttrailingGcdEvent: this.trailingGcdEvent,\n\t\t\tgcdTimeDiff,\n\t\t\tweaves: this.weaves,\n\t\t}\n\n\t\tif (weave.weaves.length === 0) {\n\t\t\treturn\n\t\t}\n\n\t\tif (this.isBadWeave(weave)) {\n\t\t\tthis.badWeaves.push(weave)\n\t\t}\n\t}\n\n\tprivate isOgcd(action: Action) {\n\t\treturn !action.onGcd && !action.autoAttack\n\t}\n\n\tprivate isBadWeave(weave: Weave) {\n\t\t// Calc. the no. of weaves - we're ignoring any made while the boss is untargetable, and events that happened before the pull\n\t\tconst weaveCount = weave.weaves.filter(\n\t\t\tevent => true\n\t\t\t\t&& !this.invulnerability.isActive({timestamp: event.timestamp, types: ['untargetable']})\n\t\t\t\t&& event.timestamp >= this.parser.pull.timestamp,\n\t\t).length\n\n\t\tconst recast = ((weave.leadingGcdEvent != null) ? this.castTime.recastForEvent(weave.leadingGcdEvent) : undefined) ?? BASE_GCD\n\t\t// Check the downtime-adjusted GCD time difference for this weave - do not treat multiple weaves during downtime as bad weaves\n\t\treturn weave.gcdTimeDiff > recast && weaveCount > this.getMaxWeaves(weave)\n\t}\n\n\tprivate clearWeave() {\n\t\t// prompts saving any existing weaves if they're bad, and reset\n\t\tif (this.weaves.length > 0) {\n\t\t\tthis.saveIfBad()\n\t\t}\n\n\t\t// remove existing weaves and pretend the next leadingGcdEvent is like a fresh start (which I guess it is)\n\t\tthis.weaves = []\n\t\tthis.leadingGcdEvent = undefined\n\t}\n\n\t/**\n\t * Implementing classes MAY override this in order to provide custom logic for determining the number of max weaves, given the leading GCD Event\n\t * @param event The Action Event of the leading GCD.  Will be undefined for the first GCD of the pull - default behavior is to allow 2 weaves in case of missing pre-pull action\n\t * @returns number of allowed weaves after the leading GCD before flagging as bad weaving\n\t */\n\tprotected getMaxWeaves(weave: Weave): number {\n\t\tif (weave.leadingGcdEvent == null) {\n\t\t\treturn DEFAULT_MAX_WEAVES\n\t\t}\n\n\t\tconst castTime = this.castTime.forEvent(weave.leadingGcdEvent)\n\t\tif (castTime == null)  {\n\t\t\treturn DEFAULT_MAX_WEAVES\n\t\t}\n\n\t\tconst maxWeaves = matchClosestLower(CAST_TIME_MAX_WEAVES, castTime) ?? DEFAULT_MAX_WEAVES\n\t\tconst recastTime = this.castTime.recastForEvent(weave.leadingGcdEvent) ?? BASE_GCD\n\n\t\treturn maxWeaves - (recastTime < REDUCE_MAX_WEAVES_RECAST_BELOW ? 1 : 0)\n\t}\n\n\toverride output() {\n\t\tif (this.badWeaves.length === 0) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst panels = this.badWeaves.map(item => ({\n\t\t\tkey: item.leadingGcdEvent?.timestamp ?? this.parser.pull.timestamp,\n\t\t\ttitle: {\n\t\t\t\tcontent: <>\n\t\t\t\t\t<strong>{this.parser.formatEpochTimestamp(item.leadingGcdEvent?.timestamp ?? this.parser.pull.timestamp)}</strong>\n\t\t\t\t\t&nbsp;-&nbsp;\n\t\t\t\t\t<Plural\n\t\t\t\t\t\tid=\"core.weaving.panel-count\"\n\t\t\t\t\t\tvalue={item.weaves.length}\n\t\t\t\t\t\t_1=\"# weave\"\n\t\t\t\t\t\tother=\"# weaves\"\n\t\t\t\t\t/>\n\t\t\t\t\t&nbsp;(\n\t\t\t\t\t{this.parser.formatDuration(item.gcdTimeDiff)}\n\t\t\t\t\t&nbsp;\n\t\t\t\t\t<Trans id=\"core.weaving.between-gcds\">between GCDs</Trans>\n\t\t\t\t\t)\n\t\t\t\t</>,\n\t\t\t},\n\t\t\tcontent: {\n\t\t\t\tcontent: <Rotation events={[\n\t\t\t\t\t...(item.leadingGcdEvent != null ? [item.leadingGcdEvent] : []),\n\t\t\t\t\t...item.weaves,\n\t\t\t\t]}/>,\n\t\t\t},\n\t\t}))\n\n\t\treturn <Accordion\n\t\t\texclusive={false}\n\t\t\tpanels={panels}\n\t\t\tstyled\n\t\t\tfluid\n\t\t/>\n\t}\n}\n","import {AoEUsages as CoreAoE} from 'parser/core/modules/AoEUsages'\n\nexport class AoEUsages extends CoreAoE {\n\tsuggestionIcon = this.data.actions.FOUL.icon\n\n\ttrackedActions = [\n\t\t{\n\t\t\taoeAction: this.data.actions.FOUL,\n\t\t\tstActions: [this.data.actions.XENOGLOSSY],\n\t\t\tminTargets: 2,\n\t\t},\n\t\t{\n\t\t\taoeAction: this.data.actions.FLARE,\n\t\t\tstActions: [this.data.actions.DESPAIR],\n\t\t\tminTargets: 3,\n\t\t},\n\t\t{\n\t\t\taoeAction: this.data.actions.THUNDER_IV,\n\t\t\tstActions: [this.data.actions.THUNDER_III],\n\t\t\tminTargets: 2,\n\t\t},\n\t\t{\n\t\t\taoeAction: this.data.actions.BLIZZARD_II,\n\t\t\tstActions: [this.data.actions.BLIZZARD_III],\n\t\t\tminTargets: 3,\n\t\t},\n\t\t{\n\t\t\taoeAction: this.data.actions.HIGH_BLIZZARD_II,\n\t\t\tstActions: [this.data.actions.BLIZZARD_III],\n\t\t\tminTargets: 3,\n\t\t},\n\t\t{\n\t\t\taoeAction: this.data.actions.FIRE_II,\n\t\t\tstActions: [this.data.actions.FIRE_III, this.data.actions.FIRE_IV],\n\t\t\tminTargets: 3,\n\t\t},\n\t\t{\n\t\t\taoeAction: this.data.actions.HIGH_FIRE_II,\n\t\t\tstActions: [this.data.actions.FIRE_III, this.data.actions.FIRE_IV],\n\t\t\tminTargets: 3,\n\t\t},\n\t\t{\n\t\t\taoeAction: this.data.actions.FREEZE,\n\t\t\tstActions: [this.data.actions.BLIZZARD_IV],\n\t\t\tminTargets: 3,\n\t\t},\n\t]\n}\n","import {Event} from 'event'\nimport {filter} from 'parser/core/filter'\nimport CoreCastTime from 'parser/core/modules/CastTime'\n\nexport class CastTime extends CoreCastTime {\n\tprivate tcIndex: number | null = null\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tconst triplecastFilter = filter<Event>()\n\t\t\t.target(this.parser.actor.id)\n\t\t\t.status(this.data.statuses.TRIPLECAST.id)\n\n\t\tthis.addEventHook(triplecastFilter.type('statusApply'), this.onApplyTriplecast)\n\t\tthis.addEventHook(triplecastFilter.type('statusRemove'), this.onRemoveTriplecast)\n\t}\n\n\tprivate onApplyTriplecast(): void {\n\t\tthis.onRemoveTriplecast() // Close the previous stack's adjustment before starting a new one\n\t\tthis.tcIndex = this.setInstantCastAdjustment()\n\t}\n\n\tprivate onRemoveTriplecast(): void {\n\t\tthis.reset(this.tcIndex)\n\t\tthis.tcIndex = null\n\t}\n}\n","import {Defensives as CoreDefensives} from 'parser/core/modules/Defensives'\n\nexport class Defensives extends CoreDefensives {\n\tprotected override trackedDefensives = [this.data.actions.MANAWARD]\n}\n","import {ActionKey} from 'data/ACTIONS'\n\nexport const FIRE_SPELLS: ActionKey[] = [\n\t'FIRE_I',\n\t'FIRE_II',\n\t'FIRE_III',\n\t'FIRE_IV',\n\t'FLARE',\n\t'DESPAIR',\n\t'HIGH_FIRE_II',\n]\n\n/** Defining these lists separately since Gauge will need to treat the spells that must do damage to affect gauge differently from Umbral Soul */\nexport const ICE_SPELLS_UNTARGETED: ActionKey[] = [\n\t'UMBRAL_SOUL',\n]\nexport const ICE_SPELLS_TARGETED: ActionKey[] = [\n\t'BLIZZARD_I',\n\t'BLIZZARD_II',\n\t'BLIZZARD_III',\n\t'BLIZZARD_IV',\n\t'FREEZE',\n\t'HIGH_BLIZZARD_II',\n]\nexport const ICE_SPELLS: ActionKey[] = [\n\t...ICE_SPELLS_UNTARGETED,\n\t...ICE_SPELLS_TARGETED,\n]\n\n","//I've heard it's cool to build your own job gauge.\nimport {t} from '@lingui/macro'\nimport {Trans, Plural} from '@lingui/react'\nimport Color from 'color'\nimport {DataLink} from 'components/ui/DbLink'\nimport {ActionKey} from 'data/ACTIONS'\nimport {JOBS} from 'data/JOBS'\nimport {Event, Events, FieldsBase} from 'event'\nimport {TimestampHookArguments} from 'parser/core/Dispatcher'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport CastTime from 'parser/core/modules/CastTime'\nimport {CounterGauge, TimerGauge, Gauge as CoreGauge} from 'parser/core/modules/Gauge'\nimport Suggestions, {Suggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport {UnableToAct} from 'parser/core/modules/UnableToAct'\nimport React from 'react'\nimport {isSuccessfulHit} from 'utilities'\nimport {FIRE_SPELLS, ICE_SPELLS_TARGETED, ICE_SPELLS_UNTARGETED} from './Elements'\n\n/** Configuration */\nconst POLYGLOT_DURATION_REQUIRED = 30000\nexport const ASTRAL_UMBRAL_DURATION = 15000\nexport const ASTRAL_UMBRAL_MAX_STACKS = 3\nexport const UMBRAL_HEARTS_MAX_STACKS = 3\nconst CAPPED_ASTRAL_UMBRAL_CAST_SCALAR = 0.5\nconst FLARE_MAX_HEART_CONSUMPTION = 3\nconst POLYGLOT_MAX_STACKS = 2\nconst PARADOX_MAX_STACKS = 1\nconst ASTRAL_UMBRAL_HANDLE = 'astralumbral'\n\nconst AFFECTS_GAUGE_ON_DAMAGE: ActionKey[] = [\n\t...FIRE_SPELLS,\n\t...ICE_SPELLS_TARGETED,\n\t'PARADOX',\n]\n\nconst AFFECTS_GAUGE_ON_CAST: ActionKey[] = [\n\t...ICE_SPELLS_UNTARGETED,\n\t'TRANSPOSE',\n\t'FOUL',\n\t'XENOGLOSSY',\n\t'AMPLIFIER',\n\t'PARADOX',\n]\n\n/** Gauge state interface for consumers */\nexport interface BLMGaugeState {\n\tastralFire: number,\n\tumbralIce: number,\n\tumbralHearts: number,\n\tpolyglot: number,\n\tenochian: boolean, // Keeping this as a calculated value to simplify RotationWatchdog's \"did Enochian drop?\" check\n\tparadox: number\n}\n\n/** BLM Gauge Event interface & include in Event repository */\ninterface EventBLMGauge extends FieldsBase {\n\ttype: 'blmgauge',\n}\ndeclare module 'event' {\n\tinterface EventTypeRepository {\n\t\tblmgauge: EventBLMGauge\n\t}\n}\n\n/** Graph colors/fade settings */\nconst STANCE_FADE = 0.5\nconst GAUGE_FADE = 0.25\nconst TIMER_FADE = 0.75\nconst ICE_COLOR = Color('#2F70B1')\nconst FIRE_COLOR = Color('#D23D26')\nconst POLYGLOT_COLOR = Color(JOBS.BLACK_MAGE.colour)\n\nexport class Gauge extends CoreGauge {\n\tstatic override handle = 'gauge'\n\tstatic override title = t('blm.gauge.title')`Gauge`\n\n\t@dependency private suggestions!: Suggestions\n\t@dependency private unableToAct!: UnableToAct\n\t@dependency private castTime!: CastTime\n\n\tprivate droppedEnoTimestamps: number[] = []\n\tprivate overwrittenPolyglot: number = 0\n\n\tprivate fireSpellIds = FIRE_SPELLS.map(key => this.data.actions[key].id)\n\tprivate iceSpellIds = [\n\t\t...ICE_SPELLS_TARGETED.map(key => this.data.actions[key].id),\n\t\t...ICE_SPELLS_UNTARGETED.map(key => this.data.actions[key].id),\n\t]\n\tprivate affectsGaugeOnDamage = AFFECTS_GAUGE_ON_DAMAGE.map(key => this.data.actions[key].id)\n\n\tprivate castTimeIndex: number | null = null\n\tprivate paradoxInstantIndex: number | null = null\n\n\t/** Astral Fire */\n\tprivate astralFireGauge = this.add(new CounterGauge({\n\t\tmaximum: ASTRAL_UMBRAL_MAX_STACKS,\n\t\tgraph: {\n\t\t\thandle: ASTRAL_UMBRAL_HANDLE,\n\t\t\tlabel: <Trans id=\"blm.gauge.resource.astral-fire\">Astral Fire</Trans>,\n\t\t\tcolor: FIRE_COLOR.fade(STANCE_FADE),\n\t\t},\n\t}))\n\tprivate astralFireTimer = this.add(new TimerGauge({\n\t\tmaximum: ASTRAL_UMBRAL_DURATION,\n\t\tonExpiration: this.onAstralUmbralTimeout.bind(this),\n\t\tgraph: {\n\t\t\thandle: ASTRAL_UMBRAL_HANDLE,\n\t\t\tlabel: <Trans id=\"blm.gauge.resource.astral-timer\">Astral Fire Timer</Trans>,\n\t\t\tcolor: FIRE_COLOR.fade(TIMER_FADE),\n\t\t},\n\t}))\n\t/** Umbral Ice */\n\tprivate umbralIceGauge = this.add(new CounterGauge({\n\t\tmaximum: ASTRAL_UMBRAL_MAX_STACKS,\n\t\tgraph: {\n\t\t\thandle: ASTRAL_UMBRAL_HANDLE,\n\t\t\tlabel: <Trans id=\"blm.gauge.resource.umbral-ice\">Umbral Ice</Trans>,\n\t\t\tcolor: ICE_COLOR.fade(STANCE_FADE),\n\t\t},\n\t}))\n\tprivate umbralIceTimer = this.add(new TimerGauge({\n\t\tmaximum: ASTRAL_UMBRAL_DURATION,\n\t\tonExpiration: this.onAstralUmbralTimeout.bind(this),\n\t\tgraph: {\n\t\t\thandle: ASTRAL_UMBRAL_HANDLE,\n\t\t\tlabel: <Trans id=\"blm.gauge.resource.umbral-timer\">Umbral Ice Timer</Trans>,\n\t\t\tcolor: ICE_COLOR.fade(TIMER_FADE),\n\t\t},\n\t}))\n\n\t/** Paradox */\n\tprivate paradoxGauge = this.add(new CounterGauge({\n\t\tmaximum: PARADOX_MAX_STACKS,\n\t\tgraph: {\n\t\t\tlabel: <Trans id=\"blm.gauge.resource.paradox\">Paradox</Trans>,\n\t\t\tcolor: FIRE_COLOR.fade(GAUGE_FADE),\n\t\t},\n\t\tcorrectHistory: true,\n\t}))\n\n\t/** Umbral Hearts */\n\tprivate umbralHeartsGauge = this.add(new CounterGauge({\n\t\tmaximum: UMBRAL_HEARTS_MAX_STACKS,\n\t\tgraph: {\n\t\t\tlabel: <Trans id=\"blm.gauge.resource.umbral-hearts\">Umbral Hearts</Trans>,\n\t\t\tcolor: ICE_COLOR.fade(GAUGE_FADE),\n\t\t},\n\t}))\n\n\t/** Polyglot */\n\tprivate polyglotGauge = this.add(new CounterGauge({\n\t\tmaximum: POLYGLOT_MAX_STACKS,\n\t\tgraph: {\n\t\t\tlabel: <Trans id=\"blm.gauge.resource.polyglot\">Polyglot</Trans>,\n\t\t\tcolor: POLYGLOT_COLOR.fade(GAUGE_FADE),\n\t\t},\n\t\tcorrectHistory: true,\n\t}))\n\tprivate polyglotTimer = this.add(new TimerGauge({\n\t\tmaximum: POLYGLOT_DURATION_REQUIRED,\n\t\tonExpiration: this.onPolyglotTimerComplete.bind(this),\n\t\tgraph: {\n\t\t\tlabel: <Trans id=\"blm.gauge.resource.polyglot-timer\">Polyglot Timer</Trans>,\n\t\t\tcolor: POLYGLOT_COLOR.fade(TIMER_FADE),\n\t\t},\n\t}))\n\n\tprivate previousGaugeState: BLMGaugeState = this.getGaugeState(this.parser.pull.timestamp)\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\n\t\t// The action event is sufficient for actions that don't need to do damage to affect gauge state (ie. Transpose, Enochian, Umbral Soul)\n\t\t// Foul, Xenoglossy, and Paradox also fall into this category since they consume their gauge markers on execution\n\t\tthis.addEventHook(playerFilter.type('action').action(this.data.matchActionId(AFFECTS_GAUGE_ON_CAST)), this.onCast)\n\n\t\t// The rest of the fire and ice spells must do damage in order to affect gauge state, so hook that event instead.\n\t\tthis.addEventHook(playerFilter.type('damage').cause(this.data.matchCauseActionId(this.affectsGaugeOnDamage)), this.onCast)\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\n\t\tthis.resourceGraphs.addDataGroup({\n\t\t\thandle: ASTRAL_UMBRAL_HANDLE,\n\t\t\tlabel: <Trans id=\"blm.gauge.resource.astral-umbral\">Astral Fire and<br></br>Umbral Ice</Trans>,\n\t\t\tcollapse: true,\n\t\t\tforceCollapsed: true,\n\t\t})\n\t}\n\n\t/**\n\t * Retrieves the gauge state at the specified epoch timestamp\n\t * @param timestamp The epoch timestamp to get the gauge state at, defaults to parser.currentEpochTimestamp\n\t * @returns The BLMGaugeState object for this timestamp\n\t*/\n\tpublic getGaugeState(timestamp: number = this.parser.currentEpochTimestamp): BLMGaugeState {\n\t\tconst astralFire = this.astralFireGauge.getValueAt(timestamp)\n\t\tconst umbralIce = this.umbralIceGauge.getValueAt(timestamp)\n\t\treturn {\n\t\t\tastralFire,\n\t\t\tumbralIce,\n\t\t\tumbralHearts: this.umbralHeartsGauge.getValueAt(timestamp),\n\t\t\tpolyglot: this.polyglotGauge.getValueAt(timestamp),\n\t\t\tenochian: astralFire > 0 || umbralIce > 0,\n\t\t\tparadox: this.paradoxGauge.getValueAt(timestamp),\n\t\t}\n\t}\n\n\t//#region onCast and gauge state modification\n\tprivate onCast(event: Events['damage'] | Events['action']) {\n\t\tlet abilityId\n\t\tif ('cause' in event && 'action' in event.cause) {\n\t\t\tabilityId = event.cause.action\n\t\t} else if ('action' in event) {\n\t\t\tabilityId = event.action\n\t\t}\n\n\t\t// If we couldn't figure out what ability this is (somehow wound up here because of a DoT?), bail\n\t\tif (abilityId == null) { return }\n\n\t\t// Bail out if the event didn't do damage and the action needs to in order to affect gauge state\n\t\tif (this.affectsGaugeOnDamage.includes(abilityId) && event.type === 'damage' && !isSuccessfulHit(event)) { return }\n\n\t\tswitch (abilityId) {\n\t\tcase this.data.actions.BLIZZARD_I.id:\n\t\t\tthis.onGainUmbralIceStacks(1)\n\t\t\tbreak\n\t\tcase this.data.actions.BLIZZARD_II.id:\n\t\tcase this.data.actions.HIGH_BLIZZARD_II.id:\n\t\tcase this.data.actions.BLIZZARD_III.id:\n\t\t\tthis.onGainUmbralIceStacks(ASTRAL_UMBRAL_MAX_STACKS, false)\n\t\t\tbreak\n\t\tcase this.data.actions.FREEZE.id:\n\t\tcase this.data.actions.BLIZZARD_IV.id:\n\t\t\tif (this.umbralIceGauge.empty) {\n\t\t\t\tthis.onGainUmbralIceStacks(1, false)\n\t\t\t}\n\t\t\tthis.umbralHeartsGauge.set(UMBRAL_HEARTS_MAX_STACKS)\n\t\t\tthis.addEvent()\n\t\t\tbreak\n\t\tcase this.data.actions.UMBRAL_SOUL.id:\n\t\t\tthis.onGainUmbralIceStacks(1)\n\t\t\tthis.tryGainUmbralHearts(1)\n\t\t\tbreak\n\t\tcase this.data.actions.FIRE_I.id:\n\t\t\tthis.tryConsumeUmbralHearts(1)\n\t\t\tthis.onGainAstralFireStacks(1)\n\t\t\tbreak\n\t\tcase this.data.actions.FIRE_II.id:\n\t\tcase this.data.actions.HIGH_FIRE_II.id:\n\t\tcase this.data.actions.FIRE_III.id:\n\t\t\tthis.tryConsumeUmbralHearts(1)\n\t\t\tthis.onGainAstralFireStacks(ASTRAL_UMBRAL_MAX_STACKS, false)\n\t\t\tbreak\n\t\tcase this.data.actions.FIRE_IV.id:\n\t\t\tif (this.astralFireGauge.empty) {\n\t\t\t\tthis.onGainAstralFireStacks(1, false)\n\t\t\t}\n\t\t\tthis.tryConsumeUmbralHearts(1)\n\t\t\tbreak\n\t\tcase this.data.actions.DESPAIR.id:\n\t\t\tthis.onGainAstralFireStacks(ASTRAL_UMBRAL_MAX_STACKS, false)\n\t\t\tbreak\n\t\tcase this.data.actions.FLARE.id:\n\t\t\tthis.tryConsumeUmbralHearts(FLARE_MAX_HEART_CONSUMPTION, true)\n\t\t\tthis.onGainAstralFireStacks(ASTRAL_UMBRAL_MAX_STACKS, false)\n\t\t\tbreak\n\t\tcase this.data.actions.XENOGLOSSY.id:\n\t\tcase this.data.actions.FOUL.id:\n\t\t\tthis.onConsumePolyglot()\n\t\t\tbreak\n\t\tcase this.data.actions.TRANSPOSE.id:\n\t\t\tthis.onTransposeStacks()\n\t\t\tbreak\n\t\tcase this.data.actions.PARADOX.id:\n\t\t\tthis.handleParadox(event)\n\t\t\tbreak\n\t\tcase this.data.actions.AMPLIFIER.id:\n\t\t\tthis.onGeneratePolyglot()\n\t\t\tbreak\n\t\t}\n\t}\n\n\tprivate addEvent() {\n\t\tif (!this.astralFireGauge.empty && this.astralFireTimer.expired) {\n\t\t\tthis.astralFireTimer.start()\n\t\t}\n\t\tif (!this.umbralIceGauge.empty && this.umbralIceTimer.expired) {\n\t\t\tthis.umbralIceTimer.start()\n\t\t}\n\t\tif ((!this.astralFireTimer.expired || !this.umbralIceTimer.expired) && this.polyglotTimer.expired) {\n\t\t\tthis.polyglotTimer.start()\n\t\t}\n\n\t\tif (this.gaugeValuesChanged(this.previousGaugeState)) {\n\t\t\tthis.tryGainParadox(this.previousGaugeState)\n\t\t\tthis.updateCastTimes(this.previousGaugeState)\n\t\t\tthis.previousGaugeState = this.getGaugeState(this.parser.currentEpochTimestamp)\n\n\t\t\t// Queue event to tell other analysers about the change\n\t\t\tthis.parser.queueEvent({\n\t\t\t\ttype: 'blmgauge',\n\t\t\t\ttimestamp: this.parser.currentEpochTimestamp,\n\t\t\t})\n\t\t}\n\t}\n\n\tprivate gaugeValuesChanged(lastGaugeState: BLMGaugeState) {\n\t\tif (lastGaugeState.astralFire !== this.astralFireGauge.value ||\n\t\t\tlastGaugeState.umbralIce !== this.umbralIceGauge.value ||\n\t\t\tlastGaugeState.umbralHearts !== this.umbralHeartsGauge.value ||\n\t\t\tlastGaugeState.polyglot !== this.polyglotGauge.value ||\n\t\t\tlastGaugeState.paradox !== this.paradoxGauge.value\n\t\t) {\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\n\tprivate updateCastTimes(lastGaugeState: BLMGaugeState): void {\n\t\tconst lastAstralFire = lastGaugeState.astralFire\n\t\tconst lastUmbralIce = lastGaugeState.umbralIce\n\n\t\t// If we have gained max AF, set Blizzard spells to be fast\n\t\tif (lastAstralFire !== ASTRAL_UMBRAL_MAX_STACKS && this.astralFireGauge.value === ASTRAL_UMBRAL_MAX_STACKS) {\n\t\t\tthis.castTime.reset(this.castTimeIndex)\n\t\t\tthis.castTimeIndex = this.castTime.setPercentageAdjustment(this.iceSpellIds, CAPPED_ASTRAL_UMBRAL_CAST_SCALAR)\n\t\t}\n\t\t// If we have gained max UI, set Fire spells to be fast\n\t\tif (lastUmbralIce !== ASTRAL_UMBRAL_MAX_STACKS && this.umbralIceGauge.value === ASTRAL_UMBRAL_MAX_STACKS) {\n\t\t\tthis.castTime.reset(this.castTimeIndex)\n\t\t\tthis.castTimeIndex = this.castTime.setPercentageAdjustment(this.fireSpellIds, CAPPED_ASTRAL_UMBRAL_CAST_SCALAR)\n\t\t}\n\t\t// If our current gauge state doesn't have either max AF or max UI, drop the cast time adjustment entirely\n\t\tif (this.astralFireGauge.value !== ASTRAL_UMBRAL_MAX_STACKS && this.umbralIceGauge.value !== ASTRAL_UMBRAL_MAX_STACKS) {\n\t\t\tthis.castTime.reset(this.castTimeIndex)\n\t\t\tthis.castTimeIndex = null\n\t\t}\n\n\t\t// If we're in Umbral Ice, Paradox is always instant\n\t\tif (!this.umbralIceGauge.empty && this.paradoxInstantIndex == null) {\n\t\t\tthis.paradoxInstantIndex = this.castTime.setInstantCastAdjustment([this.data.actions.PARADOX.id])\n\t\t}\n\t\t// If we're not in Umbral Ice, Paradox has a cast time\n\t\tif (this.umbralIceGauge.empty && this.paradoxInstantIndex != null) {\n\t\t\tthis.castTime.reset(this.paradoxInstantIndex)\n\t\t\tthis.paradoxInstantIndex = null\n\t\t}\n\t}\n\n\tprivate tryGainParadox(lastGaugeState: BLMGaugeState) {\n\t\tif ((lastGaugeState.umbralIce === ASTRAL_UMBRAL_MAX_STACKS && !this.astralFireGauge.empty && this.umbralHeartsGauge.capped) ||\n\t\t\t(lastGaugeState.astralFire === ASTRAL_UMBRAL_MAX_STACKS && !this.umbralIceGauge.empty)) {\n\t\t\tthis.paradoxGauge.generate(1)\n\t\t}\n\t}\n\t//#endregion\n\n\t//#region Astral Fire and Umbral Ice\n\tprivate onAstralUmbralTimeout(_args: TimestampHookArguments) {\n\t\tthis.onAstralUmbralEnd(true)\n\t}\n\n\tprivate onAstralUmbralEnd(flagIssues: boolean) {\n\t\tthis.astralFireTimer.reset()\n\t\tthis.astralFireGauge.reset()\n\n\t\tthis.umbralIceTimer.reset()\n\t\tthis.umbralIceGauge.reset()\n\n\t\tthis.onEnochianTimeout(flagIssues)\n\t}\n\n\tprivate onGainAstralFireStacks(stackCount: number, dropsElementOnSwap: boolean = true) {\n\t\tif (!this.umbralIceGauge.empty && dropsElementOnSwap) {\n\t\t\tthis.onAstralUmbralEnd(true)\n\t\t} else {\n\t\t\tthis.umbralIceTimer.reset()\n\t\t\tthis.umbralIceGauge.reset()\n\n\t\t\tthis.astralFireTimer.start()\n\t\t\tthis.astralFireGauge.generate(stackCount)\n\n\t\t\tthis.addEvent()\n\t\t}\n\t}\n\n\tprivate onGainUmbralIceStacks(stackCount: number, dropsElementOnSwap: boolean = true) {\n\t\tif (!this.astralFireGauge.empty && dropsElementOnSwap) {\n\t\t\tthis.onAstralUmbralEnd(true)\n\t\t} else {\n\t\t\tthis.astralFireTimer.reset()\n\t\t\tthis.astralFireGauge.reset()\n\n\t\t\tthis.umbralIceTimer.start()\n\t\t\tthis.umbralIceGauge.generate(stackCount)\n\n\t\t\tthis.addEvent()\n\t\t}\n\t}\n\n\tprivate onTransposeStacks() {\n\t\t// If we're in neither stance, Transpose is a no-op\n\t\tif (this.astralFireGauge.empty && this.umbralIceGauge.empty) { return }\n\n\t\t// If we're currently in Fire, we're swapping to Ice\n\t\tif (!this.astralFireGauge.empty) {\n\t\t\tthis.onGainUmbralIceStacks(1, false)\n\t\t} else { // Otherwise, we're swapping to fire\n\t\t\tthis.onGainAstralFireStacks(1, false)\n\t\t}\n\n\t\tthis.addEvent()\n\t}\n\t//#endregion\n\n\t//#region Umbral Hearts\n\tprivate tryGainUmbralHearts(count: number) {\n\t\tif (this.umbralIceGauge.empty) { return }\n\n\t\tthis.umbralHeartsGauge.generate(count)\n\n\t\tthis.addEvent()\n\t}\n\n\tprivate tryConsumeUmbralHearts(count:  number, force: boolean = false) {\n\t\tif (this.umbralHeartsGauge.empty || (this.astralFireGauge.empty && !force)) { return }\n\n\t\tthis.umbralHeartsGauge.spend(count)\n\n\t\tthis.addEvent()\n\t}\n\t//#endregion\n\n\t//#region Polyglot\n\tprivate onEnochianTimeout(flagIssues: boolean = true) {\n\t\tif (this.polyglotTimer.active && flagIssues) {\n\t\t\tthis.droppedEnoTimestamps.push(this.parser.currentEpochTimestamp)\n\t\t}\n\n\t\tthis.polyglotTimer.reset()\n\n\t\tthis.umbralHeartsGauge.reset()\n\n\t\tthis.addEvent()\n\t}\n\n\tprivate onPolyglotTimerComplete() {\n\t\tthis.polyglotTimer.refresh()\n\n\t\tthis.onGeneratePolyglot()\n\t}\n\n\tprivate onGeneratePolyglot() {\n\t\t// Can't just rely on CounterGauge.overCap since there's some weird timing things we have to account for\n\t\tif (this.polyglotGauge.capped) {\n\t\t\tthis.overwrittenPolyglot++\n\t\t}\n\n\t\tthis.polyglotGauge.generate(1)\n\n\t\tthis.addEvent()\n\t}\n\n\tprivate onConsumePolyglot() {\n\t\t// Safety to catch ordering issues where Foul/Xenoglossy is used late enough to trigger our overwrite check but happens before Poly actually overwrites\n\t\tif (this.polyglotGauge.empty && this.overwrittenPolyglot > 0) {\n\t\t\tthis.overwrittenPolyglot--\n\t\t}\n\n\t\tthis.polyglotGauge.spend(1)\n\n\t\tthis.addEvent()\n\t}\n\n\tprivate countLostPolyglots(time: number) {\n\t\treturn Math.floor(time / POLYGLOT_DURATION_REQUIRED)\n\t}\n\t//#endregion\n\n\t/**\n\t * Handles the effects of each kind of event for Paradox:\n\t * - action: Paradox gauge is spent when the action is executed, whether it does damage or not\n\t * - damage: Paradox refreshes the active AF/UI timer when it registers a successful damage event\n\t * @param event The Paradox event\n\t */\n\tprivate handleParadox(event: Events['action'] | Events['damage']) {\n\t\tif (event.type === 'action') {\n\t\t\tthis.paradoxGauge.spend(1)\n\t\t} else if (event.type === 'damage') {\n\t\t\t// We checked isSuccessfulHit back in onCast, so we don't need to check it again here\n\t\t\t// Add a stack for whichever timer isn't expired\n\t\t\tif (!this.umbralIceTimer.expired) {\n\t\t\t\tthis.onGainUmbralIceStacks(1)\n\t\t\t}\n\t\t\tif (!this.astralFireTimer.expired) {\n\t\t\t\tthis.onGainAstralFireStacks(1)\n\t\t\t}\n\t\t}\n\t}\n\n\toverride onDeath() {\n\t\t// Not counting the loss towards the rest of the gauge loss, that'll just double up on the suggestions\n\t\tthis.onAstralUmbralEnd(false)\n\t}\n\n\tprivate onComplete() {\n\t\tconst fightStartLeniency = this.parser.pull.timestamp + this.data.actions.FIRE_IV.castTime // Give the player a bit of time at the start to get Enochian up. Using F4's cast time as a proxy for this\n\t\tconst forceDropUtaWindows = this.unableToAct.getWindows().filter(uta => Math.max(0, uta.end - uta.start) >= ASTRAL_UMBRAL_DURATION)\n\t\tconst forceDropForgive = this.data.actions.BLIZZARD_III.castTime + 1000 // Allow a Blizzard III cast time's worth of time (plus a second's worth of jitter) to get Enochian back up after a UTA\n\t\tconst polyGlotExpirationTime = this.polyglotTimer.getExpirationTime(fightStartLeniency, this.parser.currentEpochTimestamp, forceDropUtaWindows, forceDropForgive)\n\t\tconst lostPolyglot = this.countLostPolyglots(polyGlotExpirationTime)\n\n\t\t// Find out how many of the enochian drops ocurred during times where the player could not act for longer than the AF/UI buff timer. If they could act, they could've kept it going, so warn about those.\n\t\tconst droppedEno = this.droppedEnoTimestamps.filter(drop =>\n\t\t\tthis.unableToAct\n\t\t\t\t.getWindows({\n\t\t\t\t\tstart: drop,\n\t\t\t\t\tend: drop,\n\t\t\t\t})\n\t\t\t\t.filter(downtime => Math.max(0, downtime.end - downtime.start) >= ASTRAL_UMBRAL_DURATION)\n\t\t\t\t.length === 0\n\t\t).length\n\t\tif (droppedEno > 0) {\n\t\t\tthis.suggestions.add(new Suggestion({\n\t\t\t\ticon: this.data.actions.FOUL.icon,\n\t\t\t\tcontent: <Trans id=\"blm.gauge.suggestions.dropped-enochian.content\">\n\t\t\t\t\tDropping Astral Fire or Umbral Ice may lead to lost <DataLink action=\"XENOGLOSSY\"/> or <DataLink action=\"FOUL\"/> casts.\n\t\t\t\t</Trans>,\n\t\t\t\tseverity: SEVERITY.MEDIUM,\n\t\t\t\twhy: <Trans id=\"blm.gauge.suggestions.dropped-enochian.why\">\n\t\t\t\t\tAstral Fire or Umbral Ice was dropped <Plural value={droppedEno} one=\"# time\" other=\"# times\"/>.\n\t\t\t\t</Trans>,\n\t\t\t}))\n\t\t}\n\n\t\tif (lostPolyglot > 0) {\n\t\t\tthis.suggestions.add(new Suggestion({\n\t\t\t\ticon: this.data.actions.XENOGLOSSY.icon,\n\t\t\t\tcontent: <Trans id=\"blm.gauge.suggestions.lost-polyglot.content\">\n\t\t\t\t\tYou lost Polyglot due to dropped Astral Fire or Umbral Ice. <DataLink action=\"XENOGLOSSY\"/> and <DataLink action=\"FOUL\"/> are your strongest GCDs, so always maximize their casts.\n\t\t\t\t</Trans>,\n\t\t\t\tseverity: SEVERITY.MAJOR,\n\t\t\t\twhy: <Trans id=\"blm.gauge.suggestions.lost-polyglot.why\">\n\t\t\t\t\t<Plural value={lostPolyglot} one=\"# Polyglot stack was\" other=\"# Polyglot stacks were\"/> lost.\n\t\t\t\t</Trans>,\n\t\t\t}))\n\t\t}\n\n\t\tif (this.overwrittenPolyglot > 0) {\n\t\t\tthis.suggestions.add(new Suggestion({\n\t\t\t\ticon: this.data.actions.XENOGLOSSY.icon,\n\t\t\t\tcontent: <Trans id=\"blm.gauge.suggestions.overwritten-polyglot.content\">\n\t\t\t\t\tYou overwrote Polyglot due to not casting <DataLink action=\"XENOGLOSSY\"/> or <DataLink action=\"FOUL\"/> for 30s after gaining a second stack. <DataLink action=\"XENOGLOSSY\"/> and <DataLink action=\"FOUL\"/> are your strongest GCDs, so always maximize their casts.\n\t\t\t\t</Trans>,\n\t\t\t\tseverity: SEVERITY.MAJOR,\n\t\t\t\twhy: <Trans id=\"blm.gauge.suggestions.overwritten-polyglot.why\">\n\t\t\t\t\t<DataLink showIcon={false} action=\"XENOGLOSSY\"/> got overwritten <Plural value={this.overwrittenPolyglot} one=\"# time\" other=\"# times\"/>.\n\t\t\t\t</Trans>,\n\t\t\t}))\n\t\t}\n\n\t\tif (this.paradoxGauge.overCap > 0) {\n\t\t\tthis.suggestions.add(new Suggestion({\n\t\t\t\ticon: this.data.actions.PARADOX.icon,\n\t\t\t\tcontent: <Trans id=\"blm.gauge.suggestions.overwritten-paradox.content\">\n\t\t\t\t\tYou overwrote <DataLink action=\"PARADOX\"/> by generating a new marker without using the previous one. <DataLink showIcon={false} action=\"PARADOX\"/> is a strong filler spell, so be sure to use it before generating a new one.\n\t\t\t\t</Trans>,\n\t\t\t\tseverity: SEVERITY.MAJOR,\n\t\t\t\twhy: <Trans id=\"blm.gage.suggestions.overwritten-paradox.why\">\n\t\t\t\t\t<DataLink showIcon={false} action=\"PARADOX\"/> got overwritten <Plural value={this.paradoxGauge.overCap} one=\"# time\" other=\"# times\"/>.\n\t\t\t\t</Trans>,\n\t\t\t}))\n\t\t}\n\t}\n}\n\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport CastTime from 'parser/core/modules/CastTime'\nimport Checklist, {Rule, Requirement} from 'parser/core/modules/Checklist'\nimport {Data} from 'parser/core/modules/Data'\nimport {SimpleRow, StatusItem, Timeline} from 'parser/core/modules/Timeline'\nimport React from 'react'\nimport {Table, Button} from 'semantic-ui-react'\nimport DISPLAY_ORDER from './DISPLAY_ORDER'\n\ninterface LeyLinesWindow {\n\tstart: number,\n\tstop?: number\n}\n\ninterface LeyLinesWindows {\n\tcurrent?: LeyLinesWindow,\n\thistory: LeyLinesWindow[]\n}\n\nexport default class Leylines extends Analyser {\n\tstatic override handle = 'leylines'\n\tstatic override title = t('blm.leylines.title')`Ley Lines`\n\tstatic override displayOrder = DISPLAY_ORDER.LEY_LINES\n\n\t@dependency private data!: Data\n\t@dependency private checklist!: Checklist\n\t@dependency private timeline!: Timeline\n\t@dependency private castTime!: CastTime\n\n\tprivate leyLinesStatuses: number[] = [\n\t\tthis.data.statuses.LEY_LINES.id,\n\t\tthis.data.statuses.CIRCLE_OF_POWER.id,\n\t]\n\n\tprivate buffWindows: {[key: number]: LeyLinesWindows} = {}\n\tprivate castTimeIndex: number | null = null\n\n\toverride initialise() {\n\t\tconst leyLinesFilter = filter<Event>()\n\t\t\t.source(this.parser.actor.id)\n\t\t\t.status(oneOf(this.leyLinesStatuses))\n\t\tthis.addEventHook(leyLinesFilter.type('statusApply'), this.onGain)\n\t\tthis.addEventHook(leyLinesFilter.type('statusRemove'), this.onDrop)\n\t\tthis.addEventHook({\n\t\t\ttype: 'death',\n\t\t\tactor: this.parser.actor.id,\n\t\t}, this.onDeath)\n\t\tthis.addEventHook('complete', this.onComplete)\n\n\t\tthis.leyLinesStatuses.forEach(status => {\n\t\t\tthis.buffWindows[status] = {history: []}\n\t\t})\n\t}\n\n\tpublic getStatusDurationInRange(\n\t\tstatusId: number,\n\t\tstart: number = this.parser.pull.timestamp,\n\t\tend: number = this.parser.pull.timestamp + this.parser.pull.duration\n\t) {\n\t\tlet duration = 0\n\t\tfor (const window of this.buffWindows[statusId].history) {\n\t\t\tif (window.stop == null || window.stop <= start || window.start >= end) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tduration += Math.max(0, Math.min(window.stop, end) - Math.max(window.start, start))\n\t\t}\n\n\t\tconst currentWindows = this.buffWindows[statusId].current\n\t\tif (currentWindows != null) {\n\t\t\tduration += Math.max(end - Math.max(currentWindows.start, start), 0)\n\t\t}\n\n\t\treturn duration\n\t}\n\n\t// Manage buff windows\n\tprivate onGain(event: Events['statusApply']) {\n\t\tconst status = this.data.getStatus(event.status)\n\n\t\t// Something is not right\n\t\tif (!status) { return }\n\n\t\t// Track the new window\n\t\tconst tracker = this.buffWindows[status.id]\n\n\t\t// Don't open a new window if one's already going\n\t\tif (tracker.current) { return }\n\n\t\ttracker.current = {\n\t\t\tstart: event.timestamp,\n\t\t}\n\n\t\tif (status.id === this.data.statuses.CIRCLE_OF_POWER.id) {\n\t\t\tthis.castTimeIndex = this.castTime.setPercentageAdjustment('all', this.data.statuses.CIRCLE_OF_POWER.speedModifier, 'both')\n\t\t}\n\t}\n\n\tprivate onDrop(event: Events['statusRemove']) {\n\t\tthis.stopAndSave(event.status, event.timestamp)\n\t}\n\n\t// We died, close windows\n\tprivate onDeath(event: Events['death']) {\n\t\tthis.stopAndSave(this.data.statuses.LEY_LINES.id, event.timestamp)\n\t}\n\n\t// Finalise a buff window\n\tprivate stopAndSave(statusId: number, endTime: number = this.parser.currentEpochTimestamp) {\n\t\tconst tracker = this.buffWindows[statusId]\n\n\t\t// Already closed, nothing to do here\n\t\tif (!tracker.current) { return }\n\n\t\t// Close the window\n\t\ttracker.current.stop = endTime\n\t\ttracker.history.push(tracker.current)\n\t\ttracker.current = undefined\n\n\t\t// Close dependency windows\n\t\tif (statusId === this.data.statuses.LEY_LINES.id) {\n\t\t\tthis.stopAndSave(this.data.statuses.CIRCLE_OF_POWER.id, endTime)\n\t\t}\n\n\t\tif (statusId === this.data.statuses.CIRCLE_OF_POWER.id) {\n\t\t\tthis.castTime.reset(this.castTimeIndex)\n\t\t\tthis.castTimeIndex = null\n\t\t}\n\t}\n\n\t// A reminder of man's ability to generate electricity\n\tprivate dontMovePercent(power: number, lines: number) {\n\t\treturn (power / lines) * 100\n\t}\n\n\tprivate onComplete() {\n\t\t// Current time will be end of fight so no need to pass it here\n\t\tthis.stopAndSave(this.data.statuses.LEY_LINES.id)\n\n\t\t// Build the grouping row\n\t\tconst parentRow = this.timeline.addRow(new SimpleRow({\n\t\t\tlabel: 'Ley Lines Buffs',\n\t\t\torder: 0,\n\t\t}))\n\n\t\tconst fightStart = this.parser.pull.timestamp\n\n\t\t// For each buff, add it to timeline\n\t\tthis.leyLinesStatuses.forEach(buff => {\n\t\t\tconst status = this.data.getStatus(buff)\n\t\t\tif (!status) { return }\n\n\t\t\tconst row = parentRow.addRow(new SimpleRow({label: status.name}))\n\n\t\t\tthis.buffWindows[buff].history.forEach(window => {\n\t\t\t\tif (!window.stop) { return }\n\t\t\t\trow.addItem(new StatusItem({\n\t\t\t\t\tstatus,\n\t\t\t\t\tstart: window.start - fightStart,\n\t\t\t\t\tend: window.stop - fightStart,\n\t\t\t\t}))\n\t\t\t})\n\t\t})\n\n\t\t// Get the total duration of CoP uptime and Ley Lines, so we can get the overall percentage uptime\n\t\tconst copDuration = this.getStatusDurationInRange(this.data.statuses.CIRCLE_OF_POWER.id)\n\t\tconst linesDuration = this.getStatusDurationInRange(this.data.statuses.LEY_LINES.id)\n\n\t\tthis.checklist.add(new Rule({\n\t\t\tname: <Trans id=\"blm.leylines.checklist-caption\">Stay in your <ActionLink {...this.data.actions.LEY_LINES} /></Trans>,\n\t\t\tdescription: <Trans id=\"blm.leylines.checklist\">Try to avoid leaving your <ActionLink showIcon={false} {...this.data.actions.LEY_LINES} /> after placing them. Take advantage of <ActionLink showIcon={false} {...this.data.actions.LEY_LINES} />' size to stay in them while dodging AOEs and being in range of healers. If you can't stay in them for the majority of a <ActionLink showIcon={false} {...this.data.actions.LEY_LINES} />' duration, consider changing where they're placed in the fight.</Trans>,\n\t\t\trequirements: [\n\t\t\t\tnew Requirement({\n\t\t\t\t\tname: <ActionLink {...this.data.actions.LEY_LINES} />,\n\t\t\t\t\tpercent: this.dontMovePercent(copDuration, linesDuration),\n\t\t\t\t}),\n\t\t\t],\n\t\t\t//pretty random. Should be revised, maybe based on fights? 10% is ~ 1 GCD. So we allow that.\n\t\t\ttarget: 90,\n\t\t}))\n\t}\n\n\toverride output() {\n\t\tconst fightEnd = this.parser.pull.timestamp + this.parser.pull.duration\n\t\treturn <Table collapsing unstackable compact=\"very\">\n\t\t\t<Table.Header>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.HeaderCell><Trans id=\"blm.leylines.timestamp-header\">Timestamp</Trans></Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell><Trans id=\"blm.leylines.uptime-header\">Uptime</Trans></Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell></Table.HeaderCell>\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{this.buffWindows[this.data.statuses.LEY_LINES.id].history.map(leyLinesEvent => {\n\t\t\t\t\t// Find the CoPs that were inside this Ley Lines\n\t\t\t\t\tconst thisCoPHistory = this.buffWindows[this.data.statuses.CIRCLE_OF_POWER.id].history.filter(cops => ((cops.start >= leyLinesEvent.start) && ((cops.stop || 0) <= (leyLinesEvent.stop || 0))))\n\n\t\t\t\t\t// For this set of CoPs, get the uptime\n\t\t\t\t\tconst thisCoPUptime = thisCoPHistory.reduce((duration, cop) => duration + Math.max((cop.stop || 0) - cop.start, 0), 0)\n\n\t\t\t\t\t// Note that since we're getting the actual duration, rather than the expected duration,\n\t\t\t\t\t// technically we'll call it 100% uptime if you stay in the lines and die halfway through...\n\t\t\t\t\t// However, since that'll get flagged as a morbid checklist item, that's probably ok.\n\t\t\t\t\tconst thisPercent = this.dontMovePercent(thisCoPUptime, (leyLinesEvent.stop || fightEnd) - leyLinesEvent.start).toFixed(2)\n\n\t\t\t\t\treturn <Table.Row key={leyLinesEvent.start}>\n\t\t\t\t\t\t<Table.Cell>{this.parser.formatEpochTimestamp(leyLinesEvent.start)}</Table.Cell>\n\t\t\t\t\t\t<Table.Cell>{thisPercent}%</Table.Cell>\n\t\t\t\t\t\t<Table.Cell>\n\t\t\t\t\t\t\t<Button onClick={() =>\n\t\t\t\t\t\t\t\tthis.timeline.show(leyLinesEvent.start - this.parser.pull.timestamp, (leyLinesEvent.stop || fightEnd) - this.parser.pull.timestamp)}>\n\t\t\t\t\t\t\t\t<Trans id=\"blm.leylines.timelinelink-button\">Jump to Timeline</Trans>\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t</Table.Row>\n\t\t\t\t})}\n\t\t\t</Table.Body>\n\t\t</Table>\n\t}\n}\n","export default {\n\tROTATION: 1,\n\tNOTCASTING: 2,\n\tLEY_LINES: 3,\n\tTHUNDER: 4,\n\tWEAVING: 5,\n}\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport Downtime from 'parser/core/modules/Downtime'\nimport {GlobalCooldown} from 'parser/core/modules/GlobalCooldown'\nimport {Timeline} from 'parser/core/modules/Timeline'\nimport React from 'react'\nimport {Table, Button} from 'semantic-ui-react'\nimport DISPLAY_ORDER from './DISPLAY_ORDER'\n\n//value to be added to the gcd to avoid false positives. 100ms for caster tax, 50ms for gcd jitter.\nconst GCD_ERROR_OFFSET = 150\n\n//slide cast period is 500 ms.\nconst SLIDECAST_OFFSET = 500\n\ninterface Window {\n\tstart: number,\n\tstop?: number\n}\n\nexport class NotCasting extends Analyser {\n\tstatic override handle = 'notcasting'\n\tstatic override title = t('blm.notcasting.title')`Times you did literally nothing`\n\tstatic override displayOrder = DISPLAY_ORDER.NOTCASTING\n\n\t@dependency private timeline!: Timeline\n\t@dependency private gcd!: GlobalCooldown\n\t@dependency private downtime!: Downtime\n\n\tprivate noCastWindows: {current?: Window, history: Window[]} = {\n\t\thistory: [],\n\t}\n\tprivate hardCast = false\n\n\toverride initialise() {\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\t\tthis.addEventHook(playerFilter.type('prepare'), this.onBegin)\n\t\tthis.addEventHook(playerFilter.type('action'), this.onCast)\n\t\tthis.addEventHook({\n\t\t\ttype: 'death',\n\t\t\tactor: this.parser.actor.id,\n\t\t}, this.onDeath)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onCast(event: Events['action']) {\n\t\t//better than using 2.5s I guess\n\t\tconst gcdLength = this.gcd.getDuration()\n\t\tlet timeStamp = event.timestamp\n\n\t\t//coming from a hard cast, adjust for slidecasting\n\t\tif (this.hardCast) {\n\t\t\ttimeStamp = event.timestamp + SLIDECAST_OFFSET\n\t\t\tthis.hardCast = false\n\t\t}\n\n\t\t//don't check the time that you actually spent casting\n\t\tif (!this.noCastWindows.current) {\n\t\t\tthis.noCastWindows.current = {\n\t\t\t\tstart: timeStamp,\n\t\t\t}\n\t\t\treturn\n\t\t}\n\n\t\t//check if it's been more than a gcd length\n\t\tif (timeStamp - this.noCastWindows.current.start > gcdLength + GCD_ERROR_OFFSET) {\n\t\t\tthis.stopAndSave(timeStamp)\n\t\t}\n\t\t//this cast is our new last cast\n\t\tthis.noCastWindows.current = {\n\t\t\tstart: timeStamp,\n\t\t}\n\t}\n\n\tprivate onBegin(event: Events['prepare']) {\n\t\tconst gcdLength = this.gcd.getDuration()\n\t\tif (this.noCastWindows.current) {\n\t\t\tif (event.timestamp - this.noCastWindows.current.start > gcdLength + GCD_ERROR_OFFSET) {\n\t\t\t\tthis.stopAndSave(event.timestamp)\n\t\t\t}\n\t\t\tthis.noCastWindows.current = undefined\n\t\t\tthis.hardCast = true\n\t\t}\n\t}\n\n\t//reset to not count the time you lie on the ground as time you aren't casting : ^)\n\tprivate onDeath() { this.noCastWindows.current = undefined }\n\n\tprivate stopAndSave(endTime: number) {\n\t\tconst tracker = this.noCastWindows\n\n\t\t// Already closed, nothing to do here\n\t\tif (!tracker.current) {\n\t\t\treturn\n\t\t}\n\n\t\t// Close the window\n\t\ttracker.current.stop = endTime\n\t\ttracker.history.push(tracker.current)\n\t\ttracker.current = undefined\n\t}\n\n\tprivate onComplete(event: Events['complete']) {\n\t\tconst gcdLength = this.gcd.getDuration()\n\t\t//finish up\n\t\tthis.stopAndSave(event.timestamp)\n\n\t\t// Filter out periods where you got stunned, boss is untargetable, etc, or windows with negative durations\n\t\tthis.noCastWindows.history = this.noCastWindows.history.filter(windows => {\n\t\t\tconst duration = this.downtime.getDowntime(\n\t\t\t\twindows.start,\n\t\t\t\twindows.stop ?? windows.start,\n\t\t\t)\n\t\t\treturn duration === 0 && (windows.stop ?? windows.start) - windows.start > gcdLength + GCD_ERROR_OFFSET\n\t\t})\n\t}\n\n\toverride output() {\n\t\tconst gcdLength = this.gcd.getDuration()\n\t\tif (this.noCastWindows.history.length === 0) { return }\n\t\treturn <Table collapsing unstackable compact=\"very\">\n\t\t\t<Table.Header>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.HeaderCell><Trans id=\"blm.notcasting.timestamp-header\">Timestamp</Trans></Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell><Trans id=\"blm.notcasting.duration-header\">Duration</Trans></Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell></Table.HeaderCell>\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{this.noCastWindows.history.map(notCasting => {\n\t\t\t\t\treturn <Table.Row key={notCasting.start}>\n\t\t\t\t\t\t<Table.Cell>{this.parser.formatEpochTimestamp(notCasting.start)}</Table.Cell>\n\t\t\t\t\t\t<Table.Cell>&ge;{this.parser.formatDuration((notCasting.stop ?? notCasting.start) - notCasting.start - gcdLength - GCD_ERROR_OFFSET)}</Table.Cell>\n\t\t\t\t\t\t<Table.Cell>\n\t\t\t\t\t\t\t<Button onClick={() =>\n\t\t\t\t\t\t\t\tthis.timeline.show(notCasting.start - this.parser.pull.timestamp, (notCasting.stop ?? notCasting.start) - this.parser.pull.timestamp)}>\n\t\t\t\t\t\t\t\t<Trans id=\"blm.notcasting.timelinelink-button\">Jump to Timeline</Trans>\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t</Table.Row>\n\t\t\t\t})}\n\t\t\t</Table.Body>\n\t\t</Table>\n\t}\n}\n","import {Trans} from '@lingui/react'\nimport {CooldownDowntime} from 'parser/core/modules/CooldownDowntime'\nimport React from 'react'\n\n// due to our limited weaving capabilities we'll allow a downtime of 5000ms or about 2 GCDs\nconst ALLOWEDDOWNTIMEALL = 5000\nconst FIRSTUSEOFFSETALL = 15000\nconst TARGETPERCENT = 95\n\nexport class OGCDDowntime extends CooldownDowntime {\n\t// Time in ms that Laqi deems ok for a OGCD to be down : ^)\n\toverride defaultAllowedAverageDowntime = ALLOWEDDOWNTIMEALL\n\toverride defaultFirstUseOffset = FIRSTUSEOFFSETALL\n\ttrackedCds = [\n\t\t{cooldowns: [this.data.actions.LEY_LINES]},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.MANAFONT],\n\t\t\tfirstUseOffset: 25000,\n\t\t},\n\t\t{cooldowns: [this.data.actions.TRIPLECAST]},\n\t\t{cooldowns: [this.data.actions.AMPLIFIER]},\n\t\t{cooldowns: [this.data.actions.SHARPCAST]},\n\t]\n\n\toverride checklistTarget = TARGETPERCENT\n\toverride checklistDescription = <Trans id=\"blm.ogcd-downtime.ogcd-cd-metric\">Always make sure to use your OGCDs when they are up but don't clip them. Utilize your procs or fast Blizzard IIIs or Fire IIIs to weave them. <Trans id=\"blm.ogcd-downtime.ogcd-cd-buffer\">To account for random factors you are given a buffer of {ALLOWEDDOWNTIMEALL/1000} seconds per instance to hold your cooldowns.</Trans></Trans>\n}\n","import {Plural, Trans} from '@lingui/react'\nimport {ActionLink, StatusLink} from 'components/ui/DbLink'\nimport {Event, Events} from 'event'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport CastTime from 'parser/core/modules/CastTime'\nimport {ProcGroup, Procs as CoreProcs} from 'parser/core/modules/Procs'\nimport {SEVERITY, Suggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\nexport default class Procs extends CoreProcs {\n\t@dependency castTime!: CastTime\n\n\toverride trackedProcs = [\n\t\t{\n\t\t\tprocStatus: this.data.statuses.THUNDERCLOUD,\n\t\t\tconsumeActions: [\n\t\t\t\tthis.data.actions.THUNDER_III,\n\t\t\t\tthis.data.actions.THUNDER_IV,\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tprocStatus: this.data.statuses.FIRESTARTER,\n\t\t\tconsumeActions: [this.data.actions.FIRE_III],\n\t\t},\n\t]\n\n\tprivate hasSharpcast: boolean = false\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\t// Hacky workaround because Statuses aren't in Analyser format yet, can (and probably should) remove this when that's done\n\t\tconst trackedStatusFilter = filter<Event>()\n\t\t\t.target(this.parser.actor.id)\n\t\t\t.status(this.data.statuses.SHARPCAST.id)\n\t\tthis.addEventHook(trackedStatusFilter.type('statusApply'), () => { this.hasSharpcast = true })\n\t\tthis.addEventHook(trackedStatusFilter.type('statusRemove'), () => { this.hasSharpcast = false })\n\t}\n\n\tprotected override jobSpecificCheckConsumeProc(_procGroup: ProcGroup, event: Events['action']): boolean {\n\t\t// If we were already hardcasting this spell, it does not consume the proc\n\t\treturn !(this.castingSpellId != null && this.castingSpellId === event.action)\n\t}\n\n\tprotected override jobSpecificOnConsumeProc(procGroup: ProcGroup, event: Events['action']): void {\n\t\t// BLM's procs are all instant-casts\n\t\tthis.castTime.setInstantCastAdjustment([event.action], event.timestamp, event.timestamp)\n\n\t\t// Thunder procs used while sharpcast is up re-grant the proc status without technically removing it, so we need to forcibly add the 'removal' here to keep the 'dropped' counting correct\n\t\tif ((event.action === this.data.actions.THUNDER_III.id || event.action === this.data.actions.THUNDER_IV.id) && this.hasSharpcast) {\n\t\t\tthis.tryAddEventToRemovals(procGroup, event)\n\t\t}\n\t\treturn\n\t}\n\n\tprotected override addJobSpecificSuggestions(): void {\n\t\tconst droppedThunderClouds: number = this.getDropCountForStatus(this.data.statuses.THUNDERCLOUD.id)\n\t\tif (droppedThunderClouds > 0) {\n\t\t\tthis.suggestions.add(new Suggestion({\n\t\t\t\ticon:  process.env.PUBLIC_URL + '/icon/action/t3p.png',\n\t\t\t\tcontent: <Trans id=\"blm.procs.suggestions.dropped-t3ps.content\">\n\t\t\t\t\tYou lost at least one <ActionLink {...this.data.actions.THUNDER_III}/> proc by allowing <StatusLink {...this.data.statuses.THUNDERCLOUD}/> to expire without using it.\n\t\t\t\t</Trans>,\n\t\t\t\tseverity: SEVERITY.MEDIUM,\n\t\t\t\twhy: <Trans id=\"blm.procs.suggestions.dropped-t3ps.why\">\n\t\t\t\t\t<Plural value={droppedThunderClouds} one=\"# Thundercloud proc\" other=\"# Thundercloud procs\" /> expired.\n\t\t\t\t</Trans>,\n\t\t\t}))\n\t\t}\n\n\t\tconst droppedFireStarters: number = this.getDropCountForStatus(this.data.statuses.FIRESTARTER.id)\n\t\tif (droppedFireStarters > 0) {\n\t\t\tthis.suggestions.add(new Suggestion({\n\t\t\t\ticon: process.env.PUBLIC_URL + '/icon/action/f3p.png',\n\t\t\t\tcontent: <Trans id=\"blm.procs.suggestions.dropped-f3ps.content\">\n\t\t\t\t\tYou lost at least  one <ActionLink {...this.data.actions.FIRE_III}/> proc by allowing <StatusLink {...this.data.statuses.FIRESTARTER}/> to expire without using it.\n\t\t\t\t</Trans>,\n\t\t\t\tseverity: SEVERITY.MEDIUM,\n\t\t\t\twhy: <Trans id=\"blm.procs.suggestions.dropped-f3ps.why\">\n\t\t\t\t\t<Plural value={droppedFireStarters} one=\"# Firestarter proc\" other=\"# Firestarter procs\" /> expired.\n\t\t\t\t</Trans>,\n\t\t\t}))\n\t\t}\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Plural, Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {RotationTable} from 'components/ui/RotationTable'\nimport {ActionKey} from 'data/ACTIONS'\nimport {Events, FieldsTargeted} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport {Data} from 'parser/core/modules/Data'\nimport {Invulnerability} from 'parser/core/modules/Invulnerability'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport {Timeline} from 'parser/core/modules/Timeline'\nimport {UnableToAct} from 'parser/core/modules/UnableToAct'\nimport React, {Fragment, ReactNode} from 'react'\nimport {Icon, Message} from 'semantic-ui-react'\nimport {ensureRecord} from 'utilities'\nimport DISPLAY_ORDER from './DISPLAY_ORDER'\nimport {FIRE_SPELLS} from './Elements'\nimport {Gauge, ASTRAL_UMBRAL_DURATION, BLMGaugeState, UMBRAL_HEARTS_MAX_STACKS, ASTRAL_UMBRAL_MAX_STACKS} from './Gauge'\nimport Leylines from './Leylines'\nimport Procs from './Procs'\n\nconst DEBUG_SHOW_ALL_CYCLES = false && process.env.NODE_ENV !== 'production'\n\nconst MAX_POSSIBLE_FIRE4 = 6\nconst NO_UH_EXPECTED_FIRE4 = 4\nconst FIRE4_FROM_MANAFONT = 1\n\nconst EXTRA_F4_COP_THRESHOLD = 0.5 // Feelycraft\n\nconst DEFAULT_SEVERITY_TIERS = {\n\t1: SEVERITY.MINOR,\n\t3: SEVERITY.MEDIUM,\n\t5: SEVERITY.MAJOR,\n}\n\nconst ENHANCED_SEVERITY_TIERS = {\n\t1: SEVERITY.MINOR,\n\t2: SEVERITY.MEDIUM,\n\t3: SEVERITY.MAJOR,\n}\n\nconst CYCLE_ENDPOINTS: ActionKey[] = [\n\t'BLIZZARD_III',\n\t'TRANSPOSE',\n\t'BLIZZARD_II',\n\t'HIGH_BLIZZARD_II',\n]\n\n// This is feelycraft at the moment. Rotations shorter than this won't be processed for errors.\nconst MIN_ROTATION_LENGTH = 3\n\ninterface CycleErrorCode {priority: number, message: ReactNode}\nconst DEATH_PRIORITY = 101 // Define this const here so we can reference it in both classes\nconst HIDDEN_PRIORITY_THRESHOLD = 2 // Same as ^\n/**\n * Error type codes, higher values indicate higher priority errors. If you add more, adjust the IDs to ensure correct priorities.\n * Only the highest priority error will be displayed in the 'Reason' column.\n * NOTE: Cycles with values at or below HIDDEN_PRIORITY_THRESHOLD will be filtered out of the RotationTable display\n * unless the DEBUG_SHOW_ALL_CYCLES variable is set to true\n */\nconst CYCLE_ERRORS = ensureRecord<CycleErrorCode>()({\n\tNO_ERROR: {priority: 0, message: 'No errors'},\n\tFINAL_OR_DOWNTIME: {priority: 1, message: 'Ended with downtime, or last cycle'},\n\tSHORT: {priority: HIDDEN_PRIORITY_THRESHOLD, message: 'Too short, won\\'t process'},\n\t// Messages below should be Trans objects since they'll be displayed to end users\n\tSHOULD_SKIP_T3: {priority: 8, message: <Trans id=\"blm.rotation-watchdog.error-messages.should-skip-t3\">Should skip hardcast <DataLink action=\"THUNDER_III\"/></Trans>},\n\tSHOULD_SKIP_B4: {priority: 9, message: <Trans id=\"blm.rotation-watchdog.error-messages.should-skip-b4\">Should skip <DataLink action=\"BLIZZARD_IV\"/></Trans>},\n\tMISSING_FIRE4S: {priority: 10, message: <Trans id=\"blm.rotation-watchdog.error-messages.missing-fire4s\">Missing one or more <DataLink action=\"FIRE_IV\"/>s</Trans>}, // These two errors are lower priority since they can be determined by looking at the\n\tMISSED_ICE_PARADOX: {priority: 15, message: <Trans id=\"blm.rotation-watchdog.error-messages.missed-ice-paradox\">Missed <DataLink action=\"PARADOX\"/> in Umbral Ice</Trans>},\n\tMISSING_DESPAIRS: {priority: 20, message: <Trans id=\"blm.rotation-watchdog.error-messages.missing-despair\">Missing one or more <DataLink action=\"DESPAIR\"/>s</Trans>}, // target columns in the table, so we want to tell players about other errors first\n\tMANAFONT_BEFORE_DESPAIR: {priority: 40, message: <Trans id=\"blm.rotation-watchdog.error-messages.manafont-before-despair\"><DataLink action=\"MANAFONT\"/> used before <DataLink action=\"DESPAIR\"/></Trans>},\n\tEXTRA_T3: {priority: 59, message: <Trans id=\"blm.rotation-watchdog.error-messages.extra-t3\">Extra <DataLink action=\"THUNDER_III\"/>s</Trans>}, // Extra T3 and Extra F1 are *very* similar in terms of per-GCD potency loss\n\tEXTRA_F1: {priority: 60, message: <Trans id=\"blm.rotation-watchdog.error-messages.extra-f1\">Extra <DataLink action=\"FIRE_I\"/></Trans>}, // These two codes should stay close to each other\n\tNO_FIRE_SPELLS: {priority: 80, message: <Trans id=\"blm.rotation-watchdog.error-messages.no-fire-spells\">Rotation included no Fire spells</Trans>},\n\tDROPPED_AF_UI: {priority: 100, message: <Trans id=\"blm.rotation-watchdog.error-messages.dropped-astral-umbral\">Dropped Astral Fire or Umbral Ice</Trans>},\n\tDIED: {priority: DEATH_PRIORITY, message: <Trans id=\"blm.rotation-watchdog.error-messages.died\"><DataLink showName={false} action=\"RAISE\"/> Died</Trans>},\n})\n\ninterface CycleEvent extends FieldsTargeted {\n\taction: number,\n\tisProc: boolean,\n\tgaugeContext: BLMGaugeState\n}\n\ninterface FirePhaseMetadata {\n\tstartTime: number,\n\tinitialMP: number,\n\tcircleOfPowerPct: number\n\tinitialGaugeState: BLMGaugeState\n}\n\nclass Cycle {\n\tprivate data: Data\n\tprivate fireSpellIds: number[] = []\n\n\t//#region Cycle events\n\t// Keep track of spells cast in this cycle by which phase of the cycle they're in\n\tprivate unaspectedEvents: CycleEvent[] = [] // This will only include events during opener or reopener cycles\n\tprivate icePhaseEvents: CycleEvent[] = []\n\tprivate firePhaseEvents: CycleEvent[] = []\n\tprivate manafontPhaseEvents: CycleEvent[] = [] // Keeping track of post-manafont events separately so we can fine-tune some of the analysis logic\n\n\t// Concatenate the fire and manafont events together to get the event array for the full astral fire phase\n\tpublic get fullFirePhaseEvents(): CycleEvent[] {\n\t\treturn this.firePhaseEvents.concat(this.manafontPhaseEvents)\n\t}\n\n\t// Concatenate the phased events together to produce the full event array for the cycle\n\tpublic get events(): CycleEvent[] {\n\t\treturn this.unaspectedEvents.concat(this.icePhaseEvents).concat(this.fullFirePhaseEvents)\n\t}\n\t//#endregion\n\n\t//#region Cycle metadata\n\tpublic startTime: number\n\tpublic endTime?: number\n\tpublic firePhaseMetadata: FirePhaseMetadata\n\tpublic finalOrDowntime: boolean = false\n\n\tprivate _errorCode: CycleErrorCode = CYCLE_ERRORS.NO_ERROR\n\n\tpublic set errorCode(code: CycleErrorCode) {\n\t\tif (code.priority > this._errorCode.priority) {\n\t\t\tthis._errorCode = code\n\t\t}\n\t}\n\n\tpublic get errorCode(): CycleErrorCode {\n\t\treturn this._errorCode\n\t}\n\t//#endregion\n\n\t//#region Fire 4s\n\t/**\n\t * Determines how many Fire 4s the player should have been able to cast during this cycle.\n\t * NOTE:\n\t *   This function does NOT account for all the complexities of any alternative playstyles.\n\t */\n\tpublic get expectedFire4s(): number | undefined {\n\t\tif (this.finalOrDowntime) {\n\t\t\treturn\n\t\t}\n\n\t\t// Get the expected count prior to the initial despair\n\t\tlet expectedCount = this.expectedFire4sBeforeDespair\n\n\t\t// Adjust expected count if the cycle included manafont\n\t\texpectedCount += this.hasManafont ? FIRE4_FROM_MANAFONT : 0\n\n\t\treturn expectedCount\n\t}\n\n\tpublic get expectedFire4sBeforeDespair(): number {\n\t\t// Cycles start with a baseline of 4 Fire 4s\n\t\tlet expectedCount = NO_UH_EXPECTED_FIRE4\n\n\t\t// Cycles with at least one heart get an extra F4 (5x F4 + F1 with 1 heart is the same MP cost as the standard 6F4 + F1 with 3)\n\t\t// Note that two hearts does not give any extra F4s, though it'll hardly ever come up in practice\n\t\tif (this.firePhaseMetadata.initialGaugeState.umbralHearts > 0) {\n\t\t\texpectedCount++\n\t\t}\n\n\t\t// Cycles with full hearts get two extra F4s\n\t\tif (this.firePhaseMetadata.initialGaugeState.umbralHearts === UMBRAL_HEARTS_MAX_STACKS) {\n\t\t\texpectedCount++\n\t\t}\n\n\t\t/**\n\t\t * IF this cycle's Astral Fire phase began with no Umbral Hearts (either no-B4-opener, or a midfight alternate playstyle cycle),\n\t\t * AND it is not an opener that begins with Fire 3 (ie, the cycle includes an ice phase)\n\t\t * AND we have leylines for long enough to squeeze in an extra F4\n\t\t * THEN we increase the expected count by one\n\t\t */\n\t\tif (\n\t\t\texpectedCount === NO_UH_EXPECTED_FIRE4 &&\n\t\t\tthis.icePhaseEvents.length > 0 &&\n\t\t\tthis.firePhaseMetadata.circleOfPowerPct >= EXTRA_F4_COP_THRESHOLD\n\t\t) {\n\t\t\texpectedCount++\n\t\t}\n\n\t\t// Make sure we don't go wild and return a larger expected count than is actually possible, in case the above logic misbehaves...\n\t\treturn Math.min(expectedCount, MAX_POSSIBLE_FIRE4)\n\t}\n\n\tpublic get actualFire4s(): number {\n\t\treturn this.events.filter(event => event.action === this.data.actions.FIRE_IV.id).length\n\t}\n\n\tpublic get missingFire4s(): number | undefined {\n\t\tif (!this.expectedFire4s) { return }\n\t\treturn Math.max(this.expectedFire4s - this.actualFire4s, 0)\n\t}\n\t//#endregion\n\n\t//#region Despairs\n\tpublic get expectedDespairs(): number {\n\t\treturn this.hasManafont ? 2 : 1\n\t}\n\n\tpublic get actualDespairs(): number {\n\t\treturn this.events.filter(event => event.action === this.data.actions.DESPAIR.id).length\n\t}\n\n\tpublic get missingDespairs(): number {\n\t\treturn Math.max(this.expectedDespairs - this.actualDespairs, 0)\n\t}\n\t//#endregion\n\n\t//#region Thunder 3s\n\tprivate hardT3sInPhase(events: CycleEvent[]): number {\n\t\treturn events.filter(event => event.action === this.data.actions.THUNDER_III.id && !event.isProc).length\n\t}\n\n\tpublic get hardT3sBeforeManafont(): number {\n\t\treturn this.hardT3sInPhase(this.firePhaseEvents)\n\t}\n\n\tpublic get hardT3sAfterManafont(): number {\n\t\treturn this.hardT3sInPhase(this.manafontPhaseEvents)\n\t}\n\n\tpublic get hardT3sInFireCount(): number {\n\t\treturn this.hardT3sBeforeManafont + this.hardT3sAfterManafont\n\t}\n\n\tpublic get extraT3s(): number {\n\t\t// By definition, if you didn't miss any expected casts, you couldn't have hardcast an extra T3\n\t\tif (!(this.missingFire4s || this.missingDespairs)) {\n\t\t\treturn 0\n\t\t}\n\n\t\t// Determine how much MP we need to cast all of our expected Fire spells\n\t\tconst minimumMPForExpectedFires =\n\t\t\t(this.expectedFire4sBeforeDespair * this.data.actions.FIRE_IV.mpCost + // MP for the expected Fire 4s\n\t\t\t(this.fullFirePhaseEvents.some(event => event.action === this.data.actions.FIRE_I.id || event.action === this.data.actions.PARADOX.id) ? 1 : 0) * this.data.actions.FIRE_I.mpCost) // Feelycraft: If they included a single F1/Paradox we'll allow it. If they skipped it, that's fine too. If they have more than one, it's bad so only allow one for the MP requirement calculation.\n\t\t\t* 2 // Astral Fire makes F1 and F4 cost twice as much\n\t\t\t- this.firePhaseMetadata.initialGaugeState.umbralHearts * this.data.actions.FIRE_IV.mpCost // Refund the additional cost for each Umbral Heart carried into the Astral Fire phase\n\t\t\t+ this.data.actions.FIRE_IV.mpCost // Add in the required MP cost for Despair, which happens to be the same as an F4\n\n\t\t// Figure out how many T3s we could hardcast with the MP not needed for Fires (if any)\n\t\tconst maxHardcastT3s = Math.floor(Math.max(this.firePhaseMetadata.initialMP - minimumMPForExpectedFires, 0) / this.data.actions.THUNDER_III.mpCost)\n\n\t\t// Refund the T3s that dont lose us a Fire 4 from the pre-manafont hardcast count, as well as one from the post-manafont count\n\t\treturn Math.max(this.hardT3sBeforeManafont - maxHardcastT3s, 0) + Math.max(this.hardT3sAfterManafont - 1, 0)\n\t}\n\t//#endregion\n\n\t//#region Manafont\n\tpublic get hasManafont(): boolean {\n\t\treturn this.events.some(event => event.action === this.data.actions.MANAFONT.id)\n\t}\n\n\tpublic get manafontBeforeDespair(): boolean {\n\t\treturn this.hasManafont && !this.firePhaseEvents.some(event => event.action === this.data.actions.DESPAIR.id)\n\t}\n\t//#endregion\n\n\t//#region Other Fire checks\n\tpublic get extraF1s(): number {\n\t\t// Paradox counts against the allowed F1 count if used in Fire phase\n\t\treturn Math.max(this.fullFirePhaseEvents.filter(event => event.action === this.data.actions.FIRE_I.id || event.action === this.data.actions.PARADOX.id).length - 1, 0)\n\t}\n\n\tpublic get isMissingFire(): boolean {\n\t\treturn !this.events.some(event => this.fireSpellIds.includes(event.action))\n\t}\n\t//#endregion\n\n\t//#region Final cycle or downtime cycle checks\n\tpublic get shouldSkipB4(): boolean {\n\t\treturn this.finalOrDowntime // B4 should be skipped if this cycle ended in downtime or the end of the fight,\n\t\t\t&& this.icePhaseEvents.some(event => event.action === this.data.actions.BLIZZARD_IV.id) // AND this cycle had a B4 cast\n\t\t\t&& this.actualFire4s <= NO_UH_EXPECTED_FIRE4 // AND the Umbral Hearts gained from Blizzard 4 weren't needed\n\t}\n\n\t// Hardcasted T3's initial potency isn't worth it if the DoT is going to go to waste before the boss jumps or dies\n\tpublic get shouldSkipT3(): boolean {\n\t\treturn this.finalOrDowntime && this.hardT3sInFireCount > 0\n\t}\n\t//#endregion\n\n\tpublic get includeInSuggestions(): boolean {\n\t\treturn this.errorCode.priority < DEATH_PRIORITY && this.errorCode.priority > HIDDEN_PRIORITY_THRESHOLD\n\t}\n\n\tconstructor(start: number, gaugeState: BLMGaugeState, dataRef: Data, fireSpellIds: number[]) {\n\t\tthis.startTime = start\n\t\tthis.firePhaseMetadata = {\n\t\t\tstartTime: 0,\n\t\t\tinitialMP: 0,\n\t\t\tcircleOfPowerPct: 0,\n\t\t\tinitialGaugeState: {...gaugeState},\n\t\t}\n\t\tthis.data = dataRef\n\t\tthis.fireSpellIds = fireSpellIds\n\t}\n\n\tpublic overrideErrorCode(code: CycleErrorCode): void {\n\t\tthis._errorCode = code\n\t}\n\n\tpublic addEvent(event: CycleEvent): void {\n\t\t// Stash the event in the appropriate phase-specific array\n\t\tif (!event.gaugeContext.enochian) {\n\t\t\tthis.unaspectedEvents.push(event)\n\t\t} else if (this.firePhaseMetadata.startTime === 0) {\n\t\t\tthis.icePhaseEvents.push(event)\n\t\t} else if (!this.firePhaseEvents.some(event => event.action === this.data.actions.MANAFONT.id)) {\n\t\t\tthis.firePhaseEvents.push(event)\n\t\t} else {\n\t\t\tthis.manafontPhaseEvents.push(event)\n\t\t}\n\t}\n}\n\nexport class RotationWatchdog extends Analyser {\n\tstatic override handle = 'RotationWatchdog'\n\tstatic override title = t('blm.rotation-watchdog.title')`Rotation Outliers`\n\tstatic override displayOrder = DISPLAY_ORDER.ROTATION\n\n\t@dependency private suggestions!: Suggestions\n\t@dependency private invulnerability!: Invulnerability\n\t@dependency private timeline!: Timeline\n\t@dependency private unableToAct!: UnableToAct\n\t@dependency private actors!: Actors\n\t@dependency private gauge!: Gauge\n\t@dependency private data!: Data\n\t@dependency private procs!: Procs\n\t@dependency private leylines!: Leylines\n\n\tprivate currentGaugeState: BLMGaugeState = {\n\t\tastralFire: 0,\n\t\tumbralIce: 0,\n\t\tumbralHearts: 0,\n\t\tpolyglot: 0,\n\t\tenochian: false,\n\t\tparadox: 0,\n\t}\n\n\tprivate cycleEndpointIds = CYCLE_ENDPOINTS.map(key => this.data.actions[key].id)\n\n\tprivate fireSpellIds = FIRE_SPELLS.map(key => this.data.actions[key].id)\n\tprivate currentRotation: Cycle = new Cycle(this.parser.pull.timestamp, this.currentGaugeState, this.data, this.fireSpellIds)\n\tprivate history: Cycle[] = []\n\n\tprivate firstEvent: boolean = true\n\t// counters for suggestions\n\tprivate uptimeSouls: number = 0\n\n\toverride initialise() {\n\t\tthis.addEventHook({type: 'action', source: this.parser.actor.id}, this.onCast)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t\tthis.addEventHook('blmgauge', this.onGaugeEvent)\n\t\tthis.addEventHook({\n\t\t\ttype: 'death',\n\t\t\tactor: this.parser.actor.id,\n\t\t}, this.onDeath)\n\t}\n\n\t// Handle events coming from BLM's Gauge module\n\tprivate onGaugeEvent(event: Events['blmgauge']) {\n\t\tconst nextGaugeState = this.gauge.getGaugeState(event.timestamp)\n\n\t\t// If we're beginning the fire phase of this cycle, note it and save some data\n\t\tif (this.currentGaugeState.astralFire === 0 && nextGaugeState.astralFire > 0) {\n\t\t\tthis.currentRotation.firePhaseMetadata.startTime = event.timestamp\n\t\t\tthis.currentRotation.firePhaseMetadata.initialMP = this.actors.current.mp.current\n\n\t\t\t// Spread the current gauge state into the fire phase metadata for future reference\n\t\t\tthis.currentRotation.firePhaseMetadata.initialGaugeState = {...this.currentGaugeState}\n\t\t}\n\n\t\t// If we no longer have enochian, flag it for display\n\t\tif (this.currentGaugeState.enochian && !nextGaugeState.enochian) {\n\t\t\tthis.currentRotation.errorCode = CYCLE_ERRORS.DROPPED_AF_UI\n\t\t}\n\n\t\t// Retrieve the GaugeState from the event\n\t\tthis.currentGaugeState = {...nextGaugeState}\n\t}\n\n\t// Handle cast events and updated recording data accordingly\n\tprivate onCast(event: Events['action']) {\n\t\tconst actionId = event.action\n\n\t\t// If this action is signifies the beginning of a new cycle, unless this is the first\n\t\t// cast of the log, stop the current cycle, and begin a new one. If Transposing from ice\n\t\t// to fire, keep this cycle going\n\t\tif (this.cycleEndpointIds.includes(actionId) && !this.firstEvent &&\n\t\t\t!(actionId === this.data.actions.TRANSPOSE.id && this.currentGaugeState.umbralIce > 0)) {\n\t\t\tthis.startRecording(event)\n\t\t}\n\n\t\t// Add actions other than auto-attacks to the rotation cast list\n\t\tconst action = this.data.getAction(actionId)\n\n\t\tif (!action  || action.autoAttack) {\n\t\t\treturn\n\t\t}\n\n\t\t// Note that we've recorded our first GCD event once we have one\n\t\tif (this.firstEvent && action.onGcd) { this.firstEvent = false }\n\n\t\tthis.currentRotation.addEvent({...event, isProc: this.procs.checkEventWasProc(event), gaugeContext: {...this.currentGaugeState}})\n\n\t\tif (actionId === this.data.actions.UMBRAL_SOUL.id && !this.invulnerability.isActive({types: ['invulnerable']})) {\n\t\t\tthis.uptimeSouls++\n\t\t}\n\t}\n\n\tprivate onDeath() {\n\t\tthis.currentRotation.errorCode = CYCLE_ERRORS.DIED\n\t}\n\n\t// Finish this parse and add the suggestions and checklist items\n\tprivate onComplete() {\n\t\tthis.stopRecording(undefined)\n\n\t\t// Override the error code for cycles that dropped enochian, when the cycle contained an unabletoact time long enough to kill it.\n\t\t// Couldn't do this at the time of code assignment, since the downtime data wasn't fully available yet\n\t\tfor (const cycle of this.history) {\n\t\t\tif (cycle.errorCode !== CYCLE_ERRORS.DROPPED_AF_UI) { continue }\n\n\t\t\tconst windows = this.unableToAct\n\t\t\t\t.getWindows({\n\t\t\t\t\tstart: cycle.startTime,\n\t\t\t\t\tend: cycle.endTime,\n\t\t\t\t})\n\t\t\t\t.filter(window => Math.max(0, window.end - window.start) >= ASTRAL_UMBRAL_DURATION)\n\n\t\t\tif (windows.length > 0) {\n\t\t\t\tcycle.overrideErrorCode(CYCLE_ERRORS.FINAL_OR_DOWNTIME)\n\t\t\t}\n\t\t}\n\n\t\t// Re-check to see if any of the cycles that were tagged as missing Fire 4s were actually right before a downtime but the boss\n\t\t// became invunlnerable before another Fire 4 could've been cast. If so, mark it as a finalOrDowntime cycle, clear the error code\n\t\t// and reprocess it to see if there were any other errors\n\t\tthis.history.forEach(cycle => {\n\t\t\tif (cycle.errorCode !== CYCLE_ERRORS.MISSING_FIRE4S) { return }\n\t\t\tconst cycleEnd = cycle.endTime ?? (this.parser.pull.timestamp + this.parser.pull.duration)\n\t\t\tif (this.invulnerability.isActive({\n\t\t\t\ttimestamp: cycleEnd + this.data.actions.FIRE_IV.castTime,\n\t\t\t\ttypes: ['invulnerable'],\n\t\t\t})) {\n\t\t\t\tcycle.finalOrDowntime = true\n\t\t\t\tcycle.overrideErrorCode(CYCLE_ERRORS.NO_ERROR)\n\t\t\t\tthis.processCycle(cycle)\n\t\t\t}\n\t\t})\n\n\t\t// Suggestion for skipping B4 on rotations that are cut short by the end of the parse or downtime\n\t\tconst shouldSkipB4s = this.history.filter(cycle => cycle.shouldSkipB4).length\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.FIRE_IV.icon,\n\t\t\tcontent: <Trans id=\"blm.rotation-watchdog.suggestions.should-skip-b4.content\">\n\t\t\t\tYou lost at least one <DataLink action=\"FIRE_IV\"/> by not skipping <DataLink action=\"BLIZZARD_IV\"/> in an Umbral Ice phase before the fight finished or a phase transition occurred.\n\t\t\t</Trans>,\n\t\t\ttiers: ENHANCED_SEVERITY_TIERS,\n\t\t\tvalue: shouldSkipB4s,\n\t\t\twhy: <Trans id=\"blm.rotation-watchdog.suggestions.should-skip-b4.why\">\n\t\t\t\tYou should have skipped <DataLink showIcon={false} action=\"BLIZZARD_IV\"/> <Plural value={shouldSkipB4s} one=\"# time\" other=\"# times\"/>.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\t// Suggestion for skipping T3 on rotations that are cut short by the end of the parse or downtime\n\t\tconst shouldSkipT3s = this.history.filter(cycle => cycle.shouldSkipT3).reduce<number>((sum, cycle) => sum + cycle.hardT3sInFireCount, 0)\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.FIRE_IV.icon,\n\t\t\tcontent: <Trans id=\"blm.rotation-watchdog.suggestions.should-skip-t3.content\">\n\t\t\t\tYou lost at least one <DataLink action=\"FIRE_IV\"/> by hard casting <DataLink action=\"THUNDER_III\"/> before the fight finished or a phase transition occurred.\n\t\t\t</Trans>,\n\t\t\ttiers: ENHANCED_SEVERITY_TIERS,\n\t\t\tvalue: shouldSkipT3s,\n\t\t\twhy: <Trans id=\"blm.rotation-watchdog.suggestions.should-skip-t3.why\">\n\t\t\t\tYou should have skipped <DataLink showIcon={false} action=\"THUNDER_III\"/> <Plural value={shouldSkipT3s} one=\"# time\" other=\"# times\"/>.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\t// Suggestion for unneccessary extra F1s\n\t\tconst extraF1s = this.history.reduce<number>((sum, cycle) => sum + cycle.extraF1s, 0)\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.FIRE_I.icon,\n\t\t\tcontent: <Trans id=\"blm.rotation-watchdog.suggestions.extra-f1s.content\">\n\t\t\t\tCasting more than one <DataLink action=\"FIRE_I\"/> per Astral Fire cycle is a crutch that should be avoided by better pre-planning of the encounter.\n\t\t\t</Trans>,\n\t\t\ttiers: DEFAULT_SEVERITY_TIERS,\n\t\t\tvalue: extraF1s,\n\t\t\twhy: <Trans id=\"blm.rotation-watchdog.suggestions.extra-f1s.why\">\n\t\t\t\tYou cast an extra <DataLink showIcon={false} action=\"FIRE_I\"/> <Plural value={extraF1s} one=\"# time\" other=\"# times\"/>.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\t// Suggestion to end Astral Fires with Despair\n\t\tconst astralFiresMissingDespairs = this.history.filter(cycle => cycle.missingDespairs && cycle.includeInSuggestions).length\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.DESPAIR.icon,\n\t\t\tcontent: <Trans id=\"blm.rotation-watchdog.suggestions.end-with-despair.content\">\n\t\t\t\tOnce you can no longer cast another spell in Astral Fire and remain above 800 MP, you should use your remaining MP by casting <DataLink action=\"DESPAIR\"/>.\n\t\t\t</Trans>,\n\t\t\ttiers: DEFAULT_SEVERITY_TIERS,\n\t\t\tvalue: astralFiresMissingDespairs,\n\t\t\twhy: <Trans id=\"blm.rotation-watchdog.suggestions.end-with-despair.why\">\n\t\t\t\t<Plural value={astralFiresMissingDespairs} one=\"# Astral Fire phase was\" other=\"# Astral Fire phases were\"/> missing at least one <DataLink showIcon={false} action=\"DESPAIR\"/>.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\t// Suggestion to not use Manafont before Despair\n\t\tconst manafontsBeforeDespair = this.history.filter(cycle => cycle.manafontBeforeDespair).length\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.MANAFONT.icon,\n\t\t\tcontent: <Trans id=\"blm.rotation-watchdog.suggestions.mf-before-despair.content\">\n\t\t\t\tUsing <DataLink action=\"MANAFONT\"/> before <DataLink action=\"DESPAIR\"/> leads to fewer <DataLink showIcon={false} action=\"DESPAIR\"/>s than possible being cast. Try to avoid that since <DataLink showIcon={false} action=\"DESPAIR\"/> is stronger than <DataLink action=\"FIRE_IV\"/>.\n\t\t\t</Trans>,\n\t\t\ttiers: ENHANCED_SEVERITY_TIERS,\n\t\t\tvalue: manafontsBeforeDespair,\n\t\t\twhy: <Trans id=\"blm.rotation-watchdog.suggestions.mf-before-despair.why\">\n\t\t\t\t<DataLink showIcon={false} action=\"MANAFONT\"/> was used before <DataLink action=\"DESPAIR\"/> <Plural value={manafontsBeforeDespair} one=\"# time\" other=\"# times\"/>.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\t// Suggestion for hard T3s under AF. Should only have one per cycle\n\t\tconst extraT3s = this.history.reduce<number>((sum, cycle) => sum + cycle.extraT3s, 0)\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.THUNDER_III.icon,\n\t\t\tcontent: <Trans id=\"blm.rotation-watchdog.suggestions.wrong-t3.content\">\n\t\t\t\tDon't hard cast more than one <DataLink action=\"THUNDER_III\"/> in your Astral Fire phase, since that costs MP which could be used for more <DataLink action=\"FIRE_IV\"/>s.\n\t\t\t</Trans>,\n\t\t\ttiers: DEFAULT_SEVERITY_TIERS,\n\t\t\tvalue: extraT3s,\n\t\t\twhy: <Trans id=\"blm.rotation-watchdog.suggestions.wrong-t3.why\">\n\t\t\t\t<DataLink showIcon={false} action=\"THUNDER_III\"/> was hard casted under Astral Fire <Plural value={extraT3s} one=\"# extra time\" other=\"# extra times\"/>.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\t// Suggestion not to icemage, but don't double-count it if they got cut short or we otherwise weren't showing it in the errors table\n\t\tconst rotationsWithoutFire = this.history.filter(cycle => cycle.isMissingFire && cycle.includeInSuggestions && !cycle.finalOrDowntime).length\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.BLIZZARD_II.icon,\n\t\t\tcontent: <Trans id=\"blm.rotation-watchdog.suggestions.icemage.content\">\n\t\t\t\tAvoid spending significant amounts of time in Umbral Ice. The majority of your damage comes from your Astral Fire phase, so you should maximize the number of <DataLink action=\"FIRE_IV\"/>s cast during the fight.\n\t\t\t</Trans>,\n\t\t\ttiers: DEFAULT_SEVERITY_TIERS,\n\t\t\tvalue: rotationsWithoutFire,\n\t\t\twhy: <Trans id=\"blm.rotation-watchdog.suggestions.icemage.why\">\n\t\t\t\t<Plural value={rotationsWithoutFire} one=\"# rotation was\" other=\"# rotations were\"/> performed with no fire spells.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.UMBRAL_SOUL.icon,\n\t\t\tcontent: <Trans id=\"blm.rotation-watchdog.suggestions.uptime-souls.content\">\n\t\t\t\tAvoid using <DataLink action=\"UMBRAL_SOUL\"/> when there is a target available to hit with a damaging ability. <DataLink showIcon={false} action=\"UMBRAL_SOUL\"/> does no damage and prevents you from using other GCD skills. It should be reserved for downtime.\n\t\t\t</Trans>,\n\t\t\ttiers: DEFAULT_SEVERITY_TIERS,\n\t\t\tvalue: this.uptimeSouls,\n\t\t\twhy: <Trans id=\"blm.rotation-watchdog.suggestions.uptime-souls.why\">\n\t\t\t\t<DataLink showIcon={false} action=\"UMBRAL_SOUL\"/> was performed during uptime <Plural value={this.uptimeSouls} one=\"# time\" other=\"# times\"/>.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n\n\t// Complete the previous cycle and start a new one\n\tprivate startRecording(event: Events['action']) {\n\t\tthis.stopRecording(event)\n\t\t// Pass in whether we've seen the first cycle endpoint to account for pre-pull buff executions (mainly Sharpcast)\n\t\tthis.currentRotation = new Cycle(event.timestamp, this.currentGaugeState, this.data, this.fireSpellIds)\n\t}\n\n\t// End the current cycle, send it off to error processing, and add it to the history list\n\tprivate stopRecording(event: Events['action'] | undefined) {\n\t\tthis.currentRotation.endTime = this.parser.currentEpochTimestamp\n\t\t// TODO: Replace this BS with core statuses once that's ported\n\t\tthis.currentRotation.firePhaseMetadata.circleOfPowerPct =\n\t\t\tthis.leylines.getStatusDurationInRange(this.data.statuses.CIRCLE_OF_POWER.id, this.currentRotation.firePhaseMetadata.startTime, this.currentRotation.endTime) /\n\t\t\t(this.currentRotation.endTime - this.currentRotation.firePhaseMetadata.startTime)\n\n\t\t// If an event object wasn't passed, or the event was a transpose that occurred during downtime,\n\t\t// treat this as a rotation that ended with some kind of downtime\n\t\tif (\n\t\t\t!event\n\t\t\t|| (\n\t\t\t\tevent\n\t\t\t\t&& event.action === this.data.actions.TRANSPOSE.id\n\t\t\t\t&& this.invulnerability.isActive({\n\t\t\t\t\ttimestamp: event.timestamp,\n\t\t\t\t\ttypes: ['untargetable'],\n\t\t\t\t})\n\t\t\t)\n\t\t) {\n\t\t\tthis.currentRotation.finalOrDowntime = true\n\t\t}\n\n\t\tthis.processCycle(this.currentRotation)\n\t\tthis.history.push(this.currentRotation)\n\t}\n\n\t// Process errors for this cycle\n\t// TODO: Handle aoe things?\n\t// TODO: Handle Flare?\n\tprivate processCycle(currentRotation: Cycle) {\n\t\t// Only process errors for rotations with more than the minimum number of casts,\n\t\t// since fewer than that usually indicates something weird happening\n\t\tif (currentRotation.events.length <= MIN_ROTATION_LENGTH) {\n\t\t\tcurrentRotation.errorCode = CYCLE_ERRORS.SHORT\n\t\t\treturn\n\t\t}\n\n\t\t// Check for errors that apply for all cycles\n\n\t\t// Check if the rotation overwrote a Paradox from the ice phase\n\t\tif (currentRotation.firePhaseMetadata.initialGaugeState.paradox > 0 &&\n\t\t\tcurrentRotation.firePhaseMetadata.initialGaugeState.umbralIce === ASTRAL_UMBRAL_MAX_STACKS &&\n\t\t\tcurrentRotation.firePhaseMetadata.initialGaugeState.umbralHearts === UMBRAL_HEARTS_MAX_STACKS) {\n\t\t\tcurrentRotation.errorCode = CYCLE_ERRORS.MISSED_ICE_PARADOX\n\t\t}\n\n\t\t// Check if the rotation included the expected number of Despair casts\n\t\tif (currentRotation.missingDespairs) {\n\t\t\tcurrentRotation.errorCode = CYCLE_ERRORS.MISSING_DESPAIRS\n\t\t}\n\n\t\t// Check whether manafont was used before despair\n\t\tif (currentRotation.manafontBeforeDespair) {\n\t\t\tcurrentRotation.errorCode = CYCLE_ERRORS.MANAFONT_BEFORE_DESPAIR\n\t\t}\n\n\t\t// Check if the rotation included more than one Fire 1\n\t\tif (currentRotation.extraF1s > 0) {\n\t\t\tcurrentRotation.errorCode = CYCLE_ERRORS.EXTRA_F1\n\t\t}\n\n\t\t// If this cycle ends with downtime or is the last cycle, many of the errors we normally check for\n\t\t// don't apply, so split the processing pathway here\n\t\tif (currentRotation.finalOrDowntime) {\n\t\t\tthis.processDowntimeCycle(currentRotation)\n\t\t\treturn\n\t\t}\n\n\t\tthis.processNormalCycle(currentRotation)\n\t}\n\n\t// Process errors for a normal mid-fight cycle\n\tprivate processNormalCycle(currentRotation: Cycle) {\n\t\t// Check to make sure we didn't lose Fire 4 casts due to spending MP on T3 hardcasts\n\t\tif (currentRotation.extraT3s > 0) {\n\t\t\tcurrentRotation.errorCode = CYCLE_ERRORS.EXTRA_T3\n\t\t}\n\n\t\t// Why so icemage?\n\t\tif (currentRotation.isMissingFire) {\n\t\t\tcurrentRotation.errorCode = CYCLE_ERRORS.NO_FIRE_SPELLS\n\t\t}\n\n\t\t// If they're just missing Fire 4 because derp, note it\n\t\tif (currentRotation.missingFire4s) {\n\t\t\tcurrentRotation.errorCode = CYCLE_ERRORS.MISSING_FIRE4S\n\t\t}\n\t}\n\n\t// Process errors for a cycle that was cut short by downtime or by the fight ending\n\tprivate processDowntimeCycle(currentRotation: Cycle) {\n\t\tcurrentRotation.errorCode = CYCLE_ERRORS.FINAL_OR_DOWNTIME\n\n\t\t// Check if more Fire 4s could've been cast by skipping Blizzard 4 before this downtime\n\t\tif (currentRotation.shouldSkipB4) {\n\t\t\tcurrentRotation.errorCode = CYCLE_ERRORS.SHOULD_SKIP_B4\n\t\t}\n\n\t\t// Check if more Fire 4s could've been cast by skipping a hardcast Thunder 3\n\t\tif (currentRotation.hardT3sInFireCount > 0) {\n\t\t\tcurrentRotation.errorCode = CYCLE_ERRORS.SHOULD_SKIP_T3\n\t\t}\n\t}\n\n\toverride output() {\n\t\tconst outliers: Cycle[] = this.history.filter(cycle => cycle.errorCode.priority >\n\t\t\tHIDDEN_PRIORITY_THRESHOLD || DEBUG_SHOW_ALL_CYCLES)\n\t\tif (outliers.length > 0) {\n\t\t\treturn <Fragment>\n\t\t\t\t<Message>\n\t\t\t\t\t<Trans id=\"blm.rotation-watchdog.rotation-table.message\">\n\t\t\t\t\t\tThe core of BLM consists of six casts of <DataLink action=\"FIRE_IV\"/>, two casts of <DataLink action=\"PARADOX\"/> and one cast <DataLink action=\"DESPAIR\"/> per rotation.<br/>\n\t\t\t\t\t\tWith <DataLink action=\"MANAFONT\"/>, an extra cast each of <DataLink action=\"FIRE_IV\"/> and <DataLink action=\"DESPAIR\"/> are expected.<br/>\n\t\t\t\t\t\tAvoid missing Fire IV casts where possible.\n\t\t\t\t\t</Trans>\n\t\t\t\t</Message>\n\t\t\t\t<Message warning icon>\n\t\t\t\t\t<Icon name=\"warning sign\"/>\n\t\t\t\t\t<Message.Content>\n\t\t\t\t\t\t<Trans id=\"blm.rotation-watchdog.rotation-table.disclaimer\">This module assumes you are following the standard BLM playstyle.<br/>\n\t\t\t\t\t\t\tIf you are following a non-standard playstyle, this report and many of the suggestions may not be applicable.\n\t\t\t\t\t\t</Trans>\n\t\t\t\t\t</Message.Content>\n\t\t\t\t</Message>\n\t\t\t\t<RotationTable\n\t\t\t\t\ttargets={[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\theader: <DataLink showName={false} action=\"FIRE_IV\"/>,\n\t\t\t\t\t\t\taccessor: 'fire4s',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\theader: <DataLink showName={false} action=\"DESPAIR\"/>,\n\t\t\t\t\t\t\taccessor: 'despairs',\n\t\t\t\t\t\t},\n\t\t\t\t\t]}\n\t\t\t\t\tnotes={[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\theader: <Trans id=\"blm.rotation-watchdog.rotation-table.header.reason\">Why Outlier</Trans>,\n\t\t\t\t\t\t\taccessor: 'reason',\n\t\t\t\t\t\t},\n\t\t\t\t\t]}\n\t\t\t\t\tdata={outliers.map(cycle => {\n\t\t\t\t\t\treturn ({\n\t\t\t\t\t\t\tstart: cycle.startTime - this.parser.pull.timestamp,\n\t\t\t\t\t\t\tend: cycle.endTime != null ?\n\t\t\t\t\t\t\t\tcycle.endTime - this.parser.pull.timestamp :\n\t\t\t\t\t\t\t\tcycle.startTime - this.parser.pull.timestamp,\n\t\t\t\t\t\t\ttargetsData: {\n\t\t\t\t\t\t\t\tfire4s: {\n\t\t\t\t\t\t\t\t\tactual: cycle.actualFire4s,\n\t\t\t\t\t\t\t\t\texpected: cycle.expectedFire4s,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tdespairs: {\n\t\t\t\t\t\t\t\t\tactual: cycle.actualDespairs,\n\t\t\t\t\t\t\t\t\texpected: cycle.expectedDespairs,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tnotesMap: {\n\t\t\t\t\t\t\t\treason: <>{cycle.errorCode.message}</>,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\trotation: cycle.events,\n\t\t\t\t\t\t})\n\t\t\t\t\t})}\n\t\t\t\t\tonGoto={this.timeline.show}\n\t\t\t\t/>\n\t\t\t</Fragment>\n\t\t}\n\t}\n}\n","import {Trans, Plural} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {ActionKey} from 'data/ACTIONS'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Data} from 'parser/core/modules/Data'\nimport Suggestions, {TieredSuggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport {StatusItem} from 'parser/core/modules/Timeline'\nimport React from 'react'\nimport {Gauge} from './Gauge'\nimport Procs from './Procs'\n\nconst SHARPCAST_CONSUMERS: ActionKey[] = [\n\t'FIRE_I',\n\t'THUNDER_III',\n\t'THUNDER_IV',\n\t'SCATHE',\n\t'PARADOX',\n]\n\ninterface SharpcastWindow {\n\tstart: number,\n\tstop?: number\n}\n\ninterface SharpcastTracker {\n\tcurrent?: SharpcastWindow,\n\thistory: SharpcastWindow[]\n}\n\nexport class Sharpcast extends Analyser {\n\tstatic override handle = 'sharpcast'\n\n\t@dependency private data!: Data\n\t@dependency private procs!: Procs\n\t@dependency private suggestions!: Suggestions\n\t@dependency private gauge!: Gauge\n\n\tprivate buffWindows: SharpcastTracker = {\n\t\thistory: [],\n\t}\n\n\tprivate droppedSharpcasts = 0\n\tprivate overwrittenSharpcasts = 0\n\tprivate sharpedScathes = 0\n\n\tprivate sharpcastConsumerIds = SHARPCAST_CONSUMERS.map(key => this.data.actions[key].id)\n\n\toverride initialise() {\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\t\tconst sharpcastFilter = playerFilter.status(this.data.statuses.SHARPCAST.id)\n\t\tthis.addEventHook(sharpcastFilter.type('statusRemove'), this.onRemoveSharpcast)\n\t\tthis.addEventHook(sharpcastFilter.type('statusApply'), this.onGainSharpcast)\n\t\tthis.addEventHook(playerFilter.type('action').action(oneOf(this.sharpcastConsumerIds)), this.tryConsumeSharpcast)\n\t\tthis.addEventHook({\n\t\t\ttype: 'death',\n\t\t\tactor: this.parser.actor.id,\n\t\t}, this.onDeath)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onRemoveSharpcast(event: Events['statusRemove']) {\n\t\tthis.stopAndSave(event.timestamp)\n\t}\n\n\tprivate onGainSharpcast(event: Events['statusApply']) {\n\t\tif (this.buffWindows.current != null) {\n\t\t\tthis.overwrittenSharpcasts++\n\t\t}\n\t\tthis.buffWindows.current = {\n\t\t\tstart: event.timestamp,\n\t\t}\n\t}\n\n\tprivate tryConsumeSharpcast(event: Events['action']) {\n\t\tconst actionId = event.action\n\n\t\t// Paradox doesn't produce a Firestarter proc if not in Astral Fire\n\t\tif (actionId === this.data.actions.PARADOX.id && this.gauge.getGaugeState(event.timestamp).astralFire <= 0) {\n\t\t\treturn\n\t\t}\n\n\t\t// If this proc is active, consume it\n\t\tif (this.buffWindows.current) {\n\t\t\t// Stop the buff window, and ensure it's not marked as a drop\n\t\t\tthis.stopAndSave(event.timestamp, false)\n\n\t\t\tif (actionId === this.data.actions.SCATHE.id) {\n\t\t\t\tthis.sharpedScathes++\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onDeath(event: Events['death']) {\n\t\tthis.stopAndSave(event.timestamp)\n\t}\n\n\tprivate stopAndSave(endTime = this.parser.currentEpochTimestamp, countDrops = true) {\n\t\tif (!this.buffWindows.current) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.buffWindows.current.stop = endTime\n\t\tif (this.buffWindows.current.stop - this.buffWindows.current.start >= this.data.statuses.SHARPCAST.duration && countDrops) {\n\t\t\tthis.droppedSharpcasts++\n\t\t}\n\t\tthis.buffWindows.history.push(this.buffWindows.current)\n\t\tthis.buffWindows.current = undefined\n\t}\n\n\tprivate onComplete() {\n\t\t// Finalise the buff if it was still active\n\t\tif (this.buffWindows.current) {\n\t\t\tthis.stopAndSave()\n\t\t}\n\n\t\tconst row = this.procs.getRowForStatus(this.data.statuses.SHARPCAST)\n\n\t\tconst fightStart = this.parser.pull.timestamp\n\n\t\t// Add buff windows to the timeline\n\t\tthis.buffWindows.history.forEach(window => {\n\t\t\trow.addItem(new StatusItem({\n\t\t\t\tstatus: this.data.statuses.SHARPCAST,\n\t\t\t\tstart: window.start - fightStart,\n\t\t\t\tend: (window.stop ?? window.start) - fightStart,\n\t\t\t}))\n\t\t})\n\n\t\t// Suggestions to use sharpcasts that wore off.\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.statuses.SHARPCAST.icon,\n\t\t\tcontent: <Trans id=\"blm.sharpcast.suggestions.dropped-sharpcasts.content\">\n\t\t\t\tYou lost at least one guaranteed <DataLink status=\"THUNDERCLOUD\" /> or <DataLink status=\"FIRESTARTER\" /> proc by allowing <DataLink status=\"SHARPCAST\" /> to fall off.\n\t\t\t</Trans>,\n\t\t\ttiers: {\n\t\t\t\t1: SEVERITY.MINOR,\n\t\t\t\t3: SEVERITY.MEDIUM,\n\t\t\t\t5: SEVERITY.MAJOR,\n\t\t\t},\n\t\t\tvalue: this.droppedSharpcasts,\n\t\t\twhy: <Trans id=\"blm.sharpcast.suggestions.dropped-sharpcasts.why\">\n\t\t\t\t<Plural value={this.droppedSharpcasts} one=\"# Sharpcast\" other=\"# Sharpcasts\"/> expired.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\t// Suggestion not to overuse sharp-scathe\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.SCATHE.icon,\n\t\t\tcontent: <Trans id=\"blm.sharpcast.suggestions.sharpcasted-scathes.content\">\n\t\t\t\tYou consumed at least one <DataLink status=\"SHARPCAST\" /> by using <DataLink action=\"SCATHE\" />. While it's better than letting the buff expire, you should try to avoid doing so.\n\t\t\t</Trans>,\n\t\t\ttiers: { // Giving one extra usage before we start dinging med/major since there's kind of a reasonable use-case\n\t\t\t\t1: SEVERITY.MINOR,\n\t\t\t\t4: SEVERITY.MEDIUM,\n\t\t\t\t6: SEVERITY.MAJOR,\n\t\t\t},\n\t\t\tvalue: this.sharpedScathes,\n\t\t\twhy: <Trans id=\"blm.sharpcast.suggestions.sharpcasted-scathes.why\">\n\t\t\t\t<Plural value={this.sharpedScathes} one=\"# Sharpcast was\" other=\"# Sharpcasts were\"/> consumed by <DataLink action=\"SCATHE\" />.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\t// Suggestion not to overwrite Sharpcast\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.SHARPCAST.icon,\n\t\t\tcontent: <Trans id=\"blm.sharpcast.suggestions.overwrote-sharpcasts.content\">\n\t\t\t\tYou lost at least one guaranteed <DataLink status=\"THUNDERCLOUD\" /> or <DataLink status=\"FIRESTARTER\" /> proc by using <DataLink action=\"SHARPCAST\" /> while the status was already active.\n\t\t\t</Trans>,\n\t\t\ttiers: {\n\t\t\t\t1: SEVERITY.MINOR,\n\t\t\t\t3: SEVERITY.MEDIUM,\n\t\t\t\t5: SEVERITY.MAJOR,\n\t\t\t},\n\t\t\tvalue: this.overwrittenSharpcasts,\n\t\t\twhy: <Trans id=\"blm.sharpcast.suggestions.overwrote-sharpcasts.why\">\n\t\t\t\tYou overwrote <DataLink showIcon={false} status=\"SHARPCAST\" /> <Plural value={this.overwrittenSharpcasts} one=\"# time\" other=\"# times\" />.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {DataLink, ActionLink} from 'components/ui/DbLink'\nimport NormalisedMessage from 'components/ui/NormalisedMessage'\nimport styles from 'components/ui/Procs/ProcOverlay.module.css'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport Checklist, {Rule, Requirement} from 'parser/core/modules/Checklist'\nimport {Data} from 'parser/core/modules/Data'\nimport {Invulnerability} from 'parser/core/modules/Invulnerability'\nimport {Statuses} from 'parser/core/modules/Statuses'\nimport Suggestions, {Suggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport React, {ReactNode} from 'react'\nimport {Accordion, Table, Message} from 'semantic-ui-react'\nimport DISPLAY_ORDER from './DISPLAY_ORDER'\nimport Procs from './Procs'\n\nconst MAX_ALLOWED_BAD_GCD_THRESHOLD = 2000\nconst MAX_ALLOWED_T3_CLIPPING = 3000\n\ninterface ThunderApplicationData {\n\tevent: Events['statusApply'],\n\tclip?: number,\n\tsource: number,\n\tproc: boolean\n}\ninterface ThunderStatusData {\n\tlastApplication: number,\n\tapplications: ThunderApplicationData[]\n}\ninterface ThunderTargetData {\n\t[key: number]: ThunderStatusData,\n}\ninterface ThunderApplicationTracker {\n\t[key: string]: ThunderTargetData,\n}\n\nexport class Thunder extends Analyser {\n\tstatic override handle = 'thunder'\n\tstatic override title = t('blm.thunder.title')`Thunder`\n\tstatic override displayOrder = DISPLAY_ORDER.THUNDER\n\n\t@dependency private actors!: Actors\n\t@dependency private checklist!: Checklist\n\t@dependency private data!: Data\n\t@dependency private invulnerability!: Invulnerability\n\t@dependency private procs!: Procs\n\t@dependency private statuses!: Statuses\n\t@dependency private suggestions!: Suggestions\n\n\t// Can never be too careful :blobsweat:\n\tprivate readonly STATUS_DURATION = {\n\t\t[this.data.statuses.THUNDER_III.id]: this.data.statuses.THUNDER_III.duration,\n\t\t[this.data.statuses.THUNDERCLOUD.id]: this.data.statuses.THUNDERCLOUD.duration,\n\t}\n\n    private thunder3Casts = 0\n    private lastThunderProc: boolean = false\n    private lastThunderCast: number = this.data.statuses.THUNDER_III.id\n\tprivate clip: {[key: number]: number} = {\n\t\t[this.data.statuses.THUNDER_III.id]: 0,\n\t}\n\tprivate tracker: ThunderApplicationTracker = {}\n\n\toverride initialise() {\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\t\tthis.addEventHook(playerFilter.type('action').action(this.data.actions.THUNDER_III.id), this.onDotCast)\n\t\tthis.addEventHook(playerFilter.type('statusApply').status(this.data.statuses.THUNDER_III.id), this.onDotApply)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate createTargetApplicationList() {\n\t\treturn {\n\t\t\t[this.data.statuses.THUNDER_III.id]: [],\n\t\t}\n\t}\n\n\tprivate pushApplication(targetKey: string, statusId: number, event: Events['statusApply'], clip?: number) {\n\t\tconst target = this.tracker[targetKey] = this.tracker[targetKey] || this.createTargetApplicationList()\n\t\tconst proc = this.lastThunderProc\n\t\tconst source = this.lastThunderCast\n\t\ttarget[statusId].applications.push({event, clip, source, proc})\n\t\tthis.lastThunderProc = false\n\t}\n\n\tprivate onDotCast(event: Events['action']) {\n\t\tthis.thunder3Casts++\n\t\tif (this.procs.checkEventWasProc(event)) {\n\t\t\tthis.lastThunderProc = true\n\t\t}\n\t\tthis.lastThunderCast = event.action\n\t}\n\n\tprivate onDotApply(event: Events['statusApply']) {\n\t\tconst statusId = event.status\n\n\t\t// Make sure we're tracking for this target\n\t\tconst applicationKey = event.target\n\t\tconst trackerInstance = this.tracker[applicationKey] = this.tracker[applicationKey] || {}\n\n\t\t// If it's not been applied yet, set it and skip out\n\t\tif (!trackerInstance[statusId]) {\n\t\t\ttrackerInstance[statusId] = {\n\t\t\t\tlastApplication: event.timestamp,\n\t\t\t\tapplications: [],\n\t\t\t}\n\t\t\t//save the application for later use in the output\n\t\t\tthis.pushApplication(applicationKey, statusId, event)\n\t\t\treturn\n\t\t}\n\t\t// Base clip calc\n\t\tlet clip = this.STATUS_DURATION[statusId] - (event.timestamp - trackerInstance[statusId].lastApplication)\n\t\tclip = Math.max(0, clip)\n\t\t// Capping clip at 0 - less than that is downtime, which is handled by the checklist requirement\n\t\tthis.clip[statusId] += clip\n\t\t//save the application for later use in the output\n\t\tthis.pushApplication(applicationKey, statusId, event, clip)\n\n\t\ttrackerInstance[statusId].lastApplication = event.timestamp\n\t}\n\n\t// Get the uptime percentage for the Thunder status debuff\n\tprivate getThunderUptime() {\n\t\tconst statusTime = this.statuses.getUptime(this.data.statuses.THUNDER_III, this.actors.foes)\n\t\tconst uptime = this.parser.currentDuration - this.invulnerability.getDuration({types: ['invulnerable']})\n\t\treturn (statusTime / uptime) * 100\n\t}\n\n\tprivate onComplete() {\n\t\t// Checklist item for keeping Thunder 3 DoT rolling\n\t\tthis.checklist.add(new Rule({\n\t\t\tname: <Trans id=\"blm.thunder.checklist.dots.name\">Keep your <DataLink status=\"THUNDER_III\" /> DoT up</Trans>,\n\t\t\tdescription: <Trans id=\"blm.thunder.checklist.dots.description\">\n\t\t\t\tYour <DataLink status=\"THUNDER_III\" /> DoT contributes significantly to your overall damage, both on its own, and from additional <DataLink status=\"THUNDERCLOUD\" /> procs. Try to keep the DoT applied.\n\t\t\t</Trans>,\n\t\t\ttarget: 95,\n\t\t\trequirements: [\n\t\t\t\tnew Requirement({\n\t\t\t\t\tname: <Trans id=\"blm.thunder.checklist.dots.requirement.name\"><DataLink status=\"THUNDER_III\" /> uptime</Trans>,\n\t\t\t\t\tpercent: () => this.getThunderUptime(),\n\t\t\t\t}),\n\t\t\t],\n\t\t}))\n\n\t\t// Suggestions to not spam T3 too much\n\t\tconst sumClip = this.clip[this.data.statuses.THUNDER_III.id]\n\t\tconst maxExpectedClip = (this.thunder3Casts - 1) * MAX_ALLOWED_T3_CLIPPING\n\t\tif (sumClip > maxExpectedClip) {\n\t\t\tthis.suggestions.add(new Suggestion({\n\t\t\t\ticon: this.data.actions.THUNDER_III.icon,\n\t\t\t\tcontent: <Trans id=\"blm.thunder.suggestions.excess-thunder.content\">\n\t\t\t\t\tCasting <DataLink action=\"THUNDER_III\" /> too frequently can cause you to lose DPS by casting fewer <DataLink action=\"FIRE_IV\" />. Try not to cast <DataLink showIcon={false} action=\"THUNDER_III\" /> unless your <DataLink status=\"THUNDER_III\" /> DoT or <DataLink status=\"THUNDERCLOUD\" /> proc are about to wear off.\n\t\t\t\t\tCheck the <a href=\"#\" onClick={e => { e.preventDefault(); this.parser.scrollTo(Thunder.handle) }}><NormalisedMessage message={Thunder.title}/></a> module for more information.\n\t\t\t\t</Trans>,\n\t\t\t\tseverity: sumClip > 2 * maxExpectedClip ? SEVERITY.MAJOR : SEVERITY.MEDIUM,\n\t\t\t\twhy: <Trans id=\"blm.thunder.suggestions.excess-thunder.why\">\n\t\t\t\t\tTotal DoT clipping exceeded the maximum clip time of {this.parser.formatDuration(maxExpectedClip)} by {this.parser.formatDuration(sumClip-maxExpectedClip)}.\n\t\t\t\t</Trans>,\n\t\t\t}))\n\t\t}\n\t}\n\n\tprivate createTargetStatusTable(target: ThunderTargetData) {\n\t\tlet totalThunderClip = 0\n\t\treturn\t<Table collapsing unstackable>\n\t\t\t<Table.Header>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.HeaderCell><DataLink action=\"THUNDER_III\" /> <Trans id=\"blm.thunder.applied\">Applied</Trans></Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell><Trans id=\"blm.thunder.clip\">Clip</Trans></Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell><Trans id=\"blm.thunder.total-clip\">Total Clip</Trans></Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell><Trans id=\"blm.thunder.source\">Source</Trans></Table.HeaderCell>\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{target[this.data.statuses.THUNDER_III.id].applications.map(\n\t\t\t\t\t(event) => {\n\t\t\t\t\t\tconst thisClip = event.clip || 0\n\t\t\t\t\t\ttotalThunderClip += thisClip\n\t\t\t\t\t\tconst action = this.data.getAction(event.source)\n\t\t\t\t\t\tlet icon = <ActionLink showName={false} {...action} />\n\t\t\t\t\t\t//if we have a clip, overlay the proc.png over the actionlink image\n\t\t\t\t\t\tif (event.proc) {\n\t\t\t\t\t\t\ticon = <div className={styles.procOverlay}><ActionLink showName={false} {...action} /></div>\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst renderClipTime = event.clip != null ? this.parser.formatDuration(event.clip) : '-'\n\t\t\t\t\t\tlet clipSeverity: ReactNode = renderClipTime\n\t\t\t\t\t\t// Make it white for expected clipping, yellow if the GCD aligned poorly, and red if it was definitely clipped too hard\n\t\t\t\t\t\tif (thisClip > MAX_ALLOWED_T3_CLIPPING && thisClip <= MAX_ALLOWED_T3_CLIPPING + MAX_ALLOWED_BAD_GCD_THRESHOLD) {\n\t\t\t\t\t\t\tclipSeverity = <span className=\"text-warning\">{clipSeverity}</span>\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (thisClip > MAX_ALLOWED_T3_CLIPPING + MAX_ALLOWED_BAD_GCD_THRESHOLD) {\n\t\t\t\t\t\t\tclipSeverity = <span className=\"text-error\">{clipSeverity}</span>\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn <Table.Row key={event.event.timestamp}>\n\t\t\t\t\t\t\t<Table.Cell>{this.parser.formatEpochTimestamp(event.event.timestamp)}</Table.Cell>\n\t\t\t\t\t\t\t<Table.Cell>{clipSeverity}</Table.Cell>\n\t\t\t\t\t\t\t<Table.Cell>{totalThunderClip ? this.parser.formatDuration(totalThunderClip) : '-'}</Table.Cell>\n\t\t\t\t\t\t\t<Table.Cell style={{textAlign: 'center'}}>{icon}</Table.Cell>\n\t\t\t\t\t\t</Table.Row>\n\t\t\t\t\t})}\n\t\t\t</Table.Body>\n\t\t</Table>\n\n\t}\n\n\toverride output() {\n\t\tconst numTargets = Object.keys(this.tracker).length\n\n\t\tconst disclaimer = <Message>\n\t\t\t<Trans id=\"blm.thunder.clip-disclaimer\">\n\t\t\t\tDue to the nature of <DataLink action=\"THUNDER_III\" /> procs, you will run into situations where you will use your <DataLink status=\"THUNDERCLOUD\" /> proc before it runs out, while your <DataLink status=\"THUNDER_III\" /> is still running on your enemy.\n\t\t\t\tAt most, this could theoretically lead to refreshing <DataLink showIcon={false} status=\"THUNDER_III\" /> a maximum of ~3 seconds early every single refresh.\n\t\t\t\tSince this amount of clipping is still considered optimal, we quantify and call this the maximum clip time.\n\t\t\t</Trans>\n\t\t</Message>\n\n\t\tif (numTargets === 0) { return null }\n\n\t\tif (numTargets > 1) {\n\t\t\tconst panels = Object.keys(this.tracker).map(applicationKey => {\n\t\t\t\tconst target = this.actors.get(applicationKey)\n\t\t\t\treturn {\n\t\t\t\t\tkey: applicationKey,\n\t\t\t\t\ttitle: {\n\t\t\t\t\t\tcontent: <>{target.name}</>,\n\t\t\t\t\t},\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\tcontent: this.createTargetStatusTable(this.tracker[applicationKey]),\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t})\n\t\t\treturn \t<>\n\t\t\t\t{disclaimer}\n\t\t\t\t<Accordion\n\t\t\t\t\texclusive={false}\n\t\t\t\t\tpanels={panels}\n\t\t\t\t\tstyled\n\t\t\t\t\tfluid\n\t\t\t\t/>\n\t\t\t</>\n\n\t\t}\n\n\t\treturn \t<>\n\t\t\t{disclaimer}\n\t\t\t{this.createTargetStatusTable(Object.values(this.tracker)[0])}\n\t\t</>\n\t}\n}\n","import {Plural, Trans} from '@lingui/macro'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Event} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport {Data} from 'parser/core/modules/Data'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\nexport class Triplecast extends Analyser {\n\tstatic override handle = 'triplecast'\n\n\t@dependency private actors!: Actors\n\t@dependency private data!: Data\n\t@dependency private suggestions!: Suggestions\n\n\tprivate overwrittenTriples = 0\n\n\toverride initialise() {\n\t\tthis.addEventHook(filter<Event>().source(this.parser.actor.id).action(this.data.actions.TRIPLECAST.id), this.onTriplecast)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onTriplecast() {\n\t\tif (this.actors.current.hasStatus(this.data.statuses.TRIPLECAST.id)) {\n\t\t\tthis.overwrittenTriples++\n\t\t}\n\t}\n\n\tprivate onComplete() {\n\t\t// Suggestion not to overwrite Sharpcast\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.SHARPCAST.icon,\n\t\t\tcontent: <Trans id=\"blm.triplecast.suggestions.overwrote-triplecasts.content\">\n\t\t\t\tYou lost at least one instant cast spell by using <DataLink action=\"TRIPLECAST\" /> while the status was already active.\n\t\t\t</Trans>,\n\t\t\ttiers: {\n\t\t\t\t1: SEVERITY.MINOR,\n\t\t\t\t2: SEVERITY.MEDIUM,\n\t\t\t\t4: SEVERITY.MAJOR,\n\t\t\t},\n\t\t\tvalue: this.overwrittenTriples,\n\t\t\twhy: <Trans id=\"blm.triplecast.suggestions.overwrote-triplecasts.why\">\n\t\t\t\tYou overwrote <DataLink showIcon={false} status=\"TRIPLECAST\" /> <Plural value={this.overwrittenTriples} one=\"# time\" other=\"# times\" />.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n}\n","import {ActionKey} from 'data/ACTIONS'\nimport {dependency} from 'parser/core/Injectable'\nimport {Weave, Weaving as CoreWeaving} from 'parser/core/modules/Weaving'\nimport {FIRE_SPELLS, ICE_SPELLS} from './Elements'\nimport {Gauge, ASTRAL_UMBRAL_MAX_STACKS} from './Gauge'\n\nconst OGCD_EXCEPTIONS: ActionKey[] = [\n\t'LUCID_DREAMING',\n\t'ADDLE',\n\t'SURECAST',\n\t'TRANSPOSE',\n]\n\nconst OPENER_TIME_THRESHOLD = 10000\nconst OPENER_EXCEPTIONS: ActionKey[] = [\n\t'TRIPLECAST',\n]\n\nexport class Weaving extends CoreWeaving {\n\tprivate ogcdIds = OGCD_EXCEPTIONS.map(key => this.data.actions[key].id)\n\tprivate openerIds = OPENER_EXCEPTIONS.map(key => this.data.actions[key].id)\n\n\t@dependency private gauge!: Gauge\n\n\tprivate iceSpellIds = ICE_SPELLS.map(key => this.data.actions[key].id)\n\tprivate fireSpellIds = FIRE_SPELLS.map(key => this.data.actions[key].id)\n\n\toverride getMaxWeaves(weave: Weave) {\n\t\tconst baseMaxWeaves = super.getMaxWeaves(weave)\n\n\t\treturn Math.max(this.getAllowedClippingWeaves(weave), baseMaxWeaves)\n\t}\n\n\tprivate getAllowedClippingWeaves(weave: Weave) {\n\t\tif (weave.weaves.some(weave => this.ogcdIds.includes(weave.action))) {\n\t\t\treturn 1\n\t\t}\n\t\tif (\n\t\t\tweave.weaves.some(weave => this.openerIds.includes(weave.action)\n\t\t\t&& weave.timestamp - this.parser.pull.timestamp < OPENER_TIME_THRESHOLD)\n\t\t) {\n\t\t\treturn 1\n\t\t}\n\t\tconst gaugeState = this.gauge.getGaugeState(weave.leadingGcdEvent?.timestamp)\n\t\tconst leadingAction = weave.leadingGcdEvent?.action ?? 0\n\t\tif (this.iceSpellIds.includes(leadingAction) && gaugeState.astralFire === ASTRAL_UMBRAL_MAX_STACKS ||\n\t\t\tthis.fireSpellIds.includes(leadingAction) && gaugeState.umbralIce === ASTRAL_UMBRAL_MAX_STACKS) {\n\t\t\treturn 1\n\t\t}\n\t\treturn 0\n\t}\n}\n","import {Interrupts} from 'parser/core/modules/Interrupts'\nimport {AoEUsages} from './AoEUsages'\nimport {CastTime} from './CastTime'\nimport {Defensives} from './Defensives'\nimport {Gauge} from './Gauge'\nimport Leylines from './Leylines'\nimport {NotCasting} from './NotCasting'\nimport {OGCDDowntime} from './OGCDDowntime'\nimport Procs from './Procs'\nimport {RotationWatchdog} from './RotationWatchdog'\nimport {Sharpcast} from './Sharpcast'\nimport {Thunder} from './Thunder'\nimport {Triplecast} from './Triplecast'\nimport {Weaving} from './Weaving'\n\nexport default [\n\tAoEUsages,\n\tWeaving,\n\tCastTime,\n\tDefensives,\n\tGauge,\n\tInterrupts,\n\tLeylines,\n\tNotCasting,\n\tOGCDDowntime,\n\tProcs,\n\tRotationWatchdog,\n\tSharpcast,\n\tThunder,\n\tTriplecast,\n]\n"],"names":["RotationTargetOutcome","RotationTable","this","props","targets","notes","data","onGoto","headerTitle","compact","unstackable","celled","collapsing","Trans","id","target","i","textAlign","header","note","entry","Row","start","actual","expected","isDefined","POSITIVE","NEGATIVE","NEUTRAL","React","targetAccessorResolver","accessor","targetsData","notesAccessorResolver","notesMap","TargetCell","targetComparator","undefined","defaultTargetComparator","targetOutcome","positive","negative","end","rotation","style","marginRight","formatDuration","secondPrecision","circular","size","icon","onClick","targetEntry","events","noteEntry","estimateHelp","__all","legacyFflogs","GlobalCooldown","Data","Statistics","SpeedAdjustments","addEventHook","onComplete","speedAdjustments","getAdjustedDuration","duration","BASE_GCD","isAdjustmentEstimated","estimated","isEstimated","statistics","add","SimpleStatistic","title","actions","ATTACK","value","parser","getDuration","info","source","report","meta","Analyser","handle","dependency","Interrupts","CastTime","Suggestions","Timeline","currentCast","droppedCasts","missedTimeMS","ACTIONS","severity","SEVERITY","suggestionContent","missedCasts","missedTime","length","filter","type","actor","onBeginCast","pushDropCasts","event","castTime","forAction","action","timestamp","Math","min","currentEpochTimestamp","push","suggestions","TieredSuggestion","tiers","content","why","suggestionWhy","noInterruptsOutput","cast","getAction","formatEpochTimestamp","timeline","show","pull","debug","Statuses","Invulnerability","ft","statusSpecifier","targetSpecifier","status","statuses","ensureArray","edges","edgesForActor","statusHistory","get","a","b","uptime","depth","application","edge","side","name","apply","refresh","splitRangeForInvulns","statusDuration","getStatus","remove","range","finalRanges","invulns","invulnerability","getWindows","actorFilter","kind","types","invuln","previousRange","CAST_TIME_MAX_WEAVES","WEAVING_SEVERITY","Weaving","suggestionIcon","moduleLink","cursor","scrollTo","message","weaves","ongoingCastEvent","leadingGcdEvent","trailingGcdEvent","badWeaves","playerFilter","onCast","clearWeave","autoAttack","isOgcd","saveIfBad","leadingTimestamp","gcdTimeDiff","weave","isBadWeave","onGcd","weaveCount","isActive","recast","recastForEvent","getMaxWeaves","forEvent","matchClosestLower","panels","item","key","exclusive","styled","fluid","AoEUsages","FOUL","trackedActions","aoeAction","stActions","XENOGLOSSY","minTargets","FLARE","DESPAIR","THUNDER_IV","THUNDER_III","BLIZZARD_II","BLIZZARD_III","HIGH_BLIZZARD_II","FIRE_II","FIRE_III","FIRE_IV","HIGH_FIRE_II","FREEZE","BLIZZARD_IV","CoreAoE","tcIndex","triplecastFilter","TRIPLECAST","onApplyTriplecast","onRemoveTriplecast","setInstantCastAdjustment","reset","CoreCastTime","Defensives","trackedDefensives","MANAWARD","CoreDefensives","FIRE_SPELLS","ICE_SPELLS_UNTARGETED","ICE_SPELLS_TARGETED","ICE_SPELLS","POLYGLOT_DURATION_REQUIRED","ASTRAL_UMBRAL_DURATION","ASTRAL_UMBRAL_HANDLE","AFFECTS_GAUGE_ON_DAMAGE","AFFECTS_GAUGE_ON_CAST","STANCE_FADE","GAUGE_FADE","TIMER_FADE","ICE_COLOR","Color","FIRE_COLOR","POLYGLOT_COLOR","JOBS","Gauge","UnableToAct","droppedEnoTimestamps","overwrittenPolyglot","fireSpellIds","iceSpellIds","affectsGaugeOnDamage","castTimeIndex","paradoxInstantIndex","astralFireGauge","CounterGauge","maximum","graph","label","color","fade","astralFireTimer","TimerGauge","onExpiration","onAstralUmbralTimeout","bind","umbralIceGauge","umbralIceTimer","paradoxGauge","correctHistory","umbralHeartsGauge","polyglotGauge","polyglotTimer","onPolyglotTimerComplete","previousGaugeState","getGaugeState","matchActionId","cause","matchCauseActionId","resourceGraphs","addDataGroup","collapse","forceCollapsed","astralFire","getValueAt","umbralIce","umbralHearts","polyglot","enochian","paradox","abilityId","isSuccessfulHit","BLIZZARD_I","onGainUmbralIceStacks","empty","set","addEvent","UMBRAL_SOUL","tryGainUmbralHearts","FIRE_I","tryConsumeUmbralHearts","onGainAstralFireStacks","onConsumePolyglot","TRANSPOSE","onTransposeStacks","PARADOX","handleParadox","AMPLIFIER","onGeneratePolyglot","expired","gaugeValuesChanged","tryGainParadox","updateCastTimes","queueEvent","lastGaugeState","lastAstralFire","lastUmbralIce","setPercentageAdjustment","capped","generate","_args","onAstralUmbralEnd","flagIssues","onEnochianTimeout","stackCount","dropsElementOnSwap","count","force","spend","active","time","floor","fightStartLeniency","forceDropUtaWindows","unableToAct","uta","max","forceDropForgive","polyGlotExpirationTime","getExpirationTime","lostPolyglot","countLostPolyglots","droppedEno","drop","downtime","Suggestion","showIcon","overCap","CoreGauge","Leylines","Checklist","leyLinesStatuses","LEY_LINES","CIRCLE_OF_POWER","buffWindows","leyLinesFilter","oneOf","onGain","onDrop","onDeath","forEach","history","statusId","window","stop","currentWindows","current","tracker","speedModifier","stopAndSave","endTime","power","lines","parentRow","addRow","SimpleRow","order","fightStart","buff","row","addItem","StatusItem","copDuration","getStatusDurationInRange","linesDuration","checklist","Rule","description","requirements","Requirement","percent","dontMovePercent","fightEnd","Table","leyLinesEvent","thisCoPHistory","cops","thisCoPUptime","cop","thisPercent","toFixed","Button","displayOrder","DISPLAY_ORDER","GCD_ERROR_OFFSET","NotCasting","Downtime","noCastWindows","hardCast","onBegin","gcdLength","gcd","timeStamp","windows","getDowntime","notCasting","OGCDDowntime","defaultAllowedAverageDowntime","defaultFirstUseOffset","trackedCds","cooldowns","MANAFONT","firstUseOffset","SHARPCAST","checklistTarget","checklistDescription","ALLOWEDDOWNTIMEALL","CooldownDowntime","Procs","trackedProcs","procStatus","THUNDERCLOUD","consumeActions","FIRESTARTER","hasSharpcast","trackedStatusFilter","_procGroup","castingSpellId","procGroup","tryAddEventToRemovals","droppedThunderClouds","getDropCountForStatus","droppedFireStarters","CoreProcs","DEFAULT_SEVERITY_TIERS","ENHANCED_SEVERITY_TIERS","CYCLE_ENDPOINTS","CYCLE_ERRORS","ensureRecord","NO_ERROR","priority","FINAL_OR_DOWNTIME","SHORT","SHOULD_SKIP_T3","SHOULD_SKIP_B4","MISSING_FIRE4S","MISSED_ICE_PARADOX","MISSING_DESPAIRS","MANAFONT_BEFORE_DESPAIR","EXTRA_T3","EXTRA_F1","NO_FIRE_SPELLS","DROPPED_AF_UI","DIED","showName","Cycle","gaugeState","dataRef","unaspectedEvents","icePhaseEvents","firePhaseEvents","manafontPhaseEvents","startTime","firePhaseMetadata","finalOrDowntime","_errorCode","initialMP","circleOfPowerPct","initialGaugeState","fullFirePhaseEvents","code","expectedFire4sBeforeDespair","hasManafont","expectedCount","expectedFire4s","actualFire4s","expectedDespairs","actualDespairs","isProc","hardT3sInPhase","hardT3sBeforeManafont","hardT3sAfterManafont","missingFire4s","missingDespairs","minimumMPForExpectedFires","mpCost","some","maxHardcastT3s","hardT3sInFireCount","errorCode","gaugeContext","RotationWatchdog","Actors","currentGaugeState","cycleEndpointIds","currentRotation","firstEvent","uptimeSouls","onGaugeEvent","nextGaugeState","gauge","actors","mp","actionId","startRecording","procs","checkEventWasProc","stopRecording","cycle","overrideErrorCode","cycleEnd","processCycle","shouldSkipB4s","shouldSkipB4","shouldSkipT3s","shouldSkipT3","sum","extraF1s","astralFiresMissingDespairs","includeInSuggestions","manafontsBeforeDespair","manafontBeforeDespair","extraT3s","rotationsWithoutFire","isMissingFire","leylines","processDowntimeCycle","processNormalCycle","outliers","Fragment","Message","warning","Icon","fire4s","despairs","reason","SHARPCAST_CONSUMERS","Sharpcast","droppedSharpcasts","overwrittenSharpcasts","sharpedScathes","sharpcastConsumerIds","sharpcastFilter","onRemoveSharpcast","onGainSharpcast","tryConsumeSharpcast","SCATHE","countDrops","getRowForStatus","Thunder","STATUS_DURATION","thunder3Casts","lastThunderProc","lastThunderCast","clip","onDotCast","onDotApply","targetKey","createTargetApplicationList","proc","applications","applicationKey","trackerInstance","lastApplication","pushApplication","getUptime","foes","currentDuration","getThunderUptime","sumClip","maxExpectedClip","href","e","preventDefault","NormalisedMessage","totalThunderClip","thisClip","className","styles","clipSeverity","MAX_ALLOWED_T3_CLIPPING","numTargets","disclaimer","createTargetStatusTable","Accordion","Triplecast","overwrittenTriples","onTriplecast","hasStatus","OGCD_EXCEPTIONS","OPENER_EXCEPTIONS","ogcdIds","openerIds","baseMaxWeaves","getAllowedClippingWeaves","leadingAction","CoreWeaving"],"sourceRoot":""}