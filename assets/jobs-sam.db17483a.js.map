{"version":3,"file":"assets/jobs-sam.db17483a.js","mappings":"oHAAAA,EAAOC,QAAU,EAAjB,M,0VCkBsBC,GAAtB,iCAG8BC,EAAAA,GAH9B,iCAI8BC,EAAAA,GAJ9B,iCAKuCC,EAAAA,GALvC,iCAMgCC,EAAAA,GANhC,2VASoBC,gBAA4B,GAThD,EAWSC,mBAAkC,IAAI,KAX/C,2CAaC,WACCC,KAAKC,cACJC,EAAAA,EAAAA,MACEC,KAAK,eACLC,OAAOJ,KAAKK,OAAOC,MAAMC,IACzBC,QAAOC,EAAAA,EAAAA,IAAMT,KAAKF,kBACpBE,KAAKU,SAGNV,KAAKC,aAAa,WAAYD,KAAKW,WACnC,GAvBF,gCA2CC,WACC,OAAO,CACP,GA7CF,qBA+CC,SAAgBC,GACf,IAAMJ,EAASR,KAAKa,KAAKC,UAAUF,EAAMJ,QAEzC,GAAwB,OAApBA,aAAA,EAAAA,EAAQO,UAAZ,CAGA,IAAIC,EAAgBhB,KAAKD,mBAAmBkB,IAAIT,EAAOD,IAClC,MAAjBS,IACHA,EAAgB,IAAI,KACpBhB,KAAKD,mBAAmBmB,IAAIV,EAAOD,GAAIS,IAIxC,IAAMG,EAASP,EAAMO,OACjBC,EAAwBJ,EAAcC,IAAIE,GAO9C,GAN6B,MAAzBC,IACHA,EAAwB,CAACC,YAAa,EAAGC,cAAe,GACxDN,EAAcE,IAAIC,EAAQC,IAIe,IAAtCA,EAAsBC,aAAqBrB,KAAKuB,qBACnDH,EAAsBC,YAAcT,EAAMY,cAD3C,CAMA,IAAMC,EAAOjB,EAAOO,UAAYH,EAAMY,UAAYJ,EAAsBC,aAExED,EAAsBE,eAAiBI,KAAKC,IAAI,EAAGF,GACnDL,EAAsBC,YAAcT,EAAMY,SANzC,CArBuC,CA4BxC,GA9EF,wBAgFC,WACCxB,KAAK4B,oBACL5B,KAAK6B,wBACL,GAnFF,8BAsFC,SAA2BC,GAC1B,IAAMtB,EAASR,KAAKa,KAAKC,UAAUgB,GACnC,OAAc,MAAVtB,EAAyB,EAERR,KAAK+B,SAASC,UAAUxB,EAAQR,KAAKiC,OAAOC,OAC3ClC,KAAKK,OAAO8B,KAAKpB,SAAWf,KAAKoC,gBAAgBC,YAAY,CAACC,MAAO,CAAC,mBACpD,GACxC,GA7FF,+BAiGC,SAA4BR,GAAkB,MACvCS,EAAiBvC,KAAKK,OAAO8B,KAAKpB,SAAWf,KAAKoC,gBAAgBC,YAAY,CAACC,MAAO,CAAC,kBAC7F,GAAIC,GAAiB,EAAK,OAAO,EAEjC,IAAMxC,EAAqBC,KAAKD,mBAAmBkB,IAAIa,GACvD,GAA0B,MAAtB/B,EAA8B,OAAO,EAEzC,IAAMuB,EAAgB,UAAW,IAAAvB,GAAkB,KAAlBA,KAAX,QAA+C,SAAC0B,EAAMN,GAAP,OAAkBM,EAAON,EAAOG,aAAhC,GAA+C,GAEpH,OADqBI,KAAKc,MAAMlB,GAAiBiB,EAjHnB,KAmH9B,KA3GF,GAAmCE,EAAAA,IAAnC,EACiBC,OAAS,OAD1B,kCAGEC,EAAAA,EAHF,iFAGuB9B,IAHvB,oCAIE8B,EAAAA,EAJF,iFAIqBV,MAJrB,6CAKEU,EAAAA,EALF,iFAKqBP,eALrB,sCAMEO,EAAAA,EANF,iFAMqBZ,QANrB,M,uSCLMa,EAA8E,CACnFC,MAAO,iNACPC,aAAc,uJAGFC,GAAb,iCAG4BrD,EAAAA,GAH5B,iCAIkCsD,EAAAA,IAJlC,iCAKwCC,EAAAA,GALxC,sWAOC,WACCjD,KAAKC,aAAa,WAAYD,KAAKW,WACnC,GATF,yBAgBC,WACC,OAAOX,KAAKkD,iBAAiBC,oBAAoB,CAACpC,SAAUqC,EAAAA,GAC5D,GAlBF,yBAqBC,WACC,OAAOpD,KAAKkD,iBAAiBG,uBAC7B,GAvBF,wBAyBC,WACC,IAAMC,EAAYtD,KAAKuD,cAEvBvD,KAAKwD,WAAWC,IAAI,IAAIC,EAAAA,GAAgB,CACvCC,MAAOL,GACJ,SAAC,EAAAM,MAAD,CAAOrD,GAAG,yBAAV,4BACA,SAAC,EAAAqD,MAAD,CAAOrD,GAAG,eAAV,wBACHsD,KAAM7D,KAAKa,KAAKiD,QAAQC,OAAOF,KAC/BG,MAAOhE,KAAKK,OAAO4D,eAAejE,KAAKqC,eACvC6B,KAAMZ,GAAY,iCACjB,SAAC,IAAD,CAAelD,OAAQwC,EAAaC,SACpC,SAAC,IAAD,CAAezC,OAAQwC,EAAa5C,KAAKK,OAAO8D,OAAOC,KAAKhE,kBACvDiE,IAEP,KAvCF,GAAoC5B,EAAAA,IAApC,EACiBC,OAAS,MAD1B,kCAGEC,EAAAA,EAHF,iFAGqB9B,IAHrB,wCAIE8B,EAAAA,EAJF,iFAIqBa,UAJrB,8CAKEb,EAAAA,EALF,iFAKqBO,gBALrB,M,mXCKaoB,GAAb,iCAKgCC,EAAAA,GALhC,iCAM8B7E,EAAAA,GAN9B,iCAOmC8E,EAAAA,IAPnC,iCAQgCC,EAAAA,IARhC,yVAUSC,iBAVT,IAWSC,aAA2C,GAXpD,EAYSC,aAAuB,EAZhC,EAkBWf,KAAegB,EAAAA,GAAAA,UAAAA,KAlB1B,EAuBWC,SAA0B,CACnC,EAAGC,EAAAA,GAAAA,OACH,EAAGA,EAAAA,GAAAA,OAzBL,EA+BWC,mBAAiC,SAAC,EAAApB,MAAD,CAAOrD,GAAG,qCAAV,6LA/B5C,8CA0CC,SAAwB0E,EAAyCC,GAChE,OAAO,SAAC,EAAAtB,MAAD,CAAOrD,GAAG,iCAAV,yGAAwD0E,EAAYE,OAApE,EAAoGnF,KAAKK,OAAO4D,eAAeiB,KACtI,GA5CF,gCAkDC,WAEC,GApDF,wBAsDC,WACClF,KAAKC,cACJC,EAAAA,EAAAA,MACEC,KAAK,WACLC,OAAOJ,KAAKK,OAAOC,MAAMC,IAC3BP,KAAKoF,aAENpF,KAAKC,cACJC,EAAAA,EAAAA,MACEC,KAAK,aACLC,OAAOJ,KAAKK,OAAOC,MAAMC,IAC3BP,KAAKqF,eAENrF,KAAKC,aAAa,WAAYD,KAAKW,WACnC,GApEF,yBAsEC,SAAoBC,GACnBZ,KAAK0E,YAAc9D,CACnB,GAxEF,2BA0EC,SAAsBA,GAA4B,UACjD,GAAwB,MAApBZ,KAAK0E,YAAT,CAEA,IAAMY,EAAQ,UAAGtF,KAAKsF,SAASC,UAAUvF,KAAK0E,YAAYc,OAAQxF,KAAK0E,YAAYlD,kBAArE,QAAmF,EAEjGxB,KAAK4E,cAAgBlD,KAAK+D,IACzB7E,EAAMY,WAAN,oBAAmBxB,KAAK0E,mBAAxB,aAAmB,EAAkBlD,iBAArC,QAAkDxB,KAAKK,OAAOqF,uBAC9DJ,GAEDtF,KAAK2E,aAAagB,KAAK/E,GACvBZ,KAAK0E,iBAAcL,CATqB,CAUxC,GArFF,wBAuFC,WACCrE,KAAK4F,YAAYnC,IAAI,IAAIoC,EAAAA,GAAiB,CACzChC,KAAM7D,KAAK6D,KACXiC,MAAO9F,KAAK8E,SACZd,MAAOhE,KAAK2E,aAAaQ,OACzBY,QAAS/F,KAAKgF,kBACdgB,IAAKhG,KAAKiG,cAAcjG,KAAK2E,aAAc3E,KAAK4E,gBAEjD,GA/FF,oBAiGC,WAAkB,aACjB,OAAiC,IAA7B5E,KAAK2E,aAAaQ,OACdnF,KAAKkG,sBAGN,UAAC,IAAD,CAAOC,SAAO,EAACC,aAAW,EAACC,QAAM,EAACC,YAAU,EAA5C,WACN,SAAC,WAAD,WACC,UAAC,QAAD,YACC,SAAC,eAAD,CAAkBA,YAAU,EAA5B,UACC,6BAAQ,SAAC,EAAA1C,MAAD,CAAOrD,GAAG,6BAAV,uBAET,SAAC,eAAD,WACC,6BAAQ,SAAC,EAAAqD,MAAD,CAAOrD,GAAG,6BAAV,4BAIX,SAAC,SAAD,UAEE,MAAAP,KAAK2E,cAAL,QAAsB,SAAC4B,GACtB,IAAMf,EAAS,EAAK3E,KAAK2F,UAAUD,EAAKf,QACxC,OAAO,UAAC,QAAD,YACN,UAAC,SAAD,CAAYiB,UAAU,SAAtB,WACC,iBAAMC,MAAO,CAACC,YAAa,GAA3B,SAAgC,EAAKtG,OAAOuG,qBAAqBL,EAAK/E,cACtE,SAAC,IAAD,CACCqF,UAAQ,EACRV,SAAO,EACPW,KAAK,OACLjD,KAAK,OACLkD,QAAS,kBAAM,EAAKC,SAASC,KAAKV,EAAK/E,UAAY,EAAKnB,OAAO8B,KAAKX,UAAW+E,EAAK/E,UAAY,EAAKnB,OAAO8B,KAAKX,UA/HvF,IA+HjB,QAGX,SAAC,SAAD,WACC,SAAC,MAAD,UAAgBgE,QAZKe,EAAK/E,UAe5B,QAKJ,KAzIF,GAAgCiB,EAAAA,IAAhC,EACiBC,OAAiB,aADlC,EAEiBiB,MAA2B,0DAF5C,EAGiBuD,OAAiB,EAHlC,sCAKEvE,EAAAA,EALF,iFAKqB2C,QALrB,kCAME3C,EAAAA,EANF,iFAMuB9B,IANvB,yCAOE8B,EAAAA,EAPF,iFAOqBiD,WAPrB,sCAQEjD,EAAAA,EARF,iFAQqBqE,QARrB,M,yeCCsBG,GAAtB,iCAC8BzH,EAAAA,GAD9B,iCAEiC0H,EAAAA,IAFjC,iCAGgC3C,EAAAA,IAHhC,oTASS4C,kBAAwC,GATjD,EAiBoBC,iBAjBpB,6CAmBC,WAAsB,MACrBtH,KAAKC,cACJC,EAAAA,EAAAA,MAAgBE,OAAOJ,KAAKK,OAAOC,MAAMC,IAAIJ,KAAK,UAChDoH,MAAMvH,KAAKa,KAAK2G,mBAAmB,MAAAxH,KAAKsH,aAAL,QAAqB,SAAAG,GAAU,OAAIA,EAAWlH,EAAf,MAAsBP,KAAK0H,QAChG1H,KAAKC,aAAa,WAAYD,KAAKW,WACnC,GAxBF,oBA0BC,SAAeC,GAAyB,MACvC,GAAyB,WAArBA,EAAM2G,MAAMpH,KAAhB,CAGA,IAAMqF,EAASxF,KAAKa,KAAK2F,UAAU5F,EAAM2G,MAAM/B,QAC/C,GAAc,MAAVA,EAAJ,CAGA,IAAMiC,EAAa,MAAAzH,KAAKsH,aAAL,QAAsB,SAAAG,GAAU,OAAIA,IAAejC,CAAnB,IACnD,GAAkB,MAAdiC,EAAJ,CAIA,IAAME,EAAmB3H,KAAK4H,4BAA4BH,GAItDzH,KAAK6H,cAAcJ,EAAY7G,EAAMkH,QAAQ,GAAGC,cACnDJ,EAAiBK,KAAKrC,KAAK/E,GAE3B+G,EAAiBM,OAAOtC,KAAK/E,EAT7B,CAJA,CAJA,CAmBD,GAhDF,yCAkDC,SAAoC6G,GAAoB,MACnDE,EAAmB,MAAA3H,KAAKqH,mBAAL,QAA4B,SAAAa,GAAM,OAAIA,EAAOT,aAAeA,CAA1B,IASzD,OARwB,MAApBE,IACHA,EAAmB,CAClBF,WAAAA,EACAO,KAAM,GACNC,OAAQ,IAETjI,KAAKqH,kBAAkB1B,KAAKgC,IAEtBA,CACP,GA7DF,2CAmEC,SAAsCnC,GACrC,IAAM2C,EAAwCnI,KAAKoI,uBAClDC,EAAAA,EAAAA,IAAe7C,IACf8C,EAAAA,EAAAA,IAAmB9C,EAAQ,CAAC+C,EAAAA,GAAAA,OAAsB,KACnD,cAAW,IAAI,IAAJ,CAAQ,CAzEI,EAyEeJ,IACtC,GAxEF,2BA4EC,SAAsB3C,EAAgBuC,GAAsB,MAC3D,OAAQ,MAAA/H,KAAKwI,8BAA8BhD,IAAnC,OAAoDuC,EAC5D,GA9EF,mCAiFC,SAA8BU,EAAcC,GAC3C,OAAO,IAAW,KAAO,EAAID,EAAOC,GACpC,GAnFF,+BAqFC,SAA0BlH,GACzB,OAAOA,EAAYxB,KAAKK,OAAO8B,KAAKX,SACpC,GAvFF,kCAyFC,SAA6BA,GAAmB,WACzCmH,EAAqB3I,KAAK4I,kBAAkBpH,GAClD,OAAO,SAAC,IAAD,CACNqF,UAAQ,EACRV,SAAO,EACPtC,KAAK,OACLiD,KAAK,QACLC,QAAS,kBAAM,EAAKC,SAASC,KAAK0B,EAAoBA,EAA7C,EACT5C,QAAS/F,KAAKK,OAAOuG,qBAAqBpF,IAE3C,GAnGF,wBAqGC,WAAqB,MACkB,IAAlCxB,KAAKqH,kBAAkBlC,QAG3BnF,KAAK6I,UAAUpF,IAAI,IAAIqF,EAAAA,GAAK,CAC3BC,MAAM,SAAC,EAAAnF,MAAD,CAAOrD,GAAG,mCAAV,kCACNyI,aAAcC,EAAAA,EAAAA,YACdC,aAAa,SAAC,EAAAtF,MAAD,CAAOrD,GAAG,yCAAV,yOAGR,SAAC,KAAD,CAAUiF,OAAO,kBAEtB2D,aAAc,MAAAnJ,KAAKqH,mBAAL,OAA2BrH,KAAKoJ,yBAE/C,GAnHF,mCAoHC,SAA8BlB,GAA0B,QACjDmB,EAASnB,EAAOF,KAAK7C,OAErBmE,EAAWD,EADCnB,EAAOD,OAAO9C,OAE5BoE,EAAUF,EAASC,EAAW,IAIlC,OAAO,IAAIE,EAAAA,GAAY,CACtBT,MAAM,SAAC,MAAD,UAAgBb,EAAOT,aAC7B8B,QAASA,EACTE,OAAQH,EACRI,gBAAiB,sBAAGL,EAAL,eAAiBC,EAAjB,cAA8BC,EAAQI,QAAQ,GAA9C,OAEhB,GAlIF,oBAoIC,WAAmC,eAGlC,GAAoB,IAFA,MAAA3J,KAAKqH,mBAAL,QAA8B,SAACuC,EAAOC,GAAR,OAAoBD,EAAQC,EAAQ5B,OAAO9C,MAA3C,GAAmD,GAIrG,OAAO,UAAC,IAAD,CAAOgB,SAAO,EAACC,aAAW,EAACC,QAAM,EAACI,UAAU,SAA5C,WACN,SAAC,WAAD,WACC,UAAC,QAAD,YACC,SAAC,eAAD,WACC,6BAAQ,SAAC,EAAA7C,MAAD,CAAOrD,GAAG,0CAAV,yBAET,SAAC,eAAD,WACC,6BAAQ,SAAC,EAAAqD,MAAD,CAAOrD,GAAG,wCAAV,uBAET,SAAC,eAAD,WACC,6BAAQ,SAAC,EAAAqD,MAAD,CAAOrD,GAAG,0CAAV,8BAIX,SAAC,SAAD,UAEE,MAAAP,KAAKqH,mBAAL,QAA2B,SAAAa,GAAU,MAC9B4B,EAAU5B,EAAOF,KAAK7C,OACtB4E,EAAY7B,EAAOD,OAAO9C,OAC1B6E,EAAwB,IAAdD,EAChB,OAAO,UAAC,QAAD,YACN,SAAC,SAAD,CAAYrD,MAAO,CAACuD,WAAY,UAAhC,UACC,SAAC,MAAD,kBAAgB/B,EAAOT,YAAvB,IAAmCyC,UAAU,QAE9C,UAAC,SAAD,CACCzD,UAAU,SACV0D,SAAUH,EACVI,UAAWJ,EAHZ,UAIEF,EAJF,IAIYC,EAAYD,MAExB,SAAC,SAAD,CAAYrD,UAAU,OAAtB,SAEE,MAAAyB,EAAOD,QAAP,QAAkB,SAAAoC,GACjB,OAAO,EAAKC,qBAAqBD,EAAK7I,UACtC,QAdmB0G,EAAOT,WAAWlH,GAkBzC,QAIJ,KAnLF,GAA0CkC,EAAAA,IAA1C,EAKiBC,OAAS,cAL1B,EAMiBiB,MAAQ,qDANzB,EAOiBqF,aAAeC,EAAAA,EAAAA,YAPhC,kCACEtG,EAAAA,EADF,iFACuB9B,IADvB,uCAEE8B,EAAAA,EAFF,iFAEqBkG,SAFrB,sCAGElG,EAAAA,EAHF,iFAGqBqE,QAHrB,M,qTCVanH,GAAb,iCAIqCH,EAAAA,GAJrC,iCAKgDE,EAAAA,GALhD,uRA0JS2K,GAAK,SAAC/I,GAAD,OAAuB,EAAKnB,OAAOuG,qBAAqBpF,EAAW,EAAnE,EA1Jd,0CAaC,SACCgJ,EACAC,GAEC,WADDrK,EACC,uDADQJ,KAAKK,OAAOC,MAGfE,EAAoC,iBAApBgK,EACnBxK,KAAKa,KAAKkB,SAASyI,GACnBA,EAEG1C,GAAU4C,EAAAA,EAAAA,IAAYD,GAGtBE,EAAQ,IAAA7C,GAAO,KAAPA,GAAgB,SAAA3G,GAAM,eAAI,EAAKyJ,cAC5CzJ,EADuC,oBAEvCA,EAAO0J,cAAc5J,IAAIT,EAAOD,WAFO,aAEvC,EAAqCU,IAAIb,EAAOG,WAFT,QAEgB,GAFpB,IAMpC,IAAAoK,GAAK,KAALA,GAAW,SAACG,EAAGC,GAAJ,OAAUD,EAAEtJ,UAAYuJ,EAAEvJ,SAA1B,IAGX,IAlBC,EAkBK4C,EAAO,CAAC4G,OAAQ,EAAGC,MAAO,EAAGC,YAAa,GAlB/C,UAmBkBP,GAnBlB,IAmBD,2BAA0B,WAAfQ,EAAe,QACP,UAAdA,EAAKC,MACW,IAAfhH,EAAK6G,QACR7G,EAAK8G,YAAcC,EAAK3J,WAEzB4C,EAAK6G,UAGL7G,EAAK6G,QACc,IAAf7G,EAAK6G,QACR7G,EAAK4G,QAAUG,EAAK3J,UAAY4C,EAAK8G,cAIvClL,KAAKkH,MAAL,mCAAqB1G,EAAOuI,KAA5B,aAAoCoC,EAAKC,KAAzC,gBAAoDpL,KAAKuK,GAAGY,EAAK3J,WAAjE,oBAAsF4C,EAAK6G,OAC3F,CAlCA,+BAoCD,OAAO7G,EAAK4G,MACZ,GAtDF,2BAwDC,SAAsB7J,EAAekK,GAEpC,IACIC,EACAC,EAJuD,EAErDZ,EAAgB,GAFqC,UAMvCU,GANuC,IAM3D,2BAA4B,KAEO,EAFxBzK,EAAiB,QAER,gBAAfA,EAAMT,KAMG,MAATmL,IAKJX,EAAMhF,KAAN,MAAAgF,GAAK,OAAS3K,KAAKwL,qBAClBrK,EACAmK,EAAM9J,UACNZ,EAAMY,aAEP8J,OAAQjH,IAfF,QAAL,EAAAiH,SAAA,QAAAA,EAAU1K,GACV2K,EAAU3K,EAeX,CAzB0D,+BA4B3D,GAAa,MAAT0K,EAAe,SAEZG,EAAc,UAAGzL,KAAKa,KAAKC,UAAUwK,EAAM9K,eAA7B,aAAG,EAAmCO,SACpD2K,EAA2B,MAAlBD,EACZzL,KAAKK,OAAOqF,sBACZhE,KAAK+D,KAAI,UAAC8F,SAAD,QAAYD,GAAO9J,UAAYiK,EAAgBzL,KAAKK,OAAOqF,uBAEvEiF,EAAMhF,KAAN,MAAAgF,GAAK,OAAS3K,KAAKwL,qBAClBrK,EACAmK,EAAM9J,UACNkK,IAED,CAED,OAAOf,CACP,GAnGF,kCAqGC,SAA6BxJ,EAAemK,EAAeI,GAC1D,IADkF,EAC9EC,EAAQ,CAACL,MAAAA,EAAOI,OAAAA,GACdE,EAAc,CAACD,GAGfE,EAAU7L,KAAKoC,gBAAgB0J,WAAW,CAC/CC,MAAOT,EACPU,IAAKN,EACLO,YAAa,SAAA3L,GAAK,OAAIA,EAAM4L,OAAS/K,EAAO+K,IAA1B,EAClB5J,MAAO,CAAC,kBATyE,UAY7DuJ,GAZ6D,IAYlF,2BAA8B,eAEgC,MAQE,MAVrDM,EAAmB,QAE7B,GAAIA,EAAOJ,MAAQJ,EAAML,OAASa,EAAOH,KAAOL,EAAML,MACrDtL,KAAKkH,MAAL,yCAA2BlH,KAAKuK,GAAGoB,EAAML,OAAzC,aAAmDtL,KAAKuK,GAAGoB,EAAMD,QAAjE,kBAAiF1L,KAAKuK,GAAG4B,EAAOH,KAAhG,aAAwGhM,KAAKuK,GAAGoB,EAAMD,QAAtH,MAEAC,EAAML,MAAQa,EAAOH,SAKtB,GAAIG,EAAOJ,OAASJ,EAAMD,QAAUS,EAAOH,IAAML,EAAMD,OACtD1L,KAAKkH,MAAL,uCAAyBlH,KAAKuK,GAAGoB,EAAML,OAAvC,aAAiDtL,KAAKuK,GAAGoB,EAAMD,QAA/D,kBAA+E1L,KAAKuK,GAAGoB,EAAML,OAA7F,aAAuGtL,KAAKuK,GAAG4B,EAAOJ,OAAtH,MAEAJ,EAAMD,OAASS,EAAOJ,WAKvB,KAAII,EAAOJ,MAAQJ,EAAML,OAASa,EAAOH,IAAML,EAAMD,QAArD,CAIA1L,KAAKkH,MAAL,+CAAqBlH,KAAKuK,GAAGoB,EAAML,OAAnC,aAA6CtL,KAAKuK,GAAGoB,EAAMD,QAA3D,kBAA2E1L,KAAKuK,GAAGoB,EAAML,OAAzF,aAAmGtL,KAAKuK,GAAG4B,EAAOJ,OAAlH,gBAA+H/L,KAAKuK,GAAG4B,EAAOH,KAA9I,aAAsJhM,KAAKuK,GAAGoB,EAAMD,QAApK,MAGA,IAAMU,EAAgBT,EACtBA,GAAQ,UAAIA,GACZC,EAAYjG,KAAKgG,GAEjBS,EAAcV,OAASS,EAAOJ,MAC9BJ,EAAML,MAAQa,EAAOH,GAVpB,CAWD,CA3CiF,+BA8ClF,OAAO,IAAAJ,GAAW,KAAXA,GAAoB,SAAAD,GAAK,MAAI,CACnC,CAACP,KAAM,QAAS5J,UAAWmK,EAAML,OACjC,CAACF,KAAM,SAAU5J,UAAWmK,EAAMD,QAFH,GAIhC,KAvJF,GAA8BjJ,EAAAA,IAA9B,EACiBC,OAAS,WAD1B,EAEiBwE,OAAQ,EAFzB,kCAIEvE,EAAAA,EAJF,iFAI8B9B,IAJ9B,6CAKE8B,EAAAA,EALF,iFAK8BP,eAL9B,M,8HCXaiK,EAAb,yMAICC,WAAa,EAAKzL,KAAKkB,SAASwK,UAJjC,Y,SAA8BC,GAAjBH,EACI3J,OAAS,WADb2J,EAEI1I,MAAQ,+C,2aCInB8I,GAAgB,CACrB5H,GAAAA,GAAAA,SAAAA,GACAA,GAAAA,GAAAA,IAAAA,IAGY6H,IAAb,iCAC8B/M,GAAAA,GAD9B,mPAGCgN,eAAiB9H,GAAAA,GAAAA,KAAAA,KAHlB,EAKC+H,eAAiB,CAChB,CACCC,UAAWhI,GAAAA,GAAAA,eACXiI,UAAW,CAACjI,GAAAA,GAAAA,gBACZkI,WAAY,GAGb,CACCF,UAAWhI,GAAAA,GAAAA,gBACXiI,UAAW,CAACjI,GAAAA,GAAAA,kBACZkI,WAAY,GAGb,CACCF,UAAWhI,GAAAA,GAAAA,YACXiI,UAAW,CAACjI,GAAAA,GAAAA,mBACZkI,WAAY,GAGb,CACCF,UAAWhI,GAAAA,GAAAA,aACXiI,UAAW,CAACjI,GAAAA,GAAAA,mBACZkI,WAAY,GAGb,CACCF,UAAWhI,GAAAA,GAAAA,KACXiI,UAAW,CAACjI,GAAAA,GAAAA,QACZkI,WAAY,GAIb,CACCF,UAAWhI,GAAAA,GAAAA,IACXiI,UAAW,CAACjI,GAAAA,GAAAA,OACZkI,WAAY,GAGb,CACCF,UAAWhI,GAAAA,GAAAA,SACXiI,UAAW,CAACjI,GAAAA,GAAAA,OACZkI,WAAY,IA9Cf,kDAkDC,SAAoCnM,EAAyBmM,GAC5D,MAAyB,WAArBnM,EAAM2G,MAAMpH,KACR4M,EAGJ,KAAAN,IAAa,KAAbA,GAAuB7L,EAAM2G,MAAM/B,UAAaxF,KAAKiC,OAAO4H,QAAQmD,UAAUC,GAAAA,GAAAA,cAAAA,IAC1E,EAGDF,CACP,KA5DF,GAAgCG,GAAAA,GAAhC,iCACEvK,GAAAA,EADF,iFACqBV,MADrB,O,kICDakL,IAAb,iCAE8BxN,GAAAA,GAF9B,iCAGiCyH,GAAAA,IAHjC,iCAIgCvH,GAAAA,GAJhC,iCAKuCD,GAAAA,GALvC,iCAM4BF,GAAAA,GAN5B,ubAQC,YACC,4DAEAM,KAAKC,aAAa,WAAYD,KAAKW,WACnC,GAZF,wBAcC,WAAa,WACZX,KAAK6I,UAAUpF,IAAI,IAAIqF,GAAAA,GAAK,CAC3BC,MAAM,UAAC,GAAAnF,MAAD,CAAOrD,GAAG,2BAAV,yCAA4CP,KAAKa,KAAKkB,SAASqL,KAAKrE,KAApE,EAA+E/I,KAAKa,KAAKkB,SAASsL,QAAQtE,QAChHC,aC7BK,ED8BLE,aAAa,UAAC,GAAAtF,MAAD,CAAOrD,GAAI,wBAAX,sHAAqCP,KAAKa,KAAKkB,SAASsL,QAAQtE,KAAhE,EAA2E/I,KAAKa,KAAKkB,SAASqL,KAAKrE,QAChH5H,OAAQ,GACRgI,aAAc,CACb,IAAIK,GAAAA,GAAY,CACfT,MAAM,UAAC,GAAAnF,MAAD,CAAOrD,GAAK,+CAAZ,oCAA4D,UAAC,MAAD,CAAUC,OAAO,eACnF+I,QAAS,kBAAM,EAAK+D,iBAAiB,EAAKzM,KAAKkB,SAASsL,QAA/C,IAGV,IAAI7D,GAAAA,GAAY,CACfT,MAAM,UAAC,GAAAnF,MAAD,CAAOrD,GAAI,4CAAX,oCAAwD,UAAC,MAAD,CAAUC,OAAO,YAC/E+I,QAAS,kBAAM,EAAK+D,iBAAiB,EAAKzM,KAAKkB,SAASqL,KAA/C,OAIZ,GAhCF,8BAkCC,SAAiBG,GAGhB,OAFqBvN,KAAK+B,SAASC,UAAUuL,EAAQvN,KAAKiC,OAAO4H,UAC7C7J,KAAKK,OAAOmN,gBAAkBxN,KAAKoC,gBAAgBC,YAAY,CAACC,MAAO,CAAC,mBACtD,GACtC,KAtCF,GAA2BG,GAAAA,IAA3B,EACiBC,OAAS,QAD1B,qCAEEC,GAAAA,EAFF,iFAEqBV,MAFrB,wCAGEU,GAAAA,EAHF,iFAGqBkG,SAHrB,uCAIElG,GAAAA,EAJF,iFAIqBZ,QAJrB,8CAKEY,GAAAA,EALF,iFAKqBP,eALrB,mCAMEO,GAAAA,EANF,iFAMqB9B,IANrB,O,YELa4M,IAAb,iCAG8B9N,GAAAA,GAH9B,+MACUgN,eAAiB9H,GAAAA,GAAAA,OAAAA,MAD3B,8EAKC,SAAoB6I,EAAoB9M,GAEvC,OAAIZ,KAAKiC,OAAO4H,QAAQmD,UAAUC,GAAAA,GAAAA,cAAAA,KAAmD,WAArBrM,EAAM2G,MAAMpH,MAAqBS,EAAM2G,MAAM/B,SAAWX,GAAAA,GAAAA,OAAAA,IACvH7E,KAAK2N,oBAAoB/M,IAClB,IAGR,2DAAwB8M,EAAO9M,EAC/B,KAbF,GAA4BgN,GAAAA,GAA5B,iCAGEjL,GAAAA,EAHF,iFAGqBV,MAHrB,OCNa4L,GAAb,6MACoBC,kBAAoB,CACtC,EAAKjN,KAAKiD,QAAQiK,WAFpB,Y,SAAgCC,G,YCEnBC,GAAb,6MACSC,UAA2B,KADpC,4CAGC,YACC,4DAEA,IAAMC,GAAajO,EAAAA,GAAAA,MACjBiB,OAAOnB,KAAKK,OAAOC,MAAMC,IACzBC,OAAOR,KAAKa,KAAKkB,SAASqL,KAAK7M,IAEjCP,KAAKC,aAAakO,EAAWhO,KAAK,eAAgBH,KAAKoO,aACvDpO,KAAKC,aAAakO,EAAWhO,KAAK,gBAAiBH,KAAKqO,aACxD,GAZF,yBAcC,WAEC,GAAsB,MAAlBrO,KAAKkO,UAAmB,CAC3B,IAAMI,EAAOtO,KAAKa,KAAKkB,SAASqL,KAChCpN,KAAKkO,UAAYlO,KAAKuO,wBAAwB,MAAOD,EAAKE,cAAe,OACzE,CACD,GApBF,0BAsBC,WACCxO,KAAKyO,MAAMzO,KAAKkO,WAChBlO,KAAKkO,UAAY,IACjB,KAzBF,G,QAA0B3J,G,wBCKpBmK,GAAmB,CACxBC,SAAU,CACT,IAAM5J,GAAAA,GAAAA,MACN,IAAOA,GAAAA,GAAAA,OACP,IAAOA,GAAAA,GAAAA,QAII6J,IAAb,iCAGiCxH,GAAAA,IAHjC,iCAImC5C,GAAAA,IAJnC,gSAMoB1E,gBAAkB,CACpC,EAAKe,KAAKkB,SAAS8M,UAAUtO,IAP/B,mDAUC,WAAuC,WACtCP,KAAK6I,UAAUpF,IAAI,IAAIqF,GAAAA,GAAK,CAC3BC,MAAM,UAAC,GAAAnF,MAAD,CAAOrD,GAAG,+BAAV,+BACNyI,aJ5BS,EI6BTE,aAAa,UAAC,GAAAtF,MAAD,CAAOrD,GAAG,sCAAV,8KACE,UAAC,MAAD,CAAUiF,OAAS,iBAElC2D,aAAc,CACb,IAAIK,GAAAA,GAAY,CACfT,MAAM,UAAC,GAAAnF,MAAD,CAAOrD,GAAG,2CAAV,oCAAqD,UAAC,MAAD,CAAUiF,OAAO,iBAC5E+D,QAAS,kBAAM,EAAK+D,iBAAiB,EAAKzM,KAAKkB,SAAS8M,UAAUtO,GAAzD,KAGXY,OAAQ,KAET,GAzBF,oCA2BC,WACC,IAAM2N,EAAyB9O,KAAK+O,kBAAkB/O,KAAKa,KAAKkB,SAAS8M,UAAUtO,IAEnFP,KAAK4F,YAAYnC,IAAI,IAAIoC,GAAAA,GAAiB,CACzChC,KAAM7D,KAAKa,KAAKiD,QAAQ+K,UAAUhL,KAClCkC,SAAS,UAAC,GAAAnC,MAAD,CAAOrD,GAAG,mCAAV,0IACS,UAAC,MAAD,CAAUiF,OAAO,iBAEnCM,MAAO4I,GAAiBC,SACxB3K,MAAO8K,EACP9I,KAAK,UAAC,GAAApC,MAAD,CAAOrD,GAAG,+BAAV,kGACWP,KAAKK,OAAO4D,eAAe6K,EAAwB,IAD9D,aAC6E,UAAC,MAAD,CAAUtO,OAAO,mBAGpG,KAzCF,GAA+Bf,GAAAA,GAA/B,EACiBiD,OAAS,YAD1B,wCAGEC,GAAAA,EAHF,iFAGqBkG,SAHrB,0CAIElG,GAAAA,EAJF,iFAIqBiD,WAJrB,O,YCXqBtB,GAAAA,SAAAA,I,gMACpBU,mBAAoB,UAAC,GAAApB,MAAD,CAAOrD,GAAG,oCAAV,8KACA,UAAC,OAAD,WAAgBsE,GAAAA,GAAAA,c,WAFhBP,C,SAAmB0K,GCIlCC,GAAiB,CACtB,EAAGlK,GAAAA,GAAAA,MACH,EAAGA,GAAAA,GAAAA,OACH,EAAGA,GAAAA,GAAAA,OAGSmK,IAAb,iCAG4BxP,GAAAA,GAH5B,iCAImC8E,GAAAA,IAJnC,2RAMS2K,UAAW,EANpB,EASSC,cAAgB,EATzB,EAUSC,WAAa,EAVtB,EAWSC,cAAgB,EAXzB,EAcSC,YAAc,CACrB,EAAK1O,KAAKiD,QAAQ0L,aAAajP,GAC/B,EAAKM,KAAKiD,QAAQ2L,kBAAkBlP,GACpC,EAAKM,KAAKiD,QAAQ+K,UAAUtO,IAjB9B,EAqBSmP,YAAc,CACrB,EAAK7O,KAAKiD,QAAQ6L,OAAOpP,GACzB,EAAKM,KAAKiD,QAAQ8L,MAAMrP,GACxB,EAAKM,KAAKiD,QAAQ+L,KAAKtP,GACvB,EAAKM,KAAKiD,QAAQgM,MAAMvP,GACxB,EAAKM,KAAKiD,QAAQiM,KAAKxP,GACvB,EAAKM,KAAKiD,QAAQkM,MAAMzP,GACxB,EAAKM,KAAKiD,QAAQmM,SAAS1P,GAC3B,EAAKM,KAAKiD,QAAQoM,MAAM3P,GACxB,EAAKM,KAAKiD,QAAQqM,IAAI5P,GACtB,EAAKM,KAAKiD,QAAQsM,SAAS7P,IA/B7B,4CAkCC,WAIC,IAHA,4DAGIP,KAAKK,OAAOgQ,MAAMC,OAAO,OAAQ,CACpC,IAAMC,GAAerQ,EAAAA,GAAAA,MAAgBE,OAAOJ,KAAKK,OAAOC,MAAMC,IAE9DP,KAAKC,aACJsQ,EACEpQ,KAAK,eACLK,OAAOR,KAAKa,KAAKkB,SAASyO,OAAOjQ,IACnCP,KAAKyQ,UAGNzQ,KAAKC,aACJsQ,EACEpQ,KAAK,gBACLK,OAAOR,KAAKa,KAAKkB,SAASyO,OAAOjQ,IACnCP,KAAK0Q,gBAGN1Q,KAAKC,aACJsQ,EACEpQ,KAAK,UACLqF,QAAO/E,EAAAA,GAAAA,IAAMT,KAAK0P,cACpB1P,KAAK2Q,WAGN3Q,KAAKC,aACJsQ,EACEpQ,KAAK,UACLqF,QAAO/E,EAAAA,GAAAA,IAAMT,KAAKuP,cACpBvP,KAAK4Q,YAGN5Q,KAAKC,aAAa,WAAYD,KAAKW,WAEnC,CACD,GAxEF,sBA0EC,YACuB,IAAlBX,KAAKmP,UACRnP,KAAKoP,gBAENpP,KAAKmP,UAAW,CAChB,GA/EF,4BAiFC,WACCnP,KAAKmP,UAAW,CAChB,GAnFF,uBAqFC,YACuB,IAAlBnP,KAAKmP,UACRnP,KAAKqP,YAEN,GAzFF,wBA2FC,YACuB,IAAlBrP,KAAKmP,UACRnP,KAAKsP,eAEN,GA/FF,wBAiGC,WAGCtP,KAAK4F,YAAYnC,IAAI,IAAIoC,GAAAA,GAAiB,CACzChC,KAAM7D,KAAKa,KAAKiD,QAAQ+M,gBAAgBhN,KACxCkC,SAAS,UAAC,GAAAnC,MAAD,CAAOrD,GAAK,0CAAZ,4JACI,UAAC,MAAD,CAAUiF,OAAO,qBAAwC,UAAC,MAAD,CAAUA,OAAQ,cAAuB,UAAC,MAAD,CAAUA,OAAS,oBAElIM,MAAOmJ,GACPjJ,KAAK,UAAC,GAAApC,MAAD,CAAOrD,GAAI,+BAAX,qGAC4BP,KAAKqP,cAEtCrL,MAAOhE,KAAKqP,cAGbrP,KAAK4F,YAAYnC,IAAI,IAAIoC,GAAAA,GAAiB,CACzChC,KAAM7D,KAAKa,KAAKiD,QAAQ+M,gBAAgBhN,KACxCkC,SAAS,UAAC,GAAAnC,MAAD,CAAOrD,GAAK,6CAAZ,2HACG,UAAC,MAAD,CAAUiF,OAAS,qBAAuB,UAAC,MAAD,CAAUA,OAAS,uBAAsB,UAAC,MAAD,CAAUA,OAAS,eAAkB,UAAC,MAAD,CAAUA,OAAO,oBAErJM,MAAOmJ,GACPjJ,KAAK,UAAC,GAAApC,MAAD,CAAOrD,GAAI,kCAAX,0GACqCP,KAAKsP,iBAE/CtL,MAAOhE,KAAKsP,iBAGbtP,KAAK4F,YAAYnC,IAAI,IAAIoC,GAAAA,GAAiB,CACzChC,KAAM7D,KAAKa,KAAKiD,QAAQ+M,gBAAgBhN,KACxCkC,SAAS,UAAC,GAAAnC,MAAD,CAAOrD,GAAK,6CAAZ,8EACI,UAAC,MAAD,CAAUiF,OAAS,uBAEhCM,MAAOmJ,GACPjJ,KAAK,UAAC,GAAApC,MAAD,CAAOrD,GAAI,kCAAX,4GAC4BP,KAAKoP,iBAEtCpL,MAAOhE,KAAKoP,gBAEb,KAvIF,GAA4B3M,GAAAA,IAA5B,EACiBC,OAAS,SAD1B,mCAGEC,GAAAA,EAHF,iFAGqB9B,IAHrB,0CAIE8B,GAAAA,EAJF,iFAIqBiD,WAJrB,O,mHCAM8I,GAAmB,CACxB,EAAG3J,GAAAA,GAAAA,MACH,GAAIA,GAAAA,GAAAA,OACJ,GAAIA,GAAAA,GAAAA,OASC+L,GAAcC,KAAMC,GAAAA,EAAAA,QAAAA,QAAqBC,KADlC,KAGAC,IAAb,iCAGmC1M,GAAAA,IAHnC,0PAKS2M,WAAa,EAAK1N,IAAI,IAAI2N,GAAAA,GAAa,CAC9CC,MAAO,CACNC,OAAO,UAAC,GAAA1N,MAAD,CAAOrD,GAAG,gCAAV,mBACPgR,MAAOT,OARV,EAYSU,oBAAsB,IAAI,KAAJ,CAA+B,CAE5D,CAAC,EAAK3Q,KAAKiD,QAAQ6L,OAAOpP,GAAI,CAACiF,OAAQ,IACvC,CAAC,EAAK3E,KAAKiD,QAAQ8L,MAAMrP,GAAI,CAACmN,MAAO,IACrC,CAAC,EAAK7M,KAAKiD,QAAQ+L,KAAKtP,GAAI,CAACiF,OAAQ,KACrC,CAAC,EAAK3E,KAAKiD,QAAQgM,MAAMvP,GAAI,CAACmN,MAAO,IACrC,CAAC,EAAK7M,KAAKiD,QAAQoM,MAAM3P,GAAI,CAACmN,MAAO,KACrC,CAAC,EAAK7M,KAAKiD,QAAQkM,MAAMzP,GAAI,CAACmN,MAAO,KACrC,CAAC,EAAK7M,KAAKiD,QAAQsM,SAAS7P,GAAI,CAACmN,MAAO,KAExC,CAAC,EAAK7M,KAAKiD,QAAQiM,KAAKxP,GAAI,CAACiF,OAAQ,KACrC,CAAC,EAAK3E,KAAKiD,QAAQmM,SAAS1P,GAAI,CAACmN,MAAO,KACxC,CAAC,EAAK7M,KAAKiD,QAAQqM,IAAI5P,GAAI,CAACmN,MAAO,KAEnC,CAAC,EAAK7M,KAAKiD,QAAQ2N,UAAUlR,GAAI,CAACiF,OAAQ,KAG1C,CAAC,EAAK3E,KAAKiD,QAAQ4N,eAAenR,GAAI,CAACiF,QAAS,KAChD,CAAC,EAAK3E,KAAKiD,QAAQ6N,gBAAgBpR,GAAI,CAACiF,QAAS,KACjD,CAAC,EAAK3E,KAAKiD,QAAQ8N,iBAAiBrR,GAAI,CAACiF,QAAS,KAClD,CAAC,EAAK3E,KAAKiD,QAAQ+N,eAAetR,GAAI,CAACiF,QAAS,KAChD,CAAC,EAAK3E,KAAKiD,QAAQgO,gBAAgBvR,GAAI,CAACiF,QAAS,KACjD,CAAC,EAAK3E,KAAKiD,QAAQiO,eAAexR,GAAI,CAACiF,QAAS,OAlClD,EAqCSwM,gBArCT,IAuCCC,eAAiB,EAvClB,4CAyCC,WAAsB,OACrB,4DAEIjS,KAAKK,OAAOgQ,MAAMC,OAAO,QAC5BtQ,KAAKwR,oBAAoBtQ,IAAIlB,KAAKa,KAAKiD,QAAQ+M,gBAAgBtQ,GAAI,CAACiF,QAAS,KAG9E,IAAM0M,EAAe,KAAW,OAAAlS,KAAKwR,qBAAL,SAC1BjB,GAAerQ,EAAAA,GAAAA,MAAgBE,OAAOJ,KAAKK,OAAOC,MAAMC,IAE9DP,KAAKC,aACJsQ,EACEpQ,MAAKM,EAAAA,GAAAA,IAAM,CAAC,SAAU,WACtB+E,QAAO/E,EAAAA,GAAAA,IAAMyR,IACflS,KAAKmS,iBAENnS,KAAKC,aAAasQ,EAAapQ,KAAK,eAAeK,OAAOR,KAAKa,KAAKkB,SAASgM,UAAUxN,IAAKP,KAAKoS,YACjGpS,KAAKC,aAAasQ,EAAapQ,KAAK,gBAAgBK,OAAOR,KAAKa,KAAKkB,SAASgM,UAAUxN,IAAKP,KAAKqS,aAElGrS,KAAKC,aAAasQ,EAAapQ,KAAK,eAAeK,OAAOR,KAAKa,KAAKkB,SAASuQ,SAAS/R,IAAKP,KAAKuS,iBAChGvS,KAAKC,aAAasQ,EAAapQ,KAAK,gBAAgBK,OAAOR,KAAKa,KAAKkB,SAASuQ,SAAS/R,IAAKP,KAAKwS,kBAEjGxS,KAAKC,aAAa,WAAYD,KAAKW,WACnC,GAhEF,wBAkEC,WACCX,KAAKgS,WAAahS,KAAKC,cACtBC,EAAAA,GAAAA,MAAgBC,KAAK,UACrBH,KAAKyS,QAEN,GAvEF,qBAyEC,SAAgB7R,GAAyB,WACnBA,EAAMkH,QAAQ4K,MAAK,qBAAEvR,SAAuB,EAAKd,OAAOC,MAAMC,EAA3C,KAEvCP,KAAKmR,WAAWwB,OApFI,GAsFrB,GA9EF,yBAgFC,WACwB,MAAnB3S,KAAKgS,YACRhS,KAAK4S,gBAAgB5S,KAAKgS,WAE3B,GApFF,6BAsFC,SAAwBpR,GACvB,IAAMiS,EAAW7S,KAAKwR,oBAAoBvQ,IAAIL,EAAM4E,QAEpD,GAAgB,MAAZqN,EAAkB,OACfC,EAAM,UAAGD,EAASjS,EAAMT,aAAlB,QAA2B,EACvCH,KAAKmR,WAAWwB,OAAOG,EACvB,CACD,GA7FF,6BA+FC,SAAgBlS,GACfZ,KAAKiS,cAAgBrR,EAAMY,SAC3B,GAjGF,8BAmGC,SAAiBZ,GAChB,IAAMmS,EAAOnS,EAAMY,UAAYxB,KAAKiS,cAC9Be,EAAQtR,KAAK+D,IAAI/D,KAAKuR,MAAMF,EA3GJ,KACL,GA4GzB/S,KAAKmR,WAAWwB,OA9Gc,GA8GPK,EACvB,GAxGF,wBA2GC,SAAWE,GACVlT,KAAKmR,WAAWwB,OAAOO,EACvB,GA7GF,wBA+GC,WACClT,KAAK4F,YAAYnC,IAAI,IAAIoC,GAAAA,GAAiB,CACzChC,K,yyGACAkC,SAAS,UAAC,GAAAnC,MAAD,CAAOrD,GAAG,qCAAV,gJAGTyF,KAAK,UAAC,GAAApC,MAAD,CAAOrD,GAAG,iCAAV,oDACHP,KAAKmR,WAAWgC,WAElBrN,MAAO4I,GACP1K,MAAOhE,KAAKmR,WAAWgC,UAExB,KA3HF,GAA2BC,GAAAA,IAA3B,EACiBzP,MAAQ,8CADzB,EAEiBqF,aPxBT,EOsBR,0CAGErG,GAAAA,EAHF,iFAGqBiD,WAHrB,O,8CCjBMyN,GAAyB,CAC9B,SACA,QACA,QACA,OACA,QACA,WACA,QACA,MACA,YASYC,IAAb,iCAK8BvQ,GAAAA,GAL9B,6PAOUuJ,WAAa,EAAKzL,KAAKkB,SAASwR,cAP1C,4CASC,WAAsB,YACrB,4DAEAvT,KAAKwT,iBAAiB,KAAAH,IAAS,KAATA,IAAc,SAAAI,GAAC,OAAI,EAAK5S,KAAKiD,QAAQ2P,GAAGlT,EAAzB,KAErC,IAAMoM,EAAiB3M,KAAKa,KAAKiD,QAAQyP,cAAc1P,KACjD6P,GAAuB,UAAC,MAAD,CAAYlO,OAAO,gBAAgBmO,UAAU,IAC1E3T,KAAK4T,aACJ,IAAIC,GAAAA,GAA0B,CAC7BC,aAxBa,EAyBbC,eAAgB/T,KAAK+T,eACrBC,WAAW,EACXrH,eAAAA,EACA3H,mBAAmB,UAAC,GAAApB,MAAD,CAAOrD,GAAG,uCAAV,qEACc,UAAC,MAAD,CAAYiF,OAAO,qBAEpDkO,qBAAAA,EACAO,cAAe,CACd,EAAGlP,GAAAA,GAAAA,OACH,EAAGA,GAAAA,GAAAA,OAEJmP,YAAalU,KAAKmU,uBAAuBC,KAAKpU,SAEhDA,KAAK4T,aACJ,IAAIS,GAAAA,GAAyB,CAC5BC,iBAxCa,EAyCbC,YAAa,CAEZvU,KAAKa,KAAKiD,QAAQkM,MAAMzP,GACxBP,KAAKa,KAAKiD,QAAQoM,MAAM3P,GACxBP,KAAKa,KAAKiD,QAAQsM,SAAS7P,GAG3BP,KAAKa,KAAKiD,QAAQqM,IAAI5P,GACtBP,KAAKa,KAAKiD,QAAQmM,SAAS1P,IAE5BwT,eAAgB/T,KAAK+T,eACrBpH,eAAAA,EACA3H,mBAAmB,UAAC,GAAApB,MAAD,CAAOrD,GAAG,oCAAV,wFACD,UAAC,MAAD,CAAYiF,OAAO,qBAErCkO,qBAAAA,EACAO,cAAe,CACd,EAAGlP,GAAAA,GAAAA,OAEJmP,YAAalU,KAAKmU,uBAAuBC,KAAKpU,QAEhD,GAxDF,oCA0DC,SAA+BwU,GAC9B,GAAIxU,KAAKyU,wBAAwBD,GAAS,OACnCE,EAAkBhT,KAAKiT,OAAM,UAACH,EAAOxI,WAAR,QAAewI,EAAOzI,OAASyI,EAAOzI,OAAS/L,KAAK+T,eAAe1R,eAGhGuS,EAAsB5U,KAAKK,OAAO8B,KAAKX,UAAYxB,KAAKK,OAAO8B,KAAKpB,SAAYyT,EAAOzI,MACvF8I,EAAenT,KAAKuR,MAAM2B,EAlED,MAqE/B,GAAIC,EAzEU,EA0Eb,OAAOA,EAAeH,CAEvB,CAED,OAAO,CACP,KAzEF,GAA4BlI,GAAAA,IAA5B,EACiBxD,aR1BR,EQyBT,EAEiBtG,OAAS,SAF1B,EAGiBiB,MAAQ,qDAHzB,6CAKEhB,GAAAA,EALF,iFAKaoR,cALb,OCdqBe,GAAAA,SAAAA,I,gMACXC,8BAJuB,K,EAKhC/L,aThBW,E,ESiBFgM,WAAa,CACrB,CACCC,UAAW,CAAC,EAAKpU,KAAKiD,QAAQyP,eAC9B2B,uBAR6B,MAU9B,CACCD,UAAW,CACV,EAAKpU,KAAKiD,QAAQqR,kBAClB,EAAKtU,KAAKiD,QAAQsR,aAClB,EAAKvU,KAAKiD,QAAQuR,kBAEnBC,eArB4B,OAuB7B,CACCL,UAAW,CACV,EAAKpU,KAAKiD,QAAQ4N,eAClB,EAAK7Q,KAAKiD,QAAQ+N,gBAEnByD,eA9B4B,OAgC7B,CACCL,UAAW,CAAC,EAAKpU,KAAKiD,QAAQ2N,WAC9B6D,eA9ByB,O,WAKPR,C,SAAqBS,GCN7BC,IAAb,iCAEiCpO,GAAAA,IAFjC,iCAG4B1H,GAAAA,GAH5B,yRAKS+V,UAAY,EALrB,EAMSC,SAAW,EANpB,EAQCC,KAAO,CACN,EAAK9U,KAAKiD,QAAQ0L,aAAajP,GAC/B,EAAKM,KAAKiD,QAAQ8R,gBAAgBrV,IAVpC,4CAaC,YACC,4DAEA,IAAMgQ,GAAerQ,EAAAA,GAAAA,MAAgBE,OAAOJ,KAAKK,OAAOC,MAAMC,IAE9DP,KAAKC,aACJsQ,EACEpQ,KAAK,eACLK,OAAOR,KAAKa,KAAKkB,SAAS8T,mBAAmBtV,IAC/CP,KAAK8V,YAEN9V,KAAKC,aACJsQ,EACEpQ,MAAKM,EAAAA,GAAAA,IAAM,CAAC,YACZ+E,QAAO/E,EAAAA,GAAAA,IAAMT,KAAK2V,OACpB3V,KAAK+V,OAEN/V,KAAKC,aAAa,WAAYD,KAAKW,WACnC,GA/BF,wBAiCC,WACCX,KAAKyV,WACL,GAnCF,mBAqCC,WACCzV,KAAK0V,UACL,GAvCF,wBAyCC,WACC1V,KAAK6I,UAAUpF,IAAI,IAAIqF,GAAAA,GAAK,CAC3BC,KAAM,gBACNC,aVnDG,EUoDHE,aAAa,UAAC,GAAAtF,MAAD,CAAOrD,GAAG,wBAAV,wNACN,UAAC,MAAD,CAAUiF,OAAS,eAAqB,UAAC,MAAD,CAAUhF,OAAS,wBAAgD,UAAC,MAAD,CAAUgF,OAAO,kBAAqB,UAAC,MAAD,CAAUA,OAAO,qBAC/E,UAAC,MAAD,CAAUA,OAAO,kBAAqB,UAAC,MAAD,CAAUA,OAAO,uBAEjJ2D,aAAc,CACb,IAAIK,GAAAA,GAAY,CACfT,MAAM,UAAC,GAAAnF,MAAD,CAAOrD,GAAG,2CAAV,mDAGNyD,MAAOhE,KAAK0V,SACZvU,OAA0B,EAAjBnB,KAAKyV,eAIjB,KA3DF,GAAyBhT,GAAAA,IAAzB,EACiBC,OAAS,MAD1B,wCAEEC,GAAAA,EAFF,iFAEqBkG,SAFrB,mCAGElG,GAAAA,EAHF,iFAGqB9B,IAHrB,OCTasG,GAAb,6MACCG,YAAc,CACb,EAAKzG,KAAKiD,QAAQkM,MAClB,EAAKnP,KAAKiD,QAAQoM,OAHpB,Y,SAAiC8F,G,0GCkB3BC,GAAoB,4SAIpBC,GAAe,CACpBC,KAAM,CAACC,SAAU,EAAGC,SAAS,iDAC7BC,cAAe,CAACF,SAAU,GAAIC,SAAS,UAAC,GAAAzS,MAAD,CAAOrD,GAAK,qCAAZ,0CACvCgW,eAAgB,CAACH,SAAU,GAAIC,SAAS,UAAC,GAAAzS,MAAD,CAAOrD,GAAK,sCAAZ,yCACxCiW,SAAU,CAACJ,SAAU,GAAIC,SAAS,UAAC,GAAAzS,MAAD,CAAOrD,GAAK,gCAAZ,mDAClCkW,WAAY,CAACL,SAAU,GAAIC,SAAS,UAAC,GAAAzS,MAAD,CAAOrD,GAAK,kCAAZ,uDACpCmW,MAAO,CAACN,SAAU,GAAIC,SAAS,UAAC,GAAAzS,MAAD,CAAOrD,GAAK,6BAAZ,oCAK1BoW,GAAAA,WA8CL,WAAY5K,IAAe,qBA7C3BA,WA6C2B,OA5C3BC,SA4C2B,OA3C3B4K,cA2C2B,OA1C3BC,eAAyB,EA0CE,KAzC3BC,QAAkB,EAyCS,KAxC3BC,SAAmB,EAwCQ,KAvC3BC,QAAkB,EAuCS,KAtC3BC,aAAuB,EAsCI,KAnC3BC,aAAuB,EAmCI,KAlC3BC,aAAuB,EAkCI,KAjC3BC,UAAoB,EAiCO,KA/B3BC,gBAA0B,EA+BC,KA9B3BC,gBAA0B,EA8BC,KA7B3BC,aAAuB,EA6BI,KA3B3BC,YAAsB,EA2BK,KAzB3BC,SAAqDvB,GAAaC,KA0BjEnW,KAAK+L,MAAQA,EACb/L,KAAK4W,SAAW,EAChB,C,qCApBD,WACC,OAAO5W,KAAKyX,QACZ,E,IARD,SAAmBC,GACdA,EAAKtB,SAAWpW,KAAKyX,SAASrB,WACjCpW,KAAKyX,SAAWC,EAEjB,G,6BAOD,WACC,OAAQ1X,KAAKqX,gBAAkBrX,KAAKsX,gBAAkBtX,KAAKuX,cAAiBvX,KAAKkX,aAAelX,KAAKmX,aAAenX,KAAKoX,UACzH,G,sBAED,WACC,OAAQpX,KAAKqX,gBAAkBrX,KAAKsX,gBAAkBtX,KAAKuX,YAC3D,G,uBAED,WACC,OAAQvX,KAAKkX,aAAelX,KAAKmX,aAAenX,KAAKoX,SACrD,K,EA5CIT,GAoDOgB,IAAb,iCAK4BjY,GAAAA,GAL5B,kCAMmC8E,GAAAA,IANnC,kCAO6B0M,IAP7B,kCAQgCzM,GAAAA,IARhC,wWAUSmT,OAAS,EAVlB,EAWSC,iBAAmB,EAX5B,EAYSC,cAAgB,EAZzB,EAcSC,gBAA8B,GAdvC,EAoBCC,YAAc,CACb,EAAKnX,KAAKiD,QAAQsM,SAAS7P,GAC3B,EAAKM,KAAKiD,QAAQkM,MAAMzP,GACxB,EAAKM,KAAKiD,QAAQmM,SAAS1P,GAC3B,EAAKM,KAAKiD,QAAQoM,MAAM3P,GACxB,EAAKM,KAAKiD,QAAQqM,IAAI5P,IAzBxB,EA8BC0X,aAAe,CACd,EAAKpX,KAAKiD,QAAQ+K,UAAUtO,GAC5B,EAAKM,KAAKiD,QAAQoU,YAAY3X,GAC9B,EAAKM,KAAKiD,QAAQ2L,kBAAkBlP,GACpC,EAAKM,KAAKiD,QAAQ0S,SAASjW,IAlC7B,EAqCC4X,4BAA8B,CAC7B,EAAKtX,KAAKiD,QAAQ6L,OAAOpP,GACzB,EAAKM,KAAKiD,QAAQ8L,MAAMrP,GACxB,EAAKM,KAAKiD,QAAQgM,MAAMvP,GACxB,EAAKM,KAAKiD,QAAQiM,KAAKxP,GAEvB,EAAKM,KAAKiD,QAAQkM,MAAMzP,GACxB,EAAKM,KAAKiD,QAAQoM,MAAM3P,GACxB,EAAKM,KAAKiD,QAAQsM,SAAS7P,GAC3B,EAAKM,KAAKiD,QAAQmM,SAAS1P,GAC3B,EAAKM,KAAKiD,QAAQqM,IAAI5P,GAEtB,EAAKM,KAAKiD,QAAQ0L,aAAajP,GAC/B,EAAKM,KAAKiD,QAAQ8R,gBAAgBrV,GAGlC,EAAKM,KAAKiD,QAAQ+K,UAAUtO,GAC5B,EAAKM,KAAKiD,QAAQoU,YAAY3X,GAC9B,EAAKM,KAAKiD,QAAQ2L,kBAAkBlP,GACpC,EAAKM,KAAKiD,QAAQ0S,SAASjW,GAG3B,EAAKM,KAAKiD,QAAQ+L,KAAKtP,GACvB,EAAKM,KAAKiD,QAAQiO,eAAexR,GACjC,EAAKM,KAAKiD,QAAQgO,gBAAgBvR,GAGlC,EAAKM,KAAKiD,QAAQ+M,gBAAgBtQ,GAClC,EAAKM,KAAKiD,QAAQyP,cAAchT,IAjElC,4CAgBC,WACC,OAAO,KAAOP,KAAK+X,gBACnB,GAlBF,wBAoEC,YACC,4DAEA,IAAMxH,GAAerQ,EAAAA,GAAAA,MAAgBE,OAAOJ,KAAKK,OAAOC,MAAMC,IAE9DP,KAAKC,aAAasQ,EAAapQ,KAAK,UAAUqF,QAAO/E,EAAAA,GAAAA,IAAMT,KAAKmY,8BAA+BnY,KAAKoY,kBACpGpY,KAAKC,aAAasQ,EAAapQ,KAAK,SAASqF,QAAO/E,EAAAA,GAAAA,IAAMT,KAAKgY,cAAehY,KAAKqY,UACnFrY,KAAKC,aAAasQ,EAAapQ,KAAK,UAAUqF,QAAO/E,EAAAA,GAAAA,IAAMT,KAAKiY,eAAgBjY,KAAK0L,QACrF1L,KAAKC,cAAaC,EAAAA,GAAAA,MAAgBC,KAAK,SAASG,MAAMN,KAAKK,OAAOC,MAAMC,IAAKP,KAAKsY,SAGlFtY,KAAKC,aAAa,WAAYD,KAAKW,WACnC,GAhFF,sBAmFC,SAAiBC,GAChB,IAAM4E,EAASxF,KAAKa,KAAK2F,UAAU5F,EAAM4E,QAEnC+S,EAAevY,KAAKuY,aAE1B,GAAoB,MAAhBA,GAA4C,MAApBA,EAAavM,IAExC,OAAQxG,GACR,KAAKxF,KAAKa,KAAKiD,QAAQsM,SACtBmI,EAAarB,eAETqB,EAAarB,aAAe,IAC/BqB,EAAalB,kBACbkB,EAAarB,aAAe,EAC5BqB,EAAatB,aAAc,GAE5B,MAED,KAAKjX,KAAKa,KAAKiD,QAAQkM,MACvB,KAAKhQ,KAAKa,KAAKiD,QAAQmM,SACtBsI,EAAapB,eAEToB,EAAapB,aAAe,IAC/BoB,EAAajB,kBACbiB,EAAapB,aAAe,EAC5BoB,EAAatB,aAAc,GAG5B,MAED,KAAKjX,KAAKa,KAAKiD,QAAQoM,MACvB,KAAKlQ,KAAKa,KAAKiD,QAAQqM,IACtBoI,EAAanB,YAETmB,EAAanB,UAAY,IAC5BmB,EAAahB,eACbgB,EAAanB,UAAY,EACzBmB,EAAatB,aAAc,GAM9B,GA9HF,8BAiIC,SAAiBrW,GAGhB,IAAI2X,EAAevY,KAAKuY,aAEH,MAAhBA,IAAkD,IAAxBA,EAAazB,QAE3C9W,KAAKwY,cAAc5X,GAKA,OAFpB2X,EAAevY,KAAKuY,eAE4B,MAApBA,EAAavM,KAGxCuM,EAAa3B,SAASjR,KAAK/E,EAG5B,GAnJF,2BAsJC,SAAsBA,GACrB,IAAM6X,EAAW,IAAI9B,GAAS/V,EAAMY,WACpCxB,KAAK+X,gBAAgBpS,KAAK8S,EAE1B,GA1JF,4BA4JC,WACC,IAAMF,EAAevY,KAAKuY,aAEN,MAAhBA,GAA4C,MAApBA,EAAavM,OAGX,IAAzBuM,EAAaxB,SAAqBwB,EAAaG,kBAAoB,GACtEH,EAAad,SAAWvB,GAAaQ,MACrC6B,EAAa1B,eAAgB,EAC7B7W,KAAK6X,qBACkC,IAA7BU,EAAatB,aAAwBsB,EAAaI,WAAa,GACzEJ,EAAad,SAAWvB,GAAaK,eACrCgC,EAAa1B,eAAgB,EAC7B7W,KAAK6X,qBACkC,IAA7BU,EAAatB,aACvBsB,EAAad,SAAWvB,GAAaI,cACrCiC,EAAa1B,eAAgB,EAC7B7W,KAAK6X,qBAC6B,IAAxBU,EAAavB,QAAmBuB,EAAaK,YAAc,GACrEL,EAAad,SAAWvB,GAAaO,WACrC8B,EAAa1B,eAAgB,EAC7B7W,KAAK6X,mBACL7X,KAAK8X,kBAC6B,IAAxBS,EAAavB,SACvBuB,EAAad,SAAWvB,GAAaM,SACrC+B,EAAa1B,eAAgB,EAC7B7W,KAAK6X,mBACL7X,KAAK8X,iBAIP,GA3LF,oBA8LC,SAAelX,GACd,IAAM2X,EAAevY,KAAKuY,aACpB/S,EAASxF,KAAKa,KAAK2F,UAAU5F,EAAM4E,QAErB,MAAhB+S,GAA4C,MAApBA,EAAavM,KAAyB,MAAVxG,IAEnDA,EAAOjF,KAAOP,KAAKa,KAAKiD,QAAQ0S,SAASjW,KAC5CgY,EAAaf,YAtQK,GAsQSe,EAAaK,YACxCL,EAAavB,QAAS,EAEtBhX,KAAK6Y,MAAMC,WAAWP,EAAaf,cAGpCxX,KAAK4X,OAAS5X,KAAK4X,OAASW,EAAaI,WAEzCJ,EAAazB,QAAS,EACtB9W,KAAK+Y,iBACLR,EAAavM,IAAMpL,EAAMY,UAE1B,GAjNF,qBAmNC,WACC,IAAM+W,EAAevY,KAAKuY,aAEN,MAAhBA,GAA4C,MAApBA,EAAavM,MACxChM,KAAK4X,OAAS5X,KAAK4X,OAASW,EAAaG,kBAEzCH,EAAazB,QAAS,EACtByB,EAAaxB,SAAU,EACvB/W,KAAK+Y,iBACLR,EAAavM,IAAMhM,KAAKK,OAAOqF,sBAGhC,GA/NF,wBAiOC,WACC1F,KAAK4F,YAAYnC,IAAI,IAAIoC,GAAAA,GAAiB,CACzChC,KAAM7D,KAAKa,KAAKiD,QAAQyP,cAAc1P,KACtCkC,SAAS,UAAC,GAAAnC,MAAD,CAAOrD,GAAI,6BAAX,0MACC,UAAC,MAAD,CAAUiF,OAAS,WAAW,UAAC,MAAD,CAAUA,OAAS,WAAc,UAAC,MAAD,CAAUA,OAAS,gBAE5FM,MAAO,CACN,EAAGf,GAAAA,GAAAA,MACH,EAAGA,GAAAA,GAAAA,OACH,EAAGA,GAAAA,GAAAA,OAEJf,MAAOhE,KAAK4X,OACZ5R,KAAK,UAAC,GAAApC,MAAD,CAAOrD,GAAK,yBAAZ,yCAAiDP,KAAK4X,aAEjC,IAAvB5X,KAAK8X,eACR9X,KAAK4F,YAAYnC,IAAI,IAAIuV,GAAAA,GAAW,CACnCnV,KAAM7D,KAAKa,KAAKiD,QAAQ0S,SAAS3S,KACjCkC,SAAS,UAAC,GAAAnC,MAAD,CAAOrD,GAAK,8BAAZ,sKAA2C,UAAC,OAAD,WAAgBP,KAAKa,KAAKiD,QAAQ0S,cACtF1R,SAAUC,GAAAA,GAAAA,MACViB,KAAK,UAAC,GAAApC,MAAD,CAAOrD,GAAK,qCAAZ,mDAIP,GAxPF,oBA0PC,WAAkB,IACgB,IADhB,OACjB,GAA8B,IAA1BP,KAAK6X,iBACR,OAAO,WAAC,GAAAoB,SAAD,YACN,UAACC,GAAA,EAAD,WACC,UAAC,GAAAtV,MAAD,CAAOrD,GAAG,iCAAV,wPAID,WAAC2Y,GAAA,EAAD,CAASC,SAAO,EAACtV,MAAI,EAArB,WACC,UAACuV,GAAA,EAAD,CAAMrQ,KAAM,kBACZ,UAACmQ,GAAA,UAAD,WACC,UAACG,GAAA,EAAD,CAAejZ,OAAS6V,WAG1B,UAACqD,GAAA,EAAD,CACCxR,QAAS,CACR,CACCyR,QAAQ,UAAC,OAAD,SAAYrP,UAAU,GAAWlK,KAAKa,KAAKiD,QAAQsM,WAC3DoJ,SAAU,SAEX,CACCD,QAAQ,UAAC,OAAD,SAAYrP,UAAU,GAAWlK,KAAKa,KAAKiD,QAAQkM,QAC3DwJ,SAAU,SAEX,CACCD,QAAQ,UAAC,OAAD,SAAYrP,UAAU,GAAWlK,KAAKa,KAAKiD,QAAQoM,QAC3DsJ,SAAU,OAGZC,MAAO,CACN,CACCF,QAAQ,UAAC,GAAA3V,MAAD,CAAOrD,GAAK,2BAAZ,8BACRiZ,SAAU,WAGZ3Y,KAAM,cAAAb,KAAK+X,iBAAL,QACG,SAAAvD,GAAM,OAAIA,EAAOqC,aAAX,KADT,QAEA,SAAArC,GACJ,MAAQ,CACPzI,MAAOyI,EAAOzI,MAAQ,EAAK1L,OAAO8B,KAAKX,UAEvCwK,IAAmB,MAAdwI,EAAOxI,IACXwI,EAAOxI,IAAM,EAAK3L,OAAO8B,KAAKX,UAC5BgT,EAAOzI,MAAQ,EAAK1L,OAAO8B,KAAKX,UAEnCkY,YAAa,CACZC,MAAO,CACNtQ,OAASmL,EAAO0C,aAAe1C,EAAO6C,iBAGvCuC,MAAO,CACNvQ,OAASmL,EAAO2C,aAAe3C,EAAO8C,iBAGvCuC,GAAI,CACHxQ,OAASmL,EAAO4C,UAAY5C,EAAO+C,eAKrCuC,SAAU,CACTC,QAAQ,gCAAGvF,EAAOwF,QAAQ3D,WAG3BO,SAAUpC,EAAOoC,SAGlB,IAGFqD,OAAQja,KAAKgH,SAASC,SAIzB,KApUF,GAAyBxE,GAAAA,IAAzB,GACiBuG,aZjFX,EYgFN,GAEiBtG,OAAS,MAF1B,GAGiBiB,MAAQ,yDAHzB,uCAKEhB,GAAAA,EALF,iFAKqB9B,IALrB,4CAME8B,GAAAA,EANF,kFAMqBiD,WANrB,sCAOEjD,GAAAA,EAPF,kFAOqBkW,KAPrB,yCAQElW,GAAAA,EARF,kFAQqBqE,QARrB,QCxEM0H,GAAmB,CACxB,EAAG3J,GAAAA,GAAAA,MACH,EAAGA,GAAAA,GAAAA,OACH,EAAGA,GAAAA,GAAAA,OAQEmV,GAAcnJ,KAAM,WAAWE,KADxB,KAGAkJ,IAAb,kCAKmC3V,GAAAA,IALnC,kCAMiC4C,GAAAA,IANjC,oSAQSgT,cAAgB,EAAK3W,IAAI,IAAI2N,GAAAA,GAAa,CACjDC,MAAO,CACNC,OAAO,UAAC,GAAA1N,MAAD,CAAOrD,GAAG,qCAAV,wBACPgR,MAAO2I,IAERG,QAlB0B,KAK5B,EAgBSC,uBAAyB,IAAI,KAAJ,CAA+B,CAE/D,CAAC,EAAKzZ,KAAKiD,QAAQ+K,UAAUtO,GAAI,CAACiF,OAAQ,IAC1C,CAAC,EAAK3E,KAAKiD,QAAQoU,YAAY3X,GAAI,CAACiF,OAAQ,IAC5C,CAAC,EAAK3E,KAAKiD,QAAQ2L,kBAAkBlP,GAAI,CAACiF,OAAQ,IAClD,CAAC,EAAK3E,KAAKiD,QAAQ0L,aAAajP,GAAI,CAACiF,OAAQ,IAG7C,CAAC,EAAK3E,KAAKiD,QAAQyW,MAAMha,GAAI,CAACiF,QAAS,IACvC,CAAC,EAAK3E,KAAKiD,QAAQ0W,SAASja,GAAI,CAACiF,QAAS,MAzB5C,EA4BCyM,eAAiB,EA5BlB,4CA8BC,WAAsB,OACrB,4DAEA,IAAMwI,EAAkB,KAAW,OAAAza,KAAKsa,wBAAL,SAC7B/J,GAAerQ,EAAAA,GAAAA,MAAgBE,OAAOJ,KAAKK,OAAOC,MAAMC,IAE9DP,KAAKC,aACJsQ,EACEpQ,MAAKM,EAAAA,GAAAA,IAAM,CAAC,YACZ+E,QAAO/E,EAAAA,GAAAA,IAAMga,IACfza,KAAKmS,iBAGNnS,KAAKC,aAAasQ,EAAapQ,KAAK,eAAeK,OAAOR,KAAKa,KAAKkB,SAASuQ,SAAS/R,IAAKP,KAAKuS,iBAChGvS,KAAKC,aAAasQ,EAAapQ,KAAK,gBAAgBK,OAAOR,KAAKa,KAAKkB,SAASuQ,SAAS/R,IAAKP,KAAKwS,kBAEjGxS,KAAKC,aAAa,WAAYD,KAAKW,WACnC,GA/CF,6BAiDC,SAAwBC,GACvB,IAAMiS,EAAW7S,KAAKsa,uBAAuBrZ,IAAIL,EAAM4E,QAEvD,GAAgB,MAAZqN,EAAkB,OACfC,EAAM,UAAGD,EAASjS,EAAMT,aAAlB,QAA2B,EACvCH,KAAKoa,cAAczH,OAAOG,EAE1B,CACD,GAzDF,6BA2DC,SAAwBlS,GACvBZ,KAAKiS,cAAgBrR,EAAMY,SAC3B,GA7DF,8BA+DC,SAAyBZ,GACxB,IAAMmS,EAAOnS,EAAMY,UAAYxB,KAAKiS,cAC9Be,EAAQtR,KAAK+D,IAAI/D,KAAKuR,MAAMF,EAvEJ,KACJ,GAwE1B/S,KAAKoa,cAAczH,OA1EY,EA0ELK,EAC1B,GApEF,wBAsEC,WACC,IAAM0H,EAAYhZ,KAAKuR,MAAMjT,KAAKoa,cAAcO,WA5EtB,GA6EtBC,EAAgBlZ,KAAKuR,MAAMjT,KAAKoa,cAAcS,eA7ExB,GA8EtBH,EAAYE,IACfA,EAAgBF,GAEjB1a,KAAK6I,UAAUpF,IAAI,IAAIqF,GAAAA,GAAK,CAC3BC,KAAM,wBACNC,abrGK,EasGLE,aAAa,UAAC,GAAAtF,MAAD,CAAOrD,GAAG,0BAAV,mMAEa,UAAC,MAAD,CAAUiF,OAAS,WAAa,UAAC,MAAD,CAAUA,OAAS,gBAE7E2D,aAAc,CACb,IAAIK,GAAAA,GAAY,CACfT,MAAM,UAAC,GAAAnF,MAAD,CAAOrD,GAAG,6CAAV,gEAGNyD,MAAO0W,EACPvZ,OAAQyZ,QAKX5a,KAAK4F,YAAYnC,IAAI,IAAIoC,GAAAA,GAAiB,CACzChC,KAAM7D,KAAKa,KAAKiD,QAAQyW,MAAM1W,KAC9BkC,SAAS,UAAC,GAAAnC,MAAD,CAAOrD,GAAG,qCAAV,sJAGTyF,KAAK,UAAC,GAAApC,MAAD,CAAOrD,GAAG,iCAAV,gEACHP,KAAKoa,cAAcjH,WAErBrN,MAAO4I,GACP1K,MAAOhE,KAAKoa,cAAcjH,UAE3B,KAzGF,GAA2BC,GAAAA,IAA3B,GACiBzP,MAAQ,sDADzB,GAEiBjB,OAAS,QAF1B,GAGiBsG,ab1BT,EauBR,8CAKErG,GAAAA,EALF,kFAKqBiD,WALrB,0CAMEjD,GAAAA,EANF,kFAMqBkG,SANrB,QCtBqBiS,GAAAA,SAAAA,I,gMACpBC,WAAalW,GAAAA,GAAAA,a,WADOiW,C,SAAoBzO,GCWzC,IACCK,GACAS,GACAM,GACAI,GACAI,GACAiB,GACAgC,GACAtC,GACAtK,GACAgP,GACAnM,GACA2N,GACAU,GACAmC,GACAwC,GACA9N,G,uBCjCD,EAAQ,OACR,IAAI2O,EAAO,EAAQ,OAEnBzb,EAAOC,QAAUwb,EAAKtZ,KAAKuZ,K,wBCH3B,IAAIC,EAAI,EAAQ,OAEZvG,EAAOjT,KAAKiT,KACZ1B,EAAQvR,KAAKuR,MAIjBiI,EAAE,CAAE/Z,OAAQ,OAAQga,MAAM,GAAQ,CAChCF,MAAO,SAAeG,GACpB,OAAQA,EAAK,EAAInI,EAAQ0B,GAAMyG,EACjC,G,wBCVF,IAAIC,EAAS,EAAQ,MAErB9b,EAAOC,QAAU6b,C","sources":["webpack://@xivanalysis/client/./node_modules/@babel/runtime-corejs3/core-js-stable/math/trunc.js","webpack://@xivanalysis/client/./src/parser/core/modules/DoTs.ts","webpack://@xivanalysis/client/./src/parser/core/modules/GlobalCooldown.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/Interrupts.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/Positionals.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/Statuses.ts","webpack://@xivanalysis/client/./src/parser/core/modules/Tincture.ts","webpack://@xivanalysis/client/./src/parser/jobs/sam/modules/AoeChecker.ts","webpack://@xivanalysis/client/./src/parser/jobs/sam/modules/Buffs.tsx","webpack://@xivanalysis/client/./src/parser/jobs/sam/modules/DISPLAY_ORDER.js","webpack://@xivanalysis/client/./src/parser/jobs/sam/modules/Combos.ts","webpack://@xivanalysis/client/./src/parser/jobs/sam/modules/Defensives.ts","webpack://@xivanalysis/client/./src/parser/jobs/sam/modules/Fuka.ts","webpack://@xivanalysis/client/./src/parser/jobs/sam/modules/Higanbana.tsx","webpack://@xivanalysis/client/./src/parser/jobs/sam/modules/Interrupts.js","webpack://@xivanalysis/client/./src/parser/jobs/sam/modules/Kaiten.tsx","webpack://@xivanalysis/client/./src/parser/jobs/sam/modules/Kenki/Kenki.tsx","webpack://@xivanalysis/client/./src/parser/jobs/sam/modules/Meikyo.tsx","webpack://@xivanalysis/client/./src/parser/jobs/sam/modules/OGCDDowntime.ts","webpack://@xivanalysis/client/./src/parser/jobs/sam/modules/Ogi.tsx","webpack://@xivanalysis/client/./src/parser/jobs/sam/modules/Positionals.ts","webpack://@xivanalysis/client/./src/parser/jobs/sam/modules/Sen.tsx","webpack://@xivanalysis/client/./src/parser/jobs/sam/modules/Shoha.tsx","webpack://@xivanalysis/client/./src/parser/jobs/sam/modules/Tincture.js","webpack://@xivanalysis/client/./src/parser/jobs/sam/modules/index.js","webpack://@xivanalysis/client/./node_modules/core-js-pure/es/math/trunc.js","webpack://@xivanalysis/client/./node_modules/core-js-pure/modules/es.math.trunc.js","webpack://@xivanalysis/client/./node_modules/core-js-pure/stable/math/trunc.js"],"sourcesContent":["module.exports = require(\"core-js-pure/stable/math/trunc\");","import {Status} from 'data/STATUSES'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actor, Actors} from 'parser/core/modules/Actors'\nimport {Data} from 'parser/core/modules/Data'\nimport {Invulnerability} from 'parser/core/modules/Invulnerability'\nimport {Statuses} from 'parser/core/modules/Statuses'\n\nconst MILLISECONDS_PER_MINUTE = 60000\n\ntype DotTracking = Map<Status['id'], Map<Actor['id'], DotTargetTracking>>\ninterface DotTargetTracking {\n\tlastApplied: number\n\ttotalClipping: number\n}\n\nexport abstract class DoTs extends Analyser {\n\tstatic override handle = 'dots'\n\n\t@dependency protected data!: Data\n\t@dependency private actors!: Actors\n\t@dependency private invulnerability!: Invulnerability\n\t@dependency private statuses!: Statuses\n\n\t/** Implementing modules MUST override this with a list of Status IDs. */\n\tprotected abstract trackedStatuses: number[] = []\n\n\tprivate statusApplications: DotTracking = new Map<number, Map<string, DotTargetTracking>>()\n\n\toverride initialise() {\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.type('statusApply')\n\t\t\t\t.source(this.parser.actor.id)\n\t\t\t\t.status(oneOf(this.trackedStatuses)),\n\t\t\tthis.onApply,\n\t\t)\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\t/**\n\t * Implementing modules MUST override this to configure the checklist.\n\t * This should be handled on a job-by-job basis rather than generically, since the description\n\t * text isn't one-size-fits-all, and some jobs may have custom targets.\n\t */\n\tprotected abstract addChecklistRules(): void\n\n\t/**\n\t * Implementing modules MUST override this to configure suggestions.\n\t * This should be handled on a job-by-job basis rather than generically, since different jobs have\n\t * different thresholds for what constitutes bad clipping with varying explanations as to why.\n\t */\n\tprotected abstract addClippingSuggestions(): void\n\n\t/**\n\t * Implementing modules can optionally exclude applications of a status from clipping calculations.\n\t * (e.g. SMN rushing)\n\t */\n\tprotected excludeApplication() {\n\t\treturn false\n\t}\n\n\tprivate onApply(event: Events['statusApply']) {\n\t\tconst status = this.data.getStatus(event.status)\n\t\t// Cannot track for statuses that are not defined with a duration\n\t\tif (status?.duration == null) { return }\n\n\t\t// Get the tracking object for this status\n\t\tlet trackedStatus = this.statusApplications.get(status.id)\n\t\tif (trackedStatus == null) {\n\t\t\ttrackedStatus = new Map<string, DotTargetTracking>()\n\t\t\tthis.statusApplications.set(status.id, trackedStatus)\n\t\t}\n\n\t\t// Get the tracking object for this status on this target\n\t\tconst target = event.target\n\t\tlet trackedStatusOnTarget = trackedStatus.get(target)\n\t\tif (trackedStatusOnTarget == null) {\n\t\t\ttrackedStatusOnTarget = {lastApplied: 0, totalClipping: 0}\n\t\t\ttrackedStatus.set(target, trackedStatusOnTarget)\n\t\t}\n\n\t\t// If it's not been applied yet or should be excluded per job-specific logic (if any), set it and skip out\n\t\tif (trackedStatusOnTarget.lastApplied === 0 || this.excludeApplication()) {\n\t\t\ttrackedStatusOnTarget.lastApplied = event.timestamp\n\t\t\treturn\n\t\t}\n\n\t\t// Base clip calc\n\t\tconst clip = status.duration - (event.timestamp - trackedStatusOnTarget.lastApplied)\n\t\t// Cap clip at 0 - less than that is downtime, which is handled by the checklist requirement\n\t\ttrackedStatusOnTarget.totalClipping += Math.max(0, clip)\n\t\ttrackedStatusOnTarget.lastApplied = event.timestamp\n\t}\n\n\tprivate onComplete() {\n\t\tthis.addChecklistRules()\n\t\tthis.addClippingSuggestions()\n\t}\n\n\t// These two functions are helpers for submodules and should be used but not overridden\n\tprotected getUptimePercent(statusId: number) {\n\t\tconst status = this.data.getStatus(statusId)\n\t\tif (status == null) { return 0 }\n\n\t\tconst statusUptime = this.statuses.getUptime(status, this.actors.foes)\n\t\tconst fightDuration = this.parser.pull.duration - this.invulnerability.getDuration({types: ['invulnerable']})\n\t\treturn (statusUptime / fightDuration) * 100\n\t}\n\n\t// This normalises clipping as milliseconds clipped per minute,\n\t// since some level of clipping is expected and we need tiers that work for both long and short fights\n\tprotected getClippingAmount(statusId: number) {\n\t\tconst fightDuration = (this.parser.pull.duration - this.invulnerability.getDuration({types: ['invulnerable']}))\n\t\tif (fightDuration <= 0) { return 0 }\n\n\t\tconst statusApplications = this.statusApplications.get(statusId)\n\t\tif (statusApplications == null) { return 0 }\n\n\t\tconst totalClipping = Array.from(statusApplications.values()).reduce((clip, target) => clip + target.totalClipping, 0)\n\t\tconst clipMSPerMin = Math.round(totalClipping / (fightDuration / MILLISECONDS_PER_MINUTE))\n\t\treturn clipMSPerMin\n\t}\n}\n","import {MessageDescriptor} from '@lingui/core'\nimport {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport TransMarkdown from 'components/ui/TransMarkdown'\nimport {BASE_GCD} from 'data/CONSTANTS'\nimport React from 'react'\nimport {Report} from 'report'\nimport {Analyser} from '../Analyser'\nimport {dependency} from '../Injectable'\nimport {Data} from './Data'\nimport {SpeedAdjustments} from './SpeedAdjustments'\nimport {SimpleStatistic, Statistics} from './Statistics'\n\nconst estimateHelp: Record<Report['meta']['source'] | '__all', MessageDescriptor> = {\n\t__all: t('core.gcd.no-statistics.v2')`This GCD recast is an *estimate*, and may be incorrect. If it is reporting a GCD recast *longer* than reality, you likely need to focus on keeping your GCD rolling.`,\n\tlegacyFflogs: t('core.gcd.estimate-help.fflogs')`Precise attribute values are only available from FF Logs for the player who logged the report in ACT.`,\n}\n\nexport class GlobalCooldown extends Analyser {\n\tstatic override handle = 'gcd'\n\n\t@dependency private data!: Data\n\t@dependency private statistics!: Statistics\n\t@dependency private speedAdjustments!: SpeedAdjustments\n\n\toverride initialise() {\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\t/**\n\t * Get the base recast time of the parsed actor's GCD cooldown group, in milliseconds.\n\t * The value returned from this function _may_ be an estimate - check {@link GlobalCooldown.isEstimated}\n\t * to see if it is.\n\t */\n\tpublic getDuration() {\n\t\treturn this.speedAdjustments.getAdjustedDuration({duration: BASE_GCD})\n\t}\n\n\t/** Returns whether the GCD duration calculated by this module is an estimate. */\n\tpublic isEstimated() {\n\t\treturn this.speedAdjustments.isAdjustmentEstimated()\n\t}\n\n\tprivate onComplete() {\n\t\tconst estimated = this.isEstimated()\n\n\t\tthis.statistics.add(new SimpleStatistic({\n\t\t\ttitle: estimated\n\t\t\t\t? <Trans id=\"core.gcd.estimated-gcd\">Estimated GCD</Trans>\n\t\t\t\t: <Trans id=\"core.gcd.gcd\">GCD Recast</Trans>,\n\t\t\ticon: this.data.actions.ATTACK.icon,\n\t\t\tvalue: this.parser.formatDuration(this.getDuration()),\n\t\t\tinfo: estimated ? <>\n\t\t\t\t<TransMarkdown source={estimateHelp.__all}/>\n\t\t\t\t<TransMarkdown source={estimateHelp[this.parser.report.meta.source]}/>\n\t\t\t</> : undefined,\n\t\t}))\n\t}\n}\n","import {MessageDescriptor} from '@lingui/core'\nimport {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport ACTIONS from 'data/ACTIONS'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport {Timeline} from 'parser/core/modules/Timeline'\nimport React from 'react'\nimport {Button, Table} from 'semantic-ui-react'\nimport {filter} from '../filter'\nimport {dependency} from '../Injectable'\nimport CastTime from './CastTime'\nimport {Data} from './Data'\n\ninterface SeverityTiers {\n\t[key: number]: number\n}\n\n// used for timeline viewing by giving you a nice 30s window\nconst TIMELINE_UPPER_MOD: number = 30000\n\nexport class Interrupts extends Analyser {\n\tstatic override handle: string = 'interrupts'\n\tstatic override title: MessageDescriptor = t('core.interrupts.title')`Interrupted Casts`\n\tstatic override debug: boolean = false\n\n\t@dependency private castTime!: CastTime\n\t@dependency protected data!: Data\n\t@dependency private suggestions!: Suggestions\n\t@dependency private timeline!: Timeline\n\n\tprivate currentCast?: Events['prepare']\n\tprivate droppedCasts: Array<Events['interrupt']> = []\n\tprivate missedTimeMS: number = 0\n\n\t/**\n\t * Implementing modules MAY override the icon to be used for the suggestion,\n\t * though, let's face it – interject is pretty much the perfect one.\n\t */\n\tprotected icon: string = ACTIONS.INTERJECT.icon\n\n\t/**\n\t * Implementing modules MAY override the severity tiers for interrupted casts\n\t */\n\tprotected severity: SeverityTiers = {\n\t\t2: SEVERITY.MEDIUM,\n\t\t5: SEVERITY.MAJOR,\n\t}\n\n\t/**\n\t * Implementing modules MAY override the default suggestion text\n\t */\n\tprotected suggestionContent: JSX.Element = <Trans id=\"core.interrupts.suggestion.content\">\n\t\tAvoid interrupting casts by either prepositioning yourself or utilizing slidecasting where possible. If you have to move, try to save an instant cast to keep your GCD rolling.\n\t</Trans>\n\n\t/**\n\t * Implementing modules MAY override this function to provide specific text if they wish for the 'why'\n\t * The default is to complain that they missed a number of casts and give them an estimate\n\t * @param missedCasts The array of missed casts\n\t * @param missedTime The approximate time wasted via interrupts\n\t * @returns JSX that conforms to your suggestion content\n\t */\n\tprotected suggestionWhy(missedCasts: Array<Events['interrupt']>, missedTime: number): JSX.Element {\n\t\treturn <Trans id=\"core.interrupts.suggestion.why\">You missed { missedCasts.length } casts (approximately { this.parser.formatDuration(missedTime) } of total casting time) due to interruption.</Trans>\n\t}\n\n\t/**\n\t * Implementing modules MAY override this function to provide alternative output if there's 0 interrupted\n\t * casts (in lieu of an empty table)\n\t */\n\tprotected noInterruptsOutput(): JSX.Element | undefined {\n\t\treturn undefined\n\t}\n\n\tpublic override initialise() {\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.type('prepare')\n\t\t\t\t.source(this.parser.actor.id),\n\t\t\tthis.onBeginCast\n\t\t)\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.type('interrupt')\n\t\t\t\t.source(this.parser.actor.id),\n\t\t\tthis.pushDropCasts\n\t\t)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onBeginCast(event: Events['prepare']) {\n\t\tthis.currentCast = event\n\t}\n\n\tprivate pushDropCasts(event: Events['interrupt']) {\n\t\tif (this.currentCast == null) { return }\n\n\t\tconst castTime = this.castTime.forAction(this.currentCast.action, this.currentCast.timestamp) ?? 0\n\n\t\tthis.missedTimeMS += Math.min(\n\t\t\tevent.timestamp - (this.currentCast?.timestamp ?? this.parser.currentEpochTimestamp),\n\t\t\tcastTime\n\t\t)\n\t\tthis.droppedCasts.push(event)\n\t\tthis.currentCast = undefined\n\t}\n\n\tprivate onComplete() {\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.icon,\n\t\t\ttiers: this.severity,\n\t\t\tvalue: this.droppedCasts.length,\n\t\t\tcontent: this.suggestionContent,\n\t\t\twhy: this.suggestionWhy(this.droppedCasts, this.missedTimeMS),\n\t\t}))\n\t}\n\n\toverride output() {\n\t\tif (this.droppedCasts.length === 0) {\n\t\t\treturn this.noInterruptsOutput()\n\t\t}\n\n\t\treturn <Table compact unstackable celled collapsing>\n\t\t\t<Table.Header>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.HeaderCell collapsing>\n\t\t\t\t\t\t<strong><Trans id=\"core.interrupts.table.time\">Time</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong><Trans id=\"core.interrupts.table.cast\">Cast</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{\n\t\t\t\t\tthis.droppedCasts.map((cast) => {\n\t\t\t\t\t\tconst action = this.data.getAction(cast.action)\n\t\t\t\t\t\treturn <Table.Row key={cast.timestamp}>\n\t\t\t\t\t\t\t<Table.Cell textAlign=\"center\">\n\t\t\t\t\t\t\t\t<span style={{marginRight: 5}}>{this.parser.formatEpochTimestamp(cast.timestamp)}</span>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tcircular\n\t\t\t\t\t\t\t\t\tcompact\n\t\t\t\t\t\t\t\t\tsize=\"mini\"\n\t\t\t\t\t\t\t\t\ticon=\"time\"\n\t\t\t\t\t\t\t\t\tonClick={() => this.timeline.show(cast.timestamp - this.parser.pull.timestamp, cast.timestamp - this.parser.pull.timestamp + TIMELINE_UPPER_MOD)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t<Table.Cell>\n\t\t\t\t\t\t\t\t<ActionLink {...action} />\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t</Table.Row>\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</Table.Body>\n\t\t</Table>\n\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {ActionLink, DataLink} from 'components/ui/DbLink'\nimport {Action, getPotencyWithMods, getBasePotency} from 'data/ACTIONS'\nimport {BonusModifier} from 'data/ACTIONS/type'\nimport {Event, Events} from 'event'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport Checklist, {Requirement, Rule} from 'parser/core/modules/Checklist'\nimport DISPLAY_ORDER from 'parser/core/modules/DISPLAY_ORDER'\nimport {Timeline} from 'parser/core/modules/Timeline'\nimport React from 'react'\nimport {Button, Table} from 'semantic-ui-react'\nimport {Analyser} from '../Analyser'\nimport {Data} from './Data'\n\nexport interface PositionalResult {\n\tpositional: Action,\n\thits: Array<Events['damage']>,\n\tmisses: Array<Events['damage']>\n}\n\nconst NO_BONUS_PERCENT = 0\n\nexport abstract class Positionals extends Analyser {\n\t@dependency protected data!: Data\n\t@dependency private checklist!: Checklist\n\t@dependency private timeline!: Timeline\n\n\tstatic override handle = 'positionals'\n\tstatic override title = t('core.positionals.title')`Positionals`\n\tstatic override displayOrder = DISPLAY_ORDER.POSITIONALS\n\n\tprivate positionalResults: PositionalResult[] = []\n\n\t/**\n\t * Jobs MUST provide a list of their positional actions\n\t *\n\t * TODO: This should just be a filter on all actions for the job for\n\t * any actions they have with positional potencies.\n\t */\n\tprotected abstract positionals: Action[]\n\n\toverride initialise() {\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>().source(this.parser.actor.id).type('damage')\n\t\t\t\t.cause(this.data.matchCauseActionId(this.positionals.map(positional => positional.id))), this.onCast)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onCast(event: Events['damage']) {\n\t\tif (event.cause.type !== 'action') {\n\t\t\treturn\n\t\t}\n\t\tconst action = this.data.getAction(event.cause.action)\n\t\tif (action == null) {\n\t\t\treturn\n\t\t}\n\t\tconst positional = this.positionals.find(positional => positional === action)\n\t\tif (positional == null) {\n\t\t\treturn\n\t\t}\n\n\t\tconst positionalResult = this.getOrCreatePositionalResult(positional)\n\n\t\t// All positionals are single target skills, so getting the 0 index\n\t\t// should be all we need to do here.\n\t\tif (this.positionalHit(positional, event.targets[0].bonusPercent)) {\n\t\t\tpositionalResult.hits.push(event)\n\t\t} else {\n\t\t\tpositionalResult.misses.push(event)\n\t\t}\n\t}\n\n\tprivate getOrCreatePositionalResult(positional: Action) {\n\t\tlet positionalResult = this.positionalResults.find(result => result.positional === positional)\n\t\tif (positionalResult == null) {\n\t\t\tpositionalResult = {\n\t\t\t\tpositional,\n\t\t\t\thits: [],\n\t\t\t\tmisses: [],\n\t\t\t}\n\t\t\tthis.positionalResults.push(positionalResult)\n\t\t}\n\t\treturn positionalResult\n\t}\n\n\t// The \"hit\" version of this function needs to check for more\n\t// things such as DRG's 5th hit combo buff and RPR's reaver buff.\n\t// Luckily, assessing misses is easy and sufficient for the purposes\n\t// of detecting positional hits.\n\tprivate missedPositionalBonusPercents(action: Action) {\n\t\tconst missed_positional_combo_bonus_percent = this.calculateBonusPercent(\n\t\t\tgetBasePotency(action),\n\t\t\tgetPotencyWithMods(action, [BonusModifier.COMBO], []))\n\t\treturn [...new Set([NO_BONUS_PERCENT, missed_positional_combo_bonus_percent])]\n\t}\n\n\t// Currently just checks that you didn't miss. Checking for hits would\n\t// otherwise be more complex.\n\tprivate positionalHit(action: Action, bonusPercent: number) {\n\t\treturn !this.missedPositionalBonusPercents(action).includes(bonusPercent)\n\t}\n\n\t// The bonusPercent is based on the final potency number.\n\tprivate calculateBonusPercent(base: number, bonus: number) {\n\t\treturn Math.trunc(100 * (1 - base / bonus))\n\t}\n\n\tprivate relativeTimestamp(timestamp: number) {\n\t\treturn timestamp - this.parser.pull.timestamp\n\t}\n\n\tprivate createTimelineButton(timestamp: number) {\n\t\tconst relative_timestamp = this.relativeTimestamp(timestamp)\n\t\treturn <Button\n\t\t\tcircular\n\t\t\tcompact\n\t\t\ticon=\"time\"\n\t\t\tsize=\"small\"\n\t\t\tonClick={() => this.timeline.show(relative_timestamp, relative_timestamp)}\n\t\t\tcontent={this.parser.formatEpochTimestamp(timestamp)}\n\t\t/>\n\t}\n\n\tprivate onComplete() {\n\t\tif (this.positionalResults.length === 0) {\n\t\t\treturn\n\t\t}\n\t\tthis.checklist.add(new Rule({\n\t\t\tname: <Trans id=\"core.positionals.checklist.title\">Hit your positionals</Trans>,\n\t\t\tdisplayOrder: DISPLAY_ORDER.POSITIONALS,\n\t\t\tdescription: <Trans id=\"core.positionals.checklist.description\">\n\t\t\t\tMelee DPS jobs have some skills that will do more damage when used from the rear or flank.\n\t\t\t\tMake sure you use those skills in the right position to do the most damage, or\n\t\t\t\tuse <DataLink action=\"TRUE_NORTH\"/> when you are out of position.\n\t\t\t</Trans>,\n\t\t\trequirements: this.positionalResults.map(this.positionalRequirement),\n\t\t}))\n\t}\n\tprivate positionalRequirement(result: PositionalResult) {\n\t\tconst actual = result.hits.length\n\t\tconst numMisses = result.misses.length\n\t\tconst expected = actual + numMisses\n\t\tlet percent = actual / expected * 100\n\t\tif (process.env.NODE_ENV === 'production') {\n\t\t\tpercent = Math.min(percent, 100)\n\t\t}\n\t\treturn new Requirement({\n\t\t\tname: <ActionLink {...result.positional}/>,\n\t\t\tpercent: percent,\n\t\t\tweight: expected,\n\t\t\toverrideDisplay: `${actual} / ${expected} (${percent.toFixed(2)}%)`,\n\t\t})\n\t}\n\n\toverride output(): React.ReactNode {\n\t\tconst totalMisses = this.positionalResults.reduce((total, current) => total + current.misses.length, 0)\n\n\t\tif (totalMisses === 0) { return }\n\n\t\treturn <Table compact unstackable celled textAlign=\"center\">\n\t\t\t<Table.Header>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong><Trans id=\"core.ui.positionals-table.header.action\">Action</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong><Trans id=\"core.ui.positionals-table.header.hits\">Hits</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong><Trans id=\"core.ui.positionals-table.header.misses\">Misses</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{\n\t\t\t\t\tthis.positionalResults.map(result => {\n\t\t\t\t\t\tconst numHits = result.hits.length\n\t\t\t\t\t\tconst numMisses = result.misses.length\n\t\t\t\t\t\tconst success = numMisses === 0\n\t\t\t\t\t\treturn <Table.Row key={result.positional.id}>\n\t\t\t\t\t\t\t<Table.Cell style={{whiteSpace: 'nowrap'}}>\n\t\t\t\t\t\t\t\t<ActionLink {...result.positional} showName={false} />\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t<Table.Cell\n\t\t\t\t\t\t\t\ttextAlign=\"center\"\n\t\t\t\t\t\t\t\tpositive={success}\n\t\t\t\t\t\t\t\tnegative={!success}\n\t\t\t\t\t\t\t>{numHits}/{numMisses + numHits}\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t<Table.Cell textAlign=\"left\">\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tresult.misses.map(miss => {\n\t\t\t\t\t\t\t\t\t\treturn this.createTimelineButton(miss.timestamp)\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t</Table.Row>\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</Table.Body>\n\t\t</Table>\n\t}\n}\n","import {Status, StatusKey} from 'data/STATUSES'\nimport {Events} from 'event'\nimport {ensureArray} from 'utilities'\nimport {Analyser} from '../Analyser'\nimport {dependency} from '../Injectable'\nimport {Actor, StatusEvent} from './Actors'\nimport {Data} from './Data'\nimport {Invulnerability} from './Invulnerability'\n\ninterface Edge {\n\tside: 'apply' | 'remove'\n\ttimestamp: number\n}\n\nexport class Statuses extends Analyser {\n\tstatic override handle = 'statuses'\n\tstatic override debug = false\n\n\t@dependency private readonly data!: Data\n\t@dependency private readonly invulnerability!: Invulnerability\n\n\t/**\n\t * Calculate the total uptime of the specified status across allspecified actors.\n\t * @param statusSpecifier Status to calculate uptime of.\n\t * @param targetSpecifier Target(s) that should be checked for the status.\n\t * @param source Source of statuses to filter by. Defaults to the parsed actor.\n\t */\n\tgetUptime(\n\t\tstatusSpecifier: StatusKey | Status,\n\t\ttargetSpecifier: Actor | Actor[],\n\t\tsource = this.parser.actor\n\t) {\n\t\t// Resolve arguments.\n\t\tconst status = typeof statusSpecifier === 'string'\n\t\t\t? this.data.statuses[statusSpecifier]\n\t\t\t: statusSpecifier\n\n\t\tconst targets = ensureArray(targetSpecifier)\n\n\t\t// Collect all the status history for the specified status/target/source combo.\n\t\tconst edges = targets.flatMap(target => this.edgesForActor(\n\t\t\ttarget,\n\t\t\ttarget.statusHistory.get(status.id)?.get(source.id) ?? []\n\t\t))\n\n\t\t// Edges are mapped from multiple potential targets; interlace by sorting by timestamp.\n\t\tedges.sort((a, b) => a.timestamp - b.timestamp)\n\n\t\t// Sum time when any of the specified targets had the status.\n\t\tconst meta = {uptime: 0, depth: 0, application: 0}\n\t\tfor (const edge of edges) {\n\t\t\tif (edge.side === 'apply') {\n\t\t\t\tif (meta.depth === 0) {\n\t\t\t\t\tmeta.application = edge.timestamp\n\t\t\t\t}\n\t\t\t\tmeta.depth ++\n\n\t\t\t} else {\n\t\t\t\tmeta.depth --\n\t\t\t\tif (meta.depth === 0) {\n\t\t\t\t\tmeta.uptime += edge.timestamp - meta.application\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.debug(`Status ${status.name} ${edge.side} at ${this.ft(edge.timestamp)}, depth=${meta.depth}`)\n\t\t}\n\n\t\treturn meta.uptime\n\t}\n\n\tprivate edgesForActor(target: Actor, events: StatusEvent[]) {\n\t\t// We can safely assume status events from an actor will alternate between apply and remove.\n\t\tconst edges: Edge[] = []\n\t\tlet apply: Events['statusApply'] | undefined\n\t\tlet refresh: Events['statusApply'] | undefined\n\n\t\tfor (const event of events) {\n\t\t\t// Track the initial application and refreshes.\n\t\t\tif (event.type === 'statusApply') {\n\t\t\t\tapply ??= event\n\t\t\t\trefresh = event\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif (apply == null) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Window has been closed, merge any edges in.\n\t\t\tedges.push(...this.splitRangeForInvulns(\n\t\t\t\ttarget,\n\t\t\t\tapply.timestamp,\n\t\t\t\tevent.timestamp\n\t\t\t))\n\t\t\tapply = undefined\n\t\t}\n\n\t\t// If we've got a dangling apply, build edges for it.\n\t\tif (apply != null) {\n\t\t\t// Try to find a reasonable remove time for the status, if it has a duration.  Cap to the end of the fight.\n\t\t\tconst statusDuration = this.data.getStatus(apply.status)?.duration\n\t\t\tconst remove = statusDuration == null\n\t\t\t\t? this.parser.currentEpochTimestamp\n\t\t\t\t: Math.min((refresh ?? apply).timestamp + statusDuration, this.parser.currentEpochTimestamp)\n\n\t\t\tedges.push(...this.splitRangeForInvulns(\n\t\t\t\ttarget,\n\t\t\t\tapply.timestamp,\n\t\t\t\tremove,\n\t\t\t))\n\t\t}\n\n\t\treturn edges\n\t}\n\n\tprivate splitRangeForInvulns(target: Actor, apply: number, remove: number): Edge[] {\n\t\tlet range = {apply, remove}\n\t\tconst finalRanges = [range]\n\n\t\t// Get the invuln windows that occured during this range\n\t\tconst invulns = this.invulnerability.getWindows({\n\t\t\tstart: apply,\n\t\t\tend: remove,\n\t\t\tactorFilter: actor => actor.kind === target.kind,\n\t\t\ttypes: ['invulnerable'],\n\t\t})\n\n\t\tfor (const invuln of invulns) {\n\t\t\t// Invuln clipped start of range.\n\t\t\tif (invuln.start < range.apply && invuln.end >= range.apply) {\n\t\t\t\tthis.debug(`Start clip, [${this.ft(range.apply)},${this.ft(range.remove)}] -> [${this.ft(invuln.end)},${this.ft(range.remove)}]`)\n\n\t\t\t\trange.apply = invuln.end\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Invuln clipped end of range.\n\t\t\tif (invuln.start <= range.remove && invuln.end > range.remove) {\n\t\t\t\tthis.debug(`End clip, [${this.ft(range.apply)},${this.ft(range.remove)}] -> [${this.ft(range.apply)},${this.ft(invuln.start)}]`)\n\n\t\t\t\trange.remove = invuln.start\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Everything else should be a range split, sanity check.\n\t\t\tif (invuln.start < range.apply || invuln.end > range.remove) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tthis.debug(`Split [${this.ft(range.apply)},${this.ft(range.remove)}] -> [${this.ft(range.apply)},${this.ft(invuln.start)}], [${this.ft(invuln.end)},${this.ft(range.remove)}]`)\n\n\t\t\t// Split the range into two around the invuln.\n\t\t\tconst previousRange = range\n\t\t\trange = {...range}\n\t\t\tfinalRanges.push(range)\n\n\t\t\tpreviousRange.remove = invuln.start\n\t\t\trange.apply = invuln.end\n\t\t}\n\n\t\t// Map the ranges into edges.\n\t\treturn finalRanges.flatMap(range => [\n\t\t\t{side: 'apply', timestamp: range.apply},\n\t\t\t{side: 'remove', timestamp: range.remove},\n\t\t] as const)\n\t}\n\n\t// Small utility for formatting timestamps, as we do it a _lot_ in debug messages\n\tprivate ft = (timestamp: number) => this.parser.formatEpochTimestamp(timestamp, 1)\n}\n","import {t} from '@lingui/macro'\nimport {BuffWindow} from './ActionWindow/windows/BuffWindow'\n\nexport class Tincture extends BuffWindow {\n\tstatic override handle = 'tincture'\n\tstatic override title = t('core.tincture.title')`Tinctures`\n\n\tbuffStatus = this.data.statuses.MEDICATED\n\n\t// No initialise since only the table display is desired without\n\t// any evaluation as to expected actions.\n}\n","import ACTIONS from 'data/ACTIONS'\nimport STATUSES from 'data/STATUSES'\nimport {Events} from 'event'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport {AoEUsages} from 'parser/core/modules/AoEUsages'\n//const GAIN_AT_3 = new Set([ACTIONS.FUGA.id, ACTIONS.OKA.id, ACTIONS.MANGETSU.id, ACTIONS.HISSATSU_KYUTEN.id])\n//const GAIN_AT_2 = new Set([ACTIONS.HISSATSU_GUREN.id, ACTIONS.TENKA_GOKEN.id, ACTIONS.KAESHI_GOKEN.id])\n\nconst AOE_FINISHERS = [\n\tACTIONS.MANGETSU.id,\n\tACTIONS.OKA.id,\n]\n\nexport class AoeChecker extends AoEUsages {\n\t@dependency private actors!: Actors\n\n\tsuggestionIcon = ACTIONS.FUKO.icon\n\n\ttrackedActions = [\n\t\t{\n\t\t\taoeAction: ACTIONS.HISSATSU_GUREN,\n\t\t\tstActions: [ACTIONS.HISSATSU_SENEI],\n\t\t\tminTargets: 2,\n\t\t},\n\n\t\t{\n\t\t\taoeAction: ACTIONS.HISSATSU_KYUTEN,\n\t\t\tstActions: [ACTIONS.HISSATSU_SHINTEN],\n\t\t\tminTargets: 3,\n\t\t},\n\n\t\t{\n\t\t\taoeAction: ACTIONS.TENKA_GOKEN,\n\t\t\tstActions: [ACTIONS.MIDARE_SETSUGEKKA],\n\t\t\tminTargets: 2,\n\t\t},\n\n\t\t{\n\t\t\taoeAction: ACTIONS.KAESHI_GOKEN,\n\t\t\tstActions: [ACTIONS.KAESHI_SETSUGEKKA],\n\t\t\tminTargets: 2,\n\t\t},\n\n\t\t{\n\t\t\taoeAction: ACTIONS.FUKO,\n\t\t\tstActions: [ACTIONS.HAKAZE],\n\t\t\tminTargets: 3,\n\n\t\t},\n\n\t\t{\n\t\t\taoeAction: ACTIONS.OKA,\n\t\t\tstActions: [ACTIONS.KASHA],\n\t\t\tminTargets: 3,\n\t\t},\n\n\t\t{\n\t\t\taoeAction: ACTIONS.MANGETSU,\n\t\t\tstActions: [ACTIONS.GEKKO],\n\t\t\tminTargets: 3,\n\t\t},\n\t]\n\n\tprotected override adjustMinTargets(event: Events['damage'], minTargets: number): number {\n\t\tif (event.cause.type !== 'action') {\n\t\t\treturn minTargets\n\t\t}\n\n\t\tif (AOE_FINISHERS.includes(event.cause.action) && !(this.actors.current.hasStatus(STATUSES.MEIKYO_SHISUI.id))) {\n\t\t\treturn 1\n\t\t}\n\n\t\treturn minTargets\n\t}\n}\n\n","import {Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Status} from 'data/STATUSES'\nimport {Analyser} from 'parser/core/Analyser'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport Checklist, {Rule, Requirement} from 'parser/core/modules/Checklist'\nimport {Data} from 'parser/core/modules/Data'\nimport {Invulnerability} from 'parser/core/modules/Invulnerability'\nimport {Statuses} from 'parser/core/modules/Statuses'\nimport React from 'react'\nimport DISPLAY_ORDER from './DISPLAY_ORDER'\n\nexport class Buffs extends Analyser {\n\tstatic override handle = 'Buffs'\n\t@dependency private actors!: Actors\n\t@dependency private checklist!: Checklist\n\t@dependency private statuses!: Statuses\n\t@dependency private invulnerability!: Invulnerability\n\t@dependency private data!: Data\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tonComplete() {\n\t\tthis.checklist.add(new Rule({\n\t\t\tname: <Trans id=\"sam.buffs.checklist.name\"> Keep {this.data.statuses.FUKA.name} and {this.data.statuses.FUGETSU.name} up </Trans>,\n\t\t\tdisplayOrder: DISPLAY_ORDER.BUFFS,\n\t\t\tdescription: <Trans id= \"sam.buffs.description\"> {this.data.statuses.FUGETSU.name} and {this.data.statuses.FUKA.name} increases your damage and speed by 13%. Both buffs are key part of Samurai's damage.</Trans>,\n\t\t\ttarget: 95,\n\t\t\trequirements: [\n\t\t\t\tnew Requirement({\n\t\t\t\t\tname: <Trans id = \"sam.buffs.checklist.requirement.fugetsu.name\"> <DataLink status=\"FUGETSU\"/> uptime </Trans>,\n\t\t\t\t\tpercent: () => this.getUptimePercent(this.data.statuses.FUGETSU),\n\t\t\t\t}),\n\n\t\t\t\tnew Requirement({\n\t\t\t\t\tname: <Trans id= \"sam.buffs.checklist.requirement.fuka.name\"> <DataLink status=\"FUKA\"/> uptime </Trans>,\n\t\t\t\t\tpercent: () => this.getUptimePercent(this.data.statuses.FUKA),\n\t\t\t\t}),\n\t\t\t],\n\t\t}))\n\t}\n\n\tgetUptimePercent(Status: Status) {\n\t\tconst statusUptime = this.statuses.getUptime(Status, this.actors.current)\n\t\tconst fightUptime = this.parser.currentDuration - this.invulnerability.getDuration({types: ['invulnerable']})\n\t\treturn (statusUptime / fightUptime) * 100\n\t}\n}\n","export default {\n\tBUFFS: 1,\n\tHIGANBANA: 2,\n\tCOOLDOWNS: 3,\n\tOGI: 4,\n\tSHOHA: 5,\n\tMEIKYO: 6,\n\tSEN: 7,\n\tKENKI: 8,\n\tTINCTURES: 9,\n}\n","import ACTIONS from 'data/ACTIONS'\nimport {ActionCombo} from 'data/ACTIONS/type'\nimport STATUSES from 'data/STATUSES'\nimport {Events} from 'event'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport {Combos as CoreCombos} from 'parser/core/modules/Combos'\n\nexport class Combos extends CoreCombos {\n\toverride suggestionIcon = ACTIONS.HAKAZE.icon\n\n\t@dependency private actors!: Actors\n\n\toverride checkCombo(combo: ActionCombo, event: Events['damage']) {\n\t\t// If they've got Meikyo Shisui up, all combos are correct, and nothing combos together\n\t\tif (this.actors.current.hasStatus(STATUSES.MEIKYO_SHISUI.id) && event.cause.type === 'action' && event.cause.action !== ACTIONS.HAKAZE.id) {\n\t\t\tthis.fabricateComboEvent(event)\n\t\t\treturn false\n\t\t}\n\n\t\treturn super.checkCombo(combo, event)\n\t}\n}\n","import {Defensives as CoreDefensives} from 'parser/core/modules/Defensives'\n\nexport class Defensives extends CoreDefensives {\n\tprotected override trackedDefensives = [\n\t\tthis.data.actions.THIRD_EYE,\n\t]\n}\n","import {Event} from 'event'\nimport {filter} from 'parser/core/filter'\nimport CastTime from 'parser/core/modules/CastTime'\n\nexport class Fuka extends CastTime {\n\tprivate fukaIndex: number | null = null\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tconst fukaFilter = filter<Event>()\n\t\t\t.target(this.parser.actor.id)\n\t\t\t.status(this.data.statuses.FUKA.id)\n\n\t\tthis.addEventHook(fukaFilter.type('statusApply'), this.onApplyFuka)\n\t\tthis.addEventHook(fukaFilter.type('statusRemove'), this.onRemoveFuka)\n\t}\n\n\tprivate onApplyFuka(): void {\n\t\t// If this is a reapply for a currently open Fuka window, do not reapply\n\t\tif (this.fukaIndex == null) {\n\t\t\tconst fuka = this.data.statuses.FUKA\n\t\t\tthis.fukaIndex = this.setPercentageAdjustment('all', fuka.speedModifier, 'both')\n\t\t}\n\t}\n\n\tprivate onRemoveFuka(): void {\n\t\tthis.reset(this.fukaIndex)\n\t\tthis.fukaIndex = null\n\t}\n}\n","import {Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {dependency} from 'parser/core/Injectable'\nimport Checklist, {Requirement, Rule} from 'parser/core/modules/Checklist'\nimport {DoTs} from 'parser/core/modules/DoTs'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\nimport DISPLAY_ORDER from './DISPLAY_ORDER'\n\nconst SUGGESTION_TIERS = {\n\tCLIPPING: {\n\t\t1000: SEVERITY.MINOR,\n\t\t30000: SEVERITY.MEDIUM,\n\t\t60000: SEVERITY.MAJOR,\n\t},\n}\n\nexport class Higanbana extends DoTs {\n\tstatic override handle = 'Higanbana'\n\n\t@dependency private checklist!: Checklist\n\t@dependency private suggestions!: Suggestions\n\n\tprotected override trackedStatuses = [\n\t\tthis.data.statuses.HIGANBANA.id,\n\t]\n\n\tprotected override addChecklistRules() {\n\t\tthis.checklist.add(new Rule({\n\t\t\tname: <Trans id=\"sam.higanbana.checklist.name\">Keep Higanbana up</Trans>,\n\t\t\tdisplayOrder: DISPLAY_ORDER.HIGANBANA,\n\t\t\tdescription: <Trans id=\"sam.higanbana.checklist.description\">\n\t\t\t\tAs a Samurai, <DataLink action = \"HIGANBANA\"/> is a significant portion of your sustained damage, and is required to kept up for as much as possible, for the best damage output.\n\t\t\t</Trans>,\n\t\t\trequirements: [\n\t\t\t\tnew Requirement({\n\t\t\t\t\tname: <Trans id=\"sam.Higanbana.checklist.requirement.name\"><DataLink action=\"HIGANBANA\"/> uptime</Trans>,\n\t\t\t\t\tpercent: () => this.getUptimePercent(this.data.statuses.HIGANBANA.id),\n\t\t\t\t}),\n\t\t\t],\n\t\t\ttarget: 90,\n\t\t}))\n\t}\n\n\tprotected override addClippingSuggestions() {\n\t\tconst HiganbanaClipPerMinute = this.getClippingAmount(this.data.statuses.HIGANBANA.id)\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.HIGANBANA.icon,\n\t\t\tcontent: <Trans id=\"sam.higanbana.suggestion.content\">\n\t\t\t\tAvoid refreshing <DataLink action=\"HIGANBANA\"/> significantly before its expiration. Unnecessary refreshes risk overwriting buff snapshots.\n\t\t\t</Trans>,\n\t\t\ttiers: SUGGESTION_TIERS.CLIPPING,\n\t\t\tvalue: HiganbanaClipPerMinute,\n\t\t\twhy: <Trans id=\"sam.higanbana.suggestion.why\">\n\t\t\t\tAn average of {this.parser.formatDuration(HiganbanaClipPerMinute, 1)} seconds of <DataLink status=\"HIGANBANA\" /> clipped per minute due to early refreshes.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n}\n","import {Trans} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport ACTIONS from 'data/ACTIONS'\nimport {Interrupts as CoreInterrupts} from 'parser/core/modules/Interrupts'\nimport React from 'react'\n\nexport default class Interrupts extends CoreInterrupts {\n\tsuggestionContent = <Trans id=\"sam.interrupts.suggestion.content\">\n\t\tAvoid interrupting <ActionLink {...ACTIONS.IAIJUTSU}/> casts. Despite the short cast time, moving too early can interrupt the skill causing you to have to waste time re-casting it.\n\t</Trans>\n}\n","import {Plural, Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Event} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Data} from 'parser/core/modules/Data'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\nconst SEVERITY_TIERS = {\n\t1: SEVERITY.MINOR,\n\t3: SEVERITY.MEDIUM,\n\t5: SEVERITY.MAJOR,\n}\n\nexport class Kaiten extends Analyser {\n\tstatic override handle = 'kaiten'\n\n\t@dependency private data!: Data\n\t@dependency private suggestions!: Suggestions\n\n\tprivate kaitenUp = false //Kaiten Flag, duh\n\n\t//Trackers\n\tprivate doubleKaitens = 0 //apply kaiten while under kaiten to increment this\n\tprivate badKaitens = 0 //consume kaiten on gcds deemed bad to increment this\n\tprivate missedKaitens = 0 //Miss Good gcds with kaiten to increment this\n\n\t//groups\n\tprivate TheGoodOnes = [\n\t\tthis.data.actions.OGI_NAMIKIRI.id,\n\t\tthis.data.actions.MIDARE_SETSUGEKKA.id,\n\t\tthis.data.actions.HIGANBANA.id,\n\t\t//this.data.actions.TENKA_GOKEN.id (This one is currently not 100% Kaiten)\n\t]\n\n\tprivate TheBadsOnes = [\n\t\tthis.data.actions.HAKAZE.id,\n\t\tthis.data.actions.JINPU.id,\n\t\tthis.data.actions.ENPI.id,\n\t\tthis.data.actions.SHIFU.id,\n\t\tthis.data.actions.FUKO.id,\n\t\tthis.data.actions.GEKKO.id,\n\t\tthis.data.actions.MANGETSU.id,\n\t\tthis.data.actions.KASHA.id,\n\t\tthis.data.actions.OKA.id,\n\t\tthis.data.actions.YUKIKAZE.id,\n\t]\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\t// If before 6.1, we need them hooks for kaiten.\n\t\tif (this.parser.patch.before('6.1')) {\n\t\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\n\t\t\tthis.addEventHook(\n\t\t\t\tplayerFilter\n\t\t\t\t\t.type('statusApply')\n\t\t\t\t\t.status(this.data.statuses.KAITEN.id),\n\t\t\t\tthis.onKaiten\n\t\t\t)\n\n\t\t\tthis.addEventHook(\n\t\t\t\tplayerFilter\n\t\t\t\t\t.type('statusRemove')\n\t\t\t\t\t.status(this.data.statuses.KAITEN.id),\n\t\t\t\tthis.onKaitenRemove\n\t\t\t)\n\n\t\t\tthis.addEventHook(\n\t\t\t\tplayerFilter\n\t\t\t\t\t.type('action')\n\t\t\t\t\t.action(oneOf(this.TheBadsOnes)),\n\t\t\t\tthis.onBadCast\n\t\t\t)\n\n\t\t\tthis.addEventHook(\n\t\t\t\tplayerFilter\n\t\t\t\t\t.type('action')\n\t\t\t\t\t.action(oneOf(this.TheGoodOnes)),\n\t\t\t\tthis.onGoodCast\n\t\t\t)\n\n\t\t\tthis.addEventHook('complete', this.onComplete)\n\n\t\t}\n\t}\n\n\tprivate onKaiten() {\n\t\tif (this.kaitenUp === true) {\n\t\t\tthis.doubleKaitens++\n\t\t}\n\t\tthis.kaitenUp = true\n\t}\n\n\tprivate onKaitenRemove() {\n\t\tthis.kaitenUp = false\n\t}\n\n\tprivate onBadCast() {\n\t\tif (this.kaitenUp === true) {\n\t\t\tthis.badKaitens++\n\t\t}\n\t}\n\n\tprivate onGoodCast() {\n\t\tif (this.kaitenUp === false) {\n\t\t\tthis.missedKaitens++\n\t\t}\n\t}\n\n\tprivate onComplete() {\n\t\t// No suggestions if after patch 6.1\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.HISSATSU_KAITEN.icon,\n\t\t\tcontent: <Trans id = \"sam.kaiten.suggestion.badkaiten.content\">\n\t\t\t\tAvoid using <DataLink action=\"HISSATSU_KAITEN\"/> on any GCDs besides <DataLink action =\"IAIJUTSU\"/> moves and <DataLink action = \"OGI_NAMIKIRI\"/>. These actions are worth it because of the potency gained per kenki spent.\n\t\t\t</Trans>,\n\t\t\ttiers: SEVERITY_TIERS,\n\t\t\twhy: <Trans id =\"sam.suggestion.badkaiten.why\">\n\t\t\t\tYou used Kaiten  <Plural value={this.badKaitens} one=\"# time\" other=\"# times\"/> on non-optimal GCDs.\n\t\t\t</Trans>,\n\t\t\tvalue: this.badKaitens,\n\t\t}))\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.HISSATSU_KAITEN.icon,\n\t\t\tcontent: <Trans id = \"sam.kaiten.suggestion.missedkaiten.content\">\n\t\t\t\tAlways use <DataLink action = \"HISSATSU_KAITEN\"/> on <DataLink action = \"MIDARE_SETSUGEKKA\"/>,<DataLink action = \"HIGANBANA\"/> and <DataLink action=\"OGI_NAMIKIRI\"/>. The gain on these actions from kaiten is too great to miss.\n\t\t\t</Trans>,\n\t\t\ttiers: SEVERITY_TIERS,\n\t\t\twhy: <Trans id =\"sam.suggestion.missedkaiten.why\">\n\t\t\t\tYou forgot to use Kaiten  <Plural value={this.missedKaitens} one=\"# time\" other=\"# times\"/> on optimal GCDs.\n\t\t\t</Trans>,\n\t\t\tvalue: this.missedKaitens,\n\t\t}))\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.HISSATSU_KAITEN.icon,\n\t\t\tcontent: <Trans id = \"sam.kaiten.suggestion.doublekaiten.content\">\n\t\t\t\tAvoid using <DataLink action = \"HISSATSU_KAITEN\"/> when already under the effect of it.\n\t\t\t</Trans>,\n\t\t\ttiers: SEVERITY_TIERS,\n\t\t\twhy: <Trans id =\"sam.suggestion.doublekaiten.why\">\n\t\t\t\tYou used Kaiten  <Plural value={this.doubleKaitens} one=\"# time\" other=\"# times\"/> when you already had it up.\n\t\t\t</Trans>,\n\t\t\tvalue: this.doubleKaitens,\n\t\t}))\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport Color from 'color'\nimport {JOBS} from 'data/JOBS'\nimport {Event, Events} from 'event'\nimport {EventHook} from 'parser/core/Dispatcher'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {CounterGauge, Gauge as CoreGauge} from 'parser/core/modules/Gauge'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\nimport DISPLAY_ORDER from '../DISPLAY_ORDER'\nimport kenkiIcon from './kenki.png'\n\ntype GaugeModifier = Partial<Record<Event['type'], number>>\n\nconst SUGGESTION_TIERS = {\n\t5: SEVERITY.MINOR,\n\t20: SEVERITY.MEDIUM,\n\t35: SEVERITY.MAJOR,\n}\n\nconst THIRD_EYE_GAIN = 10\nconst KENKI_PER_MEDITATE_TICK = 10\nconst MEDITATE_TICK_FREQUENCY = 3000\nconst MAX_MEDITATE_TICKS = 5\n\nconst FADE = 0.25\nconst KENKI_COLOR = Color(JOBS.SAMURAI.colour).fade(FADE)\n\nexport class Kenki extends CoreGauge {\n\tstatic override title = t('sam.gauge.title')`Kenki Gauge`\n\tstatic override displayOrder = DISPLAY_ORDER.KENKI\n\t@dependency private suggestions!: Suggestions\n\n\tprivate kenkiGauge = this.add(new CounterGauge({\n\t\tgraph: {\n\t\t\tlabel: <Trans id=\"sam.gauge.resource.kenkiLabel\">Kenki</Trans>,\n\t\t\tcolor: KENKI_COLOR,\n\t\t},\n\t}))\n\n\tprivate kenkiGaugeModifiers = new Map<number, GaugeModifier>([\n\t\t// Builders\n\t\t[this.data.actions.HAKAZE.id, {action: 5}],\n\t\t[this.data.actions.JINPU.id, {combo: 5}],\n\t\t[this.data.actions.ENPI.id, {action: 10}],\n\t\t[this.data.actions.SHIFU.id, {combo: 5}],\n\t\t[this.data.actions.KASHA.id, {combo: 10}],\n\t\t[this.data.actions.GEKKO.id, {combo: 10}],\n\t\t[this.data.actions.YUKIKAZE.id, {combo: 15}],\n\n\t\t[this.data.actions.FUKO.id, {action: 10}],\n\t\t[this.data.actions.MANGETSU.id, {combo: 10}],\n\t\t[this.data.actions.OKA.id, {combo: 10}],\n\n\t\t[this.data.actions.IKISHOTEN.id, {action: 50}],\n\n\t\t// Spenders\n\t\t[this.data.actions.HISSATSU_GUREN.id, {action: -25}],\n\t\t[this.data.actions.HISSATSU_KYUTEN.id, {action: -25}],\n\t\t[this.data.actions.HISSATSU_SHINTEN.id, {action: -25}],\n\t\t[this.data.actions.HISSATSU_SENEI.id, {action: -25}],\n\t\t[this.data.actions.HISSATSU_GYOTEN.id, {action: -10}],\n\t\t[this.data.actions.HISSATSU_YATEN.id, {action: -10}],\n\t])\n\n\tprivate damageHook?: EventHook<Events['damage']>\n\n\tmeditateStart = -1\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tif (this.parser.patch.before('6.1')) {\n\t\t\tthis.kenkiGaugeModifiers.set(this.data.actions.HISSATSU_KAITEN.id, {action: -20})\n\t\t}\n\n\t\tconst kenkiActions = Array.from(this.kenkiGaugeModifiers.keys())\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\n\t\tthis.addEventHook(\n\t\t\tplayerFilter\n\t\t\t\t.type(oneOf(['action', 'combo']))\n\t\t\t\t.action(oneOf(kenkiActions)),\n\t\t\tthis.onGaugeModifier,\n\t\t)\n\t\tthis.addEventHook(playerFilter.type('statusApply').status(this.data.statuses.THIRD_EYE.id), this.onApplyEye)\n\t\tthis.addEventHook(playerFilter.type('statusRemove').status(this.data.statuses.THIRD_EYE.id), this.onRemoveEye)\n\n\t\tthis.addEventHook(playerFilter.type('statusApply').status(this.data.statuses.MEDITATE.id), this.onApplyMeditate)\n\t\tthis.addEventHook(playerFilter.type('statusRemove').status(this.data.statuses.MEDITATE.id), this.onRemoveMeditate)\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onApplyEye() {\n\t\tthis.damageHook = this.addEventHook(\n\t\t\tfilter<Event>().type('damage'),\n\t\t\tthis.eyeExam\n\t\t)\n\t}\n\n\tprivate eyeExam(event: Events['damage']) {\n\t\tconst targetedSelf = event.targets.some(({target}) => target === this.parser.actor.id)\n\t\tif (targetedSelf) {\n\t\t\tthis.kenkiGauge.modify(THIRD_EYE_GAIN)\n\t\t}\n\t}\n\n\tprivate onRemoveEye() {\n\t\tif (this.damageHook != null) {\n\t\t\tthis.removeEventHook(this.damageHook)\n\t\t}\n\t}\n\n\tprivate onGaugeModifier(event: Events['action' | 'combo']) {\n\t\tconst modifier = this.kenkiGaugeModifiers.get(event.action)\n\n\t\tif (modifier != null)\t{\n\t\t\tconst amount = modifier[event.type] ?? 0\n\t\t\tthis.kenkiGauge.modify(amount)\n\t\t}\n\t}\n\n\tonApplyMeditate(event: Events['statusApply']) {\n\t\tthis.meditateStart = event.timestamp\n\t}\n\n\tonRemoveMeditate(event: Events['statusRemove']) {\n\t\tconst diff = event.timestamp - this.meditateStart\n\t\tconst ticks = Math.min(Math.floor(diff / MEDITATE_TICK_FREQUENCY), MAX_MEDITATE_TICKS)\n\n\t\tthis.kenkiGauge.modify(ticks * KENKI_PER_MEDITATE_TICK)\n\t}\n\n\t//Method for Sen to dump kenki gain into gauge\n\tonHagakure(kenkiGain: number) {\n\t\tthis.kenkiGauge.modify(kenkiGain)\n\t}\n\n\tprivate onComplete() {\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: kenkiIcon,\n\t\t\tcontent: <Trans id=\"sam.gauge.suggestions.loss.content\">\n\t\t\t\tAvoid letting your Kenki Gauge overcap - the wasted resources may cost further uses of your spenders over the course of the fight.\n\t\t\t</Trans>,\n\t\t\twhy: <Trans id=\"sam.gauge.suggestions.loss.why\">\n\t\t\t\t{this.kenkiGauge.overCap} Kenki lost to overcapping.\n\t\t\t</Trans>,\n\t\t\ttiers: SUGGESTION_TIERS,\n\t\t\tvalue: this.kenkiGauge.overCap,\n\t\t}))\n\t}\n}\n","import {t, Trans} from '@lingui/macro'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {ActionKey} from 'data/ACTIONS'\nimport {dependency} from 'parser/core/Injectable'\nimport {AllowedGcdsOnlyEvaluator, BuffWindow, EvaluatedAction, ExpectedGcdCountEvaluator} from 'parser/core/modules/ActionWindow'\nimport {HistoryEntry} from 'parser/core/modules/ActionWindow/History'\nimport {GlobalCooldown} from 'parser/core/modules/GlobalCooldown'\nimport {SEVERITY} from 'parser/core/modules/Suggestions'\nimport React from 'react'\nimport DISPLAY_ORDER from './DISPLAY_ORDER'\n\n// Set for stuff to ignore TODO: revisit this and get it to show iaijutsu properly\n// const IGNORE_THIS = new Set([ACTIONS.MIDARE_SETSUGEKKA.id, ACTIONS.TENKA_GOKEN.id, ACTIONS.HIGANBANA.id, ACTIONS.KAESHI_SETSUGEKKA.id, ACTIONS.KAESHI_GOKEN.id, ACTIONS.KAESHI_HIGANBANA])\nconst ONLY_SHOW: ActionKey[] = [\n\t'HAKAZE',\n\t'JINPU',\n\t'SHIFU',\n\t'FUKO',\n\t'GEKKO',\n\t'MANGETSU',\n\t'KASHA',\n\t'OKA',\n\t'YUKIKAZE',\n]\n\nconst SEN_GCDS = 3\n\n// A set const for SAM speed with 0 speed and shifu up, not sure I like this idea tbh but Aza requested it.\n// GCD = 2.18\nconst SAM_BASE_GCD_SPEED_BUFFED = 2180\n\nexport class Meikyo extends BuffWindow {\n\tstatic override displayOrder = DISPLAY_ORDER.MEIKYO\n\tstatic override handle = 'Meikyo'\n\tstatic override title = t('sam.ms.title')`Meikyo Shisui Windows`\n\n\t@dependency globalCooldown!: GlobalCooldown\n\n\toverride buffStatus = this.data.statuses.MEIKYO_SHISUI\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tthis.trackOnlyActions(ONLY_SHOW.map(k => this.data.actions[k].id))\n\n\t\tconst suggestionIcon = this.data.actions.MEIKYO_SHISUI.icon\n\t\tconst suggestionWindowName = <ActionLink action=\"MEIKYO_SHISUI\" showIcon={false}/>\n\t\tthis.addEvaluator(\n\t\t\tnew ExpectedGcdCountEvaluator({\n\t\t\t\texpectedGcds: SEN_GCDS,\n\t\t\t\tglobalCooldown: this.globalCooldown,\n\t\t\t\thasStacks: true,\n\t\t\t\tsuggestionIcon,\n\t\t\t\tsuggestionContent: <Trans id=\"sam.ms.suggestions.missedgcd.content\">\n\t\t\t\t\tTry to land 3 GCDs during every <ActionLink action=\"MEIKYO_SHISUI\" /> window.\n\t\t\t\t</Trans>,\n\t\t\t\tsuggestionWindowName,\n\t\t\t\tseverityTiers: {\n\t\t\t\t\t1: SEVERITY.MEDIUM,\n\t\t\t\t\t2: SEVERITY.MAJOR,\n\t\t\t\t},\n\t\t\t\tadjustCount: this.adjustExpectedGcdCount.bind(this),\n\t\t\t}))\n\t\tthis.addEvaluator(\n\t\t\tnew AllowedGcdsOnlyEvaluator({\n\t\t\t\texpectedGcdCount: SEN_GCDS,\n\t\t\t\tallowedGcds: [\n\t\t\t\t\t// Single Target\n\t\t\t\t\tthis.data.actions.GEKKO.id,\n\t\t\t\t\tthis.data.actions.KASHA.id,\n\t\t\t\t\tthis.data.actions.YUKIKAZE.id,\n\n\t\t\t\t\t// AoE\n\t\t\t\t\tthis.data.actions.OKA.id,\n\t\t\t\t\tthis.data.actions.MANGETSU.id,\n\t\t\t\t],\n\t\t\t\tglobalCooldown: this.globalCooldown,\n\t\t\t\tsuggestionIcon,\n\t\t\t\tsuggestionContent: <Trans id=\"sam.ms.suggestions.badgcd.content\">\n\t\t\t\t\tGCDs used during <ActionLink action=\"MEIKYO_SHISUI\"/> should be limited to sen building skills.\n\t\t\t\t</Trans>,\n\t\t\t\tsuggestionWindowName,\n\t\t\t\tseverityTiers: {\n\t\t\t\t\t1: SEVERITY.MAJOR,\n\t\t\t\t},\n\t\t\t\tadjustCount: this.adjustExpectedGcdCount.bind(this),\n\t\t\t}))\n\t}\n\n\tprivate adjustExpectedGcdCount(window: HistoryEntry<EvaluatedAction[]>) {\n\t\tif (this.isRushedEndOfPullWindow(window)) {\n\t\t\tconst defaultEoFValue = Math.ceil(((window.end ?? window.start) - window.start) / this.globalCooldown.getDuration())\n\n\t\t\t// This is using floor instead of ceiling to grant some forgiveness to first weave slot casts at the cost of 2nd weaves might be too forgiven\n\t\t\tconst fightTimeRemaining = (this.parser.pull.timestamp + this.parser.pull.duration) - window.start\n\t\t\tconst possibleGCDs = Math.floor(fightTimeRemaining / SAM_BASE_GCD_SPEED_BUFFED)\n\n\t\t\t// No Samurai, you can not slash so fast you bend space-time and get 2 GCDs for the price of 1\n\t\t\tif (possibleGCDs < SEN_GCDS) {\n\t\t\t\treturn possibleGCDs - defaultEoFValue\n\t\t\t}\n\t\t}\n\n\t\treturn 0\n\t}\n}\n","import {CooldownDowntime} from 'parser/core/modules/CooldownDowntime'\nimport DISPLAY_ORDER from './DISPLAY_ORDER'\n\n//All Offsets based on this opener: https://cdn.discordapp.com/attachments/920171773012627516/920936501905350676/sam_ew_opener.png\n\n//2500 + 2180x where x is the GCD in minus 1 for offset\n\n// Senei/Guren is used after 5th gcd\nconst FIRSTUSEOFFSET_50KENKI = 13400\n// tsubame is at the 5th GCD mark\nconst FIRSTUSEOFFSET_TSUBAME = 13400\n//Ikishoten is actually not used off the bat, since a pot is used ogcd 1\nconst FIRSTUSEOFFSET_IKIS = 2500\n// Time that samurais have deemed ok for a OGCD to be down\nconst DEFAULT_ALLOWED_DOWNTIME = 2180\nconst MEIKYO_ALLOWED_DOWNTIME = 4360\n\nexport default class OGCDDowntime extends CooldownDowntime {\n\toverride defaultAllowedAverageDowntime = DEFAULT_ALLOWED_DOWNTIME\n\tdisplayOrder = DISPLAY_ORDER.COOLDOWNS\n\toverride trackedCds = [\n\t\t{\n\t\t\tcooldowns: [this.data.actions.MEIKYO_SHISUI],\n\t\t\tallowedAverageDowntime: MEIKYO_ALLOWED_DOWNTIME,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [\n\t\t\t\tthis.data.actions.KAESHI_SETSUGEKKA,\n\t\t\t\tthis.data.actions.KAESHI_GOKEN,\n\t\t\t\tthis.data.actions.KAESHI_HIGANBANA,\n\t\t\t],\n\t\t\tfirstUseOffset: FIRSTUSEOFFSET_TSUBAME,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [\n\t\t\t\tthis.data.actions.HISSATSU_GUREN,\n\t\t\t\tthis.data.actions.HISSATSU_SENEI,\n\t\t\t],\n\t\t\tfirstUseOffset: FIRSTUSEOFFSET_50KENKI,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.IKISHOTEN],\n\t\t\tfirstUseOffset: FIRSTUSEOFFSET_IKIS,\n\t\t},\n\t]\n}\n","import {Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Event} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport Checklist, {Requirement, Rule} from 'parser/core/modules/Checklist'\nimport {Data} from 'parser/core/modules/Data'\nimport React from 'react'\nimport DISPLAY_ORDER from './DISPLAY_ORDER'\n\nexport class Ogi extends Analyser {\n\tstatic override handle = 'ogi'\n\t@dependency private checklist!: Checklist\n\t@dependency private data!: Data\n\n\tprivate ogiReadys = 0\n\tprivate ogisDone = 0\n\n\tOgis = [\n\t\tthis.data.actions.OGI_NAMIKIRI.id,\n\t\tthis.data.actions.KAESHI_NAMIKIRI.id,\n\t]\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\n\t\tthis.addEventHook(\n\t\t\tplayerFilter\n\t\t\t\t.type('statusApply')\n\t\t\t\t.status(this.data.statuses.OGI_NAMIKIRI_READY.id),\n\t\t\tthis.onOgiReady)\n\n\t\tthis.addEventHook(\n\t\t\tplayerFilter\n\t\t\t\t.type(oneOf(['action']))\n\t\t\t\t.action(oneOf(this.Ogis)),\n\t\t\tthis.onOgi,\n\t\t)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onOgiReady() {\n\t\tthis.ogiReadys++\n\t}\n\n\tprivate onOgi()\t{\n\t\tthis.ogisDone++\n\t}\n\n\tprivate onComplete() {\n\t\tthis.checklist.add(new Rule({\n\t\t\tname: 'Use Your Ogis',\n\t\t\tdisplayOrder: DISPLAY_ORDER.OGI,\n\t\t\tdescription: <Trans id=\"sam.ogi.waste.content\">\n\t\t\t\tUsing <DataLink action = \"IKISHOTEN\"/> grants <DataLink status = \"OGI_NAMIKIRI_READY\"/> which is consumed to use <DataLink action=\"OGI_NAMIKIRI\"/> and <DataLink action=\"KAESHI_NAMIKIRI\"/>.\n\t\t\t\tUsing these skills are important for both your damage output and rotational alignment as <DataLink action=\"OGI_NAMIKIRI\"/> and <DataLink action=\"KAESHI_NAMIKIRI\"/> replace your filler GCDs.\n\t\t\t</Trans>,\n\t\t\trequirements: [\n\t\t\t\tnew Requirement({\n\t\t\t\t\tname: <Trans id=\"sam.ogi.checklist.requirement.waste.name\">\n\t\t\t\t\t\tUse as many of your Ogis as possible.\n\t\t\t\t\t</Trans>,\n\t\t\t\t\tvalue: this.ogisDone,\n\t\t\t\t\ttarget: (this.ogiReadys * 2),\n\t\t\t\t}),\n\t\t\t],\n\t\t}))\n\t}\n}\n","import {Positionals as CorePositionals} from 'parser/core/modules/Positionals'\n\nexport class Positionals extends CorePositionals {\n\tpositionals = [\n\t\tthis.data.actions.GEKKO,\n\t\tthis.data.actions.KASHA,\n\t]\n}\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {ActionLink, DataLink} from 'components/ui/DbLink'\nimport {RotationTable} from 'components/ui/RotationTable'\nimport TransMarkdown from 'components/ui/TransMarkdown'\nimport {Event, Events} from 'event'\nimport _ from 'lodash'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Data} from 'parser/core/modules/Data'\nimport Suggestions, {SEVERITY, Suggestion, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport {Timeline} from 'parser/core/modules/Timeline'\nimport React, {Fragment} from 'react'\nimport {Message, Icon} from 'semantic-ui-react'\nimport DISPLAY_ORDER from './DISPLAY_ORDER'\nimport {Kenki} from './Kenki'\n\n// defining a const message to assign later via markdown\n\nconst samWarningMessage = t('sam.sen.rotation-table.disclaimer')` This module labels a \"Standard Sen Window\" to be a window that with no Sen overwrites that ends on an Iaijutsu. Please consult The Balance Discord and this [Infograph](https://i.imgur.com/978VOqG.jpg) for more details on looping Samurai gameplay.`\n\nconst KENKI_PER_SEN = 10\n\nconst SEN_HANDLING = {\n\tNONE: {priority: 0, message: <> No errors </>},\n\tOVERWROTE_SEN: {priority: 20, message: <Trans id = \"sam.sen.sen_handling.overwrote_sen\"> Contains a Overwritten Sen. </Trans>},\n\tOVERWROTE_SENS: {priority: 25, message: <Trans id = \"sam.sen.sen_handling.overwrote_sens\"> Contains Overwritten Sens. </Trans>},\n\tHAGAKURE: {priority: 10, message: <Trans id = \"sam.sen.sen_handling.hagakure\"> Contains a Standard Filler Hagakure. </Trans>},\n\tD_HAGAKURE: {priority: 15, message: <Trans id = \"sam.sen.sen_handling.d_hagakure\"> Contains a Non-Standard use of Hagakure. </Trans>},\n\tDEATH: {priority: 30, message: <Trans id = \"sam.sen.sen_handling.death\"> Contains your death. </Trans>}, // BET YOU WISH YOU USED THIRD EYE NOW RED!\n}\n\n// God this grew outta control real fast\n\nclass SenState {\n\tstart: number\n\tend?: number\n\trotation: Array<Events['action']>\n\tisNonStandard: boolean = false // Aka Hagakure + Overwrites, used to filter later.\n\tisDone: boolean = false // I SWEAR TO GOD IF THIS JANK THING WORKS, I'M LEAVING IT\n\tisDeath: boolean = false // DIE! DIE! DIE! -Reaper\n\tisHaga: boolean = false // is it a haga or no?\n\tisOverwrite: boolean = false // is it a overwrite or no?\n\n\t// Sen State trackers, do I really need to explain?\n\tcurrentSetsu: number = 0\n\tcurrentGetsu: number = 0\n\tcurrentKa: number = 0\n\n\toverwriteSetsus: number = 0\n\toverwriteGetsus: number = 0\n\toverwriteKas: number = 0\n\n\tkenkiGained: number = 0 // Kenki # * 10\n\n\t_senCode: {priority: number, message: JSX.Element} = SEN_HANDLING.NONE\n\n\tpublic set senCode(code) {\n\t\tif (code.priority > this._senCode.priority) {\n\t\t\tthis._senCode = code\n\t\t}\n\t}\n\n\tpublic get senCode() {\n\t\treturn this._senCode\n\t}\n\n\t// This includes waste\n\tpublic get totalSenGenerated() {\n\t\treturn (this.overwriteSetsus + this.overwriteGetsus + this.overwriteKas) + (this.currentSetsu + this.currentGetsu + this.currentKa)\n\t}\n\n\tpublic get wastedSens() {\n\t\treturn (this.overwriteSetsus + this.overwriteGetsus + this.overwriteKas)\n\t}\n\n\tpublic get currentSens() {\n\t\treturn (this.currentSetsu + this.currentGetsu + this.currentKa)\n\t}\n\n\tconstructor(start: number) {\n\t\tthis.start = start\n\t\tthis.rotation = []\n\t}\n}\n\nexport class Sen extends Analyser {\n\tstatic override displayOrder = DISPLAY_ORDER.SEN\n\tstatic override handle = 'sen'\n\tstatic override title = t('sam.sen.title')`Non-Standard Sen Windows`\n\n\t@dependency private data!: Data\n\t@dependency private suggestions!: Suggestions\n\t@dependency private kenki!: Kenki\n\t@dependency private timeline!: Timeline\n\n\tprivate wasted = 0\n\tprivate nonStandardCount = 0\n\tprivate hagakureCount = 0\n\n\tprivate senStateWindows: SenState[] = []\n\n\tprivate get lastSenState(): SenState | undefined {\n\t\treturn _.last(this.senStateWindows)\n\t}\n\n\tSEN_ACTIONS = [\n\t\tthis.data.actions.YUKIKAZE.id,\n\t\tthis.data.actions.GEKKO.id,\n\t\tthis.data.actions.MANGETSU.id,\n\t\tthis.data.actions.KASHA.id,\n\t\tthis.data.actions.OKA.id,\n\t]\n\n\t// Setsu = Yuki, Getsu = Gekko Man, Ka = Kasha Oka\n\n\tSEN_REMOVERS = [\n\t\tthis.data.actions.HIGANBANA.id,\n\t\tthis.data.actions.TENKA_GOKEN.id,\n\t\tthis.data.actions.MIDARE_SETSUGEKKA.id,\n\t\tthis.data.actions.HAGAKURE.id,\n\t]\n\n\tTHINGS_WE_WANT_IN_THE_TABLE = [\n\t\tthis.data.actions.HAKAZE.id,\n\t\tthis.data.actions.JINPU.id,\n\t\tthis.data.actions.SHIFU.id,\n\t\tthis.data.actions.FUKO.id,\n\n\t\tthis.data.actions.GEKKO.id,\n\t\tthis.data.actions.KASHA.id,\n\t\tthis.data.actions.YUKIKAZE.id,\n\t\tthis.data.actions.MANGETSU.id,\n\t\tthis.data.actions.OKA.id,\n\n\t\tthis.data.actions.OGI_NAMIKIRI.id,\n\t\tthis.data.actions.KAESHI_NAMIKIRI.id,\n\n\t\t// Sen Spenders\n\t\tthis.data.actions.HIGANBANA.id,\n\t\tthis.data.actions.TENKA_GOKEN.id,\n\t\tthis.data.actions.MIDARE_SETSUGEKKA.id,\n\t\tthis.data.actions.HAGAKURE.id,\n\n\t\t// I'm leaving these in as they are a way to handle Filler. not the usual way, but a way\n\t\tthis.data.actions.ENPI.id,\n\t\tthis.data.actions.HISSATSU_YATEN.id,\n\t\tthis.data.actions.HISSATSU_GYOTEN.id,\n\n\t\t// OGCDS IGAF about.\n\t\tthis.data.actions.HISSATSU_KAITEN.id,\n\t\tthis.data.actions.MEIKYO_SHISUI.id,\n\t]\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\n\t\tthis.addEventHook(playerFilter.type('action').action(oneOf(this.THINGS_WE_WANT_IN_THE_TABLE)), this.checkCastAndPush)\n\t\tthis.addEventHook(playerFilter.type('combo').action(oneOf(this.SEN_ACTIONS)), this.onSenGen)\n\t\tthis.addEventHook(playerFilter.type('action').action(oneOf(this.SEN_REMOVERS)), this.remove)\n\t\tthis.addEventHook(filter<Event>().type('death').actor(this.parser.actor.id), this.onDeath)\n\n\t\t// Suggestion time~\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\t// Handles Sen Gen\n\tprivate onSenGen(event: Events['combo']): void {\n\t\tconst action = this.data.getAction(event.action)\n\n\t\tconst lastSenState = this.lastSenState\n\n\t\tif (lastSenState != null && lastSenState.end == null) { // The state already exists\n\n\t\t\tswitch (action) {\n\t\t\tcase this.data.actions.YUKIKAZE:\n\t\t\t\tlastSenState.currentSetsu++\n\n\t\t\t\tif (lastSenState.currentSetsu > 1) {\n\t\t\t\t\tlastSenState.overwriteSetsus++\n\t\t\t\t\tlastSenState.currentSetsu = 1\n\t\t\t\t\tlastSenState.isOverwrite = true\n\t\t\t\t}\n\t\t\t\tbreak\n\n\t\t\tcase this.data.actions.GEKKO:\n\t\t\tcase this.data.actions.MANGETSU:\n\t\t\t\tlastSenState.currentGetsu++\n\n\t\t\t\tif (lastSenState.currentGetsu > 1) {\n\t\t\t\t\tlastSenState.overwriteGetsus++\n\t\t\t\t\tlastSenState.currentGetsu = 1\n\t\t\t\t\tlastSenState.isOverwrite = true\n\t\t\t\t}\n\n\t\t\t\tbreak\n\n\t\t\tcase this.data.actions.KASHA:\n\t\t\tcase this.data.actions.OKA:\n\t\t\t\tlastSenState.currentKa++\n\n\t\t\t\tif (lastSenState.currentKa > 1) {\n\t\t\t\t\tlastSenState.overwriteKas++\n\t\t\t\t\tlastSenState.currentKa = 1\n\t\t\t\t\tlastSenState.isOverwrite = true\n\t\t\t\t}\n\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\n\t// Function that handles SenState check, if no senState call the maker and then push to the rotation\n\tcheckCastAndPush(event: Events['action']) : void {\n\t\t// check the sen state, if undefined/not active, make one\n\n\t\tlet lastSenState = this.lastSenState\n\n\t\tif ((lastSenState == null) || (lastSenState.isDone === true)) {\n\n\t\t\tthis.senStateMaker(event)\n\t\t}\n\n\t\tlastSenState = this.lastSenState\n\n\t\tif (lastSenState != null && lastSenState.end == null) { // The state already exists\n\n\t\t\t// Push action\n\t\t\tlastSenState.rotation.push(event)\n\t\t}\n\n\t}\n\n\t// Make a new sen state!\n\tprivate senStateMaker(event: Events['action']) : void {\n\t\tconst senState = new SenState(event.timestamp)\n\t\tthis.senStateWindows.push(senState)\n\n\t}\n\n\tprivate senCodeProcess() {\n\t\tconst lastSenState = this.lastSenState\n\n\t\tif (lastSenState != null && lastSenState.end == null) {\n\t\t\t// Drop down the totem pole\n\n\t\t\tif (lastSenState.isDeath === true && (lastSenState.totalSenGenerated > 0)) {\n\t\t\t\tlastSenState._senCode = SEN_HANDLING.DEATH\n\t\t\t\tlastSenState.isNonStandard = true\n\t\t\t\tthis.nonStandardCount++\n\t\t\t} else if (lastSenState.isOverwrite === true && lastSenState.wastedSens > 1) {\n\t\t\t\tlastSenState._senCode = SEN_HANDLING.OVERWROTE_SENS\n\t\t\t\tlastSenState.isNonStandard = true\n\t\t\t\tthis.nonStandardCount++\n\t\t\t} else if (lastSenState.isOverwrite === true) {\n\t\t\t\tlastSenState._senCode = SEN_HANDLING.OVERWROTE_SEN\n\t\t\t\tlastSenState.isNonStandard = true\n\t\t\t\tthis.nonStandardCount++\n\t\t\t} else if (lastSenState.isHaga === true && lastSenState.currentSens > 1) {\n\t\t\t\tlastSenState._senCode = SEN_HANDLING.D_HAGAKURE\n\t\t\t\tlastSenState.isNonStandard = true\n\t\t\t\tthis.nonStandardCount++\n\t\t\t\tthis.hagakureCount++\n\t\t\t} else if (lastSenState.isHaga === true) {\n\t\t\t\tlastSenState._senCode = SEN_HANDLING.HAGAKURE\n\t\t\t\tlastSenState.isNonStandard = true\n\t\t\t\tthis.nonStandardCount++\n\t\t\t\tthis.hagakureCount++\n\t\t\t}\n\t\t}\n\n\t}\n\n\t// End the state, count wastes, add it\n\tprivate remove(event: Events['action']) : void {\n\t\tconst lastSenState = this.lastSenState\n\t\tconst action = this.data.getAction(event.action)\n\n\t\tif (lastSenState != null && lastSenState.end == null && action != null) {\n\n\t\t\tif (action.id === this.data.actions.HAGAKURE.id) {\n\t\t\t\tlastSenState.kenkiGained = lastSenState.currentSens * KENKI_PER_SEN\n\t\t\t\tlastSenState.isHaga = true\n\n\t\t\t\tthis.kenki.onHagakure(lastSenState.kenkiGained)\n\t\t\t}\n\n\t\t\tthis.wasted = this.wasted + lastSenState.wastedSens\n\n\t\t\tlastSenState.isDone = true\n\t\t\tthis.senCodeProcess()\n\t\t\tlastSenState.end = event.timestamp\n\t\t}\n\t}\n\n\tprivate onDeath() {\n\t\tconst lastSenState = this.lastSenState\n\n\t\tif (lastSenState != null && lastSenState.end == null) {\n\t\t\tthis.wasted = this.wasted + lastSenState.totalSenGenerated\n\n\t\t\tlastSenState.isDone = true\n\t\t\tlastSenState.isDeath = true\n\t\t\tthis.senCodeProcess()\n\t\t\tlastSenState.end = this.parser.currentEpochTimestamp\n\t\t}\n\n\t}\n\n\tprivate onComplete() {\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.MEIKYO_SHISUI.icon,\n\t\t\tcontent: <Trans id =\"sam.sen.suggestion.content\">\n\t\t\t\tYou used <DataLink action = \"GEKKO\"/>, <DataLink action = \"KASHA\"/>, or <DataLink action = \"YUKIKAZE\"/> at a time when you already had that sen, thus wasting a combo because it did not give you sen or you died while holding sen thus wasting it as well.\n\t\t\t</Trans>,\n\t\t\ttiers: {\n\t\t\t\t1: SEVERITY.MINOR,\n\t\t\t\t2: SEVERITY.MEDIUM,\n\t\t\t\t3: SEVERITY.MAJOR,\n\t\t\t},\n\t\t\tvalue: this.wasted,\n\t\t\twhy: <Trans id = \"sam.sen.suggestion.why\">You wasted {this.wasted} sen.</Trans>,\n\t\t}))\n\t\tif (this.hagakureCount === 0) {\n\t\t\tthis.suggestions.add(new Suggestion({\n\t\t\t\ticon: this.data.actions.HAGAKURE.icon,\n\t\t\t\tcontent: <Trans id = \"sam.sen.no_hagakure.message\"> <ActionLink {...this.data.actions.HAGAKURE}/> is a powerful tool that should be used to help keep your rotation looping smoothly. Use it to handle your filler phase of your rotation. </Trans>,\n\t\t\t\tseverity: SEVERITY.MAJOR,\n\t\t\t\twhy: <Trans id = \"sam.sen.suggestion.no_hagakure.why\"> You never cast hagakure this fight. </Trans>,\n\t\t\t}))\n\t\t}\n\n\t}\n\n\toverride output() {\n\t\tif (this.nonStandardCount !== 0) {\n\t\t\treturn <Fragment>\n\t\t\t\t<Message>\n\t\t\t\t\t<Trans id=\"sam.sen.rotation-table.message\"> This table serves as a way to better see the events that lend up to a Sen window that has been deemed \"Non-Standard\" as explained below. Dying, overwriting a sen, or using hagakure will cause a window to be flagged as Non-Standard.\n\t\t\t\t\t</Trans>\n\t\t\t\t</Message>\n\n\t\t\t\t<Message warning icon>\n\t\t\t\t\t<Icon name =\"warning sign\"/>\n\t\t\t\t\t<Message.Content>\n\t\t\t\t\t\t<TransMarkdown source ={samWarningMessage}/>\n\t\t\t\t\t</Message.Content>\n\t\t\t\t</Message>\n\t\t\t\t<RotationTable\n\t\t\t\t\ttargets={[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\theader: <ActionLink showName={false} {...this.data.actions.YUKIKAZE}/>,\n\t\t\t\t\t\t\taccessor: 'setsu',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\theader: <ActionLink showName={false} {...this.data.actions.GEKKO}/>,\n\t\t\t\t\t\t\taccessor: 'getsu',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\theader: <ActionLink showName={false} {...this.data.actions.KASHA}/>,\n\t\t\t\t\t\t\taccessor: 'ka',\n\t\t\t\t\t\t},\n\t\t\t\t\t]}\n\t\t\t\t\tnotes={[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\theader: <Trans id = \"sam.sen.sen_handling.why\"> Why Non-Standard </Trans>,\n\t\t\t\t\t\t\taccessor: 'reason',\n\t\t\t\t\t\t},\n\t\t\t\t\t]}\n\t\t\t\t\tdata={this.senStateWindows\n\t\t\t\t\t\t.filter(window => window.isNonStandard)\n\t\t\t\t\t\t.map(window => {\n\t\t\t\t\t\t\treturn ({\n\t\t\t\t\t\t\t\tstart: window.start - this.parser.pull.timestamp,\n\n\t\t\t\t\t\t\t\tend: window.end != null ?\n\t\t\t\t\t\t\t\t\twindow.end - this.parser.pull.timestamp\n\t\t\t\t\t\t\t\t\t: window.start - this.parser.pull.timestamp,\n\n\t\t\t\t\t\t\t\ttargetsData: {\n\t\t\t\t\t\t\t\t\tsetsu: {\n\t\t\t\t\t\t\t\t\t\tactual: (window.currentSetsu + window.overwriteSetsus),\n\t\t\t\t\t\t\t\t\t// expected: window.setsu,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tgetsu: {\n\t\t\t\t\t\t\t\t\t\tactual: (window.currentGetsu + window.overwriteGetsus),\n\t\t\t\t\t\t\t\t\t// expected: window.getsu,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tka: {\n\t\t\t\t\t\t\t\t\t\tactual: (window.currentKa + window.overwriteKas),\n\t\t\t\t\t\t\t\t\t// expected: window.ka,\n\t\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tnotesMap: {\n\t\t\t\t\t\t\t\t\treason: <>{window.senCode.message}</>,\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\trotation: window.rotation,\n\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\n\t\t\t\t\tonGoto={this.timeline.show}\n\t\t\t\t/>\n\t\t\t</Fragment>\n\t\t}\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport Color from 'color'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Event, Events} from 'event'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport Checklist, {Requirement, Rule} from 'parser/core/modules/Checklist'\nimport {CounterGauge, Gauge as CoreGauge} from 'parser/core/modules/Gauge'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\nimport DISPLAY_ORDER from './DISPLAY_ORDER'\n\ntype GaugeModifier = Partial<Record<Event['type'], number>>\n\nconst SUGGESTION_TIERS = {\n\t1: SEVERITY.MINOR,\n\t3: SEVERITY.MEDIUM,\n\t6: SEVERITY.MAJOR, //Dear god stop, push buttons\n}\n\nconst STACKS_PER_MEDITATE_TICK = 1\nconst MEDITATE_TICK_FREQUENCY = 3000\nconst MAX_MEDITATE_STACKS = 3\n\nconst FADE = 0.75\nconst SHOHA_COLOR = Color('#cf2621').fade(FADE)\n\nexport class Shoha extends CoreGauge {\n\tstatic override title = t('sam.shoha.title')`Meditatation Stacks`\n\tstatic override handle = 'shoha'\n\tstatic override displayOrder = DISPLAY_ORDER.SHOHA\n\n\t@dependency private suggestions!: Suggestions\n\t@dependency private checklist!: Checklist\n\n\tprivate MeditateGauge = this.add(new CounterGauge({\n\t\tgraph: {\n\t\t\tlabel: <Trans id=\"sam.gauge.resource.meditationLabel\">Meditation</Trans>,\n\t\t\tcolor: SHOHA_COLOR,\n\t\t},\n\t\tmaximum: MAX_MEDITATE_STACKS,\n\t}))\n\n\tprivate MeditateGaugeModifiers = new Map<number, GaugeModifier>([\n\t\t// Builders\n\t\t[this.data.actions.HIGANBANA.id, {action: 1}],\n\t\t[this.data.actions.TENKA_GOKEN.id, {action: 1}],\n\t\t[this.data.actions.MIDARE_SETSUGEKKA.id, {action: 1}],\n\t\t[this.data.actions.OGI_NAMIKIRI.id, {action: 1}],\n\n\t\t// Spenders\n\t\t[this.data.actions.SHOHA.id, {action: -3}],\n\t\t[this.data.actions.SHOHA_II.id, {action: -3}],\n\t])\n\n\tmeditateStart = -1\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tconst meditateActions = Array.from(this.MeditateGaugeModifiers.keys())\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\n\t\tthis.addEventHook(\n\t\t\tplayerFilter\n\t\t\t\t.type(oneOf(['action']))\n\t\t\t\t.action(oneOf(meditateActions)),\n\t\t\tthis.onGaugeModifier,\n\t\t)\n\n\t\tthis.addEventHook(playerFilter.type('statusApply').status(this.data.statuses.MEDITATE.id), this.onApplyMeditate)\n\t\tthis.addEventHook(playerFilter.type('statusRemove').status(this.data.statuses.MEDITATE.id), this.onRemoveMeditate)\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onGaugeModifier(event: Events['action']) {\n\t\tconst modifier = this.MeditateGaugeModifiers.get(event.action)\n\n\t\tif (modifier != null)\t{\n\t\t\tconst amount = modifier[event.type] ?? 0\n\t\t\tthis.MeditateGauge.modify(amount)\n\n\t\t}\n\t}\n\n\tprivate onApplyMeditate(event: Events['statusApply']) {\n\t\tthis.meditateStart = event.timestamp\n\t}\n\n\tprivate onRemoveMeditate(event: Events['statusRemove']) {\n\t\tconst diff = event.timestamp - this.meditateStart\n\t\tconst ticks = Math.min(Math.floor(diff / MEDITATE_TICK_FREQUENCY), MAX_MEDITATE_STACKS)\n\n\t\tthis.MeditateGauge.modify(ticks * STACKS_PER_MEDITATE_TICK)\n\t}\n\n\tprivate onComplete() {\n\t\tconst ShohaUses = Math.floor(this.MeditateGauge.totalSpent/MAX_MEDITATE_STACKS)\n\t\tlet totalPossible = Math.floor(this.MeditateGauge.totalGenerated/MAX_MEDITATE_STACKS)\n\t\tif (ShohaUses > totalPossible) {\n\t\t\ttotalPossible = ShohaUses\n\t\t}\n\t\tthis.checklist.add(new Rule({\n\t\t\tname: 'Use Meditation Stacks',\n\t\t\tdisplayOrder: DISPLAY_ORDER.SHOHA,\n\t\t\tdescription: <Trans id=\"sam.shoha.waste.content\">\n\t\t\t\tWasted meditation generation, ending the fight with stacks fully charged, or dying with stacks charged is a\n\t\t\t\tdirect potency loss. Use <DataLink action = \"SHOHA\"/> or <DataLink action = \"SHOHA_II\"/> to avoid wasting stacks.\n\t\t\t</Trans>,\n\t\t\trequirements: [\n\t\t\t\tnew Requirement({\n\t\t\t\t\tname: <Trans id=\"sam.shoha.checklist.requirement.waste.name\">\n\t\t\t\t\t\tUse as many of your meditation stacks as possible.\n\t\t\t\t\t</Trans>,\n\t\t\t\t\tvalue: ShohaUses,\n\t\t\t\t\ttarget: totalPossible,\n\t\t\t\t}),\n\t\t\t],\n\t\t}))\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.SHOHA.icon,\n\t\t\tcontent: <Trans id=\"sam.shoha.suggestions.loss.content\">\n\t\t\t\t\tAvoid letting your Meditation Stacks overcap - the wasted resources may cost further uses of your spenders over the course of the fight.\n\t\t\t</Trans>,\n\t\t\twhy: <Trans id=\"sam.shoha.suggestions.loss.why\">\n\t\t\t\t{this.MeditateGauge.overCap} Meditation Stacks lost to overcapping.\n\t\t\t</Trans>,\n\t\t\ttiers: SUGGESTION_TIERS,\n\t\t\tvalue: this.MeditateGauge.overCap,\n\t\t}))\n\t}\n}\n","import ACTIONS from 'data/ACTIONS'\nimport {Tincture} from 'parser/core/modules/Tincture'\n\n// seems overboard, but the core module has INFUSION_STR already set\n// I'm overriding in case someone reviews and thinks that's too specific\n// for core\nexport default class SamTincture extends Tincture {\n\tbuffAction = ACTIONS.INFUSION_STR\n}\n","import {AoeChecker} from './AoeChecker'\nimport {Buffs} from './Buffs'\nimport {Combos} from './Combos'\nimport {Defensives} from './Defensives'\nimport {Fuka} from './Fuka'\nimport {Higanbana} from './Higanbana'\nimport Interrupts from './Interrupts'\nimport {Kaiten} from './Kaiten'\nimport {Kenki} from './Kenki'\nimport {Meikyo} from './Meikyo'\nimport OGCDDowntime from './OGCDDowntime'\nimport {Ogi} from './Ogi'\nimport {Positionals} from './Positionals'\nimport {Sen} from './Sen'\nimport {Shoha} from './Shoha'\nimport Tincture from './Tincture'\n\nexport default [\n\tAoeChecker,\n\tBuffs,\n\tCombos,\n\tDefensives,\n\tFuka,\n\tKaiten,\n\tKenki,\n\tHiganbana,\n\tInterrupts,\n\tMeikyo,\n\tPositionals,\n\tOGCDDowntime,\n\tOgi,\n\tSen,\n\tShoha,\n\tTincture,\n]\n","require('../../modules/es.math.trunc');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Math.trunc;\n","var $ = require('../internals/export');\n\nvar ceil = Math.ceil;\nvar floor = Math.floor;\n\n// `Math.trunc` method\n// https://tc39.es/ecma262/#sec-math.trunc\n$({ target: 'Math', stat: true }, {\n  trunc: function trunc(it) {\n    return (it > 0 ? floor : ceil)(it);\n  }\n});\n","var parent = require('../../es/math/trunc');\n\nmodule.exports = parent;\n"],"names":["module","exports","DoTs","Data","Actors","Invulnerability","Statuses","trackedStatuses","statusApplications","this","addEventHook","filter","type","source","parser","actor","id","status","oneOf","onApply","onComplete","event","data","getStatus","duration","trackedStatus","get","set","target","trackedStatusOnTarget","lastApplied","totalClipping","excludeApplication","timestamp","clip","Math","max","addChecklistRules","addClippingSuggestions","statusId","statuses","getUptime","actors","foes","pull","invulnerability","getDuration","types","fightDuration","round","Analyser","handle","dependency","estimateHelp","__all","legacyFflogs","GlobalCooldown","Statistics","SpeedAdjustments","speedAdjustments","getAdjustedDuration","BASE_GCD","isAdjustmentEstimated","estimated","isEstimated","statistics","add","SimpleStatistic","title","Trans","icon","actions","ATTACK","value","formatDuration","info","report","meta","undefined","Interrupts","CastTime","Suggestions","Timeline","currentCast","droppedCasts","missedTimeMS","ACTIONS","severity","SEVERITY","suggestionContent","missedCasts","missedTime","length","onBeginCast","pushDropCasts","castTime","forAction","action","min","currentEpochTimestamp","push","suggestions","TieredSuggestion","tiers","content","why","suggestionWhy","noInterruptsOutput","compact","unstackable","celled","collapsing","cast","getAction","textAlign","style","marginRight","formatEpochTimestamp","circular","size","onClick","timeline","show","debug","Positionals","Checklist","positionalResults","positionals","cause","matchCauseActionId","positional","onCast","positionalResult","getOrCreatePositionalResult","positionalHit","targets","bonusPercent","hits","misses","result","missed_positional_combo_bonus_percent","calculateBonusPercent","getBasePotency","getPotencyWithMods","BonusModifier","missedPositionalBonusPercents","base","bonus","relative_timestamp","relativeTimestamp","checklist","Rule","name","displayOrder","DISPLAY_ORDER","description","requirements","positionalRequirement","actual","expected","percent","Requirement","weight","overrideDisplay","toFixed","total","current","numHits","numMisses","success","whiteSpace","showName","positive","negative","miss","createTimelineButton","ft","statusSpecifier","targetSpecifier","ensureArray","edges","edgesForActor","statusHistory","a","b","uptime","depth","application","edge","side","events","apply","refresh","splitRangeForInvulns","statusDuration","remove","range","finalRanges","invulns","getWindows","start","end","actorFilter","kind","invuln","previousRange","Tincture","buffStatus","MEDICATED","BuffWindow","AOE_FINISHERS","AoeChecker","suggestionIcon","trackedActions","aoeAction","stActions","minTargets","hasStatus","STATUSES","AoEUsages","Buffs","FUKA","FUGETSU","getUptimePercent","Status","currentDuration","Combos","combo","fabricateComboEvent","CoreCombos","Defensives","trackedDefensives","THIRD_EYE","CoreDefensives","Fuka","fukaIndex","fukaFilter","onApplyFuka","onRemoveFuka","fuka","setPercentageAdjustment","speedModifier","reset","SUGGESTION_TIERS","CLIPPING","Higanbana","HIGANBANA","HiganbanaClipPerMinute","getClippingAmount","CoreInterrupts","SEVERITY_TIERS","Kaiten","kaitenUp","doubleKaitens","badKaitens","missedKaitens","TheGoodOnes","OGI_NAMIKIRI","MIDARE_SETSUGEKKA","TheBadsOnes","HAKAZE","JINPU","ENPI","SHIFU","FUKO","GEKKO","MANGETSU","KASHA","OKA","YUKIKAZE","patch","before","playerFilter","KAITEN","onKaiten","onKaitenRemove","onBadCast","onGoodCast","HISSATSU_KAITEN","KENKI_COLOR","Color","JOBS","fade","Kenki","kenkiGauge","CounterGauge","graph","label","color","kenkiGaugeModifiers","IKISHOTEN","HISSATSU_GUREN","HISSATSU_KYUTEN","HISSATSU_SHINTEN","HISSATSU_SENEI","HISSATSU_GYOTEN","HISSATSU_YATEN","damageHook","meditateStart","kenkiActions","onGaugeModifier","onApplyEye","onRemoveEye","MEDITATE","onApplyMeditate","onRemoveMeditate","eyeExam","some","modify","removeEventHook","modifier","amount","diff","ticks","floor","kenkiGain","overCap","CoreGauge","ONLY_SHOW","Meikyo","MEIKYO_SHISUI","trackOnlyActions","k","suggestionWindowName","showIcon","addEvaluator","ExpectedGcdCountEvaluator","expectedGcds","globalCooldown","hasStacks","severityTiers","adjustCount","adjustExpectedGcdCount","bind","AllowedGcdsOnlyEvaluator","expectedGcdCount","allowedGcds","window","isRushedEndOfPullWindow","defaultEoFValue","ceil","fightTimeRemaining","possibleGCDs","OGCDDowntime","defaultAllowedAverageDowntime","trackedCds","cooldowns","allowedAverageDowntime","KAESHI_SETSUGEKKA","KAESHI_GOKEN","KAESHI_HIGANBANA","firstUseOffset","CooldownDowntime","Ogi","ogiReadys","ogisDone","Ogis","KAESHI_NAMIKIRI","OGI_NAMIKIRI_READY","onOgiReady","onOgi","CorePositionals","samWarningMessage","SEN_HANDLING","NONE","priority","message","OVERWROTE_SEN","OVERWROTE_SENS","HAGAKURE","D_HAGAKURE","DEATH","SenState","rotation","isNonStandard","isDone","isDeath","isHaga","isOverwrite","currentSetsu","currentGetsu","currentKa","overwriteSetsus","overwriteGetsus","overwriteKas","kenkiGained","_senCode","code","Sen","wasted","nonStandardCount","hagakureCount","senStateWindows","SEN_ACTIONS","SEN_REMOVERS","TENKA_GOKEN","THINGS_WE_WANT_IN_THE_TABLE","checkCastAndPush","onSenGen","onDeath","lastSenState","senStateMaker","senState","totalSenGenerated","wastedSens","currentSens","kenki","onHagakure","senCodeProcess","Suggestion","Fragment","Message","warning","Icon","TransMarkdown","RotationTable","header","accessor","notes","targetsData","setsu","getsu","ka","notesMap","reason","senCode","onGoto","SHOHA_COLOR","Shoha","MeditateGauge","maximum","MeditateGaugeModifiers","SHOHA","SHOHA_II","meditateActions","ShohaUses","totalSpent","totalPossible","totalGenerated","SamTincture","buffAction","path","trunc","$","stat","it","parent"],"sourceRoot":""}