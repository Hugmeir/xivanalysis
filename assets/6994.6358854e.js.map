{"version":3,"file":"assets/6994.6358854e.js","mappings":"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","sources":["webpack://@xivanalysis/client/./src/parser/core/modules/AoEUsages.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/Defensives.tsx"],"sourcesContent":["import {t} from '@lingui/macro'\nimport {Plural, Trans} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {Action} from 'data/ACTIONS'\nimport {Cause, Event, Events} from 'event'\nimport {dependency} from 'parser/core/Injectable'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\nimport {Table} from 'semantic-ui-react'\nimport {isSuccessfulHit} from 'utilities'\nimport {Analyser} from '../Analyser'\nimport {filter, oneOf} from '../filter'\nimport {Data} from './Data'\n\nexport interface AoEAction {\n\t/**\n\t * The AoE action to check usages of.\n\t */\n\taoeAction: Action\n\t/**\n\t * The single target actions that should be used in place of the AoE\n\t * action when there are not enough targets present.\n\t */\n\tstActions: Action[]\n\t/**\n\t * The minimum number of targets the AoE action should hit per cast.\n\t */\n\tminTargets: number\n}\n\n// This is duplicated from BuffWindow until a\n// better sharing mechanism is in place.\ninterface SeverityTiers {\n\t[key: number]: number\n}\n\n/**\n * This module checks for usages of AoE skills that have single target alternatives,\n * such as BLMs Xenoglossy or NINs Hellfrog Medium, to ensure they hit the minimum\n * number of targets.  It should not be used to check skills that can hit AoE but do\n * not have alternatives, such as DRGs Dragonfire Dive or SMNs Deathflare, as it is\n * correct to use those skills on single targets.\n *\n * For the AoE combos of melee DPS and Tanks, define a trackedAction with the first\n * actions of the AoE and single target combos.  This is to provide leeway to finishing\n * AoE combos when the number of targets may drop below the minimum during the combo.\n */\nexport abstract class AoEUsages extends Analyser {\n\tstatic override handle = 'aoeusages'\n\tstatic override title = t('core.aoeusages.title')`Incorrect AoE Action Usage`\n\n\t@dependency private suggestions!: Suggestions\n\t@dependency protected data!: Data\n\n\t/**\n\t * Implementing modules MUST define the icon to be used for the suggestion.\n\t */\n\tabstract suggestionIcon: string\n\t/**\n\t * Implementing modules MUST define the actions that are to be monitored.\n\t */\n\tabstract trackedActions: AoEAction[]\n\n\t/**\n\t * Implementing modules MAY override the severity tiers for incorrect AoE usages.\n\t */\n\tprotected severity: SeverityTiers = {\n\t\t1: SEVERITY.MINOR,\n\t\t4: SEVERITY.MEDIUM,\n\t\t7: SEVERITY.MAJOR,\n\t}\n\n\tprotected suggestionContent: JSX.Element | string = <Trans id=\"core.aoeusages.suggestion.content\">\n\t\tAvoid using AoE actions when they would do less damage than an alternative single-target action that shares a resource cost or cooldown.\n\t\tIf the AoE skill cannot hit enough targets, the single-target action will do more total damage and should be used instead.\n\t</Trans>\n\n\tprivate badUsages = new Map<number, number>()\n\n\toverride initialise() {\n\t\tconst trackedActionFilter = filter<Cause>().type('action').action(oneOf(this.trackedActions.map(a => a.aoeAction.id)))\n\t\tthis.addEventHook(filter<Event>()\n\t\t\t.source(this.parser.actor.id)\n\t\t\t.type('damage')\n\t\t\t.cause(trackedActionFilter)\n\t\t, this.onAbility)\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\t/**\n\t * Implementing modules that have special logic where the number of minimum\n\t * targets for a skill is not constant may override this as needed.\n\t * @param event The event for which the number of minimum targets is being adjusted.\n\t * @param minTargets The default number of minimum targets for the action as defined in trackedActions.\n\t */\n\tprotected adjustMinTargets(event: Events['damage'], minTargets: number) {\n\t\treturn minTargets\n\t}\n\n\tprivate onAbility(event: Events['damage']) {\n\t\tif (event.cause.type !== 'action') {\n\t\t\treturn\n\t\t}\n\t\tconst actionId = event.cause.action\n\t\tconst tracked = this.trackedActions.find(a => event.cause.type === 'action' && a.aoeAction.id === actionId)\n\n\t\tif (tracked === undefined) { return }\n\n\t\tconst minTargets = this.adjustMinTargets(event, tracked.minTargets)\n\t\tif (isSuccessfulHit(event) && event.targets.length < minTargets) {\n\t\t\tthis.badUsages.set(actionId, (this.badUsages.get(actionId) || 0) + 1)\n\t\t}\n\t}\n\n\tprivate onComplete() {\n\t\tconst totalBadUsages = Array.from(this.badUsages.values()).reduce((acc, cur) => acc + cur, 0)\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.suggestionIcon,\n\t\t\tcontent: this.suggestionContent,\n\t\t\ttiers: this.severity,\n\t\t\tvalue: totalBadUsages,\n\t\t\twhy: <Trans id=\"core.aoeusages.suggestion.why\">\n\t\t\t\tAoE actions were used against too few targets <Plural value={totalBadUsages} one=\"# time\" other=\"# times\" />.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n\n\toverride output() {\n\t\t// if no bad usages were found, do not output anything\n\t\tif (this.badUsages.size === 0) { return }\n\n\t\t// if any bad usages were found, tell them which ones, how many times,\n\t\t// and tell them what they should have used instead\n\t\treturn <>\n\t\t\t<Table collapsing unstackable>\n\t\t\t\t<Table.Header>\n\t\t\t\t\t<Table.Row>\n\t\t\t\t\t\t<Table.HeaderCell><Trans id=\"core.aoeusages.aoe-ability\">AoE Action Used</Trans></Table.HeaderCell>\n\t\t\t\t\t\t<Table.HeaderCell><Trans id=\"core.aoeusages.st-alternative\">Single Target Alternative</Trans></Table.HeaderCell>\n\t\t\t\t\t\t<Table.HeaderCell><Trans id=\"core.aoeusages.min-targets\">Minimum Targets</Trans></Table.HeaderCell>\n\t\t\t\t\t\t<Table.HeaderCell><Trans id=\"core.aoeusages.number-bad-usages\">Incorrect Usages</Trans></Table.HeaderCell>\n\t\t\t\t\t</Table.Row>\n\t\t\t\t</Table.Header>\n\t\t\t\t<Table.Body>\n\t\t\t\t\t{this.trackedActions\n\t\t\t\t\t\t.filter(a => this.badUsages.has(a.aoeAction.id))\n\t\t\t\t\t\t.map(a => {\n\t\t\t\t\t\t\treturn <Table.Row key={a.aoeAction.id}>\n\t\t\t\t\t\t\t\t<Table.Cell><ActionLink {...a.aoeAction} /></Table.Cell>\n\t\t\t\t\t\t\t\t<Table.Cell>{a.stActions.map(s => <><ActionLink {...s} /> </>)}</Table.Cell>\n\t\t\t\t\t\t\t\t<Table.Cell>{a.minTargets}</Table.Cell>\n\t\t\t\t\t\t\t\t<Table.Cell>{this.badUsages.get(a.aoeAction.id)}</Table.Cell>\n\t\t\t\t\t\t\t</Table.Row>\n\t\t\t\t\t\t})}\n\t\t\t\t</Table.Body>\n\t\t\t</Table>\n\t\t</>\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Plural, Trans} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {Action, ActionKey} from 'data/ACTIONS'\nimport {JOBS, RoleKey} from 'data/JOBS'\nimport {Analyser} from 'parser/core/Analyser'\nimport {dependency} from 'parser/core/Injectable'\nimport {CooldownDowntime} from 'parser/core/modules/CooldownDowntime'\nimport {Data} from 'parser/core/modules/Data'\nimport React, {Fragment, ReactNode} from 'react'\nimport {Accordion, Button, Icon, Message, Table} from 'semantic-ui-react'\nimport {CooldownEndReason, CooldownHistoryEntry, Cooldowns} from './Cooldowns'\nimport DISPLAY_ORDER from './DISPLAY_ORDER'\nimport {Timeline} from './Timeline'\n\nconst DEFENSIVE_ROLE_ACTIONS: Map<RoleKey, ActionKey[]> = new Map<RoleKey, ActionKey[]>([\n\t['TANK', ['RAMPART', 'REPRISAL']],\n\t['MELEE', ['FEINT', 'BLOODBATH', 'SECOND_WIND']],\n\t['PHYSICAL_RANGED', ['SECOND_WIND']],\n\t['MAGICAL_RANGED', ['ADDLE']],\n\t['HEALER', []],\n])\n\nexport class Defensives extends Analyser {\n\tstatic override handle = 'defensives'\n\tstatic override title = t('core.defensives.title')`Defensives`\n\tstatic override displayOrder = DISPLAY_ORDER.DEFENSIVES\n\n\t@dependency protected cooldowns!:Cooldowns\n\t@dependency protected cooldownDowntime!: CooldownDowntime\n\t@dependency protected data!: Data\n\t@dependency private timeline!: Timeline\n\n\t/**\n\t * Implementing modules should provide a list of job-specific defensive actions to track\n\t */\n\tprotected trackedDefensives: Action[] = []\n\t/**\n\t * Implementing modules may override the main header message text\n\t */\n\tprotected headerContent: ReactNode = <Trans id=\"core.defensives.header.content\">\n\t\tUsing your mitigation and healing cooldowns can help you survive mistakes, or relieve some stress on the healers and let them deal more damage.<br/>\n\t\tWhile you shouldn't use them at the expense of your rotation or buff alignment, you should try to find helpful times to use them.\n\t</Trans>\n\n\toverride initialise() {\n\t\tconst roleDefensives = DEFENSIVE_ROLE_ACTIONS.get(JOBS[this.parser.actor.job].role)?.map(key => this.data.actions[key]) ?? []\n\t\troleDefensives.forEach(roleAction => {\n\t\t\tif (!this.trackedDefensives.find(action => roleAction.id === action.id)) {\n\t\t\t\tthis.trackedDefensives.push(roleAction)\n\t\t\t}\n\t\t})\n\t}\n\n\tprivate getUsageCount(defensive: Action): number {\n\t\treturn this.getUses(defensive).length\n\t}\n\n\tprivate getUses(defensive: Action): CooldownHistoryEntry[] {\n\t\treturn this.cooldowns.cooldownHistory(defensive).filter((entry) => entry.endReason !== CooldownEndReason.INTERRUPTED)\n\t}\n\n\tprivate getMaxUses(defensive: Action): number {\n\t\tconst totalAdditionalUses = this.getUses(defensive).reduce((acc, usage) => acc + this.getAdditionalUsageData(defensive, usage.start).chargesBeforeNextUse, this.getAdditionalUsageData(defensive).chargesBeforeNextUse)\n\t\treturn this.getUsageCount(defensive) + totalAdditionalUses\n\t}\n\n\toverride output() {\n\t\tif (this.trackedDefensives.length === 0) {\n\t\t\treturn\n\t\t}\n\n\t\treturn <Fragment>\n\t\t\t<Message icon>\n\t\t\t\t<Icon name=\"info\" />\n\t\t\t\t<Message.Content>\n\t\t\t\t\t{this.headerContent}\n\t\t\t\t\t<br/><br/>\n\t\t\t\t\t<Trans id=\"core.defensives.header.sub-content\">\n\t\t\t\t\t\tThe below tables will show you where you can gain additional uses of these cooldowns, without interfering with your existing ones.\n\t\t\t\t\t</Trans>\n\t\t\t\t</Message.Content>\n\t\t\t</Message>\n\t\t\t<Accordion\n\t\t\t\texclusive={false}\n\t\t\t\tstyled\n\t\t\t\tfluid\n\t\t\t\tpanels={\n\t\t\t\t\tthis.trackedDefensives.map((defensive, index) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tkey: defensive.id,\n\t\t\t\t\t\t\ttitle: {\n\t\t\t\t\t\t\t\tcontent: <><ActionLink key={index} {...defensive} /> - {this.getUsageCount(defensive)} / {this.getMaxUses(defensive)}</>,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcontent: {\n\t\t\t\t\t\t\t\tcontent: <Table compact unstackable celled>\n\t\t\t\t\t\t\t\t\t<Table.Body>\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tthis.tryGetAdditionalUseRow(defensive)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tthis.getUses(defensive).map((entry) => {\n\t\t\t\t\t\t\t\t\t\t\t\treturn this.getUsageRow(entry, defensive)\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</Table.Body>\n\t\t\t\t\t\t\t\t</Table>,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t/>\n\t\t</Fragment>\n\t}\n\n\tprivate getUsageRow(entry: CooldownHistoryEntry, defensive: Action): ReactNode {\n\t\treturn <>\n\t\t\t<Table.Row key={entry.start}>\n\t\t\t\t<Table.Cell>\n\t\t\t\t\t<Trans id=\"core.defensives.table.usage-row.text\">Used at <Button\n\t\t\t\t\t\tcircular\n\t\t\t\t\t\tcompact\n\t\t\t\t\t\tsize=\"mini\"\n\t\t\t\t\t\ticon=\"time\"onClick={() => this.timeline.show(entry.start - this.parser.pull.timestamp, entry.end - this.parser.pull.timestamp)}>\n\t\t\t\t\t</Button> {this.parser.formatEpochTimestamp(entry.start)}\n\t\t\t\t\t</Trans>\n\t\t\t\t</Table.Cell>\n\t\t\t</Table.Row>\n\t\t\t{\n\t\t\t\tthis.tryGetAdditionalUseRow(defensive, entry.start)\n\t\t\t}\n\t\t</>\n\t}\n\n\tprivate getAdditionalUsageData(defensive: Action, timestamp: number = this.parser.pull.timestamp): {chargesBeforeNextUse: number, availableTimestamp: number, useByTimestamp: number} {\n\t\tlet availableTimestamp: number, currentCharges\n\n\t\tif (timestamp === this.parser.pull.timestamp) {\n\t\t\tavailableTimestamp = this.parser.pull.timestamp\n\t\t\tcurrentCharges = defensive.charges || 1\n\t\t} else {\n\t\t\tconst chargesAvailableEvent = this.cooldowns.chargeHistory(defensive).find(charges => charges.timestamp >= timestamp && charges.current > 0)\n\t\t\tavailableTimestamp = chargesAvailableEvent?.timestamp || (this.parser.pull.duration + this.parser.pull.timestamp)\n\t\t\tcurrentCharges = chargesAvailableEvent?.current || 0\n\t\t}\n\n\t\tconst cooldown = defensive.cooldown || this.parser.pull.duration\n\t\tconst nextEntry = this.getUses(defensive).find(historyEntry => historyEntry.start > timestamp)\n\t\tconst useByTimestamp = nextEntry != null ? (nextEntry.start - cooldown) : (this.parser.pull.timestamp + this.parser.pull.duration)\n\n\t\tif (useByTimestamp <= availableTimestamp) {\n\t\t\treturn {chargesBeforeNextUse: 0, availableTimestamp, useByTimestamp}\n\t\t}\n\n\t\treturn {chargesBeforeNextUse: currentCharges + Math.floor((useByTimestamp - availableTimestamp) / cooldown), availableTimestamp, useByTimestamp}\n\t}\n\n\tprivate tryGetAdditionalUseRow(defensive: Action, timestamp: number = this.parser.pull.timestamp): ReactNode {\n\t\tconst {chargesBeforeNextUse, availableTimestamp, useByTimestamp} = this.getAdditionalUsageData(defensive, timestamp)\n\n\t\tif (chargesBeforeNextUse === 0) {\n\t\t\treturn <></>\n\t\t}\n\n\t\treturn <Table.Row>\n\t\t\t<Table.Cell>\n\t\t\t\t<Trans id=\"core.defensives.table.extra-usage-row.text\"><Plural value={chargesBeforeNextUse} one=\"1 extra use\" other=\"# extra uses\"/> available between <Button\n\t\t\t\t\tcircular\n\t\t\t\t\tcompact\n\t\t\t\t\tsize=\"mini\"\n\t\t\t\t\ticon=\"time\"onClick={() => this.timeline.show(availableTimestamp - this.parser.pull.timestamp, useByTimestamp - this.parser.pull.timestamp)}>\n\t\t\t\t</Button> {this.parser.formatEpochTimestamp(availableTimestamp)} and {this.parser.formatEpochTimestamp(useByTimestamp)}\n\t\t\t\t</Trans>\n\t\t\t</Table.Cell>\n\t\t</Table.Row>\n\t}\n}\n"],"names":["AoEUsages","Suggestions","Data","suggestionIcon","trackedActions","severity","SEVERITY","suggestionContent","Trans","id","badUsages","trackedActionFilter","filter","type","action","oneOf","this","a","aoeAction","addEventHook","source","parser","actor","cause","onAbility","onComplete","event","minTargets","actionId","tracked","undefined","adjustMinTargets","isSuccessfulHit","targets","length","set","get","totalBadUsages","acc","cur","suggestions","add","TieredSuggestion","icon","content","tiers","value","why","size","collapsing","unstackable","has","stActions","s","Analyser","handle","title","dependency","data","DEFENSIVE_ROLE_ACTIONS","Defensives","Cooldowns","CooldownDowntime","Timeline","trackedDefensives","headerContent","JOBS","job","role","key","actions","forEach","roleAction","push","defensive","getUses","cooldowns","cooldownHistory","entry","endReason","CooldownEndReason","totalAdditionalUses","usage","getAdditionalUsageData","start","chargesBeforeNextUse","getUsageCount","Fragment","name","exclusive","styled","fluid","panels","index","getMaxUses","compact","celled","tryGetAdditionalUseRow","getUsageRow","formatEpochTimestamp","circular","onClick","timeline","show","pull","timestamp","end","availableTimestamp","currentCharges","charges","chargesAvailableEvent","chargeHistory","current","duration","cooldown","nextEntry","historyEntry","useByTimestamp","Math","floor","displayOrder","DISPLAY_ORDER","cooldownDowntime"],"sourceRoot":""}