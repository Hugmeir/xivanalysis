{"version":3,"file":"assets/4588.cd874275.js","mappings":"mYAaMA,EAA8E,CACnFC,MAAO,iNACPC,aAAc,uJAGFC,GAAb,iCAG4BC,EAAAA,GAH5B,iCAIkCC,EAAAA,IAJlC,iCAKwCC,EAAAA,GALxC,sWAOC,WACCC,KAAKC,aAAa,WAAYD,KAAKE,WACnC,GATF,yBAgBC,WACC,OAAOF,KAAKG,iBAAiBC,oBAAoB,CAACC,SAAUC,EAAAA,GAC5D,GAlBF,yBAqBC,WACC,OAAON,KAAKG,iBAAiBI,uBAC7B,GAvBF,wBAyBC,WACC,IAAMC,EAAYR,KAAKS,cAEvBT,KAAKU,WAAWC,IAAI,IAAIC,EAAAA,GAAgB,CACvCC,MAAOL,GACJ,SAAC,EAAAM,MAAD,CAAOC,GAAG,yBAAV,4BACA,SAAC,EAAAD,MAAD,CAAOC,GAAG,eAAV,wBACHC,KAAMhB,KAAKiB,KAAKC,QAAQC,OAAOH,KAC/BI,MAAOpB,KAAKqB,OAAOC,eAAetB,KAAKuB,eACvCC,KAAMhB,GAAY,iCACjB,SAAC,IAAD,CAAeiB,OAAQhC,EAAaC,SACpC,SAAC,IAAD,CAAe+B,OAAQhC,EAAaO,KAAKqB,OAAOK,OAAOC,KAAKF,kBACvDG,IAEP,KAvCF,GAAoCC,EAAAA,IAApC,EACiBC,OAAS,MAD1B,kCAGEC,EAAAA,EAHF,iFAGqBd,IAHrB,wCAIEc,EAAAA,EAJF,iFAIqBrB,UAJrB,8CAKEqB,EAAAA,EALF,iFAKqB5B,gBALrB,M,sWCKa6B,GAAb,iCAKgCC,EAAAA,GALhC,iCAM8BpC,EAAAA,GAN9B,iCAOmCqC,EAAAA,IAPnC,iCAQgCC,EAAAA,IARhC,yVAUSC,iBAVT,IAWSC,aAA2C,GAXpD,EAYSC,aAAuB,EAZhC,EAkBWtB,KAAeuB,EAAAA,GAAAA,UAAAA,KAlB1B,EAuBWC,SAA0B,CACnC,EAAGC,EAAAA,GAAAA,OACH,EAAGA,EAAAA,GAAAA,OAzBL,EA+BWC,mBAAiC,SAAC,EAAA5B,MAAD,CAAOC,GAAG,qCAAV,6LA/B5C,8CA0CC,SAAwB4B,EAAyCC,GAChE,OAAO,SAAC,EAAA9B,MAAD,CAAOC,GAAG,iCAAV,yGAAwD4B,EAAYE,OAApE,EAAoG7C,KAAKqB,OAAOC,eAAesB,KACtI,GA5CF,gCAkDC,WAEC,GApDF,wBAsDC,WACC5C,KAAKC,cACJ6C,EAAAA,EAAAA,MACEC,KAAK,WACLtB,OAAOzB,KAAKqB,OAAO2B,MAAMjC,IAC3Bf,KAAKiD,aAENjD,KAAKC,cACJ6C,EAAAA,EAAAA,MACEC,KAAK,aACLtB,OAAOzB,KAAKqB,OAAO2B,MAAMjC,IAC3Bf,KAAKkD,eAENlD,KAAKC,aAAa,WAAYD,KAAKE,WACnC,GApEF,yBAsEC,SAAoBiD,GACnBnD,KAAKoC,YAAce,CACnB,GAxEF,2BA0EC,SAAsBA,GAA4B,UACjD,GAAwB,MAApBnD,KAAKoC,YAAT,CAEA,IAAMgB,EAAQ,UAAGpD,KAAKoD,SAASC,UAAUrD,KAAKoC,YAAYkB,OAAQtD,KAAKoC,YAAYmB,kBAArE,QAAmF,EAEjGvD,KAAKsC,cAAgBkB,KAAKC,IACzBN,EAAMI,WAAN,oBAAmBvD,KAAKoC,mBAAxB,aAAmB,EAAkBmB,iBAArC,QAAkDvD,KAAKqB,OAAOqC,uBAC9DN,GAEDpD,KAAKqC,aAAasB,KAAKR,GACvBnD,KAAKoC,iBAAcR,CATqB,CAUxC,GArFF,wBAuFC,WACC5B,KAAK4D,YAAYjD,IAAI,IAAIkD,EAAAA,GAAiB,CACzC7C,KAAMhB,KAAKgB,KACX8C,MAAO9D,KAAKwC,SACZpB,MAAOpB,KAAKqC,aAAaQ,OACzBkB,QAAS/D,KAAK0C,kBACdsB,IAAKhE,KAAKiE,cAAcjE,KAAKqC,aAAcrC,KAAKsC,gBAEjD,GA/FF,oBAiGC,WAAkB,aACjB,OAAiC,IAA7BtC,KAAKqC,aAAaQ,OACd7C,KAAKkE,sBAGN,UAAC,IAAD,CAAOC,SAAO,EAACC,aAAW,EAACC,QAAM,EAACC,YAAU,EAA5C,WACN,SAAC,WAAD,WACC,UAAC,QAAD,YACC,SAAC,eAAD,CAAkBA,YAAU,EAA5B,UACC,6BAAQ,SAAC,EAAAxD,MAAD,CAAOC,GAAG,6BAAV,uBAET,SAAC,eAAD,WACC,6BAAQ,SAAC,EAAAD,MAAD,CAAOC,GAAG,6BAAV,4BAIX,SAAC,SAAD,UAEE,MAAAf,KAAKqC,cAAL,QAAsB,SAACkC,GACtB,IAAMjB,EAAS,EAAKrC,KAAKuD,UAAUD,EAAKjB,QACxC,OAAO,UAAC,QAAD,YACN,UAAC,SAAD,CAAYmB,UAAU,SAAtB,WACC,iBAAMC,MAAO,CAACC,YAAa,GAA3B,SAAgC,EAAKtD,OAAOuD,qBAAqBL,EAAKhB,cACtE,SAAC,IAAD,CACCsB,UAAQ,EACRV,SAAO,EACPW,KAAK,OACL9D,KAAK,OACL+D,QAAS,kBAAM,EAAKC,SAASC,KAAKV,EAAKhB,UAAY,EAAKlC,OAAO6D,KAAK3B,UAAWgB,EAAKhB,UAAY,EAAKlC,OAAO6D,KAAK3B,UA/HvF,IA+HjB,QAGX,SAAC,SAAD,WACC,SAAC,MAAD,UAAgBD,QAZKiB,EAAKhB,UAe5B,QAKJ,KAzIF,GAAgC1B,EAAAA,IAAhC,EACiBC,OAAiB,aADlC,EAEiBjB,MAA2B,0DAF5C,EAGiBsE,OAAiB,EAHlC,sCAKEpD,EAAAA,EALF,iFAKqBqB,QALrB,kCAMErB,EAAAA,EANF,iFAMuBd,IANvB,yCAOEc,EAAAA,EAPF,iFAOqB6B,WAPrB,sCAQE7B,EAAAA,EARF,iFAQqBiD,QARrB,M,gRCTMI,EAA6C,CAClD,EAAG3C,EAAAA,GAAAA,OAGkB4C,GAAtB,iCAIsCzF,EAAAA,GAJtC,uPAMU0F,WAAqB,EAAKrE,KAAKsE,SAASC,UANlD,EA2BoBC,qBAAmC,SAAC,EAAA3E,MAAD,CAAOC,GAAG,6BAAV,mBA3BvD,EA+BW2B,mBAAiC,SAAC,EAAA5B,MAAD,CAAOC,GAAG,2CAAV,iJAAqE,SAAC,KAAD,CAAYuC,OAAO,iBA/BpI,EAoCWoC,cAA+BN,EApC1C,2CAQC,YACC,0DAEApF,KAAK2F,aAAa,IAAIC,EAAAA,GAA0B,CAC/CC,aAAc,EACdC,eAAgB9F,KAAK8F,eACrBC,WAAW,EACXC,eAAgBhG,KAAKiB,KAAKC,QAAQsE,UAAUxE,KAC5C0B,kBAAmB1C,KAAK0C,kBACxBuD,sBAAsB,SAAC,KAAD,CAAY3C,OAAO,YAAY4C,UAAU,IAC/DR,cAAe1F,KAAK0F,cACpBS,YAAanG,KAAKoG,uBAAuBC,KAAKrG,QAE/C,GArBF,iCA6CC,SAA8BsG,GAC7B,OAAO,CACP,GA/CF,oCAqDC,SAA+BC,GAG9B,OAF4BvG,KAAKqB,OAAO6D,KAAK3B,UAAYvD,KAAKqB,OAAO6D,KAAK7E,SAAYkG,EAAOC,MACzExG,KAAK8F,eAAevE,cACI,GAAK,CACjD,GAzDF,4BA2DC,SAAwB4B,GAAyB,MAChDnD,KAAKmF,MAAM,mCAAoChC,EAAMG,QAErD,IAAMA,EAAStD,KAAKiB,KAAKuD,UAAUrB,EAAMG,QAE9B,MAAVA,GAC8B,KAA3B,UAACA,EAAOF,gBAAR,QAAoB,IACnBpD,KAAKyG,oBAAoBnD,KAI9B,6DAAqBH,EACrB,KAvEF,GAAwCuD,EAAAA,IAAxC,EACiB5E,OAAiB,YADlC,EAEiBjB,MAA2B,yDAF5C,4CAIEkB,EAAAA,EAJF,iFAIqB+D,cAJrB,M,iHCfaa,EAAb,yMAICrB,WAAa,EAAKrE,KAAKsE,SAASqB,UAJjC,Y,SAA8BF,GAAjBC,EACI7E,OAAS,WADb6E,EAEI9F,MAAQ,+C","sources":["webpack://@xivanalysis/client/./src/parser/core/modules/GlobalCooldown.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/Interrupts.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/Swiftcast.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/Tincture.ts"],"sourcesContent":["import {MessageDescriptor} from '@lingui/core'\nimport {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport TransMarkdown from 'components/ui/TransMarkdown'\nimport {BASE_GCD} from 'data/CONSTANTS'\nimport React from 'react'\nimport {Report} from 'report'\nimport {Analyser} from '../Analyser'\nimport {dependency} from '../Injectable'\nimport {Data} from './Data'\nimport {SpeedAdjustments} from './SpeedAdjustments'\nimport {SimpleStatistic, Statistics} from './Statistics'\n\nconst estimateHelp: Record<Report['meta']['source'] | '__all', MessageDescriptor> = {\n\t__all: t('core.gcd.no-statistics.v2')`This GCD recast is an *estimate*, and may be incorrect. If it is reporting a GCD recast *longer* than reality, you likely need to focus on keeping your GCD rolling.`,\n\tlegacyFflogs: t('core.gcd.estimate-help.fflogs')`Precise attribute values are only available from FF Logs for the player who logged the report in ACT.`,\n}\n\nexport class GlobalCooldown extends Analyser {\n\tstatic override handle = 'gcd'\n\n\t@dependency private data!: Data\n\t@dependency private statistics!: Statistics\n\t@dependency private speedAdjustments!: SpeedAdjustments\n\n\toverride initialise() {\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\t/**\n\t * Get the base recast time of the parsed actor's GCD cooldown group, in milliseconds.\n\t * The value returned from this function _may_ be an estimate - check {@link GlobalCooldown.isEstimated}\n\t * to see if it is.\n\t */\n\tpublic getDuration() {\n\t\treturn this.speedAdjustments.getAdjustedDuration({duration: BASE_GCD})\n\t}\n\n\t/** Returns whether the GCD duration calculated by this module is an estimate. */\n\tpublic isEstimated() {\n\t\treturn this.speedAdjustments.isAdjustmentEstimated()\n\t}\n\n\tprivate onComplete() {\n\t\tconst estimated = this.isEstimated()\n\n\t\tthis.statistics.add(new SimpleStatistic({\n\t\t\ttitle: estimated\n\t\t\t\t? <Trans id=\"core.gcd.estimated-gcd\">Estimated GCD</Trans>\n\t\t\t\t: <Trans id=\"core.gcd.gcd\">GCD Recast</Trans>,\n\t\t\ticon: this.data.actions.ATTACK.icon,\n\t\t\tvalue: this.parser.formatDuration(this.getDuration()),\n\t\t\tinfo: estimated ? <>\n\t\t\t\t<TransMarkdown source={estimateHelp.__all}/>\n\t\t\t\t<TransMarkdown source={estimateHelp[this.parser.report.meta.source]}/>\n\t\t\t</> : undefined,\n\t\t}))\n\t}\n}\n","import {MessageDescriptor} from '@lingui/core'\nimport {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport ACTIONS from 'data/ACTIONS'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport {Timeline} from 'parser/core/modules/Timeline'\nimport React from 'react'\nimport {Button, Table} from 'semantic-ui-react'\nimport {filter} from '../filter'\nimport {dependency} from '../Injectable'\nimport CastTime from './CastTime'\nimport {Data} from './Data'\n\ninterface SeverityTiers {\n\t[key: number]: number\n}\n\n// used for timeline viewing by giving you a nice 30s window\nconst TIMELINE_UPPER_MOD: number = 30000\n\nexport class Interrupts extends Analyser {\n\tstatic override handle: string = 'interrupts'\n\tstatic override title: MessageDescriptor = t('core.interrupts.title')`Interrupted Casts`\n\tstatic override debug: boolean = false\n\n\t@dependency private castTime!: CastTime\n\t@dependency protected data!: Data\n\t@dependency private suggestions!: Suggestions\n\t@dependency private timeline!: Timeline\n\n\tprivate currentCast?: Events['prepare']\n\tprivate droppedCasts: Array<Events['interrupt']> = []\n\tprivate missedTimeMS: number = 0\n\n\t/**\n\t * Implementing modules MAY override the icon to be used for the suggestion,\n\t * though, let's face it â€“ interject is pretty much the perfect one.\n\t */\n\tprotected icon: string = ACTIONS.INTERJECT.icon\n\n\t/**\n\t * Implementing modules MAY override the severity tiers for interrupted casts\n\t */\n\tprotected severity: SeverityTiers = {\n\t\t2: SEVERITY.MEDIUM,\n\t\t5: SEVERITY.MAJOR,\n\t}\n\n\t/**\n\t * Implementing modules MAY override the default suggestion text\n\t */\n\tprotected suggestionContent: JSX.Element = <Trans id=\"core.interrupts.suggestion.content\">\n\t\tAvoid interrupting casts by either prepositioning yourself or utilizing slidecasting where possible. If you have to move, try to save an instant cast to keep your GCD rolling.\n\t</Trans>\n\n\t/**\n\t * Implementing modules MAY override this function to provide specific text if they wish for the 'why'\n\t * The default is to complain that they missed a number of casts and give them an estimate\n\t * @param missedCasts The array of missed casts\n\t * @param missedTime The approximate time wasted via interrupts\n\t * @returns JSX that conforms to your suggestion content\n\t */\n\tprotected suggestionWhy(missedCasts: Array<Events['interrupt']>, missedTime: number): JSX.Element {\n\t\treturn <Trans id=\"core.interrupts.suggestion.why\">You missed { missedCasts.length } casts (approximately { this.parser.formatDuration(missedTime) } of total casting time) due to interruption.</Trans>\n\t}\n\n\t/**\n\t * Implementing modules MAY override this function to provide alternative output if there's 0 interrupted\n\t * casts (in lieu of an empty table)\n\t */\n\tprotected noInterruptsOutput(): JSX.Element | undefined {\n\t\treturn undefined\n\t}\n\n\tpublic override initialise() {\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.type('prepare')\n\t\t\t\t.source(this.parser.actor.id),\n\t\t\tthis.onBeginCast\n\t\t)\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.type('interrupt')\n\t\t\t\t.source(this.parser.actor.id),\n\t\t\tthis.pushDropCasts\n\t\t)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onBeginCast(event: Events['prepare']) {\n\t\tthis.currentCast = event\n\t}\n\n\tprivate pushDropCasts(event: Events['interrupt']) {\n\t\tif (this.currentCast == null) { return }\n\n\t\tconst castTime = this.castTime.forAction(this.currentCast.action, this.currentCast.timestamp) ?? 0\n\n\t\tthis.missedTimeMS += Math.min(\n\t\t\tevent.timestamp - (this.currentCast?.timestamp ?? this.parser.currentEpochTimestamp),\n\t\t\tcastTime\n\t\t)\n\t\tthis.droppedCasts.push(event)\n\t\tthis.currentCast = undefined\n\t}\n\n\tprivate onComplete() {\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.icon,\n\t\t\ttiers: this.severity,\n\t\t\tvalue: this.droppedCasts.length,\n\t\t\tcontent: this.suggestionContent,\n\t\t\twhy: this.suggestionWhy(this.droppedCasts, this.missedTimeMS),\n\t\t}))\n\t}\n\n\toverride output() {\n\t\tif (this.droppedCasts.length === 0) {\n\t\t\treturn this.noInterruptsOutput()\n\t\t}\n\n\t\treturn <Table compact unstackable celled collapsing>\n\t\t\t<Table.Header>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.HeaderCell collapsing>\n\t\t\t\t\t\t<strong><Trans id=\"core.interrupts.table.time\">Time</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong><Trans id=\"core.interrupts.table.cast\">Cast</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{\n\t\t\t\t\tthis.droppedCasts.map((cast) => {\n\t\t\t\t\t\tconst action = this.data.getAction(cast.action)\n\t\t\t\t\t\treturn <Table.Row key={cast.timestamp}>\n\t\t\t\t\t\t\t<Table.Cell textAlign=\"center\">\n\t\t\t\t\t\t\t\t<span style={{marginRight: 5}}>{this.parser.formatEpochTimestamp(cast.timestamp)}</span>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tcircular\n\t\t\t\t\t\t\t\t\tcompact\n\t\t\t\t\t\t\t\t\tsize=\"mini\"\n\t\t\t\t\t\t\t\t\ticon=\"time\"\n\t\t\t\t\t\t\t\t\tonClick={() => this.timeline.show(cast.timestamp - this.parser.pull.timestamp, cast.timestamp - this.parser.pull.timestamp + TIMELINE_UPPER_MOD)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t<Table.Cell>\n\t\t\t\t\t\t\t\t<ActionLink {...action} />\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t</Table.Row>\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</Table.Body>\n\t\t</Table>\n\n\t}\n}\n","import {MessageDescriptor} from '@lingui/core'\nimport {t, Trans} from '@lingui/macro'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {Action} from 'data/ACTIONS'\nimport {Status} from 'data/STATUSES'\nimport {Events} from 'event'\nimport {SEVERITY, SeverityTiers} from 'parser/core/modules/Suggestions'\nimport React from 'react'\nimport {dependency} from '../Injectable'\nimport {BuffWindow, EvaluatedAction, ExpectedGcdCountEvaluator} from './ActionWindow'\nimport {HistoryEntry} from './ActionWindow/History'\nimport {GlobalCooldown} from './GlobalCooldown'\n\n// Global default\nconst MISSED_SWIFTCAST_SEVERITIES: SeverityTiers = {\n\t1: SEVERITY.MAJOR,\n}\n\nexport abstract class Swiftcast extends BuffWindow {\n\tstatic override handle: string = 'swiftcast'\n\tstatic override title: MessageDescriptor = t('core.swiftcast.title')`Swiftcast Actions`\n\n\t@dependency private globalCooldown!: GlobalCooldown\n\n\toverride buffStatus: Status = this.data.statuses.SWIFTCAST\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tthis.addEvaluator(new ExpectedGcdCountEvaluator({\n\t\t\texpectedGcds: 1,\n\t\t\tglobalCooldown: this.globalCooldown,\n\t\t\thasStacks: true,\n\t\t\tsuggestionIcon: this.data.actions.SWIFTCAST.icon,\n\t\t\tsuggestionContent: this.suggestionContent,\n\t\t\tsuggestionWindowName: <ActionLink action=\"SWIFTCAST\" showIcon={false} />,\n\t\t\tseverityTiers: this.severityTiers,\n\t\t\tadjustCount: this.adjustExpectedGcdCount.bind(this),\n\t\t}))\n\t}\n\n\t/**\n\t * Implementing modules MAY want to override this to change the column header, but at this point\n\t * it's probably universal to call it a 'Spell'\n\t */\n\tprotected override rotationTableHeader: JSX.Element = <Trans id=\"core.swiftcast.table.title\">Spell</Trans>\n\t/**\n\t * Implementing modules MAY want to override the suggestionContent to provide job-specific guidance.\n\t */\n\tprotected suggestionContent: JSX.Element = <Trans id=\"core.swiftcast.missed.suggestion.content\">Use spells with <ActionLink action=\"SWIFTCAST\"/> before it expires. This allows you to use spells with cast times instantly for movement or weaving.</Trans>\n\t/**\n\t * Implementing modules MAY want to override the severityTiers to provide job-specific severities.\n\t * By default, 1 miss is a major severity\n\t */\n\tprotected severityTiers: SeverityTiers = MISSED_SWIFTCAST_SEVERITIES\n\n\t/**\n\t * Implementing modules MAY override this if they have special cases not covered\n\t * by the standard 'considerAction' method â€“ for example, SMN with instant ruins during\n\t * DWT.\n\t * @param action - the action to consider\n\t * @returns true to allow the spell; false to ignore the spell\n\t */\n\tprotected considerSwiftAction(_action: Action): boolean {\n\t\treturn true\n\t}\n\n\t// Provide our own logic for the end of the fight â€“ even though the window is\n\t// ~4 GCDs 'wide', we can only use one action with it anyway; this change should\n\t// ding them only if they had enough time during the window to use a spell with\n\t// swiftcast\n\tprivate adjustExpectedGcdCount(window: HistoryEntry<EvaluatedAction[]>) {\n\t\tconst fightTimeRemaining = (this.parser.pull.timestamp + this.parser.pull.duration) - window.start\n\t\tconst gcdEstimate = this.globalCooldown.getDuration()\n\t\treturn (fightTimeRemaining > gcdEstimate) ? 0 : -1\n\t}\n\n\toverride onWindowAction(event: Events['action']) {\n\t\tthis.debug('Evaluating action during window:', event.action)\n\t\t// ignore actions that don't have a castTime\n\t\tconst action = this.data.getAction(event.action)\n\t\tif (\n\t\t\taction == null\n\t\t\t|| (action.castTime ?? 0) === 0\n\t\t\t|| !this.considerSwiftAction(action)\n\t\t) {\n\t\t\treturn\n\t\t}\n\t\tsuper.onWindowAction(event)\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {BuffWindow} from './ActionWindow/windows/BuffWindow'\n\nexport class Tincture extends BuffWindow {\n\tstatic override handle = 'tincture'\n\tstatic override title = t('core.tincture.title')`Tinctures`\n\n\tbuffStatus = this.data.statuses.MEDICATED\n\n\t// No initialise since only the table display is desired without\n\t// any evaluation as to expected actions.\n}\n"],"names":["estimateHelp","__all","legacyFflogs","GlobalCooldown","Data","Statistics","SpeedAdjustments","this","addEventHook","onComplete","speedAdjustments","getAdjustedDuration","duration","BASE_GCD","isAdjustmentEstimated","estimated","isEstimated","statistics","add","SimpleStatistic","title","Trans","id","icon","data","actions","ATTACK","value","parser","formatDuration","getDuration","info","source","report","meta","undefined","Analyser","handle","dependency","Interrupts","CastTime","Suggestions","Timeline","currentCast","droppedCasts","missedTimeMS","ACTIONS","severity","SEVERITY","suggestionContent","missedCasts","missedTime","length","filter","type","actor","onBeginCast","pushDropCasts","event","castTime","forAction","action","timestamp","Math","min","currentEpochTimestamp","push","suggestions","TieredSuggestion","tiers","content","why","suggestionWhy","noInterruptsOutput","compact","unstackable","celled","collapsing","cast","getAction","textAlign","style","marginRight","formatEpochTimestamp","circular","size","onClick","timeline","show","pull","debug","MISSED_SWIFTCAST_SEVERITIES","Swiftcast","buffStatus","statuses","SWIFTCAST","rotationTableHeader","severityTiers","addEvaluator","ExpectedGcdCountEvaluator","expectedGcds","globalCooldown","hasStacks","suggestionIcon","suggestionWindowName","showIcon","adjustCount","adjustExpectedGcdCount","bind","_action","window","start","considerSwiftAction","BuffWindow","Tincture","MEDICATED"],"sourceRoot":""}