{"version":3,"file":"assets/jobs-drg.03c0f8c4.js","mappings":"oHAAAA,EAAOC,QAAU,EAAjB,M,+FC0CKC,E,mWCzCL,EAA4L,0CAA5L,EAA6O,oC,qBDyCxOA,GAAAA,EAAAA,EAAAA,YAAAA,GAAAA,cAAAA,EAAAA,EAAAA,OAAAA,GAAAA,Q,EAAAA,IAAAA,EAAAA,CAAAA,IAKE,IAAMC,GAAb,iCAagCC,EAAAA,GAbhC,iCAciCC,EAAAA,GAdjC,iCAe4BC,EAAAA,GAf5B,iCAgBgCC,EAAAA,IAhBhC,uVAkBSC,aAAoC,GAlB7C,EAmBSC,UAAY,IAAI,KAnBzB,uCAsBC,SAAOC,GACN,OAAOC,KAAKC,OAAO,CAACC,QAAS,CAACH,IAC9B,GAxBF,wBA0BC,WAAsB,gBAECC,KAAKG,YAAsCC,MAF5C,IAErB,2BAAuE,KAA5DC,EAA4D,QAChEC,EAAiBN,KAAKO,cAAcF,GAC1CL,KAAKH,aAAaW,KAAKF,GACvBN,KAAKC,OAAOK,EACZ,CANoB,+BAQrBN,KAAKS,aAAa,WAAYT,KAAKU,WACnC,GAnCF,wBAqCC,WAAqB,eAEdC,EAAkB,IAAI,KAFR,UAKCX,KAAKH,cALN,IAKpB,2BAAwC,KAA7BQ,EAA6B,QACjCO,EAAMZ,KAAKC,OAAOI,GACxBL,KAAKa,YAAYD,EAAKP,GACtBA,EAAOH,QAAQY,SAAQ,SAAAC,GAAS,OAC/B,EAAKC,UAAUC,OAAOF,GAAWD,SAAQ,SAAAI,GAAK,OAAIP,EAAgBQ,IAAID,EAAxB,GADf,GAGhC,CAXmB,+BAcpB,MAAAlB,KAAKgB,UAAUI,aAAf,QACS,SAAAF,GAAK,OAAKP,EAAgBU,IAAIH,EAAzB,IACZJ,SAAQ,SAAAI,GACR,IAAMb,EAAS,CAACH,QAAS,CAACgB,IACpBN,EAAM,EAAKX,OAAOI,GACxB,EAAKQ,YAAYD,EAAKP,EACtB,GACF,GA1DF,2BA4DC,SAAsBA,GAErB,IAAIiB,EAAcjB,EAIlB,OAH2B,YAAvB,OAAOiB,IAA4BC,MAAMC,QAAQF,MACpDA,EAAc,CAACpB,QAASoB,KAEzB,kBACIA,GADJ,IAECpB,SAASuB,EAAAA,EAAAA,IAAYH,EAAYpB,UAElC,GAtEF,oBAwEC,SAAeG,GAA2B,eAEnCY,EAAS,MAAAZ,EAAOH,SAAP,QAAuB,SAAAa,GAAS,OAAI,EAAKC,UAAUC,OAAOF,EAA1B,IACzCW,EAAc,UAAAT,GAAM,KAANA,GACd,SAAAC,GAAK,OAAI,EAAKpB,UAAU6B,IAAIT,EAAvB,KADS,OAEbU,EAAAA,IACP,GAAmB,MAAfF,EACH,OAAOA,EAIR,IAKuC,EALjCG,EAAexB,EAAOH,QAAQ,GAC9B4B,EACe,MAAhBzB,EAAOyB,MAAwBzB,EAAOyB,MACrB,QAAjBD,GAAkC,SAAC,EAAAE,MAAD,CAAOC,GAAG,iCAAV,iBACV,iBAAjBH,EAAoC,EAAKI,KAAKC,QAAQL,GAAcM,KACnD,iBAAjBN,EAA6B,UAAO,EAAKb,UAAUoB,gBAAgBP,GAAc,UAApD,aAAO,EAAiD9B,OAAOoC,KAChGN,EAAaM,KAKfvB,EAAMZ,KAAKqC,SAASpC,OAAO,IAAIqC,EAAAA,GAAa,CACjDR,MAAAA,EACAS,MAAOlC,EAAOkC,MACdC,UAAU,KAIX,OAFAvB,EAAOH,SAAQ,SAAAI,GAAK,OAAI,EAAKpB,UAAU2C,IAAIvB,EAAON,EAA9B,IAEbA,CACP,GAtGF,yBAwGC,SAAoBA,EAApB,GAAqE,WAA7BV,EAA6B,EAA7BA,QAEvCF,KAAK0C,iBAAiB9B,EAAK,IAAAV,GAAO,KAAPA,GAAgB,SAAAa,GAAS,OAAI,EAAKC,UAAUoB,gBAAgBrB,EAAnC,KACpDf,KAAK2C,eAAe/B,EAAK,IAAAV,GAAO,KAAPA,GAAgB,SAAAa,GAAS,OAAI,EAAKC,UAAU4B,cAAc7B,EAAjC,IAClD,GA5GF,8BA8GC,SAAyBH,EAAmBiC,GAAiC,gBACxDA,GADwD,IAC5E,2BAA6B,KAAlBC,EAAkB,QACtBC,EAAW/C,KAAKgD,oBAAoBF,GAIpCG,EAAQH,EAAMG,MAAQjD,KAAKkD,OAAOC,KAAKC,UACvCC,EAAMJ,EAAQF,EACpBnC,EAAI0C,QAAQ,IAAIC,EAAAA,GAAW,CAC1BN,MAAAA,EACAI,IAAAA,EACAnD,SAAS,gBAAKsD,UCvKqH,4CDyKpI,CAb2E,+BAc5E,GA5HF,4BA8HC,SAAuB5C,EAAmBiC,GAA+B,gBACpDA,GADoD,IACxE,2BAA6B,KAAlBC,EAAkB,QACtBW,EAAOX,EAAMY,MAAQ,EACxB,IAAIC,EAAAA,GAAW,CAChBC,MAAOrE,EAAUsE,OACjBZ,MAAOH,EAAMM,UAAYpD,KAAKkD,OAAOC,KAAKC,UAC1CrD,OAAQ+C,EAAM/C,SAEb,IAAI+D,EAAe,CACpBF,MAAOrE,EAAUwE,YACjBd,MAAOH,EAAMM,UAAYpD,KAAKkD,OAAOC,KAAKC,YAE5CxC,EAAI0C,QAAQG,EACZ,CAbuE,+BAcxE,GA5IF,iCA8IC,SAA4BX,GAC3B,IAAIC,EAAWD,EAAMO,IAAMP,EAAMG,MAGjC,GAAIH,EAAMkB,YAAcC,EAAAA,EAAAA,QAA2B,OAC5CC,EAAQ,UAAGlE,KAAKkE,SAASC,UAAUrB,EAAM/C,OAAOiC,GAAIc,EAAMG,cAAlD,QAA4D,EAI1EF,EAAWqB,KAAKC,IAAItB,EAAUmB,EAzLV,IA0LpB,CAED,OAAOnB,CACP,KA3JF,GAAoCuB,EAAAA,IAApC,EACiBC,OAAS,iBAD1B,EAEiBC,OAAQ,EAFzB,EASQpE,KAAoB,CAC1B,CAACF,QAAS,MAAOqC,OAAQ,KAV3B,sCAaEkC,EAAAA,EAbF,iFAaqBP,QAbrB,uCAcEO,EAAAA,EAdF,iFAcqBzD,SAdrB,kCAeEyD,EAAAA,EAfF,iFAeqBxC,IAfrB,sCAgBEwC,EAAAA,EAhBF,iFAgBqBpC,QAhBrB,OA8JMyB,EAAAA,SAAAA,I,4LACLY,QAAU,kBACT,gBAAKlB,UAAWmB,EAAhB,UACC,SAACC,EAAA,EAAD,CAAMzC,KAAK,kBAAkBqB,UAAWmB,KAFhC,E,WADLb,CAAuBe,EAAAA,G,0VE3LPC,GAAtB,iCAG8BnF,EAAAA,GAH9B,iCAI8BoF,EAAAA,GAJ9B,iCAKuCC,EAAAA,GALvC,iCAMgCC,EAAAA,GANhC,2VASoBC,gBAA4B,GAThD,EAWSC,mBAAkC,IAAI,KAX/C,2CAaC,WACCnF,KAAKS,cACJ2E,EAAAA,EAAAA,MACEC,KAAK,eACLC,OAAOtF,KAAKkD,OAAOqC,MAAMvD,IACzBwD,QAAOC,EAAAA,EAAAA,IAAMzF,KAAKkF,kBACpBlF,KAAK0F,SAGN1F,KAAKS,aAAa,WAAYT,KAAKU,WACnC,GAvBF,gCA2CC,WACC,OAAO,CACP,GA7CF,qBA+CC,SAAgBiF,GACf,IAAMH,EAASxF,KAAKiC,KAAK2D,UAAUD,EAAMH,QAEzC,GAAwB,OAApBA,aAAA,EAAAA,EAAQzC,UAAZ,CAGA,IAAI8C,EAAgB7F,KAAKmF,mBAAmBxD,IAAI6D,EAAOxD,IAClC,MAAjB6D,IACHA,EAAgB,IAAI,KACpB7F,KAAKmF,mBAAmB1C,IAAI+C,EAAOxD,GAAI6D,IAIxC,IAAMC,EAASH,EAAMG,OACjBC,EAAwBF,EAAclE,IAAImE,GAO9C,GAN6B,MAAzBC,IACHA,EAAwB,CAACC,YAAa,EAAGC,cAAe,GACxDJ,EAAcpD,IAAIqD,EAAQC,IAIe,IAAtCA,EAAsBC,aAAqBhG,KAAKkG,qBACnDH,EAAsBC,YAAcL,EAAMvC,cAD3C,CAMA,IAAM+C,EAAOX,EAAOzC,UAAY4C,EAAMvC,UAAY2C,EAAsBC,aAExED,EAAsBE,eAAiB7B,KAAKC,IAAI,EAAG8B,GACnDJ,EAAsBC,YAAcL,EAAMvC,SANzC,CArBuC,CA4BxC,GA9EF,wBAgFC,WACCpD,KAAKoG,oBACLpG,KAAKqG,wBACL,GAnFF,8BAsFC,SAA2BC,GAC1B,IAAMd,EAASxF,KAAKiC,KAAK2D,UAAUU,GACnC,OAAc,MAAVd,EAAyB,EAERxF,KAAKuG,SAASC,UAAUhB,EAAQxF,KAAKyG,OAAOC,OAC3C1G,KAAKkD,OAAOC,KAAKJ,SAAW/C,KAAK2G,gBAAgBC,YAAY,CAACC,MAAO,CAAC,mBACpD,GACxC,GA7FF,+BAiGC,SAA4BP,GAAkB,MACvCQ,EAAiB9G,KAAKkD,OAAOC,KAAKJ,SAAW/C,KAAK2G,gBAAgBC,YAAY,CAACC,MAAO,CAAC,kBAC7F,GAAIC,GAAiB,EAAK,OAAO,EAEjC,IAAM3B,EAAqBnF,KAAKmF,mBAAmBxD,IAAI2E,GACvD,GAA0B,MAAtBnB,EAA8B,OAAO,EAEzC,IAAMc,EAAgB,UAAW,IAAAd,GAAkB,KAAlBA,KAAX,QAA+C,SAACgB,EAAML,GAAP,OAAkBK,EAAOL,EAAOG,aAAhC,GAA+C,GAEpH,OADqB7B,KAAK2C,MAAMd,GAAiBa,EAjHnB,KAmH9B,KA3GF,GAAmCxC,EAAAA,IAAnC,EACiBC,OAAS,OAD1B,kCAGEE,EAAAA,EAHF,iFAGuBxC,IAHvB,oCAIEwC,EAAAA,EAJF,iFAIqBgC,MAJrB,6CAKEhC,EAAAA,EALF,iFAKqBkC,eALrB,sCAMElC,EAAAA,EANF,iFAMqB8B,QANrB,M,uSCLMS,EAA8E,CACnFC,MAAO,iNACPC,aAAc,uJAGFC,GAAb,iCAG4BxH,EAAAA,GAH5B,iCAIkCyH,EAAAA,IAJlC,iCAKwCC,EAAAA,GALxC,sWAOC,WACCrH,KAAKS,aAAa,WAAYT,KAAKU,WACnC,GATF,yBAgBC,WACC,OAAOV,KAAKsH,iBAAiBC,oBAAoB,CAACxE,SAAUyE,EAAAA,GAC5D,GAlBF,yBAqBC,WACC,OAAOxH,KAAKsH,iBAAiBG,uBAC7B,GAvBF,wBAyBC,WACC,IAAMC,EAAY1H,KAAK2H,cAEvB3H,KAAK4H,WAAWzG,IAAI,IAAI0G,EAAAA,GAAgB,CACvCC,MAAOJ,GACJ,SAAC,EAAA3F,MAAD,CAAOC,GAAG,yBAAV,4BACA,SAAC,EAAAD,MAAD,CAAOC,GAAG,eAAV,wBACH+F,KAAM/H,KAAKiC,KAAKC,QAAQ8F,OAAOD,KAC/BE,MAAOjI,KAAKkD,OAAOgF,eAAelI,KAAK4G,eACvCuB,KAAMT,GAAY,iCACjB,SAAC,IAAD,CAAepC,OAAQ0B,EAAaC,SACpC,SAAC,IAAD,CAAe3B,OAAQ0B,EAAahH,KAAKkD,OAAOkF,OAAOC,KAAK/C,kBACvDgD,IAEP,KAvCF,GAAoChE,EAAAA,IAApC,EACiBC,OAAS,MAD1B,kCAGEE,EAAAA,EAHF,iFAGqBxC,IAHrB,wCAIEwC,EAAAA,EAJF,iFAIqBmD,UAJrB,8CAKEnD,EAAAA,EALF,iFAKqB6C,gBALrB,M,yeCMsBiB,GAAtB,iCAC8B5I,EAAAA,GAD9B,iCAEiC6I,EAAAA,IAFjC,iCAGgC5I,EAAAA,IAHhC,oTASS6I,kBAAwC,GATjD,EAiBoBC,iBAjBpB,6CAmBC,WAAsB,MACrB1I,KAAKS,cACJ2E,EAAAA,EAAAA,MAAgBE,OAAOtF,KAAKkD,OAAOqC,MAAMvD,IAAIqD,KAAK,UAChDsD,MAAM3I,KAAKiC,KAAK2G,mBAAmB,MAAA5I,KAAK0I,aAAL,QAAqB,SAAAG,GAAU,OAAIA,EAAW7G,EAAf,MAAsBhC,KAAK8I,QAChG9I,KAAKS,aAAa,WAAYT,KAAKU,WACnC,GAxBF,oBA0BC,SAAeiF,GAAyB,MACvC,GAAyB,WAArBA,EAAMgD,MAAMtD,KAAhB,CAGA,IAAMtF,EAASC,KAAKiC,KAAK8G,UAAUpD,EAAMgD,MAAM5I,QAC/C,GAAc,MAAVA,EAAJ,CAGA,IAAM8I,EAAa,MAAA7I,KAAK0I,aAAL,QAAsB,SAAAG,GAAU,OAAIA,IAAe9I,CAAnB,IACnD,GAAkB,MAAd8I,EAAJ,CAIA,IAAMG,EAAmBhJ,KAAKiJ,4BAA4BJ,GAItD7I,KAAKkJ,cAAcL,EAAYlD,EAAMwD,QAAQ,GAAGC,cACnDJ,EAAiBK,KAAK7I,KAAKmF,GAE3BqD,EAAiBM,OAAO9I,KAAKmF,EAT7B,CAJA,CAJA,CAmBD,GAhDF,yCAkDC,SAAoCkD,GAAoB,MACnDG,EAAmB,MAAAhJ,KAAKyI,mBAAL,QAA4B,SAAAc,GAAM,OAAIA,EAAOV,aAAeA,CAA1B,IASzD,OARwB,MAApBG,IACHA,EAAmB,CAClBH,WAAAA,EACAQ,KAAM,GACNC,OAAQ,IAETtJ,KAAKyI,kBAAkBjI,KAAKwI,IAEtBA,CACP,GA7DF,2CAmEC,SAAsCjJ,GACrC,IAAMyJ,EAAwCxJ,KAAKyJ,uBAClDC,EAAAA,EAAAA,IAAe3J,IACf4J,EAAAA,EAAAA,IAAmB5J,EAAQ,CAAC6J,EAAAA,GAAAA,OAAsB,KACnD,cAAW,IAAI,IAAJ,CAAQ,CAzEI,EAyEeJ,IACtC,GAxEF,2BA4EC,SAAsBzJ,EAAgBqJ,GAAsB,MAC3D,OAAQ,MAAApJ,KAAK6J,8BAA8B9J,IAAnC,OAAoDqJ,EAC5D,GA9EF,mCAiFC,SAA8BU,EAAcC,GAC3C,OAAO,IAAW,KAAO,EAAID,EAAOC,GACpC,GAnFF,+BAqFC,SAA0B3G,GACzB,OAAOA,EAAYpD,KAAKkD,OAAOC,KAAKC,SACpC,GAvFF,kCAyFC,SAA6BA,GAAmB,WACzC4G,EAAqBhK,KAAKiK,kBAAkB7G,GAClD,OAAO,SAAC,IAAD,CACN8G,UAAQ,EACRC,SAAO,EACPpC,KAAK,OACLqC,KAAK,QACLC,QAAS,kBAAM,EAAKhI,SAASiI,KAAKN,EAAoBA,EAA7C,EACT9J,QAASF,KAAKkD,OAAOqH,qBAAqBnH,IAE3C,GAnGF,wBAqGC,WAAqB,MACkB,IAAlCpD,KAAKyI,kBAAkB+B,QAG3BxK,KAAKyK,UAAUtJ,IAAI,IAAIuJ,EAAAA,GAAK,CAC3BvI,MAAM,SAAC,EAAAJ,MAAD,CAAOC,GAAG,mCAAV,kCACN2I,aAAcC,EAAAA,EAAAA,YACdC,aAAa,SAAC,EAAA9I,MAAD,CAAOC,GAAG,yCAAV,yOAGR,SAAC,KAAD,CAAUjC,OAAO,kBAEtB+K,aAAc,MAAA9K,KAAKyI,mBAAL,OAA2BzI,KAAK+K,yBAE/C,GAnHF,mCAoHC,SAA8BxB,GAA0B,QACjDyB,EAASzB,EAAOF,KAAKmB,OAErBS,EAAWD,EADCzB,EAAOD,OAAOkB,OAE5BU,EAAUF,EAASC,EAAW,IAIlC,OAAO,IAAIE,EAAAA,GAAY,CACtBhJ,MAAM,SAAC,MAAD,UAAgBoH,EAAOV,aAC7BqC,QAASA,EACTE,OAAQH,EACRI,gBAAiB,sBAAGL,EAAL,eAAiBC,EAAjB,cAA8BC,EAAQI,QAAQ,GAA9C,OAEhB,GAlIF,oBAoIC,WAAmC,eAGlC,GAAoB,IAFA,MAAAtL,KAAKyI,mBAAL,QAA8B,SAAC8C,EAAOC,GAAR,OAAoBD,EAAQC,EAAQlC,OAAOkB,MAA3C,GAAmD,GAIrG,OAAO,UAAC,IAAD,CAAOL,SAAO,EAACsB,aAAW,EAACC,QAAM,EAACC,UAAU,SAA5C,WACN,SAAC,WAAD,WACC,UAAC,QAAD,YACC,SAAC,eAAD,WACC,6BAAQ,SAAC,EAAA5J,MAAD,CAAOC,GAAG,0CAAV,yBAET,SAAC,eAAD,WACC,6BAAQ,SAAC,EAAAD,MAAD,CAAOC,GAAG,wCAAV,uBAET,SAAC,eAAD,WACC,6BAAQ,SAAC,EAAAD,MAAD,CAAOC,GAAG,0CAAV,8BAIX,SAAC,SAAD,UAEE,MAAAhC,KAAKyI,mBAAL,QAA2B,SAAAc,GAAU,MAC9BqC,EAAUrC,EAAOF,KAAKmB,OACtBqB,EAAYtC,EAAOD,OAAOkB,OAC1BsB,EAAwB,IAAdD,EAChB,OAAO,UAAC,QAAD,YACN,SAAC,SAAD,CAAYE,MAAO,CAACC,WAAY,UAAhC,UACC,SAAC,MAAD,kBAAgBzC,EAAOV,YAAvB,IAAmCoD,UAAU,QAE9C,UAAC,SAAD,CACCN,UAAU,SACVO,SAAUJ,EACVK,UAAWL,EAHZ,UAIEF,EAJF,IAIYC,EAAYD,MAExB,SAAC,SAAD,CAAYD,UAAU,OAAtB,SAEE,MAAApC,EAAOD,QAAP,QAAkB,SAAA8C,GACjB,OAAO,EAAKC,qBAAqBD,EAAKhJ,UACtC,QAdmBmG,EAAOV,WAAW7G,GAkBzC,QAIJ,KAnLF,GAA0CsC,EAAAA,IAA1C,EAKiBC,OAAS,cAL1B,EAMiBuD,MAAQ,qDANzB,EAOiB6C,aAAeC,EAAAA,EAAAA,YAPhC,kCACEnG,EAAAA,EADF,iFACuBxC,IADvB,uCAEEwC,EAAAA,EAFF,iFAEqBgG,SAFrB,sCAGEhG,EAAAA,EAHF,iFAGqBpC,QAHrB,M,qTCVa4C,GAAb,iCAIqCtF,EAAAA,GAJrC,iCAKgDqF,EAAAA,GALhD,uRA0JSsH,GAAK,SAAClJ,GAAD,OAAuB,EAAKF,OAAOqH,qBAAqBnH,EAAW,EAAnE,EA1Jd,0CAaC,SACCmJ,EACAC,GAEC,WADDlH,EACC,uDADQtF,KAAKkD,OAAOqC,MAGfC,EAAoC,iBAApB+G,EACnBvM,KAAKiC,KAAKsE,SAASgG,GACnBA,EAEGpD,GAAU1H,EAAAA,EAAAA,IAAY+K,GAGtBC,EAAQ,IAAAtD,GAAO,KAAPA,GAAgB,SAAArD,GAAM,eAAI,EAAK4G,cAC5C5G,EADuC,oBAEvCA,EAAO6G,cAAchL,IAAI6D,EAAOxD,WAFO,aAEvC,EAAqCL,IAAI2D,EAAOtD,WAFT,QAEgB,GAFpB,IAMpC,IAAAyK,GAAK,KAALA,GAAW,SAACG,EAAGC,GAAJ,OAAUD,EAAExJ,UAAYyJ,EAAEzJ,SAA1B,IAGX,IAlBC,EAkBKiF,EAAO,CAACyE,OAAQ,EAAGlJ,MAAO,EAAGmJ,YAAa,GAlB/C,UAmBkBN,GAnBlB,IAmBD,2BAA0B,WAAfO,EAAe,QACP,UAAdA,EAAKC,MACW,IAAf5E,EAAKzE,QACRyE,EAAK0E,YAAcC,EAAK5J,WAEzBiF,EAAKzE,UAGLyE,EAAKzE,QACc,IAAfyE,EAAKzE,QACRyE,EAAKyE,QAAUE,EAAK5J,UAAYiF,EAAK0E,cAIvC/M,KAAKwE,MAAL,mCAAqBgB,EAAOrD,KAA5B,aAAoC6K,EAAKC,KAAzC,gBAAoDjN,KAAKsM,GAAGU,EAAK5J,WAAjE,oBAAsFiF,EAAKzE,OAC3F,CAlCA,+BAoCD,OAAOyE,EAAKyE,MACZ,GAtDF,2BAwDC,SAAsBhH,EAAeoH,GAEpC,IACIC,EACAC,EAJuD,EAErDX,EAAgB,GAFqC,UAMvCS,GANuC,IAM3D,2BAA4B,KAEO,EAFxBvH,EAAiB,QAER,gBAAfA,EAAMN,KAMG,MAAT8H,IAKJV,EAAMjM,KAAN,MAAAiM,GAAK,OAASzM,KAAKqN,qBAClBvH,EACAqH,EAAM/J,UACNuC,EAAMvC,aAEP+J,OAAQ7E,IAfF,QAAL,EAAA6E,SAAA,QAAAA,EAAUxH,GACVyH,EAAUzH,EAeX,CAzB0D,+BA4B3D,GAAa,MAATwH,EAAe,SAEZG,EAAc,UAAGtN,KAAKiC,KAAK2D,UAAUuH,EAAM3H,eAA7B,aAAG,EAAmCzC,SACpDwK,EAA2B,MAAlBD,EACZtN,KAAKkD,OAAOsK,sBACZpJ,KAAKqJ,KAAI,UAACL,SAAD,QAAYD,GAAO/J,UAAYkK,EAAgBtN,KAAKkD,OAAOsK,uBAEvEf,EAAMjM,KAAN,MAAAiM,GAAK,OAASzM,KAAKqN,qBAClBvH,EACAqH,EAAM/J,UACNmK,IAED,CAED,OAAOd,CACP,GAnGF,kCAqGC,SAA6B3G,EAAeqH,EAAeI,GAC1D,IADkF,EAC9EG,EAAQ,CAACP,MAAAA,EAAOI,OAAAA,GACdI,EAAc,CAACD,GAGfE,EAAU5N,KAAK2G,gBAAgBkH,WAAW,CAC/C5K,MAAOkK,EACP9J,IAAKkK,EACLO,YAAa,SAAAvI,GAAK,OAAIA,EAAMwI,OAASjI,EAAOiI,IAA1B,EAClBlH,MAAO,CAAC,kBATyE,UAY7D+G,GAZ6D,IAYlF,2BAA8B,eAEgC,MAQE,MAVrDI,EAAmB,QAE7B,GAAIA,EAAO/K,MAAQyK,EAAMP,OAASa,EAAO3K,KAAOqK,EAAMP,MACrDnN,KAAKwE,MAAL,yCAA2BxE,KAAKsM,GAAGoB,EAAMP,OAAzC,aAAmDnN,KAAKsM,GAAGoB,EAAMH,QAAjE,kBAAiFvN,KAAKsM,GAAG0B,EAAO3K,KAAhG,aAAwGrD,KAAKsM,GAAGoB,EAAMH,QAAtH,MAEAG,EAAMP,MAAQa,EAAO3K,SAKtB,GAAI2K,EAAO/K,OAASyK,EAAMH,QAAUS,EAAO3K,IAAMqK,EAAMH,OACtDvN,KAAKwE,MAAL,uCAAyBxE,KAAKsM,GAAGoB,EAAMP,OAAvC,aAAiDnN,KAAKsM,GAAGoB,EAAMH,QAA/D,kBAA+EvN,KAAKsM,GAAGoB,EAAMP,OAA7F,aAAuGnN,KAAKsM,GAAG0B,EAAO/K,OAAtH,MAEAyK,EAAMH,OAASS,EAAO/K,WAKvB,KAAI+K,EAAO/K,MAAQyK,EAAMP,OAASa,EAAO3K,IAAMqK,EAAMH,QAArD,CAIAvN,KAAKwE,MAAL,+CAAqBxE,KAAKsM,GAAGoB,EAAMP,OAAnC,aAA6CnN,KAAKsM,GAAGoB,EAAMH,QAA3D,kBAA2EvN,KAAKsM,GAAGoB,EAAMP,OAAzF,aAAmGnN,KAAKsM,GAAG0B,EAAO/K,OAAlH,gBAA+HjD,KAAKsM,GAAG0B,EAAO3K,KAA9I,aAAsJrD,KAAKsM,GAAGoB,EAAMH,QAApK,MAGA,IAAMU,EAAgBP,EACtBA,GAAQ,UAAIA,GACZC,EAAYnN,KAAKkN,GAEjBO,EAAcV,OAASS,EAAO/K,MAC9ByK,EAAMP,MAAQa,EAAO3K,GAVpB,CAWD,CA3CiF,+BA8ClF,OAAO,IAAAsK,GAAW,KAAXA,GAAoB,SAAAD,GAAK,MAAI,CACnC,CAACT,KAAM,QAAS7J,UAAWsK,EAAMP,OACjC,CAACF,KAAM,SAAU7J,UAAWsK,EAAMH,QAFH,GAIhC,KAvJF,GAA8BjJ,EAAAA,IAA9B,EACiBC,OAAS,WAD1B,EAEiBC,OAAQ,EAFzB,kCAIEC,EAAAA,EAJF,iFAI8BxC,IAJ9B,6CAKEwC,EAAAA,EALF,iFAK8BkC,eAL9B,M,8HCXauH,EAAb,yMAICC,WAAa,EAAKlM,KAAKsE,SAAS6H,UAJjC,Y,SAA8BC,GAAjBH,EACI3J,OAAS,WADb2J,EAEIpG,MAAQ,+C,8ZCanBwG,EAAuB,CAC5B,EAAG,EACH,IAAM,EACN,KAAM,GAKDC,EAAmB,CACxB,EAAGC,EAAAA,GAAAA,OACH,EAAGA,EAAAA,GAAAA,OAUSC,GAAb,iCAGkChP,EAAAA,GAHlC,iCAI8BE,EAAAA,GAJ9B,iCAKuCqF,EAAAA,GALvC,iCAMqC0J,EAAAA,IANrC,gWAUWC,eAAyB,yCAVpC,EAYWC,YACT,cAAG7C,MAAO,CAAC8C,OAAQ,WAAYxE,QAAS,kBAAM,EAAKnH,OAAO4L,SAASL,EAAQlK,OAAnC,EAAxC,UACC,SAAC,IAAD,CAAmBwK,QAASN,EAAQ3G,UAdvC,EAiBWkH,mBAA+B,SAAC,EAAAjN,MAAD,CAAOC,GAAG,uBAAV,mNAC0G,EAAK4M,cAlBzJ,EAqBWK,SAAWV,EArBtB,EAuBSW,OAAkC,GAvB3C,EAwBSC,sBAxBT,IAyBSC,qBAzBT,IA0BSC,sBA1BT,IA2BSC,UAAqB,GA3B9B,2CA6BC,WACC,IAAMC,GAAenK,EAAAA,EAAAA,MAAgBE,OAAOtF,KAAKkD,OAAOqC,MAAMvD,IAE9DhC,KAAKS,aAAa8O,EAAalK,KAAK,WAAYrF,KAAKwP,aACrDxP,KAAKS,aAAa8O,EAAalK,KAAK,UAAWrF,KAAK8I,QACpD9I,KAAKS,cAAa2E,EAAAA,EAAAA,MAAgBC,KAAK,YAAarF,KAAKU,YACzDV,KAAKS,cAAa2E,EAAAA,EAAAA,MAAgBC,KAAK,SAAUrF,KAAKyP,WACtD,GApCF,yBAsCC,SAAoB9J,GACnB3F,KAAKmP,iBAAmBxJ,CACxB,GAxCF,oBA0CC,SAAeA,GACd,IAAM5F,EAASC,KAAKiC,KAAK8G,UAAUpD,EAAM5F,QAGpCA,IAAUA,EAAO2P,aAKlB1P,KAAK2P,OAAO5P,GACfC,KAAKkP,OAAO1O,KAAKmF,IAId3F,KAAKmP,kBAAoBnP,KAAKmP,iBAAiBpP,SAAWA,EAAOiC,GAEpEhC,KAAKqP,kBAAL,kBACI1J,GADJ,IAGCvC,UAAWpD,KAAKmP,iBAAiB/L,YAIlCpD,KAAKqP,iBAAmB1J,EAIzB3F,KAAKmP,sBAAmB7G,EAGxBtI,KAAK4P,YAGL5P,KAAKoP,gBAAkBpP,KAAKqP,iBAC5BrP,KAAKkP,OAAS,IACd,GA7EF,wBA+EC,WAEKlP,KAAKoP,iBACRpP,KAAK4P,YAIN5P,KAAK6P,YAAY1O,IAAI,IAAI2O,EAAAA,GAAiB,CACzC/H,KAAM/H,KAAK2O,eACXzO,QAASF,KAAKgP,kBACde,KAAK,kBACJ/N,GAAG,mBADC,gHAEGhC,KAAKsP,UAAU9E,UAIvBwF,MAAOhQ,KAAKiP,SACZhH,MAAOjI,KAAKsP,UAAU9E,SAEvB,GAlGF,uBAoGC,WAAoB,QACnB,GAA6B,MAAzBxK,KAAKqP,iBAAT,CAEA,IAAMY,EAAgB,oBAAGjQ,KAAKoP,uBAAR,aAAG,EAAsBhM,iBAAzB,QAAsCpD,KAAKkD,OAAOC,KAAKC,UACvE8M,EAAclQ,KAAKqP,iBAAiBjM,UACvC6M,EACAjQ,KAAK2G,gBAAgBC,YAAY,CAClC3D,MAAOgN,EACP5M,IAAKrD,KAAKqP,iBAAiBjM,YAGvB+M,EAAe,CACpBf,gBAAiBpP,KAAKoP,gBACtBC,iBAAkBrP,KAAKqP,iBACvBa,YAAAA,EACAhB,OAAQlP,KAAKkP,QAGc,IAAxBiB,EAAMjB,OAAO1E,QAIbxK,KAAKoQ,WAAWD,IACnBnQ,KAAKsP,UAAU9O,KAAK2P,EAtBwB,CAwB7C,GA7HF,oBA+HC,SAAepQ,GACd,OAAQA,EAAOsQ,QAAUtQ,EAAO2P,UAChC,GAjIF,wBAmIC,SAAmBS,GAAc,eAE1BG,EAAa,MAAAH,EAAMjB,QAAN,QAClB,SAAAvJ,GAAK,OACA,EAAKgB,gBAAgB4J,SAAS,CAACnN,UAAWuC,EAAMvC,UAAWyD,MAAO,CAAC,mBACpElB,EAAMvC,WAAa,EAAKF,OAAOC,KAAKC,SAFnC,IAGJoH,OAEIgG,EAAM,QAAI,EAA0B,MAAzBL,EAAMf,gBAA2BpP,KAAKkE,SAASuM,eAAeN,EAAMf,sBAAmB9G,SAA5F,QAA0Gd,EAAAA,EAEtH,OAAO2I,EAAMD,YAAcM,GAAUF,EAAatQ,KAAK0Q,aAAaP,EACpE,GA9IF,wBAgJC,WAEKnQ,KAAKkP,OAAO1E,OAAS,GACxBxK,KAAK4P,YAIN5P,KAAKkP,OAAS,GACdlP,KAAKoP,qBAAkB9G,CACvB,GAzJF,0BAgKC,SAAuB6H,GAAsB,QAC5C,GAA6B,MAAzBA,EAAMf,gBACT,OAhLwB,EAmLzB,IAAMlL,EAAWlE,KAAKkE,SAASyM,SAASR,EAAMf,iBAC9C,OAAgB,MAAZlL,EApLqB,GAwLV,WAAG0M,EAAAA,EAAAA,IAAkBtC,EAAsBpK,UAA3C,QAxLU,KAyLT,UAAGlE,KAAKkE,SAASuM,eAAeN,EAAMf,wBAAtC,QAA0D5H,EAAAA,GA1LrC,KA4L6B,EAAI,EACtE,GA9KF,oBAgLC,WAAkB,aACjB,GAA8B,IAA1BxH,KAAKsP,UAAU9E,OAClB,OAAO,EAGR,IAAMqG,EAAS,MAAA7Q,KAAKsP,WAAL,QAAmB,SAAA7L,GAAI,oBAAK,CAC1CqN,IAAG,oBAAErN,EAAK2L,uBAAP,aAAE,EAAsBhM,iBAAxB,QAAqC,EAAKF,OAAOC,KAAKC,UACzD0E,MAAO,CACN5H,SAAS,iCACR,4BAAS,EAAKgD,OAAOqH,qBAAZ,oBAAiC9G,EAAK2L,uBAAtC,aAAiC,EAAsBhM,iBAAvD,QAAoE,EAAKF,OAAOC,KAAKC,aADtF,OAGR,kBACCpB,GAAG,2BADJ,gEAEQyB,EAAKyL,OAAO1E,UALZ,KAUP,EAAKtH,OAAOgF,eAAezE,EAAKyM,aAVzB,KAYR,SAAC,EAAAnO,MAAD,CAAOC,GAAG,4BAAV,0BAZQ,QAgBV9B,QAAS,CACRA,SAAS,SAAC,IAAD,CAAUgN,OAAM,yBACI,MAAxBzJ,EAAK2L,gBAA0B,CAAC3L,EAAK2L,iBAAmB,KADpC,OAErB3L,EAAKyL,YAtB2B,IA2BtC,OAAO,SAAC,IAAD,CACN6B,WAAW,EACXF,OAAQA,EACRG,QAAM,EACNC,OAAK,GAEN,KAtNF,GAA6B3M,EAAAA,IAA7B,EACiBC,OAAS,UAD1B,EAQiBuD,MAAQ,oDARzB,sCAGErD,EAAAA,EAHF,iFAGuBP,QAHvB,kCAIEO,EAAAA,EAJF,iFAIuBxC,IAJvB,6CAKEwC,EAAAA,EALF,iFAKqBkC,eALrB,yCAMElC,EAAAA,EANF,iFAMuBoL,WANvB,M,oKCpCarQ,EAAb,+GAAoC0R,EAAAA,GAAvB1R,EACIY,KAAAA,IAAAA,EAAAA,IAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GACZ8Q,EAAAA,EAAAA,MAAAA,CACH,gBACA,eACA,eACA,OACA,YACA,cACA,aACA,WACA,YACA,oBACA,kBACA,aACA,iB,8YCUIC,GAAAA,WAGL,WAAYC,IAAoE,oBAFxEA,mBAEwE,EAC/EpR,KAAKoR,cAAgBA,CACrB,C,uCAGD,WAAqC,G,oBAErC,SAAcC,GAA+E,WACtFC,EAAQ,KAAAD,GAAO,KAAPA,GAAY,SAAAE,GAAC,OAAI,EAAKH,cAAcG,EAAvB,IAC3B,IAAID,EAAME,OAAM,SAAAC,GAAI,OAtBf,IAsBmBA,CAAJ,IAIpB,MAAO,CACNC,OAAQ,QACRC,OAAQ,CACPA,QAAQ,UAAC,GAAA5P,MAAD,CAAOC,GAAG,sDAAV,iCACR4P,SAAU,gBAEXxR,KAAM,KAAAkR,GAAK,KAALA,GAAU,SAAAO,GACf,OAhCa,IAgCTA,GACI,UAAC,GAAA9P,MAAD,CAAOC,GAAG,wCAAV,sCAhCI,IAmCR6P,GACI,UAAC,GAAA9P,MAAD,CAAOC,GAAG,uCAAV,+CAGD,yBACP,IAEF,K,EAlCImP,GAwCOW,IAAb,iCAK8B/M,GAAAA,GAL9B,iCAMsCoC,GAAAA,GANtC,4RAQC4K,WAAa,EAAK9P,KAAKC,QAAQ8P,cARhC,EASC7D,WAAa,EAAKlM,KAAKsE,SAASyL,cATjC,EAYSC,iBAIH,GAhBN,4CAkBC,YACC,4DAEA,IAAMC,GAAiB9M,EAAAA,GAAAA,MAAgBC,KAAK,eAAeG,OAAOxF,KAAKiC,KAAKsE,SAASyL,cAAchQ,IACnGhC,KAAKS,aAAayR,EAAgBlS,KAAKmS,iBAEvC,IAAMxD,EAAiB3O,KAAKiC,KAAKC,QAAQ8P,cAAcjK,KACjDqK,GAAuB,UAAC,MAAD,CAAYrS,OAAO,gBAAgBsS,UAAU,IAC1ErS,KAAKsS,aAAa,IAAIC,GAAAA,GAA0B,CAC/CC,aAhFmB,EAiFnBC,eAAgBzS,KAAKyS,eACrBC,WAAW,EACX/D,eAAAA,EACAK,mBAAmB,UAAC,GAAAjN,MAAD,CAAOC,GAAG,uCAAV,8EACuB,UAAC,MAAD,CAAYjC,OAAO,qBAE7DqS,qBAAAA,EACAO,cAAe,CACd,EAAGnE,GAAAA,GAAAA,MACH,EAAGA,GAAAA,GAAAA,OACH,EAAGA,GAAAA,GAAAA,UAILxO,KAAKsS,aAAa,IAAInB,GAAmBnR,KAAKoR,cAAcwB,KAAK5S,OACjE,GA3CF,6BAoDC,SAAwB2F,GACvB,IAAMkN,EAAc7S,KAAKyG,OAAO9E,IAAIgE,EAAMG,QACtC+M,EAAYC,kBACf9S,KAAKiS,iBAAiBzR,KAAK,CAC1B4C,UAAWuC,EAAMvC,UACjB2P,iBAAkBpN,EAAML,SAAWtF,KAAKkD,OAAOqC,MAAMvD,GACrDgR,IAAKH,EAAYG,KAGnB,GA7DF,2BAiEC,SAAsBC,GAAqD,UACpEC,GAAuB,UAACD,aAAD,EAACA,EAAY5P,WAAb,QAAoB4P,EAAWhQ,OAASgQ,EAAWhQ,MAC1EkQ,EAAgBF,EAAWhQ,MAAQjD,KAAKmO,WAAWpL,SAazD,OAT6B,OAAA/C,KAAKiS,kBAAL,QAA6B,SAAAmB,GACzD,OACEA,EAAGL,kBACJI,GAAiBC,EAAGhQ,WACpBgQ,EAAGhQ,WAAa6P,EAAWhQ,KAE5B,IAGwBuH,OAAS,EAhIpB,EAqIe,OAAAxK,KAAKiS,kBAAL,QAA6B,SAAAmB,GACzD,OACEA,EAAGL,kBACJE,EAAWhQ,OAASmQ,EAAGhQ,WACvBgQ,EAAGhQ,WAAa6P,EAAWhQ,MAAQiQ,CAEpC,IAGwB1I,OAAS,EA/InB,EADV,CAsJL,KApGF,GAAkC6I,GAAAA,IAAlC,EACiB9O,OAAS,eAD1B,EAEiBuD,MAAQ,uDAFzB,EAGiB6C,aC5DD,GDyDhB,qCAKElG,GAAAA,EALF,iFAKqBgC,MALrB,6CAMEhC,GAAAA,EANF,iFAMqBgO,cANrB,O,+NE/CMa,GAAyB,IAmDzBC,GAAYC,KAAAA,IAAU,GAAI,IAAK,KAAKC,KAAK,KAAMC,WAIxCC,IAAb,iCAI8B5O,GAAAA,GAJ9B,iCAKiC6O,GAAAA,GALjC,iCAMiClU,GAAAA,GANjC,iCAOgCmU,GAAAA,GAPhC,iCAQmCnF,GAAAA,IARnC,iCASgC9O,GAAAA,IAThC,+aAgBSkU,aAAe,EAhBxB,EAiBSC,YAA2B,CAClCvI,aAASlD,EACTzF,QAAS,IAnBX,EAqBSmR,cAAgB,EAAK9Q,OAAOC,KAAKC,UArB1C,EAsBS6Q,WAAa,EAAK/Q,OAAOC,KAAKC,UAtBvC,EAuBS8Q,YAAc,EAAKhR,OAAOC,KAAKC,UAvBxC,EAyBS+Q,SAAW,EAAKhT,IAAI,IAAIiT,GAAAA,GAAa,CAC5CC,QApCe,EAqCfC,MAAO,CACNxS,OAAO,UAAC,GAAAC,MAAD,CAAOC,GAAG,0BAAV,gCACPuS,MAAOhB,IAERiB,gBAAgB,EAChBC,eAAe,KAhCjB,4CAmCC,YACC,4DAEA,IAAMlF,GAAenK,EAAAA,GAAAA,MAAgBE,OAAOtF,KAAKkD,OAAOqC,MAAMvD,IAE9DhC,KAAKS,aAAa8O,EAAalK,KAAK,UAAUtF,OAAOC,KAAKiC,KAAKC,QAAQwS,YAAY1S,IAAKhC,KAAK2U,kBAC7F3U,KAAKS,aAAa8O,EAAalK,KAAK,UAAUtF,OAAOC,KAAKiC,KAAKC,QAAQ0S,WAAW5S,IAAKhC,KAAK6U,kBAC5F7U,KAAKS,aAAa8O,EAAalK,KAAK,UAAUtF,OAAOC,KAAKiC,KAAKC,QAAQ4S,SAAS9S,IAAKhC,KAAK+U,gBAC1F/U,KAAKS,aAAa8O,EAAalK,KAAK,UAAUtF,OAAOC,KAAKiC,KAAKC,QAAQ8S,UAAUhT,IAAKhC,KAAKiV,iBAC3FjV,KAAKS,cAAa2E,EAAAA,GAAAA,MAAgBG,MAAMvF,KAAKkD,OAAOqC,MAAMvD,IAAIqD,KAAK,SAAUrF,KAAKkV,aAClFlV,KAAKS,aAAa,WAAYT,KAAKU,WAEnC,GA/CF,+BAkDC,WACC,IAAMyU,EAAsB,GAiB5B,OAfInV,KAAKyG,OAAO+E,QAAQ4J,UAAUpV,KAAKiC,KAAKsE,SAAS8O,aAAarT,KACjEmT,EAAO3U,KAAK,gBAGTR,KAAKyG,OAAO+E,QAAQ4J,UAAUpV,KAAKiC,KAAKsE,SAASyL,cAAchQ,KAClEmT,EAAO3U,KAAK,kBAIZR,KAAKyG,OAAO+E,QAAQ4J,UAAUpV,KAAKiC,KAAKsE,SAAS+O,UAAUtT,KAC3DhC,KAAKyG,OAAO+E,QAAQ4J,UAAUpV,KAAKiC,KAAKsE,SAASgP,eAAevT,MAEhEmT,EAAO3U,KAAK,aAGN2U,CACP,GArEF,kCAuEC,SAA6B/R,GAAmB,WAC/C,OAAO,UAACoS,GAAA,EAAD,CACNtL,UAAQ,EACRC,SAAO,EACPpC,KAAK,OACLqC,KAAK,QACLC,QAAS,kBAAM,EAAKhI,SAASiI,KAAKlH,EAAY,EAAKF,OAAOC,KAAKC,UAAWA,EAAY,EAAKF,OAAOC,KAAKC,UAA9F,EACTlD,QAASF,KAAKkD,OAAOqH,qBAAqBnH,IAE3C,GAhFF,8BAmFC,WACiC,MAA5BpD,KAAK+T,YAAYvI,UACpBxL,KAAK+T,YAAYvI,QAAQzI,SAAW/C,KAAKkD,OAAOsK,sBAAwBxN,KAAK+T,YAAYvI,QAAQvI,MACjGjD,KAAK+T,YAAYlR,QAAQrC,KAAKR,KAAK+T,YAAYvI,SAC/CxL,KAAK+T,YAAYvI,aAAUlD,EAE5B,GAzFF,yBA2FC,WACC,IAAMmN,EAAczV,KAAKkD,OAAOsK,sBAAwBxN,KAAKgU,cAC7B,MAA5BhU,KAAK+T,YAAYvI,UACpBxL,KAAK8T,cAAgB2B,EACjBzV,KAAK8T,cAAgB,IAExB9T,KAAK0V,mBACL1V,KAAK8T,aAAe,IAItB9T,KAAKgU,cAAgBhU,KAAKkD,OAAOsK,qBACjC,GAvGF,8BAyGC,SAAiB7H,GAChB3F,KAAK2V,cACL3V,KAAKiU,WAAatO,EAAMvC,UAGxBpD,KAAKmU,SAASyB,SAvHM,EAwHpB,GA/GF,8BAiHC,SAAiBjQ,GAChB3F,KAAK2V,cACL3V,KAAKkU,YAAcvO,EAAMvC,UA7HV,IA+HXpD,KAAKmU,SAASlM,QAEjBjI,KAAK8T,aAAeR,GACpBtT,KAAK+T,YAAYvI,QAAU,CAC1BvI,MAAOjD,KAAKkD,OAAOsK,sBACnBzK,SAAU/C,KAAK8T,aACf+B,UAAW,GACXC,WAAY,GACZC,eAAgB,CACf,aAAgB/V,KAAKgB,UAAUgV,UAAU,gBACzC,UAAahW,KAAKgB,UAAUgV,UAAU,gBACtC,cAAiBhW,KAAKgB,UAAUgV,UAAU,kBAE3CC,YAAajW,KAAKkW,oBAClBC,mBAAoB,CACnB,cAAgB,EAChB,WAAa,EACb,eAAiB,GAElBC,cAAe,KACfC,QAAQ,EACRC,aAAa,EACbC,iBAAiB,EACjBC,cAAc,GAEfxW,KAAKmU,SAASsC,MAtJC,GAwJhB,GAhJF,4BAkJC,SAAe9Q,GACkB,MAA5B3F,KAAK+T,YAAYvI,QAWpBxL,KAAK+T,YAAYvI,UAChBxL,KAAK+T,YAAYvI,QAAQqK,UAAUa,MAAK,SAAAC,GAAQ,OAAIA,EAASvT,YAAcuC,EAAMvC,SAAjC,KAGjDpD,KAAK+T,YAAYvI,QAAQqK,UAAUrV,KAAK,CACvC4C,UAAWuC,EAAMvC,UACjBwT,MAAO5W,KAAKkW,oBACZnW,OAAQ,aAhBTC,KAAK6W,UAAUC,QAAQ9W,KAAM,oBAC5B,UAAC,GAAA+B,MAAD,CAAOC,GAAG,qCAAV,oFACC,UAAC,OAAD,WAAgBhC,KAAKiC,KAAKC,QAAQ4S,cAiBrC,GAxKF,6BA0KC,SAAgBnP,GACkB,OAA7B3F,KAAK+T,YAAYvI,QAWpBxL,KAAK+T,YAAYvI,UAChBxL,KAAK+T,YAAYvI,QAAQsK,WAAWY,MAAK,SAAAK,GAAS,OAAIA,EAAU3T,YAAcuC,EAAMvC,SAAlC,KAGnDpD,KAAK+T,YAAYvI,QAAQsK,WAAWtV,KAAK,CACxC4C,UAAWuC,EAAMvC,UACjBwT,MAAO5W,KAAKkW,oBACZnW,OAAQ,cAhBTC,KAAK6W,UAAUC,QAAQ9W,KAAM,qBAC5B,UAAC,GAAA+B,MAAD,CAAOC,GAAG,sCAAV,oFACC,UAAC,OAAD,WAAgBhC,KAAKiC,KAAKC,QAAQ8S,eAiBrC,GAhMF,yBAkMC,WAEChV,KAAK2V,cACL3V,KAAK8T,aAAe,EACpB9T,KAAK0V,kBACL,GAvMF,gCAyMC,SAAmBzS,GAClB,IADiC,EAC3BoO,EAAUrR,KAAKgX,SAASC,mBAAmBhU,GAC3CI,EAAMJ,EAAQqQ,GAFa,WAIVjC,GAJU,IAIjC,2BAAgC,KAArB6F,EAAqB,QAC/B,GAAIA,EAASjU,MAAQI,EACpB,OAAO6T,EAASjU,KAEjB,CARgC,+BAUjC,OAAO,IACP,GApNF,gCAsNC,WAAqB,iBACKjD,KAAK+T,YAAYlR,SADtB,IACpB,2BAAmD,KAAxCsU,EAAwC,QAElDA,EAAWf,cAAgBpW,KAAKoX,mBAAmBhT,KAAKqJ,IACvD0J,EAAWlU,MAAQjD,KAAKiC,KAAKC,QAAQmV,UAAUC,SAC/CtX,KAAKkD,OAAOC,KAAKC,UAAYpD,KAAKkD,OAAOC,KAAKJ,WAI/CoU,EAAWd,OAASc,EAAWlU,MAAQkU,EAAWpU,UAAa/C,KAAKkD,OAAOC,KAAKC,UAAYpD,KAAKkD,OAAOC,KAAKJ,SAO7G,IAAIwU,EAAsBJ,EAAWlB,YAAYzL,OAAS,EACpDgN,EAAoD,IAAlCL,EAAWlB,YAAYzL,QAA6C,OAA7B2M,EAAWf,eAA0Be,EAAWlU,MA5RtF,IA4RqHjD,KAAKkD,OAAOC,KAAKC,UAAYpD,KAAKkD,OAAOC,KAAKJ,SAExL0U,GAA0B,EAE1BC,OAA+C,EACnD,IAAKA,KAAWP,EAAWpB,eAE1BoB,EAAWhB,mBAAmBuB,GAAWP,EAAWpB,eAAe2B,IApS3C,KAoS8EP,EAAWpB,eAAe2B,IAnSxG,IAsSxBD,EAA0BN,EAAWhB,mBAAmBuB,IAAYD,EAGpEF,EAAsBJ,EAAWpB,eAAe2B,GAAWP,EAAWpU,UAAYwU,EAInFJ,EAAWb,aAAeiB,GAAuBE,GAA2BD,EAG5EL,EAAWZ,gBAA+C,OAA7BY,EAAWf,gBAA2BmB,GAAuBE,EAI1FN,EAAWX,cAAgBe,GAAuBJ,EAAWb,cAAiD,IAAjCa,EAAWrB,WAAWtL,QAA0D,IAA1C2M,EAAWrB,WAAW,GAAGc,MAAMpM,MAClJ,CA1CmB,+BA2CpB,GAjQF,mCA0QC,WAEC,GAAIxK,KAAK+T,YAAYlR,QAAQ2H,OAAS,EAErC,OA9RI,EAmSL,GA7Re,IA6RXxK,KAAKmU,SAASlM,OAGbjI,KAAKkU,YAAclU,KAAKiU,YAETjU,KAAKkD,OAAOC,KAAKJ,UAAY/C,KAAKiU,WAAajU,KAAKkD,OAAOC,KAAKC,WA3UnD,IA+U9B,OA3SgB,EAoTnB,IAAMuU,EAAa3X,KAAK+T,YAAYlR,QAAQ7C,KAAK+T,YAAYlR,QAAQ2H,OAAS,GAC9E,OAAImN,EAAW5U,SAAWuQ,IAEItT,KAAKkD,OAAOC,KAAKJ,UAAY/C,KAAKiU,WAAajU,KAAKkD,OAAOC,KAAKC,WAIlEuU,EAAW5U,SA9VN,IAoCjB,EAFX,CAmUL,GAnTF,wBAqTC,WAAa,UACZ/C,KAAK2V,cACL3V,KAAK0V,mBACL1V,KAAK4X,qBACL,IAAMC,EAAW,OAAA7X,KAAK+T,YAAYlR,SAAjB,QAAgC,SAAAiV,GAAM,OAAKA,EAAOzB,QAAUyB,EAAOtB,YAA7B,IAA2ChM,OAC5FuN,EAAW,OAAA/X,KAAK+T,YAAYlR,SAAjB,QAAgC,SAAAiV,GAAM,OAAKA,EAAOzB,QAAuC,IAA7ByB,EAAOhC,WAAWtL,MAAxC,IAAsDA,OACvGwN,EAAe,OAAAhY,KAAK+T,YAAYlR,SAAjB,QAAgC,SAAAiV,GAAM,OAAKA,EAAOzB,QAAUyB,EAAOjC,UAAUrL,OA3W9D,CA2WuB,IAA+EA,OACpIyN,EAAajY,KAAKkY,wBA0DxB,GAxDAlY,KAAK6P,YAAY1O,IAAI,IAAI2O,GAAAA,GAAiB,CACzC/H,KAAM/H,KAAKiC,KAAKC,QAAQwS,YAAY3M,KACpC7H,SAAS,UAAC,GAAA6B,MAAD,CAAOC,GAAG,qCAAV,0KAC4EmW,SA3UvE,GA0UL,aACI,UAAC,OAAD,WAAgBnY,KAAKiC,KAAKC,QAAQwS,iBAE/CzM,MAAOjI,KAAKmU,SAASiE,QACrBpI,MAAO,CACN,EAAGxB,GAAAA,GAAAA,OACH,EAAGA,GAAAA,GAAAA,OAEJuB,KAAK,UAAC,GAAAhO,MAAD,CAAOC,GAAG,iCAAV,0HACgChC,KAAKmU,SAASiE,QAA8DD,SAnVnG,QAwVfnY,KAAK6P,YAAY1O,IAAI,IAAI2O,GAAAA,GAAiB,CACzC/H,KAAM/H,KAAKiC,KAAKC,QAAQ8S,UAAUjN,KAClC7H,SAAS,UAAC,GAAA6B,MAAD,CAAOC,GAAG,oCAAV,kFACwC,UAAC,OAAD,WAAgBhC,KAAKiC,KAAKC,QAAQ8S,eAEnF/M,MAAO8P,EACP/H,MAAO,CACN,EAAGxB,GAAAA,GAAAA,OACH,EAAGA,GAAAA,GAAAA,OAEJuB,KAAK,UAAC,GAAAhO,MAAD,CAAOC,GAAG,+BAAV,0FAA0C+V,SAAAA,GAA1C,aAAsG,UAAC,OAAD,WAAgB/X,KAAKiC,KAAKC,QAAQ8S,kBAI9IhV,KAAK6P,YAAY1O,IAAI,IAAI2O,GAAAA,GAAiB,CACzC/H,KAAM/H,KAAKiC,KAAKC,QAAQ4S,SAAS/M,KACjC7H,SAAS,UAAC,GAAA6B,MAAD,CAAOC,GAAG,mCAAV,mFAA6F,UAAC,OAAD,WAAgBhC,KAAKiC,KAAKC,QAAQ4S,cACxI7M,MAAO+P,EACPhI,MAAO,CACN,EAAGxB,GAAAA,GAAAA,OACH,EAAGA,GAAAA,GAAAA,OAEJuB,KAAK,UAAC,GAAAhO,MAAD,CAAOC,GAAG,+BAAV,yGAA0CgW,aAAAA,GAA1C,aAAoH,UAAC,OAAD,WAAgBhY,KAAKiC,KAAKC,QAAQ4S,iBAKxJ+C,EAAW,GACd7X,KAAK6P,YAAY1O,IAAI,IAAIkX,GAAAA,GAAW,CACnCtQ,KAAM/H,KAAKiC,KAAKC,QAAQ8S,UAAUjN,KAClC7H,SAAS,UAAC,GAAA6B,MAAD,CAAOC,GAAG,yCAAV,gOACW,UAAC,OAAD,WAAgBhC,KAAKiC,KAAKC,QAAQ8S,aAAiD,UAAC,OAAD,WAAgBhV,KAAKiC,KAAKC,QAAQmT,gBAAkB,UAAC,OAAD,WAAgBrV,KAAKiC,KAAKC,QAAQoW,gBAAqB,UAAC,OAAD,WAAgBtY,KAAKiC,KAAKC,QAAQ8P,mBAEpP/C,SAAUT,GAAAA,GAAAA,MACVuB,KAAK,UAAC,GAAAhO,MAAD,CAAOC,GAAG,8CAAV,kIACoG6V,SAAAA,GADpG,aACC,UAAC,OAAD,WAAgB7X,KAAKiC,KAAKC,QAAQ8S,kBAhYvB,IAqYfiD,EACHjY,KAAK6P,YAAY1O,IAAI,IAAIkX,GAAAA,GAAW,CACnCtQ,KAAM/H,KAAKiC,KAAKC,QAAQ4S,SAAS/M,KACjC7H,SAAS,UAAC,GAAA6B,MAAD,CAAOC,GAAG,6BAAV,6HACTiN,SAAUT,GAAAA,GAAAA,MACVuB,KAAK,UAAC,GAAAhO,MAAD,CAAOC,GAAG,iCAAV,0GAIA,GA7YS,IA6YLiW,EAAmD,CAC7D,IAAMM,GAAwBvY,KAAKkD,OAAOC,KAAKJ,UAAY/C,KAAKiU,WAAajU,KAAKkD,OAAOC,KAAKC,YAAc,IACtGoV,EAAqBxY,KAAK+T,YAAYlR,QAAQ7C,KAAK+T,YAAYlR,QAAQ2H,OAAS,GAAGzH,SAAW,IAGpG/C,KAAK6P,YAAY1O,IAAI,IAAIkX,GAAAA,GAAW,CACnCtQ,KAAM/H,KAAKiC,KAAKC,QAAQ4S,SAAS/M,KACjC7H,SAAS,UAAC,GAAA6B,MAAD,CAAOC,GAAG,oCAAV,wQAAuO,UAAC,MAAD,CAAUjC,OAAO,cAAkB,UAAC,MAAD,CAAUA,OAAO,iBACpSkP,SAAUT,GAAAA,GAAAA,OACVuB,KAAK,UAAC,GAAAhO,MAAD,CAAOC,GAAG,6CAAV,kIACyCwW,EAAmBlN,QAAQ,GADpE,EACoGiN,EAAqBjN,QAAQ,QAGvI,CACD,GA7YF,yBA+YC,SAAoB6L,GAAwB,mBACrCsB,EAAQ,MAAAtB,EAAWtB,WAAX,OAA4BsB,EAAWrB,YACrD,KAAA2C,GAAK,KAALA,GAAW,SAAC7L,EAAGC,GAAQ,OAAOD,EAAExJ,UAAYyJ,EAAEzJ,SAAW,IAEzD,IAAMhD,EAAO,KAAAqY,GAAK,KAALA,GAAU,SAAAC,GAAQ,MACxB9B,EAAQ,OAAA8B,EAAK9B,OAAL,QAAe,SAAA5U,GAC5B,OAAO,UAAC,OAAD,SAAqBiK,UAAU,EAAO0M,SAAS,QAAW,EAAK1W,KAAKsE,SAASvE,IAA5DA,EACxB,IAED,OAAO,WAAC4W,GAAA,MAAD,CAAgCC,QAAyB,cAAhBH,EAAK3Y,QAA0BoX,EAAWX,aAAnF,WACN,UAACoC,GAAA,OAAD,UAAa,EAAKvM,qBAAqBqM,EAAKtV,cAC5C,UAACwV,GAAA,OAAD,WAAY,UAAC,OAAD,WAAgB,EAAK3W,KAAKC,QAAQwW,EAAK3Y,aACnD,UAAC6Y,GAAA,OAAD,UAAahC,MAHS8B,EAAKtV,UAK5B,IAEK0V,EAAa,mBAAe3B,EAAWhB,qBAA1B,QACV,YAAmB,oBAC1B,OAD0B,SAE1B,KAHiB,QAIb,WAAe4C,GAAQ,oBAArBrB,EAAqB,KAC3B,OAD2B,MACpB,UAACsB,GAAA,OAAD,WAAwB,UAAC,GAAAjX,MAAD,CAAOC,GAAG,uBAAV,iCAAkG,EAAKkB,OAAOgF,eAAeiP,EAAWpB,eAAe2B,KAAvJ,aAAiC,UAAC,OAAD,WAAgB,EAAKzV,KAAKsE,SAASmR,SAAzEqB,EAC1B,IAEF,OAAO,WAAC,GAAAE,SAAD,WACL9B,EAAWd,SACX,UAAC2C,GAAA,EAAD,CAAS7Q,MAAI,EAAb,UACC,yBAAG,UAAC,GAAApG,MAAD,CAAOC,GAAG,iCAAV,0MAAwI,UAAC,OAAD,WAAgBhC,KAAKiC,KAAKC,QAAQ4S,YAAiB,UAAC,OAAD,WAAgB9U,KAAKiC,KAAKC,QAAQ8S,mBAGhM,IAAjCmC,EAAWrB,WAAWtL,SACtB,UAACwO,GAAA,EAAD,CAASE,OAAK,EAAd,UACC,2BAAG,UAACtU,GAAA,EAAD,CAAMzC,KAAK,iBAAd,KAA+B,UAAC,GAAAJ,MAAD,CAAOC,GAAG,iCAAV,iEAA2D,UAAC,OAAD,WAAgBhC,KAAKiC,KAAKC,QAAQ8S,oBAG7HmC,EAAWtB,UAAUrL,OAlea,IAmelC,UAACwO,GAAA,EAAD,CAASE,OAAK,EAAd,UACC,2BAAG,UAACtU,GAAA,EAAD,CAAMzC,KAAK,iBAAd,KAA+B,UAAC,GAAAJ,MAAD,CAAOC,GAAG,gCAAV,gFAAyE,UAAC,OAAD,WAAgBhC,KAAKiC,KAAKC,QAAQ4S,mBAG3IqC,EAAWX,eACX,UAACwC,GAAA,EAAD,CAASH,SAAO,EAAhB,UACC,yBAAG,UAAC,GAAA9W,MAAD,CAAOC,GAAG,sCAAV,8EAAgE,UAAC,OAAD,WAAgBhC,KAAKiC,KAAKC,QAAQ8S,mBAGtGmC,EAAWb,cACX,WAAC0C,GAAA,EAAD,CAASH,SAAO,EAAhB,WACC,yBAAG,UAAC,GAAA9W,MAAD,CAAOC,GAAG,0BAAV,+IAEH,UAACgX,GAAA,OAAD,UACEF,OAIH3B,EAAWZ,kBACX,UAACyC,GAAA,EAAD,CAAS7Q,MAAI,EAAb,UACC,yBAAG,UAAC,GAAApG,MAAD,CAAOC,GAAG,6BAAV,uJAAmGhC,KAAKkD,OAAOqH,qBAAZ,UAAiC4M,EAAWf,qBAA5C,QAA6D,WAGrK,WAACwC,GAAA,EAAD,YACC,UAACA,GAAA,SAAD,WACC,WAACA,GAAA,MAAD,YACC,UAACA,GAAA,aAAD,WAAkB,UAAC,GAAA7W,MAAD,CAAOC,GAAG,uBAAV,qBAClB,UAAC4W,GAAA,aAAD,WAAkB,UAAC,GAAA7W,MAAD,CAAOC,GAAG,yBAAV,uBAClB,UAAC4W,GAAA,aAAD,WAAkB,UAAC,GAAA7W,MAAD,CAAOC,GAAG,2BAAV,gCAHJ,YAMf5B,OAGH,GArdF,+BAudC,SAAkB+W,GAIjB,IAAMgC,EAAgBhC,EAAWb,aAAea,EAAWX,aACrD4C,EAA+C,IAAjCjC,EAAWrB,WAAWtL,QAAgB2M,EAAWtB,UAAUrL,OA5gB3C,EA6gB9B1C,GAAQ,kCAAG9H,KAAKkD,OAAOqH,qBAAqB4M,EAAWlU,OAA/C,KAAuD,mCAAvD,KAAwE,UAAC,GAAAlB,MAAD,CAAOC,GAAG,yBAAV,4HAAkDmV,EAAWtB,UAAUrL,OAAvE,EAAuI2M,EAAWrB,WAAWtL,aAEnP,OAAI4O,GACI,kBAAM5V,UAAU,aAAhB,SAA8BsE,IAGlCqR,GACI,kBAAM3V,UAAU,eAAhB,SAAgCsE,IAGjCA,CACP,GAxeF,oBA0eC,WAAkB,WACjB,GAAI9H,KAAK+T,YAAYlR,QAAQ2H,OAAS,EAAG,OAClC6O,EAAa,OAAArZ,KAAK+T,YAAYlR,SAAjB,QAA6B,SAAAiV,GAC/C,MAAO,CACNhQ,MAAO,CACNgJ,IAAK,SAAF,OAAWgH,EAAO7U,OACrB/C,QAAS,EAAKoZ,kBAAkBxB,IAEjC5X,QAAS,CACR4Q,IAAK,WAAF,OAAagH,EAAO7U,OACvB/C,QAAS,EAAKqZ,YAAYzB,IAG5B,IAED,OAAO,UAAC,GAAAmB,SAAD,WACN,UAACO,GAAA,EAAD,CAAWzI,WAAW,EAAOF,OAAQwI,EAAYrI,QAAM,EAACC,OAAK,KAE9D,CAGD,OAAO,CACP,KAhgBF,GAAsCwI,GAAAA,IAAtC,EACiBlV,OAAS,mBAD1B,EAEiBuD,MAAQ,qDAFzB,EAWiB6C,aDjFW,GCsE5B,qCAIElG,GAAAA,EAJF,iFAIqBgC,MAJrB,wCAKEhC,GAAAA,EALF,iFAKqBoS,SALrB,wCAMEpS,GAAAA,EANF,iFAMqBzD,SANrB,uCAOEyD,GAAAA,EAPF,iFAOqBuS,QAPrB,0CAQEvS,GAAAA,EARF,iFAQqBoL,WARrB,uCASEpL,GAAAA,EATF,iFASqBpC,QATrB,O,+FCzDMqX,GAAwC,CAC7C,cACA,gBACA,gBACA,aACA,eACA,iBACA,aACA,gBAGKC,GAAgC,CACrC,gBACA,mBAIKC,GAA0C,CAC/C,cACA,iBACA,gBACA,kBACA,oBAGKC,GAAmD,CACxD,YAAe,UACf,eAAkB,UAClB,cAAiB,UACjB,gBAAmB,UACnB,iBAAoB,WAMAC,IAAAA,EAAAA,QAAAA,SAAAA,cASS/U,GAAAA,GAAAA,EAAAA,QAAAA,SAAAA,cACGyD,GAAAA,IAAAA,EAAAA,QAAAA,SAAAA,cACDvD,GAAAA,GAAAA,EAAAA,QAAAA,SAAAA,cACOD,GAAAA,GAAAA,EAAAA,QAAAA,SAAAA,cACJ0J,GAAAA,IAAAA,EAAAA,QAAAA,SAAAA,cACP/O,GAAAA,GAAAA,EAAAA,QAAAA,SAAAA,cACMyH,GAAAA,IAAAA,EAAAA,EAAAA,SAAAA,I,4LAXzB2S,cAAwB,E,EACxBC,UAAoB,E,EACpBC,qBAA+B,E,EAC/BC,eAA2B,I,2QAU3BC,sBAAwB,KAAAT,IAAwB,KAAxBA,IAA6B,SAAAU,GAAC,OAAI,EAAKnY,KAAKC,QAAQkY,GAAGpY,EAAzB,I,EACtDqY,eAAiB,KAAAV,IAAgB,KAAhBA,IAAqB,SAAAS,GAAC,OAAI,EAAKnY,KAAKC,QAAQkY,GAAGpY,EAAzB,I,EACvCsY,wBAA0B,KAAAV,IAA0B,KAA1BA,IAA+B,SAAAQ,GAAC,OAAI,EAAKnY,KAAKC,QAAQkY,GAAGpY,EAAzB,I,EAC1DuY,YAAsC,CAAC,E,4CAE/C,WACC,IAAMhL,GAAenK,EAAAA,GAAAA,MAAgBE,OAAOtF,KAAKkD,OAAOqC,MAAMvD,IAC9DhC,KAAKS,aAAa8O,EAAalK,KAAK,UAAWrF,KAAK8I,QAEpD9I,KAAKS,aAAa8O,EAAaxP,OAAOC,KAAKiC,KAAKC,QAAQoW,aAAatW,IAAKhC,KAAKwa,eAC/Exa,KAAKS,aAAa8O,EAAalK,KAAK,UAAUsD,OAAMvD,EAAAA,GAAAA,MAAgBrF,OAAOC,KAAKiC,KAAKC,QAAQuY,iBAAiBzY,KAAMhC,KAAK0a,OACzH1a,KAAKS,aAAa,WAAYT,KAAKU,YAEnC,cAAqB,KAAemZ,IAApC,eAAmD,CAA9C,uBAAOO,EAAP,KAAUO,EAAV,KACJ3a,KAAKua,YAAYva,KAAKiC,KAAKC,QAAQkY,GAAgBpY,IAAM2Y,CACzD,CACD,G,oBAED,SAAehV,GACd,IAC4B,IADtB5F,EAASC,KAAKiC,KAAK8G,UAAUpD,EAAM5F,QACrCA,GAAUA,EAAOsQ,QAEhBrQ,KAAKyG,OAAO+E,QAAQ4J,UAAUpV,KAAKiC,KAAKsE,SAASqU,WAAW5Y,KAC/DhC,KAAKka,eAAe1Z,KAAKT,EAAOiC,IAI7B,OAAAhC,KAAKma,uBAAL,OAAoCpa,EAAOiC,KAC9ChC,KAAKga,UAAW,EACZha,KAAKyG,OAAO+E,QAAQ4J,UAAUpV,KAAKiC,KAAKsE,SAASqU,WAAW5Y,KAC/DhC,KAAK+Z,iBAEI,OAAA/Z,KAAKqa,gBAAL,OAA6Bta,EAAOiC,MACzChC,KAAKga,WAETha,KAAKga,UAAW,EACZha,KAAKyG,OAAO+E,QAAQ4J,UAAUpV,KAAKiC,KAAKsE,SAASqU,WAAW5Y,KAC/DhC,KAAK+Z,kBAKT,G,2BAED,SAAsBpU,GAEjBA,EAAML,SAAWK,EAAMG,SAC1B9F,KAAKia,sBAAwB,EAE9B,G,mBAED,SAActU,GAIb,IAAM0D,EAAO1D,EAAMwD,QAAQqB,OAIvBxK,KAAKyG,OAAO+E,QAAQ4J,UAAUpV,KAAKiC,KAAKsE,SAASqU,WAAW5Y,KAAOqH,EA9E5C,GA+E1BrJ,KAAK+Z,eAEN,G,wCAED,WAGC,OAFqB/Z,KAAKuG,SAASC,UAAU,cAAexG,KAAKyG,OAAO+E,UACpDxL,KAAKkD,OAAO2X,gBAAkB7a,KAAK2G,gBAAgBC,YAAY,CAACC,MAAO,CAAC,mBACtD,GACtC,G,wBAED,WAAqB,WACpB7G,KAAKyK,UAAUtJ,IAAI,IAAIuJ,GAAAA,GAAK,CAC3BvI,MAAM,UAAC,GAAAJ,MAAD,CAAOC,GAAG,2BAAV,iCAA2ChC,KAAKiC,KAAKsE,SAASuU,YAAY3Y,QAChF0I,aAAa,UAAC,GAAA9I,MAAD,CAAOC,GAAG,kCAAV,kIACZ,UAAC,MAAD,CAAUjC,OAAO,gBAAmB,UAAC,MAAD,CAAUA,OAAO,kBAAwB,UAAC,MAAD,CAAUyF,OAAO,mBAE/FmF,aFjJU,EEkJVG,aAAc,CACb,IAAIK,GAAAA,GAAY,CACfhJ,MAAM,UAAC,GAAAJ,MAAD,CAAOC,GAAG,uCAAV,oCAAiD,UAAC,MAAD,CAAUwD,OAAO,mBACxE0F,QAAS,kBAAM,EAAK6P,4BAAX,QAKZ/a,KAAK6P,YAAY1O,IAAI,IAAI2O,GAAAA,GAAiB,CACzC/H,KAAM/H,KAAKiC,KAAKC,QAAQ0Y,WAAW7S,KACnC7H,SAAS,UAAC,GAAA6B,MAAD,CAAOC,GAAG,2CAAV,8RACR,UAAC,MAAD,CAAUjC,OAAO,gBAAiC,UAAC,MAAD,CAAUA,OAAO,oBAAwF,UAAC,MAAD,CAAUA,OAAO,gBAAoH,UAAC,MAAD,CAAUA,OAAO,gBAA+B,UAAC,MAAD,CAAUA,OAAO,wBAElWiQ,MAAO,CACN,EAAGxB,GAAAA,GAAAA,MACH,EAAGA,GAAAA,GAAAA,OACH,EAAGA,GAAAA,GAAAA,OAEJvG,MAAOjI,KAAK+Z,cACZhK,KAAK,UAAC,GAAAhO,MAAD,CAAOC,GAAG,uCAAV,kGACMhC,KAAKiC,KAAKC,QAAQ0Y,WAAWzY,KADnC,EAC6EnC,KAAK+Z,oBAIxF/Z,KAAK6P,YAAY1O,IAAI,IAAI2O,GAAAA,GAAiB,CACzC/H,KAAM/H,KAAKiC,KAAKC,QAAQoW,aAAavQ,KACrC7H,SAAS,UAAC,GAAA6B,MAAD,CAAOC,GAAG,wCAAV,uLACwD,UAAC,MAAD,CAAUjC,OAAO,oBAElFiQ,MAAO,CACN,EAAGxB,GAAAA,GAAAA,OAEJvG,MAAOjI,KAAKia,qBACZlK,KAAK,UAAC,GAAAhO,MAAD,CAAOC,GAAG,oCAAV,kFACHhC,KAAKia,2BAMR,IA/CoB,EA+Cde,EAAehb,KAAKka,eAAe1P,OAGnCvI,EAAO,GAGTgZ,EAAmB,EArDH,WAsDGjb,KAAKsa,yBAtDR,6BAsDTY,EAtDS,QAuDbjT,EAAQ,SAAKiS,gBAAL,QAA2B,SAAAiB,GAAC,OAAID,IAAaC,CAAjB,IAAoB3Q,OAG9D,GAAc,IAAVvC,EAAe,iBAEnBhG,EAAKzB,KAAK,CACTyH,MAAAA,EACAsM,MAAO,EAAKgG,YAAYW,GACxBE,QAAS,WACR,EAAKnZ,KAAK8G,UAAUmS,UADZ,aACR,EAA+B/Y,KAC/B8F,EACA,EAAKoT,cAAcpT,EAAO+S,MAI5BC,GAAoBhT,CAtED,EAsDpB,2BAAqD,GAtDjC,+BA0EpB,IAAMqT,EAAaN,EAAeC,EAC9BK,EAAa,GAChBrZ,EAAKzB,KAAK,CACTyH,MAAOqT,EACP/G,MAxK+B,UAyK/B6G,QAAS,CACR,QACAE,EACAtb,KAAKqb,cAAcC,EAAYN,MAK9B/Y,EAAKuI,OAAS,GACjBxK,KAAK4H,WAAWzG,IAAI,IAAIoa,GAAAA,GAAkB,CACzCC,SAAU,CAAC,sBAAuB,QAAS,KAC3CvZ,KAAAA,IAGF,G,2BAED,SAAsBgG,EAAesD,GACpC,OAAStD,EAAQsD,EAAS,KAAKD,QAAQ,GAAK,GAC5C,K,EAzKgClE,CAfC9C,GAAAA,IAAAA,EAClBC,OAAS,UACTuD,MAAQ,wCAaSV,EAbT,mCAOvB3C,GAAAA,EAAAA,GAAAA,C,6EAAmBgC,M,wCACnBhC,GAAAA,EAAAA,GAAAA,C,6EAAmBgG,S,uCACnBhG,GAAAA,EAAAA,GAAAA,C,6EAAmB8B,Q,8CACnB9B,GAAAA,EAAAA,GAAAA,C,6EAAmBkC,e,0CACnBlC,GAAAA,EAAAA,GAAAA,C,6EAAmBoL,W,mCACnBpL,GAAAA,EAAAA,GAAAA,C,6EAAmBxC,I,yCACnBwC,GAAAA,EAAAA,GAAAA,C,6EAAmBmD,U,mBClER6T,GAAb,yMACU9M,eAAiB+M,GAAAA,GAAAA,eAAAA,KAD3B,Y,SAA4BC,G,YCMPC,IAAAA,EAAAA,QAAAA,SAAAA,cACYpT,GAAAA,IAAAA,EAAAA,QAAAA,SAAAA,cACEkG,GAAAA,IAAAA,EAAAA,SAAAA,I,6QAEzBxJ,gBAAkB,CAC1B,EAAKjD,KAAKsE,SAASsV,eAAe7Z,I,mDAGnC,WAAoB,WACnBhC,KAAKyK,UAAUtJ,IAAI,IAAIuJ,GAAAA,GAAK,CAC3BvI,MAAM,UAAC,GAAAJ,MAAD,CAAOC,GAAG,6BAAV,kCACN6I,aAAa,UAAC,GAAA9I,MAAD,CAAOC,GAAG,oCAAV,4FACZ,UAAC,OAAD,WAAgBhC,KAAKiC,KAAKC,QAAQ2Z,oBAEnClR,aJpBO,EIqBP7E,OAAQ,GACRgF,aAAc,CACb,IAAIK,GAAAA,GAAY,CACfhJ,MAAM,UAAC,GAAAJ,MAAD,CAAOC,GAAG,sDAAV,oCAAgE,UAAC,OAAD,WAAgBhC,KAAKiC,KAAKC,QAAQ2Z,oBACxG3Q,QAAS,kBAAM,EAAK4Q,iBAAiB,EAAK7Z,KAAKsE,SAASsV,eAAe7Z,GAA9D,OAIZ,G,oCAED,WACC,IAAM+Z,EAA2B/b,KAAKgc,kBAAkBhc,KAAKiC,KAAKsE,SAASsV,eAAe7Z,IAC1FhC,KAAK6P,YAAY1O,IAAI,IAAI2O,GAAAA,GAAiB,CACzC/H,KAAM/H,KAAKiC,KAAKC,QAAQ+Z,aAAalU,KACrC7H,SAAS,UAAC,GAAA6B,MAAD,CAAOC,GAAG,2CAAV,0RACS,UAAC,OAAD,WAAgBhC,KAAKiC,KAAKC,QAAQ2Z,oBAEpD7L,MAAO,CACN,IAAMxB,GAAAA,GAAAA,MACN,IAAOA,GAAAA,GAAAA,OACP,KAAOA,GAAAA,GAAAA,OAERvG,MAAO8T,EACPhM,KAAK,UAAC,GAAAhO,MAAD,CAAOC,GAAG,uCAAV,kGACWhC,KAAKkD,OAAOgF,eAAe6T,EAA0B,IADhE,aAC+E,UAAC,MAAD,CAAUvW,OAAO,wBAGtG,K,EAxCiCkJ,CAFEwN,GAAAA,GAAAA,IAAAA,EAAAA,GAAAA,GAAAA,EAAAA,UAAAA,YAAAA,CACnCzX,GAAAA,EAAAA,GAAAA,C,6EAAmBgG,S,2CACnBhG,GAAAA,EAAAA,GAAAA,C,6EAAmBoL,W,yCCARsM,GAAb,WAGC,WAAYja,IAAmB,oBAFvBka,qBAEuB,EAC9Bpc,KAAKoc,gBAAkBla,CACvB,CALF,sCAOC,SAAcmP,GAAsE,aACnF,OAAO,OAAArR,KAAKoc,iBAAL,QAAyB,SAAArc,GAC/B,MAAO,CACN2R,OAAQ,QACRC,OAAQ,CACPA,QAAQ,UAAC,OAAD,SAAY1F,UAAU,GAAWlM,IACzC6R,SAAU7R,EAAOoC,MAElB/B,KAAM,KAAAiR,GAAO,KAAPA,GAAY,SAAAyG,GACjB,MAAO,CACN9M,OAAQ,EAAKqR,UAAUvE,EAAQ/X,GAC/BkL,cAAU3C,EAEX,IAEF,GACD,GAvBF,qBAyBC,WAEC,GA3BF,uBA6BC,SAAoBwP,EAAyC/X,GAAgB,MAC5E,OAAO,OAAA+X,EAAO7V,MAAP,QAAmB,SAAAyW,GAAI,OAAIA,EAAK3Y,OAAOiC,KAAOjC,EAAOiC,EAA9B,IAAkCwI,MAChE,KA/BF,K,YCmBM8R,GAAAA,WAIL,WAAYC,IAAwE,oBAF5EA,uBAE4E,EACnFvc,KAAKuc,kBAAoBA,CACzB,C,uCAED,WAAsC,G,oBAEtC,SAAclL,GAA+E,WACtFmL,EAAS,KAAAnL,GAAO,KAAPA,GAAY,SAAAyG,GAAM,OAAI,EAAKyE,kBAAkBzE,EAA3B,IACjC,IAAI0E,EAAOhL,OAAM,SAAAiL,GAAK,OAnBjB,IAmBqBA,CAAJ,IAGtB,MAAO,CACN/K,OAAQ,QACRC,OAAQ,CACPA,QAAQ,UAAC,GAAA5P,MAAD,CAAOC,GAAG,sBAAV,gCACR4P,SAAU,eAEXxR,KAAM,KAAAoc,GAAM,KAANA,GAAW,SAAAC,GAEhB,OA7BM,IA6BFA,GACI,UAAC,GAAA1a,MAAD,CAAOC,GAAG,2BAAV,0BA7BN,IAgCEya,GACI,UAAC,GAAA1a,MAAD,CAAOC,GAAG,uBAAV,uBAGD,yBACP,IAGF,K,EAnCIsa,GAsCeI,IAAAA,GAAAA,QAAAA,SAAAA,cAKSvV,GAAAA,GAAAA,GAAAA,GAAAA,SAAAA,I,yOAE7B4K,WAAa,EAAK9P,KAAKC,QAAQoW,a,EACtBnK,WAAa,CAAC,EAAKlM,KAAKsE,SAAS+O,UAAW,EAAKrT,KAAKsE,SAASgP,gB,EAExEoH,WAAuB,G,4CAEvB,YACC,4DAEA3c,KAAKS,aAAa,CAAC4E,KAAM,QAASE,MAAOvF,KAAKkD,OAAOqC,MAAMvD,IAAKhC,KAAK4c,SAErE,IAAMjO,EAAiB3O,KAAKiC,KAAKC,QAAQoW,aAAavQ,KAChDqK,GAAuB,UAAC,MAAD,CAAYrS,OAAO,eAAesS,UAAU,IACzErS,KAAKsS,aAAa,IAAIC,GAAAA,GAA0B,CAC/CC,aArEwB,EAsExBC,eAAgBzS,KAAKyS,eACrBC,WAAW,EACX/D,eAAAA,EACAK,mBAAmB,UAAC,GAAAjN,MAAD,CAAOC,GAAG,uCAAV,8EACuB,UAAC,MAAD,CAAYjC,OAAO,oBAE7DqS,qBAAAA,EACAO,cAAe,CACd,EAAGnE,GAAAA,GAAAA,MACH,EAAGA,GAAAA,GAAAA,OACH,EAAGA,GAAAA,GAAAA,OAEJqO,YAAa7c,KAAK8c,uBAAuBlK,KAAK5S,SAG/C,IAAMoc,EAAkB,CACvB,CACCrc,OAAQC,KAAKiC,KAAKC,QAAQmV,UAC1B0F,kBAAmB,GAEpB,CACChd,OAAQC,KAAKiC,KAAKC,QAAQ0S,WAC1BmI,kBAAmB,GAEpB,CACChd,OAAQC,KAAKiC,KAAKC,QAAQwS,YAC1BqI,kBAAmB,GAEpB,CACChd,OAAQC,KAAKiC,KAAKC,QAAQ8a,kBAC1BD,kBAAmB/c,KAAKkD,OAAO+Z,MAAMC,OAAO,OAAS,EAAI,GAE1D,CACCnd,OAAQC,KAAKiC,KAAKC,QAAQib,gBAC1BJ,kBAAmB,IAMjB/c,KAAKkD,OAAO+Z,MAAMC,OAAO,SAC5Bd,EAAgB5b,KAAK,CACpBT,OAAQC,KAAKiC,KAAKC,QAAQ0Y,WAC1BmC,kBAAmB,IAIrB/c,KAAKsS,aAAa,IAAI8K,GAAAA,GAAyB,CAC9ChB,gBAAAA,EACAzN,eAAAA,EACAK,mBAAmB,UAAC,GAAAjN,MAAD,CAAOC,GAAG,0CAAV,0MAAwG,UAAC,MAAD,CAAYjC,OAAO,oBAC9IqS,qBAAAA,EACAO,cAAe,CACd,EAAGnE,GAAAA,GAAAA,MACH,EAAGA,GAAAA,GAAAA,OACH,EAAGA,GAAAA,GAAAA,OAEJqO,YAAa7c,KAAKqd,0BAA0BzK,KAAK5S,MACjDsd,cAAetd,KAAKud,4BAA4B3K,KAAK5S,SAGtDA,KAAKsS,aAAa,IAAIgK,GAAqBtc,KAAKwd,eAAe5K,KAAK5S,QAGhEA,KAAKkD,OAAO+Z,MAAMQ,MAAM,SAC3Bzd,KAAKsS,aAAa,IAAI6J,GAAyB,CAACnc,KAAKiC,KAAKC,QAAQ0Y,aAEnE,G,qBAED,SAAgBjV,GACf3F,KAAK2c,WAAWnc,KAAKmF,EAAMvC,UAC3B,G,oCAED,SAA+B0U,GAE9B,OA5IQ,IA4IJ9X,KAAKwd,eAAe1F,KAEf4F,EAAAA,GAAAA,IAnJgB,EAmJiC1d,KAAKyS,eAAe7L,cAAekR,EAAO7U,MAAO6U,EAAOzU,KAK3G,CACP,G,uCAED,SAAkCyU,GAGjC,OAAI9X,KAAK2d,wBAAwB7F,IAzJzB,IA0JP9X,KAAKwd,eAAe1F,IACZ,EAIF,CACP,G,yCAED,SAAoCA,GAGnC,GArKQ,IAqKJ9X,KAAKwd,eAAe1F,GACvB,OAAO,SAAC9M,EAAgBC,GACvB,QAAKrJ,EAAAA,GAAAA,IAAUqJ,IAAaD,GAAUC,EAC9B2S,GAAAA,EAAAA,SAEDA,GAAAA,EAAAA,QACP,CAEF,G,4BAKD,SAAuB3K,GAAqD,UAYF,EAXnE4K,EAAoB,UAAG,KAAM,QAAApc,EAAAA,GAAAA,IAAYzB,KAAKmO,aAAjB,QAAiC,SAAA2P,GAAC,OAAIA,EAAE/a,QAAN,YAA3C,QAA+D,EACnFmQ,GAAuB,UAACD,aAAD,EAACA,EAAY5P,WAAb,QAAoB4P,EAAWhQ,OAASgQ,EAAWhQ,MAIhF,OAAIjD,KAAK2d,wBAAwB1K,GAzL5B,EA+LDC,EAAwB2K,EArMM,KAuMb,OAAA7d,KAAK2c,YAAL,QAAuB,SAAAoB,GAE1C,OAAQ9K,EAAWhQ,MAAQ8a,GAAaA,EAAY9K,EAAWhQ,OAASiQ,EAzMxC,KA0MhC,IAGe1I,OAAS,EArMtB,EADI,EADH,CAgNL,K,EA9J4BrD,CALWkH,GAAAA,IAAAA,GACxB9J,OAAS,iBACTuD,MAAQ,wDACR6C,aN9DF,GMgEexD,GAFEyD,GAAAA,IAAAA,EAAAA,GAAAA,GAAAA,GAAAA,UAAAA,iBAAAA,CAE9BnG,GAAAA,EAAAA,IAAAA,C,6EAAWgO,c,QCtDPuL,GAA+B,CACpC,YACA,cAGKC,GAML,WAAY/C,EAAkBjY,IAAe,oBAL7CiY,cAK6C,OAJ7CjY,WAI6C,OAH7CI,IAAc,EAG+B,KAF7C6a,MAAgB,EAGfle,KAAKkb,SAAWA,EAChBlb,KAAKiD,MAAQA,CACb,EAGmBkb,IAAAA,GAAAA,QAAAA,SAAAA,cAMWtK,GAAAA,GAAAA,GAAAA,QAAAA,SAAAA,cACAjU,GAAAA,IAAAA,GAAAA,QAAAA,SAAAA,cACJD,GAAAA,GAAAA,GAAAA,GAAAA,SAAAA,I,2SAEnBye,eAAgC,G,EAEhCC,eAAiB,KAAAL,IAAe,KAAfA,IAAoB,SAAA5D,GAAC,OAAI,EAAKnY,KAAKC,QAAQkY,GAAGpY,EAAzB,I,EACtCsc,WAAqC,CAAC,E,EAEtCC,eAA8C,CAAC,E,4CAEvD,WAAsB,WACfhP,GAAenK,EAAAA,GAAAA,MAAgBE,OAAOtF,KAAKkD,OAAOqC,MAAMvD,IAC9DhC,KAAKS,aAAa8O,EAAalK,KAAK,UAAUtF,QAAO0F,EAAAA,GAAAA,IAAMzF,KAAKqe,iBAAkBre,KAAKwe,iBAEvFR,GAAgBld,SAAQ,SAAAkB,GAAM,MACvBjC,EAAS,EAAKkC,KAAKC,QAAQF,GACjC,EAAKsc,WAAWve,EAAOiC,IAAvB,UAA6BjC,EAAOuX,gBAApC,QAAgD,EAChD,EAAKiH,eAAexe,EAAOiC,IAAM,IAAIic,GAAYle,EAAOiC,GAAI,EAAKkB,OAAOC,KAAKC,UAC7E,GACD,G,6BAED,SAAwBuC,GAEvB,IAAMuV,EAAWvV,EAAM5F,OAEjBuX,EAAWtX,KAAKse,WAAWpD,GAI3BpD,EAAS9X,KAAKue,eAAerD,GACnCpD,EAAOzU,IAAMsC,EAAMvC,UAGnB,IAAMqb,EAAiBra,KAAKqJ,IAAIqK,EAAO7U,MAAQqU,EAAU3R,EAAMvC,WAC/DpD,KAAKwE,MAAMxE,KAAKkD,OAAOqH,qBAAqBkU,IAE5C,IAAIC,EAAkB,EAEtB,GAAI1e,KAAKgX,SAAS2H,WAAWF,GAAiB,OACvCG,EAAiB5e,KAAKgX,SAASC,mBAAmBwH,EAAgBA,GAAgB,GAGxFC,EAAe,UAAGE,aAAH,EAAGA,EAAgBvb,WAAnB,QAA0Bob,CACzC,MACAC,EAAkBD,EAGnB3G,EAAOoG,MAAQ9Z,KAAKC,IAAI,EAAGyT,EAAOzU,IAAMqb,GAGxC1e,KAAKoe,eAAe5d,KAAKsX,GACzB9X,KAAKue,eAAerD,GAAY,IAAI+C,GAAY/C,EAAUvV,EAAMvC,UAChE,G,kCAED,SAA6BA,GAAmB,WAC/C,OAAO,UAACoS,GAAA,EAAD,CACNtL,UAAQ,EACRC,SAAO,EACPpC,KAAK,OACLqC,KAAK,QACLC,QAAS,kBAAM,EAAKhI,SAASiI,KAAKlH,EAAY,EAAKF,OAAOC,KAAKC,UAAWA,EAAY,EAAKF,OAAOC,KAAKC,UAA9F,EACTlD,QAASF,KAAKkD,OAAOqH,qBAAqBnH,IAE3C,G,8BAED,SAAyBqV,GAAsB,WAC1CoG,EAAa,EACjB,GAAqB,IAAjBpG,EAAMjO,OAAV,CAGA,IAAMzK,EAASC,KAAKiC,KAAK8G,UAAU0P,EAAM,GAAGyC,UAC5C,OAAO,WAACtC,GAAA,EAAD,YACN,UAACA,GAAA,SAAD,WACC,WAACA,GAAA,MAAD,YACC,WAACA,GAAA,aAAD,YAAkB,UAAC,OAAD,WAAgB7Y,IAAlC,KAA6C,UAAC,GAAAgC,MAAD,CAAOC,GAAG,4BAAV,uBAC7C,UAAC4W,GAAA,aAAD,WAAkB,UAAC,GAAA7W,MAAD,CAAOC,GAAG,4BAAV,sBAClB,UAAC4W,GAAA,aAAD,WAAkB,UAAC,GAAA7W,MAAD,CAAOC,GAAG,4BAAV,iCAGpB,UAAC4W,GAAA,OAAD,UACE,KAAAH,GAAK,KAALA,GAAU,SAAC9S,EAAOmZ,GAElB,OADAD,GAAeC,EAAQ,EAAKnZ,EAAMuY,MAAQ,GACnC,WAACtF,GAAA,MAAD,CAA2BC,QAASiG,EAAQ,GAAKnZ,EAAMuY,MA5G9C,KA4GT,WACN,UAACtF,GAAA,OAAD,UAAa,EAAKvM,qBAAqB1G,EAAMtC,QAC7C,UAACuV,GAAA,OAAD,UAA6B,OAAhBjT,EAAMuY,OAAkBY,EAAQ,EAAI,EAAK5b,OAAOgF,eAAevC,EAAMuY,OAAS,OAC3F,UAACtF,GAAA,OAAD,UAAaiG,EAAa,EAAK3b,OAAOgF,eAAe2W,GAAc,QAH7ClZ,EAAMtC,IAK7B,QAlBF,CAqBD,G,oBAED,WAAkB,eAEjB,GAAKrD,KAAKoe,eAAe5T,OAEzB,OAAO,UAAC,GAAAyO,SAAD,WACN,UAACL,GAAA,EAAD,CAAO7M,MAAO,CAACgT,OAAQ,QAAvB,UACC,UAACnG,GAAA,OAAD,WACC,WAACA,GAAA,MAAD,YACC,UAACA,GAAA,OAAD,CAAY7M,MAAO,CAACiT,cAAe,OAAnC,SACEhf,KAAKif,iBAAiB,OAAAjf,KAAKoe,gBAAL,QAA2B,SAACc,GAClD,OAAOA,EAAQhE,WAAa,EAAKjZ,KAAKC,QAAQmV,UAAUrV,EACxD,QAEF,UAAC4W,GAAA,OAAD,CAAY7M,MAAO,CAACiT,cAAe,OAAnC,SACEhf,KAAKif,iBAAiB,OAAAjf,KAAKoe,gBAAL,QAA2B,SAACc,GAClD,OAAOA,EAAQhE,WAAa,EAAKjZ,KAAKC,QAAQ0S,WAAW5S,EACzD,eAMN,K,EAjH0BrC,CARO2E,GAAAA,IAAAA,GAClBE,OAAQ,KACRD,OAAS,WACTuD,MAAQ,mDACR6C,aPpCT,GOwCoBhL,GAJIiL,GAAAA,IAAAA,EAAAA,GAAAA,GAAAA,GAAAA,UAAAA,WAAAA,CAE9BnG,GAAAA,EAAAA,IAAAA,C,6EAAmBuS,Q,yCACnBvS,GAAAA,EAAAA,IAAAA,C,6EAAmBpC,Q,qCACnBoC,GAAAA,EAAAA,IAAAA,C,6EAAmBxC,I,QC1Bfkd,GAAY3L,KAAAA,IAAU,IAAK,IAAK,KAAKC,KAAK,KAAMC,WAEhD0L,GAA8B,CACnC,gBACA,kBAKYC,IAAb,kCACmC3Q,GAAAA,IADnC,sPAIS4Q,SAAW,EAAKne,IAAI,IAAIiT,GAAAA,GAAa,CAC5CC,QApBgB,EAqBhBC,MAAO,CACNxS,OAAO,UAAC,GAAAC,MAAD,CAAOC,GAAG,yBAAV,+BACPuS,MAAO4K,IAER3K,gBAAgB,EAChBC,eAAe,KAXjB,4CAcC,YACC,4DAEA,IAAMlF,GAAenK,EAAAA,GAAAA,MAAgBE,OAAOtF,KAAKkD,OAAOqC,MAAMvD,IAE9DhC,KAAKS,aAAa8O,EAAalK,KAAK,UAAUtF,OAAOC,KAAKiC,KAAKsd,cAAcH,KAAkBpf,KAAKwf,iBACpGxf,KAAKS,aAAa8O,EAAalK,KAAK,UAAUtF,OAAOC,KAAKiC,KAAKC,QAAQud,gBAAgBzd,IAAKhC,KAAK0f,WAEjG1f,KAAKS,aAAa,WAAYT,KAAKU,WACnC,GAvBF,6BAyBC,WACCV,KAAKsf,SAAS1J,SAxCK,EAyCnB,GA3BF,uBA6BC,WACC5V,KAAKsf,SAAS7I,MA3CC,EA4Cf,GA/BF,wBAiCC,WACC,IAAMkJ,EAAa3f,KAAKsf,SAASlH,QACjCpY,KAAK6P,YAAY1O,IAAI,IAAI2O,GAAAA,GAAiB,CACzC/H,KAAM/H,KAAKiC,KAAKC,QAAQud,gBAAgB1X,KACxC7H,SAAS,UAAC,GAAA6B,MAAD,CAAOC,GAAG,+CAAV,uKACS,UAAC,MAAD,CAAUjC,OAAO,qBAA4B,UAAC,MAAD,CAAUA,OAAO,mBAAsB,UAAC,MAAD,CAAUA,OAAO,oBAAoG,UAAC,MAAD,CAAUA,OAAO,uBAE5OiQ,MAAO,CACN,EAAGxB,GAAAA,GAAAA,OACH,EAAGA,GAAAA,GAAAA,OAEJvG,MAAO0X,EACP5P,KAAK,UAAC,GAAAhO,MAAD,CAAOC,GAAG,2CAAV,uHACW2d,WAAAA,OAGjB,KAjDF,GAA2BlG,GAAAA,IAA3B,wCACEhV,GAAAA,EADF,kFACqBoL,WADrB,Q,uBCHqB+P,IAAAA,GAAAA,QAAAA,SAAAA,cAKSzY,GAAAA,GAAAA,GAAAA,QAAAA,SAAAA,cACLzH,GAAAA,GAAAA,GAAAA,GAAAA,SAAAA,I,gRAEfyO,WAAa,EAAKlM,KAAKsE,SAAS8O,a,EAEhCwK,iBAAkB,UAAC7G,GAAA,EAAD,CAAS7Q,MAAI,EAAb,UAC1B,UAAC,GAAApG,MAAD,CAAOC,GAAG,yBAAV,+QAAmD,UAAC,MAAD,CAAYjC,OAAO,uBAAiD,UAAC,MAAD,CAAYA,OAAO,kBAAsB,UAAC,MAAD,CAAYA,OAAO,kBAA8H,UAAC,MAAD,CAAYA,OAAO,oBAAoBsS,UAAU,KAAwC,UAAC,MAAD,CAAYtS,OAAO,yB,EAGtZ+f,UAA+B,G,EAC/BC,sBAAAA,E,EACAC,uBAAAA,E,4CAER,YACC,4DAEA,IAAMC,GAAiB7a,EAAAA,GAAAA,MACrBE,OAAOtF,KAAKkD,OAAOqC,MAAMvD,IACzBwD,OAAOxF,KAAKiC,KAAKsE,SAAS8O,aAAarT,IAEnCke,GAAkB9a,EAAAA,GAAAA,MAAgBE,OAAOtF,KAAKkD,OAAOqC,MAAMvD,IAAIqD,KAAK,UACxEtF,OAAOC,KAAKiC,KAAKC,QAAQ8a,kBAAkBhb,IAE7ChC,KAAKS,aAAawf,EAAe5a,KAAK,eAAgBrF,KAAKmgB,iBAC3DngB,KAAKS,aAAayf,EAAiBlgB,KAAKogB,OACxCpgB,KAAKS,aAAawf,EAAe5a,KAAK,gBAAiBrF,KAAKqgB,kBAE5D,IAAM1R,EAAiB3O,KAAKiC,KAAKC,QAAQmT,aAAatN,KAChDqK,GAAuB,UAAC,MAAD,CAAYrS,OAAO,eAAesS,UAAU,IACzErS,KAAKsS,aAAa,IAAIC,GAAAA,GAA0B,CAC/CC,aAAc,EACdC,eAAgBzS,KAAKyS,eACrBC,WAAW,EACX/D,eAAAA,EACAK,mBAAmB,UAAC,GAAAjN,MAAD,CAAOC,GAAG,uCAAV,8EACuB,UAAC,MAAD,CAAYjC,OAAO,oBAE7DqS,qBAAAA,EACAO,cAAe,CACd,EAAGnE,GAAAA,GAAAA,MACH,EAAGA,GAAAA,GAAAA,OACH,EAAGA,GAAAA,GAAAA,UAILxO,KAAKsS,aAAa,IAAI8K,GAAAA,GAAyB,CAC9ChB,gBAAiB,CAChB,CACCrc,OAAQC,KAAKiC,KAAKC,QAAQmV,UAC1B0F,kBAAmB,GAEpB,CACChd,OAAQC,KAAKiC,KAAKC,QAAQ0S,WAC1BmI,kBAAmB,GAEpB,CACChd,OAAQC,KAAKiC,KAAKC,QAAQwS,YAC1BqI,kBAAmB,GAEpB,CACChd,OAAQC,KAAKiC,KAAKC,QAAQ8a,kBAC1BD,kBAAmB,IAGrBpO,eAAAA,EACAK,mBAAmB,UAAC,GAAAjN,MAAD,CAAOC,GAAG,0CAAV,0MAAwG,UAAC,MAAD,CAAYjC,OAAO,oBAC9IqS,qBAAAA,EACAO,cAAe,CACd,EAAGnE,GAAAA,GAAAA,MACH,EAAGA,GAAAA,GAAAA,OACH,GAAIA,GAAAA,GAAAA,OAELqO,YAAa7c,KAAKqd,0BAA0BzK,KAAK5S,SAGlDA,KAAKsS,aAAa,IAAI6J,GAAyB,CAACnc,KAAKiC,KAAKC,QAAQ0Y,WAAY5a,KAAKiC,KAAKC,QAAQib,kBAChG,G,6BAED,SAAwBxX,GAA8B,QAErD3F,KAAK+f,iBAAmB,CACvBO,uBAAuB,EACvBC,SAAS,EACTC,YAAa,EACbvd,MAAO0C,EAAMvC,UACbqd,WAAU,oBAAEzgB,KAAKggB,yBAAP,aAAE,EAAwBO,eAA1B,UAGXvgB,KAAK8f,UAAUtf,KAAKR,KAAK+f,iBACzB,G,mBAED,WAC8B,MAAzB/f,KAAK+f,mBACR/f,KAAK+f,iBAAiBS,aAAe,EAEtC,G,8BAED,WAE8B,MAAzBxgB,KAAK+f,mBACW/f,KAAKgB,UAAU0f,QAAQ,sBAExB,IACjB1gB,KAAK+f,iBAAiBQ,SAAU,GAG7BvgB,KAAKggB,mBACkC,IAAtChgB,KAAK+f,iBAAiBS,aAAqBxgB,KAAKggB,kBAAkBO,UACrEvgB,KAAKggB,kBAAkBM,uBAAwB,GAIjDtgB,KAAKggB,kBAAoBhgB,KAAK+f,iBAC9B/f,KAAK+f,sBAAmBzX,EAEzB,G,uCAED,SAAkCwP,EAAyC/X,GAAuB,WAEjG,GAAIC,KAAK2d,wBAAwB7F,IAAW/X,EAAOA,OAAOiC,KAAOhC,KAAKiC,KAAKC,QAAQib,gBAAgBnb,GAClG,OAAQ,EAKT,GAAIjC,EAAOA,OAAOiC,KAAOhC,KAAKiC,KAAKC,QAAQ8a,kBAAkBhb,GAAI,SAG1D2e,EAAmB,OAAA7I,EAAO7V,MAAP,QAAmB,SAAA2e,GAAC,OAAIA,EAAE7gB,OAAOiC,KAAO,EAAKC,KAAKC,QAAQ8a,kBAAkBhb,EAAxD,IAC7C,GAAgC,IAA5B2e,EAAiBnW,OACpB,OAAO,EAIR,IAAMqW,EAAW,OAAA7gB,KAAK8f,WAAL,QAAoB,SAAAc,GAAC,OAAIA,EAAE3d,QAAU6U,EAAO7U,KAAvB,IAEtC,GAAI4d,EAAU,CACb,GAAIA,EAASN,SAAWM,EAASP,sBAChC,OAAQ,EAET,GAAIO,EAASJ,WACZ,OAAO,EAKR,IAAKI,EAASJ,YAA0C,IAA5BE,EAAiBnW,OAC5C,OAAO,CAER,CACD,CAED,OAAO,CACP,K,EAxJuB9K,CANgB2O,GAAAA,IAAAA,GACxB9J,OAAiB,iBACjBuD,MAAQ,wDACR6C,aTnBF,GSsBUjL,GAHOkL,GAAAA,IAAAA,EAAAA,GAAAA,GAAAA,GAAAA,UAAAA,iBAAAA,CAE9BnG,GAAAA,EAAAA,IAAAA,C,6EAAWgO,c,0CACXhO,GAAAA,EAAAA,IAAAA,C,6EAAWzD,S,oBCrBP8f,GAAwB,MAKTC,GAAAA,SAAAA,I,4LACXC,sBAVoB,I,EAWpBC,WAAa,CACrB,CACCjgB,UAAW,CAAC,EAAKiB,KAAKC,QAAQmV,WAC9B6J,eAAgBJ,IAEjB,CACC9f,UAAW,CAAC,EAAKiB,KAAKC,QAAQ0S,YAC9BsM,eAAgBJ,IAEjB,CACC9f,UAAW,CAAC,EAAKiB,KAAKC,QAAQ8a,mBAC9BkE,eAAgBJ,IAEjB,CACC9f,UAAW,CAAC,EAAKiB,KAAKC,QAAQib,iBAC9B+D,eAAgBJ,IAEjB,CACC9f,UAAW,CAAC,EAAKiB,KAAKC,QAAQ0Y,YAC9BsG,eAvBiC,MAyBlC,CAAClgB,UAAW,CAAC,EAAKiB,KAAKC,QAAQmT,eAC/B,CAACrU,UAAW,CAAC,EAAKiB,KAAKC,QAAQoW,eAC/B,CAACtX,UAAW,CAAC,EAAKiB,KAAKC,QAAQ8P,iB,WAzBZ+O,CAAqBI,GAAAA,GCZ7B5Y,GAAb,yMACCG,YAAc,CACb,EAAKzG,KAAKC,QAAQ2Z,eAClB,EAAK5Z,KAAKC,QAAQkf,cAClB,EAAKnf,KAAKC,QAAQmf,iBAJpB,Y,SAAiCC,GCIZC,GAAAA,SAAAA,I,4LACpBC,aAAe,CACd,CACCC,WAAY,EAAKxf,KAAKsE,SAASmb,sBAC/BC,eAAgB,CAAC,EAAK1f,KAAKC,QAAQkf,gBAEpC,CACCK,WAAY,EAAKxf,KAAKsE,SAASqb,yBAC/BD,eAAgB,CAAC,EAAK1f,KAAKC,QAAQmf,kBAEpC,CACCI,WAAY,EAAKxf,KAAKsE,SAASsb,WAC/BF,eAAgB,CAAC,EAAK1f,KAAKC,QAAQwS,e,2DAIrC,WACC,IAAMoN,EAAc9hB,KAAK+hB,sBAAsB/hB,KAAKiC,KAAKsE,SAASmb,sBAAsB1f,IAClFggB,EAAkBhiB,KAAK+hB,sBAAsB/hB,KAAKiC,KAAKsE,SAASqb,yBAAyB5f,IACzFigB,EAAgBjiB,KAAK+hB,sBAAsB/hB,KAAKiC,KAAKsE,SAASsb,WAAW7f,IAE/EhC,KAAK6P,YAAY1O,IAAI,IAAI2O,GAAAA,GAAiB,CACzC/H,KAAM+Z,GAAeE,EAAkBhiB,KAAKiC,KAAKC,QAAQkf,cAAcrZ,KAAO/H,KAAKiC,KAAKC,QAAQmf,gBAAgBtZ,KAChH7H,SAAS,UAAC,GAAA6B,MAAD,CAAOC,GAAG,0CAAV,oJAC8B,UAAC,OAAD,WAAgBhC,KAAKiC,KAAKC,QAAQkf,iBAAqB,UAAC,OAAD,WAAgBphB,KAAKiC,KAAKC,QAAQmf,qBAEhIrR,MAAO,CACN,EAAGxB,GAAAA,GAAAA,MACH,EAAGA,GAAAA,GAAAA,OACH,EAAGA,GAAAA,GAAAA,OAEJvG,MAAO6Z,EAAcE,EACrBjS,KAAK,UAAC,GAAAhO,MAAD,CAAOC,GAAG,sCAAV,4MACuB8f,YAAAA,EAA2FE,gBAAAA,QAIxHhiB,KAAK6P,YAAY1O,IAAI,IAAI2O,GAAAA,GAAiB,CACzC/H,KAAM/H,KAAKiC,KAAKC,QAAQwS,YAAY3M,KACpC7H,SAAS,UAAC,GAAA6B,MAAD,CAAOC,GAAG,+CAAV,uJACW,UAAC,OAAD,WAAgBhC,KAAKiC,KAAKsE,SAASsb,gBAEvD7R,MAAO,CACN,EAAGxB,GAAAA,GAAAA,OACH,EAAGA,GAAAA,GAAAA,OAEJvG,MAAOga,EACPlS,KAAK,UAAC,GAAAhO,MAAD,CAAOC,GAAG,2CAAV,8GACuBigB,cAAAA,OAG7B,K,EAnDmBV,C,SAAcW,GCFdhU,GAAAA,SAAAA,I,4LACpB6D,WAAa2J,GAAAA,GAAAA,a,WADOxN,C,SAAiBiU,GAAjBjU,GAEJvD,abKL,G,gBcNNyX,GAAqB,CAC1B,aAGKC,GAAyB,CAC9B,OACA,YACA,oBACA,mBAGoB5T,GAAAA,SAAAA,I,4LAGZ6T,QAAU,KAAAF,IAAK,KAALA,IAAU,SAAAtR,GAAG,OAAI,EAAK7O,KAAKC,QAAQ4O,GAAK9O,EAA3B,I,8CAE/B,SAAsBmO,GAAc,WACnC,GAAInQ,KAAKkD,OAAO+Z,MAAMC,OAAO,OAAQ,OAC9BqF,EAAa,KAAAF,IAAS,KAATA,IAAc,SAAAvR,GAAG,OAAI,EAAK7O,KAAKC,QAAQ4O,GAAK9O,EAA3B,KACpC,EAAAhC,KAAKsiB,SAAQ9hB,KAAb,gBAAqB+hB,GACrB,CAED,OAAIpS,EAAMjB,OAAOwH,MAAK,SAAAvG,GAAK,aAAI,SAAKmS,SAAL,OAAsBnS,EAAMpQ,OAAhC,IACnB,GAGR,6DAA0BoQ,EAC1B,K,EAhBmB1B,CAAgB+T,GAAAA,GAAhB/T,GACJ9D,adVP,GeSV,QACCnL,EACAsS,GACA6B,GACAmG,GACA2B,GACAG,GACAc,GACAyB,GACAkB,GACAO,GACAmB,GACAxY,GACAgZ,GACArT,GACAO,G,uBC/BD,EAAQ,OACR,IAAIgU,EAAO,EAAQ,OAEnBpjB,EAAOC,QAAUmjB,EAAKre,KAAKse,K,wBCH3B,IAAIC,EAAI,EAAQ,OAEZC,EAAOxe,KAAKwe,KACZC,EAAQze,KAAKye,MAIjBF,EAAE,CAAE7c,OAAQ,OAAQgd,MAAM,GAAQ,CAChCJ,MAAO,SAAeK,GACpB,OAAQA,EAAK,EAAIF,EAAQD,GAAMG,EACjC,G,wBCVF,IAAIC,EAAS,EAAQ,MAErB3jB,EAAOC,QAAU0jB,C","sources":["webpack://@xivanalysis/client/./node_modules/@babel/runtime-corejs3/core-js-stable/math/trunc.js","webpack://@xivanalysis/client/./src/parser/core/modules/ActionTimeline/ActionTimeline.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/ActionTimeline/ActionTimeline.module.css?2f05","webpack://@xivanalysis/client/./src/parser/core/modules/DoTs.ts","webpack://@xivanalysis/client/./src/parser/core/modules/GlobalCooldown.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/Positionals.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/Statuses.ts","webpack://@xivanalysis/client/./src/parser/core/modules/Tincture.ts","webpack://@xivanalysis/client/./src/parser/core/modules/Weaving.tsx","webpack://@xivanalysis/client/./src/parser/jobs/drg/modules/ActionTimeline.tsx","webpack://@xivanalysis/client/./src/parser/jobs/drg/modules/BattleLitany.tsx","webpack://@xivanalysis/client/./src/parser/jobs/drg/modules/DISPLAY_ORDER.ts","webpack://@xivanalysis/client/./src/parser/jobs/drg/modules/BloodOfTheDragon.tsx","webpack://@xivanalysis/client/./src/parser/jobs/drg/modules/Buffs.tsx","webpack://@xivanalysis/client/./src/parser/jobs/drg/modules/Combos.ts","webpack://@xivanalysis/client/./src/parser/jobs/drg/modules/Debuffs.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/ActionWindow/evaluators/DisplayedActionEvaluator.tsx","webpack://@xivanalysis/client/./src/parser/jobs/drg/modules/DragonSight.tsx","webpack://@xivanalysis/client/./src/parser/jobs/drg/modules/Drift.tsx","webpack://@xivanalysis/client/./src/parser/jobs/drg/modules/Gauge.tsx","webpack://@xivanalysis/client/./src/parser/jobs/drg/modules/LanceCharge.tsx","webpack://@xivanalysis/client/./src/parser/jobs/drg/modules/OGCDDowntime.ts","webpack://@xivanalysis/client/./src/parser/jobs/drg/modules/Positionals.ts","webpack://@xivanalysis/client/./src/parser/jobs/drg/modules/Procs.tsx","webpack://@xivanalysis/client/./src/parser/jobs/drg/modules/Tincture.ts","webpack://@xivanalysis/client/./src/parser/jobs/drg/modules/Weaving.ts","webpack://@xivanalysis/client/./src/parser/jobs/drg/modules/index.ts","webpack://@xivanalysis/client/./node_modules/core-js-pure/es/math/trunc.js","webpack://@xivanalysis/client/./node_modules/core-js-pure/modules/es.math.trunc.js","webpack://@xivanalysis/client/./node_modules/core-js-pure/stable/math/trunc.js"],"sourcesContent":["module.exports = require(\"core-js-pure/stable/math/trunc\");","import {Trans} from '@lingui/react'\nimport {Action, ActionKey} from 'data/ACTIONS'\nimport {Analyser} from 'parser/core/Analyser'\nimport {dependency} from 'parser/core/Injectable'\nimport CastTime from 'parser/core/modules/CastTime'\nimport {ChargeHistoryEntry, CooldownEndReason, CooldownGroup, CooldownHistoryEntry, Cooldowns, SelectionSpecifier} from 'parser/core/modules/Cooldowns'\nimport {Data} from 'parser/core/modules/Data'\nimport {ActionItem, BaseItem, ContainerRow, SimpleItem, Timeline} from 'parser/core/modules/Timeline'\nimport React, {ReactNode} from 'react'\nimport {Icon} from 'semantic-ui-react'\nimport {ensureArray, isDefined} from 'utilities'\nimport styles from './ActionTimeline.module.css'\n\nconst ANIMATION_LOCK = 100\n\n// We're excluding the Action interface as it's unessecary for this config format, and complicates the discrimination later.\ntype RowSpecifierEntry = Exclude<SelectionSpecifier, Action>\n\n/**\n * One or more actions, action keys, or cooldown group IDs. The special-case\n * value \"GCD\" is available for selection of the GCD cooldown group.\n */\nexport type RowSpecifier = RowSpecifierEntry | RowSpecifierEntry[]\n\n/** Advanced configuration options for a row. */\nexport interface ActionRowConfig {\n\t/** Specifier(s) for items that should be displayed in this row. */\n\tcontent: RowSpecifier\n\t/** Label to display for the row. */\n\tlabel?: ReactNode\n\t/** Order of the row within the timeline. */\n\torder?: number\n}\n\n/** Configuration for a single row. */\nexport type ActionRow = RowSpecifier | ActionRowConfig\n\n// Internal row config used within the module\ntype InternalRowConfig =\n\t& Omit<ActionRowConfig, 'content'>\n\t& {content: readonly SelectionSpecifier[]}\n\nenum ItemDepth {\n\tCHARGE_GAIN = 0,\n\tACTION = 1,\n}\n\nexport class ActionTimeline extends Analyser {\n\tstatic override handle = 'actionTimeline'\n\tstatic override debug = false\n\n\t/**\n\t * Configuration for the rows generated by this module. Any cooldown groups\n\t * not represented in this configuration will be added to automatically\n\t * generated rows in order of use.\n\t */\n\tstatic rows: ActionRow[] = [\n\t\t{content: 'GCD', order: -97},\n\t]\n\n\t@dependency private castTime!: CastTime\n\t@dependency private cooldowns!: Cooldowns\n\t@dependency private data!: Data\n\t@dependency private timeline!: Timeline\n\n\tprivate resolvedRows: InternalRowConfig[] = []\n\tprivate groupRows = new Map<CooldownGroup, ContainerRow>()\n\n\t/** Retrieve the timeline row representing the specified action. */\n\tgetRow(action: ActionKey | Action) {\n\t\treturn this.addRow({content: [action]})\n\t}\n\n\toverride initialise() {\n\t\t// Add rows for all the configured entries\n\t\tfor (const config of (this.constructor as typeof ActionTimeline).rows) {\n\t\t\tconst resolvedConfig = this.resolveConfig(config)\n\t\t\tthis.resolvedRows.push(resolvedConfig)\n\t\t\tthis.addRow(resolvedConfig)\n\t\t}\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onComplete() {\n\t\t// Track the groups with configured rows so backfill doesn't duplicate\n\t\tconst populatedGroups = new Set<number>()\n\n\t\t// Add rows for all the configured entries\n\t\tfor (const config of this.resolvedRows) {\n\t\t\tconst row = this.addRow(config)\n\t\t\tthis.populateRow(row, config)\n\t\t\tconfig.content.forEach(specifier =>\n\t\t\t\tthis.cooldowns.groups(specifier).forEach(group => populatedGroups.add(group))\n\t\t\t)\n\t\t}\n\n\t\t// Figure out what groups have not been explicitly configured and build rows for them\n\t\tthis.cooldowns.allGroups()\n\t\t\t.filter(group => !populatedGroups.has(group))\n\t\t\t.forEach(group => {\n\t\t\t\tconst config = {content: [group]}\n\t\t\t\tconst row = this.addRow(config)\n\t\t\t\tthis.populateRow(row, config)\n\t\t\t})\n\t}\n\n\tprivate resolveConfig(config: ActionRow): InternalRowConfig {\n\t\t// Standardise the simple config into the main config shape\n\t\tlet finalConfig = config\n\t\tif (typeof finalConfig !== 'object' || Array.isArray(finalConfig)) {\n\t\t\tfinalConfig = {content: finalConfig}\n\t\t}\n\t\treturn {\n\t\t\t...finalConfig,\n\t\t\tcontent: ensureArray(finalConfig.content),\n\t\t}\n\t}\n\n\tprivate addRow(config: InternalRowConfig) {\n\t\t// If there's already a row for one of the specifiers, use it\n\t\tconst groups = config.content.flatMap(specifier => this.cooldowns.groups(specifier))\n\t\tconst existingRow = groups\n\t\t\t.map(group => this.groupRows.get(group))\n\t\t\t.find(isDefined)\n\t\tif (existingRow != null) {\n\t\t\treturn existingRow\n\t\t}\n\n\t\t// Using an IIFE because pattern matching isn't in the spec yet\n\t\tconst firstContent = config.content[0]\n\t\tconst label = (() => {\n\t\t\tif (config.label != null) { return config.label }\n\t\t\tif (firstContent === 'GCD')  { return <Trans id=\"core.action-timeline.label.gcd\">GCD</Trans> }\n\t\t\tif (typeof firstContent === 'string') { return this.data.actions[firstContent].name }\n\t\t\tif (typeof firstContent === 'number') { return this.cooldowns.cooldownHistory(firstContent)[0]?.action.name }\n\t\t\treturn firstContent.name\n\t\t})()\n\n\t\t// Build the row and save it to the groups for this config\n\t\t// TODO: collision handling?\n\t\tconst row = this.timeline.addRow(new ContainerRow({\n\t\t\tlabel,\n\t\t\torder: config.order,\n\t\t\tcollapse: true,\n\t\t}))\n\t\tgroups.forEach(group => this.groupRows.set(group, row))\n\n\t\treturn row\n\t}\n\n\tprivate populateRow(row: ContainerRow, {content}: InternalRowConfig) {\n\t\t// Add all the items\n\t\tthis.addCooldownItems(row, content.flatMap(specifier => this.cooldowns.cooldownHistory(specifier)))\n\t\tthis.addChargeItems(row, content.flatMap(specifier => this.cooldowns.chargeHistory(specifier)))\n\t}\n\n\tprivate addCooldownItems(row: ContainerRow, history: CooldownHistoryEntry[]) {\n\t\tfor (const entry of history) {\n\t\t\tconst duration = this.getCooldownDuration(entry)\n\n\t\t\t// TODO: with the adjusted cast time we might get some overlaps, should we try to avoid that?]\n\t\t\t// TODO: Add interrupt visuals. CD2 only records interrupts within the bounds of a cooldown, so we'll need to track it in some manner for long-cast actions.\n\t\t\tconst start = entry.start - this.parser.pull.timestamp\n\t\t\tconst end = start + duration\n\t\t\trow.addItem(new SimpleItem({\n\t\t\t\tstart,\n\t\t\t\tend,\n\t\t\t\tcontent: <div className={styles.cooldown}/>,\n\t\t\t}))\n\t\t}\n\t}\n\n\tprivate addChargeItems(row: ContainerRow, history: ChargeHistoryEntry[]) {\n\t\tfor (const entry of history) {\n\t\t\tconst item = entry.delta < 0\n\t\t\t\t? new ActionItem({\n\t\t\t\t\tdepth: ItemDepth.ACTION,\n\t\t\t\t\tstart: entry.timestamp - this.parser.pull.timestamp,\n\t\t\t\t\taction: entry.action,\n\t\t\t\t})\n\t\t\t\t: new ChargeGainItem({\n\t\t\t\t\tdepth: ItemDepth.CHARGE_GAIN,\n\t\t\t\t\tstart: entry.timestamp - this.parser.pull.timestamp,\n\t\t\t\t})\n\t\t\trow.addItem(item)\n\t\t}\n\t}\n\n\tprivate getCooldownDuration(entry: CooldownHistoryEntry) {\n\t\tlet duration = entry.end - entry.start\n\n\t\t// If the cooldown expired naturally, it _may_ have a cast time greater than its cooldown.\n\t\tif (entry.endReason === CooldownEndReason.EXPIRED) {\n\t\t\tconst castTime = this.castTime.forAction(entry.action.id, entry.start) ?? 0\n\n\t\t\t// We add the animation lock constant to the cast time to mimic the game's\n\t\t\t// behaviour - also sometimes known as \"caster tax\".\n\t\t\tduration = Math.max(duration, castTime + ANIMATION_LOCK)\n\t\t}\n\n\t\treturn duration\n\t}\n}\n\nclass ChargeGainItem extends BaseItem {\n\tContent = () => (\n\t\t<div className={styles.chargeGain}>\n\t\t\t<Icon name=\"angle double up\" className={styles.icon}/>\n\t\t</div>\n\t)\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"backgroundColour\":\"rgba(213, 221, 246, .4)\",\"chargeColor\":\"color(rgba(213, 221, 246, .4) a(100%) l(-20%))\",\"cooldown\":\"ActionTimeline-module_cooldown__3u1x3\",\"chargeGain\":\"ActionTimeline-module_chargeGain__3-Of9\",\"icon\":\"ActionTimeline-module_icon__8OvsF\"};","import {Status} from 'data/STATUSES'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actor, Actors} from 'parser/core/modules/Actors'\nimport {Data} from 'parser/core/modules/Data'\nimport {Invulnerability} from 'parser/core/modules/Invulnerability'\nimport {Statuses} from 'parser/core/modules/Statuses'\n\nconst MILLISECONDS_PER_MINUTE = 60000\n\ntype DotTracking = Map<Status['id'], Map<Actor['id'], DotTargetTracking>>\ninterface DotTargetTracking {\n\tlastApplied: number\n\ttotalClipping: number\n}\n\nexport abstract class DoTs extends Analyser {\n\tstatic override handle = 'dots'\n\n\t@dependency protected data!: Data\n\t@dependency private actors!: Actors\n\t@dependency private invulnerability!: Invulnerability\n\t@dependency private statuses!: Statuses\n\n\t/** Implementing modules MUST override this with a list of Status IDs. */\n\tprotected abstract trackedStatuses: number[] = []\n\n\tprivate statusApplications: DotTracking = new Map<number, Map<string, DotTargetTracking>>()\n\n\toverride initialise() {\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.type('statusApply')\n\t\t\t\t.source(this.parser.actor.id)\n\t\t\t\t.status(oneOf(this.trackedStatuses)),\n\t\t\tthis.onApply,\n\t\t)\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\t/**\n\t * Implementing modules MUST override this to configure the checklist.\n\t * This should be handled on a job-by-job basis rather than generically, since the description\n\t * text isn't one-size-fits-all, and some jobs may have custom targets.\n\t */\n\tprotected abstract addChecklistRules(): void\n\n\t/**\n\t * Implementing modules MUST override this to configure suggestions.\n\t * This should be handled on a job-by-job basis rather than generically, since different jobs have\n\t * different thresholds for what constitutes bad clipping with varying explanations as to why.\n\t */\n\tprotected abstract addClippingSuggestions(): void\n\n\t/**\n\t * Implementing modules can optionally exclude applications of a status from clipping calculations.\n\t * (e.g. SMN rushing)\n\t */\n\tprotected excludeApplication() {\n\t\treturn false\n\t}\n\n\tprivate onApply(event: Events['statusApply']) {\n\t\tconst status = this.data.getStatus(event.status)\n\t\t// Cannot track for statuses that are not defined with a duration\n\t\tif (status?.duration == null) { return }\n\n\t\t// Get the tracking object for this status\n\t\tlet trackedStatus = this.statusApplications.get(status.id)\n\t\tif (trackedStatus == null) {\n\t\t\ttrackedStatus = new Map<string, DotTargetTracking>()\n\t\t\tthis.statusApplications.set(status.id, trackedStatus)\n\t\t}\n\n\t\t// Get the tracking object for this status on this target\n\t\tconst target = event.target\n\t\tlet trackedStatusOnTarget = trackedStatus.get(target)\n\t\tif (trackedStatusOnTarget == null) {\n\t\t\ttrackedStatusOnTarget = {lastApplied: 0, totalClipping: 0}\n\t\t\ttrackedStatus.set(target, trackedStatusOnTarget)\n\t\t}\n\n\t\t// If it's not been applied yet or should be excluded per job-specific logic (if any), set it and skip out\n\t\tif (trackedStatusOnTarget.lastApplied === 0 || this.excludeApplication()) {\n\t\t\ttrackedStatusOnTarget.lastApplied = event.timestamp\n\t\t\treturn\n\t\t}\n\n\t\t// Base clip calc\n\t\tconst clip = status.duration - (event.timestamp - trackedStatusOnTarget.lastApplied)\n\t\t// Cap clip at 0 - less than that is downtime, which is handled by the checklist requirement\n\t\ttrackedStatusOnTarget.totalClipping += Math.max(0, clip)\n\t\ttrackedStatusOnTarget.lastApplied = event.timestamp\n\t}\n\n\tprivate onComplete() {\n\t\tthis.addChecklistRules()\n\t\tthis.addClippingSuggestions()\n\t}\n\n\t// These two functions are helpers for submodules and should be used but not overridden\n\tprotected getUptimePercent(statusId: number) {\n\t\tconst status = this.data.getStatus(statusId)\n\t\tif (status == null) { return 0 }\n\n\t\tconst statusUptime = this.statuses.getUptime(status, this.actors.foes)\n\t\tconst fightDuration = this.parser.pull.duration - this.invulnerability.getDuration({types: ['invulnerable']})\n\t\treturn (statusUptime / fightDuration) * 100\n\t}\n\n\t// This normalises clipping as milliseconds clipped per minute,\n\t// since some level of clipping is expected and we need tiers that work for both long and short fights\n\tprotected getClippingAmount(statusId: number) {\n\t\tconst fightDuration = (this.parser.pull.duration - this.invulnerability.getDuration({types: ['invulnerable']}))\n\t\tif (fightDuration <= 0) { return 0 }\n\n\t\tconst statusApplications = this.statusApplications.get(statusId)\n\t\tif (statusApplications == null) { return 0 }\n\n\t\tconst totalClipping = Array.from(statusApplications.values()).reduce((clip, target) => clip + target.totalClipping, 0)\n\t\tconst clipMSPerMin = Math.round(totalClipping / (fightDuration / MILLISECONDS_PER_MINUTE))\n\t\treturn clipMSPerMin\n\t}\n}\n","import {MessageDescriptor} from '@lingui/core'\nimport {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport TransMarkdown from 'components/ui/TransMarkdown'\nimport {BASE_GCD} from 'data/CONSTANTS'\nimport React from 'react'\nimport {Report} from 'report'\nimport {Analyser} from '../Analyser'\nimport {dependency} from '../Injectable'\nimport {Data} from './Data'\nimport {SpeedAdjustments} from './SpeedAdjustments'\nimport {SimpleStatistic, Statistics} from './Statistics'\n\nconst estimateHelp: Record<Report['meta']['source'] | '__all', MessageDescriptor> = {\n\t__all: t('core.gcd.no-statistics.v2')`This GCD recast is an *estimate*, and may be incorrect. If it is reporting a GCD recast *longer* than reality, you likely need to focus on keeping your GCD rolling.`,\n\tlegacyFflogs: t('core.gcd.estimate-help.fflogs')`Precise attribute values are only available from FF Logs for the player who logged the report in ACT.`,\n}\n\nexport class GlobalCooldown extends Analyser {\n\tstatic override handle = 'gcd'\n\n\t@dependency private data!: Data\n\t@dependency private statistics!: Statistics\n\t@dependency private speedAdjustments!: SpeedAdjustments\n\n\toverride initialise() {\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\t/**\n\t * Get the base recast time of the parsed actor's GCD cooldown group, in milliseconds.\n\t * The value returned from this function _may_ be an estimate - check {@link GlobalCooldown.isEstimated}\n\t * to see if it is.\n\t */\n\tpublic getDuration() {\n\t\treturn this.speedAdjustments.getAdjustedDuration({duration: BASE_GCD})\n\t}\n\n\t/** Returns whether the GCD duration calculated by this module is an estimate. */\n\tpublic isEstimated() {\n\t\treturn this.speedAdjustments.isAdjustmentEstimated()\n\t}\n\n\tprivate onComplete() {\n\t\tconst estimated = this.isEstimated()\n\n\t\tthis.statistics.add(new SimpleStatistic({\n\t\t\ttitle: estimated\n\t\t\t\t? <Trans id=\"core.gcd.estimated-gcd\">Estimated GCD</Trans>\n\t\t\t\t: <Trans id=\"core.gcd.gcd\">GCD Recast</Trans>,\n\t\t\ticon: this.data.actions.ATTACK.icon,\n\t\t\tvalue: this.parser.formatDuration(this.getDuration()),\n\t\t\tinfo: estimated ? <>\n\t\t\t\t<TransMarkdown source={estimateHelp.__all}/>\n\t\t\t\t<TransMarkdown source={estimateHelp[this.parser.report.meta.source]}/>\n\t\t\t</> : undefined,\n\t\t}))\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {ActionLink, DataLink} from 'components/ui/DbLink'\nimport {Action, getPotencyWithMods, getBasePotency} from 'data/ACTIONS'\nimport {BonusModifier} from 'data/ACTIONS/type'\nimport {Event, Events} from 'event'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport Checklist, {Requirement, Rule} from 'parser/core/modules/Checklist'\nimport DISPLAY_ORDER from 'parser/core/modules/DISPLAY_ORDER'\nimport {Timeline} from 'parser/core/modules/Timeline'\nimport React from 'react'\nimport {Button, Table} from 'semantic-ui-react'\nimport {Analyser} from '../Analyser'\nimport {Data} from './Data'\n\nexport interface PositionalResult {\n\tpositional: Action,\n\thits: Array<Events['damage']>,\n\tmisses: Array<Events['damage']>\n}\n\nconst NO_BONUS_PERCENT = 0\n\nexport abstract class Positionals extends Analyser {\n\t@dependency protected data!: Data\n\t@dependency private checklist!: Checklist\n\t@dependency private timeline!: Timeline\n\n\tstatic override handle = 'positionals'\n\tstatic override title = t('core.positionals.title')`Positionals`\n\tstatic override displayOrder = DISPLAY_ORDER.POSITIONALS\n\n\tprivate positionalResults: PositionalResult[] = []\n\n\t/**\n\t * Jobs MUST provide a list of their positional actions\n\t *\n\t * TODO: This should just be a filter on all actions for the job for\n\t * any actions they have with positional potencies.\n\t */\n\tprotected abstract positionals: Action[]\n\n\toverride initialise() {\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>().source(this.parser.actor.id).type('damage')\n\t\t\t\t.cause(this.data.matchCauseActionId(this.positionals.map(positional => positional.id))), this.onCast)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onCast(event: Events['damage']) {\n\t\tif (event.cause.type !== 'action') {\n\t\t\treturn\n\t\t}\n\t\tconst action = this.data.getAction(event.cause.action)\n\t\tif (action == null) {\n\t\t\treturn\n\t\t}\n\t\tconst positional = this.positionals.find(positional => positional === action)\n\t\tif (positional == null) {\n\t\t\treturn\n\t\t}\n\n\t\tconst positionalResult = this.getOrCreatePositionalResult(positional)\n\n\t\t// All positionals are single target skills, so getting the 0 index\n\t\t// should be all we need to do here.\n\t\tif (this.positionalHit(positional, event.targets[0].bonusPercent)) {\n\t\t\tpositionalResult.hits.push(event)\n\t\t} else {\n\t\t\tpositionalResult.misses.push(event)\n\t\t}\n\t}\n\n\tprivate getOrCreatePositionalResult(positional: Action) {\n\t\tlet positionalResult = this.positionalResults.find(result => result.positional === positional)\n\t\tif (positionalResult == null) {\n\t\t\tpositionalResult = {\n\t\t\t\tpositional,\n\t\t\t\thits: [],\n\t\t\t\tmisses: [],\n\t\t\t}\n\t\t\tthis.positionalResults.push(positionalResult)\n\t\t}\n\t\treturn positionalResult\n\t}\n\n\t// The \"hit\" version of this function needs to check for more\n\t// things such as DRG's 5th hit combo buff and RPR's reaver buff.\n\t// Luckily, assessing misses is easy and sufficient for the purposes\n\t// of detecting positional hits.\n\tprivate missedPositionalBonusPercents(action: Action) {\n\t\tconst missed_positional_combo_bonus_percent = this.calculateBonusPercent(\n\t\t\tgetBasePotency(action),\n\t\t\tgetPotencyWithMods(action, [BonusModifier.COMBO], []))\n\t\treturn [...new Set([NO_BONUS_PERCENT, missed_positional_combo_bonus_percent])]\n\t}\n\n\t// Currently just checks that you didn't miss. Checking for hits would\n\t// otherwise be more complex.\n\tprivate positionalHit(action: Action, bonusPercent: number) {\n\t\treturn !this.missedPositionalBonusPercents(action).includes(bonusPercent)\n\t}\n\n\t// The bonusPercent is based on the final potency number.\n\tprivate calculateBonusPercent(base: number, bonus: number) {\n\t\treturn Math.trunc(100 * (1 - base / bonus))\n\t}\n\n\tprivate relativeTimestamp(timestamp: number) {\n\t\treturn timestamp - this.parser.pull.timestamp\n\t}\n\n\tprivate createTimelineButton(timestamp: number) {\n\t\tconst relative_timestamp = this.relativeTimestamp(timestamp)\n\t\treturn <Button\n\t\t\tcircular\n\t\t\tcompact\n\t\t\ticon=\"time\"\n\t\t\tsize=\"small\"\n\t\t\tonClick={() => this.timeline.show(relative_timestamp, relative_timestamp)}\n\t\t\tcontent={this.parser.formatEpochTimestamp(timestamp)}\n\t\t/>\n\t}\n\n\tprivate onComplete() {\n\t\tif (this.positionalResults.length === 0) {\n\t\t\treturn\n\t\t}\n\t\tthis.checklist.add(new Rule({\n\t\t\tname: <Trans id=\"core.positionals.checklist.title\">Hit your positionals</Trans>,\n\t\t\tdisplayOrder: DISPLAY_ORDER.POSITIONALS,\n\t\t\tdescription: <Trans id=\"core.positionals.checklist.description\">\n\t\t\t\tMelee DPS jobs have some skills that will do more damage when used from the rear or flank.\n\t\t\t\tMake sure you use those skills in the right position to do the most damage, or\n\t\t\t\tuse <DataLink action=\"TRUE_NORTH\"/> when you are out of position.\n\t\t\t</Trans>,\n\t\t\trequirements: this.positionalResults.map(this.positionalRequirement),\n\t\t}))\n\t}\n\tprivate positionalRequirement(result: PositionalResult) {\n\t\tconst actual = result.hits.length\n\t\tconst numMisses = result.misses.length\n\t\tconst expected = actual + numMisses\n\t\tlet percent = actual / expected * 100\n\t\tif (process.env.NODE_ENV === 'production') {\n\t\t\tpercent = Math.min(percent, 100)\n\t\t}\n\t\treturn new Requirement({\n\t\t\tname: <ActionLink {...result.positional}/>,\n\t\t\tpercent: percent,\n\t\t\tweight: expected,\n\t\t\toverrideDisplay: `${actual} / ${expected} (${percent.toFixed(2)}%)`,\n\t\t})\n\t}\n\n\toverride output(): React.ReactNode {\n\t\tconst totalMisses = this.positionalResults.reduce((total, current) => total + current.misses.length, 0)\n\n\t\tif (totalMisses === 0) { return }\n\n\t\treturn <Table compact unstackable celled textAlign=\"center\">\n\t\t\t<Table.Header>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong><Trans id=\"core.ui.positionals-table.header.action\">Action</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong><Trans id=\"core.ui.positionals-table.header.hits\">Hits</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong><Trans id=\"core.ui.positionals-table.header.misses\">Misses</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{\n\t\t\t\t\tthis.positionalResults.map(result => {\n\t\t\t\t\t\tconst numHits = result.hits.length\n\t\t\t\t\t\tconst numMisses = result.misses.length\n\t\t\t\t\t\tconst success = numMisses === 0\n\t\t\t\t\t\treturn <Table.Row key={result.positional.id}>\n\t\t\t\t\t\t\t<Table.Cell style={{whiteSpace: 'nowrap'}}>\n\t\t\t\t\t\t\t\t<ActionLink {...result.positional} showName={false} />\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t<Table.Cell\n\t\t\t\t\t\t\t\ttextAlign=\"center\"\n\t\t\t\t\t\t\t\tpositive={success}\n\t\t\t\t\t\t\t\tnegative={!success}\n\t\t\t\t\t\t\t>{numHits}/{numMisses + numHits}\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t<Table.Cell textAlign=\"left\">\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tresult.misses.map(miss => {\n\t\t\t\t\t\t\t\t\t\treturn this.createTimelineButton(miss.timestamp)\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t</Table.Row>\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</Table.Body>\n\t\t</Table>\n\t}\n}\n","import {Status, StatusKey} from 'data/STATUSES'\nimport {Events} from 'event'\nimport {ensureArray} from 'utilities'\nimport {Analyser} from '../Analyser'\nimport {dependency} from '../Injectable'\nimport {Actor, StatusEvent} from './Actors'\nimport {Data} from './Data'\nimport {Invulnerability} from './Invulnerability'\n\ninterface Edge {\n\tside: 'apply' | 'remove'\n\ttimestamp: number\n}\n\nexport class Statuses extends Analyser {\n\tstatic override handle = 'statuses'\n\tstatic override debug = false\n\n\t@dependency private readonly data!: Data\n\t@dependency private readonly invulnerability!: Invulnerability\n\n\t/**\n\t * Calculate the total uptime of the specified status across allspecified actors.\n\t * @param statusSpecifier Status to calculate uptime of.\n\t * @param targetSpecifier Target(s) that should be checked for the status.\n\t * @param source Source of statuses to filter by. Defaults to the parsed actor.\n\t */\n\tgetUptime(\n\t\tstatusSpecifier: StatusKey | Status,\n\t\ttargetSpecifier: Actor | Actor[],\n\t\tsource = this.parser.actor\n\t) {\n\t\t// Resolve arguments.\n\t\tconst status = typeof statusSpecifier === 'string'\n\t\t\t? this.data.statuses[statusSpecifier]\n\t\t\t: statusSpecifier\n\n\t\tconst targets = ensureArray(targetSpecifier)\n\n\t\t// Collect all the status history for the specified status/target/source combo.\n\t\tconst edges = targets.flatMap(target => this.edgesForActor(\n\t\t\ttarget,\n\t\t\ttarget.statusHistory.get(status.id)?.get(source.id) ?? []\n\t\t))\n\n\t\t// Edges are mapped from multiple potential targets; interlace by sorting by timestamp.\n\t\tedges.sort((a, b) => a.timestamp - b.timestamp)\n\n\t\t// Sum time when any of the specified targets had the status.\n\t\tconst meta = {uptime: 0, depth: 0, application: 0}\n\t\tfor (const edge of edges) {\n\t\t\tif (edge.side === 'apply') {\n\t\t\t\tif (meta.depth === 0) {\n\t\t\t\t\tmeta.application = edge.timestamp\n\t\t\t\t}\n\t\t\t\tmeta.depth ++\n\n\t\t\t} else {\n\t\t\t\tmeta.depth --\n\t\t\t\tif (meta.depth === 0) {\n\t\t\t\t\tmeta.uptime += edge.timestamp - meta.application\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.debug(`Status ${status.name} ${edge.side} at ${this.ft(edge.timestamp)}, depth=${meta.depth}`)\n\t\t}\n\n\t\treturn meta.uptime\n\t}\n\n\tprivate edgesForActor(target: Actor, events: StatusEvent[]) {\n\t\t// We can safely assume status events from an actor will alternate between apply and remove.\n\t\tconst edges: Edge[] = []\n\t\tlet apply: Events['statusApply'] | undefined\n\t\tlet refresh: Events['statusApply'] | undefined\n\n\t\tfor (const event of events) {\n\t\t\t// Track the initial application and refreshes.\n\t\t\tif (event.type === 'statusApply') {\n\t\t\t\tapply ??= event\n\t\t\t\trefresh = event\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif (apply == null) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Window has been closed, merge any edges in.\n\t\t\tedges.push(...this.splitRangeForInvulns(\n\t\t\t\ttarget,\n\t\t\t\tapply.timestamp,\n\t\t\t\tevent.timestamp\n\t\t\t))\n\t\t\tapply = undefined\n\t\t}\n\n\t\t// If we've got a dangling apply, build edges for it.\n\t\tif (apply != null) {\n\t\t\t// Try to find a reasonable remove time for the status, if it has a duration.  Cap to the end of the fight.\n\t\t\tconst statusDuration = this.data.getStatus(apply.status)?.duration\n\t\t\tconst remove = statusDuration == null\n\t\t\t\t? this.parser.currentEpochTimestamp\n\t\t\t\t: Math.min((refresh ?? apply).timestamp + statusDuration, this.parser.currentEpochTimestamp)\n\n\t\t\tedges.push(...this.splitRangeForInvulns(\n\t\t\t\ttarget,\n\t\t\t\tapply.timestamp,\n\t\t\t\tremove,\n\t\t\t))\n\t\t}\n\n\t\treturn edges\n\t}\n\n\tprivate splitRangeForInvulns(target: Actor, apply: number, remove: number): Edge[] {\n\t\tlet range = {apply, remove}\n\t\tconst finalRanges = [range]\n\n\t\t// Get the invuln windows that occured during this range\n\t\tconst invulns = this.invulnerability.getWindows({\n\t\t\tstart: apply,\n\t\t\tend: remove,\n\t\t\tactorFilter: actor => actor.kind === target.kind,\n\t\t\ttypes: ['invulnerable'],\n\t\t})\n\n\t\tfor (const invuln of invulns) {\n\t\t\t// Invuln clipped start of range.\n\t\t\tif (invuln.start < range.apply && invuln.end >= range.apply) {\n\t\t\t\tthis.debug(`Start clip, [${this.ft(range.apply)},${this.ft(range.remove)}] -> [${this.ft(invuln.end)},${this.ft(range.remove)}]`)\n\n\t\t\t\trange.apply = invuln.end\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Invuln clipped end of range.\n\t\t\tif (invuln.start <= range.remove && invuln.end > range.remove) {\n\t\t\t\tthis.debug(`End clip, [${this.ft(range.apply)},${this.ft(range.remove)}] -> [${this.ft(range.apply)},${this.ft(invuln.start)}]`)\n\n\t\t\t\trange.remove = invuln.start\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Everything else should be a range split, sanity check.\n\t\t\tif (invuln.start < range.apply || invuln.end > range.remove) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tthis.debug(`Split [${this.ft(range.apply)},${this.ft(range.remove)}] -> [${this.ft(range.apply)},${this.ft(invuln.start)}], [${this.ft(invuln.end)},${this.ft(range.remove)}]`)\n\n\t\t\t// Split the range into two around the invuln.\n\t\t\tconst previousRange = range\n\t\t\trange = {...range}\n\t\t\tfinalRanges.push(range)\n\n\t\t\tpreviousRange.remove = invuln.start\n\t\t\trange.apply = invuln.end\n\t\t}\n\n\t\t// Map the ranges into edges.\n\t\treturn finalRanges.flatMap(range => [\n\t\t\t{side: 'apply', timestamp: range.apply},\n\t\t\t{side: 'remove', timestamp: range.remove},\n\t\t] as const)\n\t}\n\n\t// Small utility for formatting timestamps, as we do it a _lot_ in debug messages\n\tprivate ft = (timestamp: number) => this.parser.formatEpochTimestamp(timestamp, 1)\n}\n","import {t} from '@lingui/macro'\nimport {BuffWindow} from './ActionWindow/windows/BuffWindow'\n\nexport class Tincture extends BuffWindow {\n\tstatic override handle = 'tincture'\n\tstatic override title = t('core.tincture.title')`Tinctures`\n\n\tbuffStatus = this.data.statuses.MEDICATED\n\n\t// No initialise since only the table display is desired without\n\t// any evaluation as to expected actions.\n}\n","import {t} from '@lingui/macro'\nimport {Trans, Plural} from '@lingui/react'\nimport NormalisedMessage from 'components/ui/NormalisedMessage'\nimport Rotation from 'components/ui/Rotation'\nimport {Action} from 'data/ACTIONS'\nimport {BASE_GCD} from 'data/CONSTANTS'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport CastTime from 'parser/core/modules/CastTime'\nimport {Data} from 'parser/core/modules/Data'\nimport {Invulnerability} from 'parser/core/modules/Invulnerability'\nimport Suggestions, {TieredSuggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport React, {ReactNode} from 'react'\nimport {Accordion} from 'semantic-ui-react'\nimport {matchClosestLower} from 'utilities'\n\nconst CAST_TIME_MAX_WEAVES = {\n\t0: 2,\n\t1000: 1,\n\t2500: 0,\n}\nconst REDUCE_MAX_WEAVES_RECAST_BELOW = 1800\nconst DEFAULT_MAX_WEAVES = 2\n\nconst WEAVING_SEVERITY = {\n\t1: SEVERITY.MEDIUM,\n\t5: SEVERITY.MAJOR,\n}\n\nexport interface Weave {\n\tleadingGcdEvent?: Events['action'],\n\ttrailingGcdEvent: Events['action'],\n\tgcdTimeDiff: number,\n\tweaves: Array<Events['action']>,\n}\n\nexport class Weaving extends Analyser {\n\tstatic override handle = 'weaving'\n\n\t@dependency protected castTime!: CastTime\n\t@dependency protected data!: Data\n\t@dependency private invulnerability!: Invulnerability\n\t@dependency protected suggestions!: Suggestions\n\n\tstatic override title = t('core.weaving.title')`Weaving Issues`\n\n\tprotected suggestionIcon: string = 'https://xivapi.com/i/001000/001785.png' // WVR Focused Synth\n\n\tprotected moduleLink = (\n\t\t<a style={{cursor: 'pointer'}} onClick={() => this.parser.scrollTo(Weaving.handle)}>\n\t\t\t<NormalisedMessage message={Weaving.title}/>\n\t\t</a>\n\t)\n\tprotected suggestionContent: ReactNode = <Trans id=\"core.weaving.content\">\n\t\tAvoid weaving more actions than you have time for in a single GCD window. Doing so will delay your next GCD, reducing possible uptime. Check the {this.moduleLink} module below for more detailed analysis.\n\t</Trans>\n\n\tprotected severity = WEAVING_SEVERITY\n\n\tprivate weaves: Array<Events['action']> = []\n\tprivate ongoingCastEvent?: Events['prepare']\n\tprivate leadingGcdEvent?: Events['action']\n\tprivate trailingGcdEvent?: Events['action']\n\tprivate badWeaves: Weave[] = []\n\n\toverride initialise() {\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\n\t\tthis.addEventHook(playerFilter.type('prepare'), this.onBeginCast)\n\t\tthis.addEventHook(playerFilter.type('action'), this.onCast)\n\t\tthis.addEventHook(filter<Event>().type('complete'), this.onComplete)\n\t\tthis.addEventHook(filter<Event>().type('death'), this.clearWeave)\n\t}\n\n\tprivate onBeginCast(event: Events['prepare']) {\n\t\tthis.ongoingCastEvent = event\n\t}\n\n\tprivate onCast(event: Events['action']) {\n\t\tconst action = this.data.getAction(event.action)\n\n\t\t// If the action is an auto, just ignore it\n\t\tif (!action || action.autoAttack) {\n\t\t\treturn\n\t\t}\n\n\t\t// If it's not a GCD, just bump the weave count\n\t\tif (this.isOgcd(action)) {\n\t\t\tthis.weaves.push(event)\n\t\t\treturn\n\t\t}\n\n\t\tif (this.ongoingCastEvent && this.ongoingCastEvent.action === action.id) {\n\t\t\t// This event is the end of a GCD cast\n\t\t\tthis.trailingGcdEvent = {\n\t\t\t\t...event,\n\t\t\t\t// Override the timestamp of the GCD with when its cast began\n\t\t\t\ttimestamp: this.ongoingCastEvent.timestamp,\n\t\t\t}\n\t\t} else {\n\t\t\t// This event was an instant GCD (or log missed the cast starting)\n\t\t\tthis.trailingGcdEvent = event\n\t\t}\n\n\t\t// Always reset the ongoing cast\n\t\tthis.ongoingCastEvent = undefined\n\n\t\t// Throw the current state onto the history\n\t\tthis.saveIfBad()\n\n\t\t// Reset\n\t\tthis.leadingGcdEvent = this.trailingGcdEvent\n\t\tthis.weaves = []\n\t}\n\n\tprivate onComplete() {\n\t\t// If there's been at least one gcd, run a cleanup on any remnant data\n\t\tif (this.leadingGcdEvent) {\n\t\t\tthis.saveIfBad()\n\t\t}\n\n\t\t// Few triples is medium, any more is major\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.suggestionIcon,\n\t\t\tcontent: this.suggestionContent,\n\t\t\twhy: <Plural\n\t\t\t\tid=\"core.weaving.why\"\n\t\t\t\tvalue={this.badWeaves.length}\n\t\t\t\t_1=\"# instance of incorrect weaving\"\n\t\t\t\tother=\"# instances of incorrect weaving\"\n\t\t\t/>,\n\t\t\ttiers: this.severity,\n\t\t\tvalue: this.badWeaves.length,\n\t\t}))\n\t}\n\n\tprivate saveIfBad() {\n\t\tif (this.trailingGcdEvent == null) { return }\n\n\t\tconst leadingTimestamp = this.leadingGcdEvent?.timestamp ?? this.parser.pull.timestamp\n\t\tconst gcdTimeDiff = this.trailingGcdEvent.timestamp\n\t\t\t- leadingTimestamp\n\t\t\t- this.invulnerability.getDuration({\n\t\t\t\tstart: leadingTimestamp,\n\t\t\t\tend: this.trailingGcdEvent.timestamp,\n\t\t\t})\n\n\t\tconst weave: Weave = {\n\t\t\tleadingGcdEvent: this.leadingGcdEvent,\n\t\t\ttrailingGcdEvent: this.trailingGcdEvent,\n\t\t\tgcdTimeDiff,\n\t\t\tweaves: this.weaves,\n\t\t}\n\n\t\tif (weave.weaves.length === 0) {\n\t\t\treturn\n\t\t}\n\n\t\tif (this.isBadWeave(weave)) {\n\t\t\tthis.badWeaves.push(weave)\n\t\t}\n\t}\n\n\tprivate isOgcd(action: Action) {\n\t\treturn !action.onGcd && !action.autoAttack\n\t}\n\n\tprivate isBadWeave(weave: Weave) {\n\t\t// Calc. the no. of weaves - we're ignoring any made while the boss is untargetable, and events that happened before the pull\n\t\tconst weaveCount = weave.weaves.filter(\n\t\t\tevent => true\n\t\t\t\t&& !this.invulnerability.isActive({timestamp: event.timestamp, types: ['untargetable']})\n\t\t\t\t&& event.timestamp >= this.parser.pull.timestamp,\n\t\t).length\n\n\t\tconst recast = ((weave.leadingGcdEvent != null) ? this.castTime.recastForEvent(weave.leadingGcdEvent) : undefined) ?? BASE_GCD\n\t\t// Check the downtime-adjusted GCD time difference for this weave - do not treat multiple weaves during downtime as bad weaves\n\t\treturn weave.gcdTimeDiff > recast && weaveCount > this.getMaxWeaves(weave)\n\t}\n\n\tprivate clearWeave() {\n\t\t// prompts saving any existing weaves if they're bad, and reset\n\t\tif (this.weaves.length > 0) {\n\t\t\tthis.saveIfBad()\n\t\t}\n\n\t\t// remove existing weaves and pretend the next leadingGcdEvent is like a fresh start (which I guess it is)\n\t\tthis.weaves = []\n\t\tthis.leadingGcdEvent = undefined\n\t}\n\n\t/**\n\t * Implementing classes MAY override this in order to provide custom logic for determining the number of max weaves, given the leading GCD Event\n\t * @param event The Action Event of the leading GCD.  Will be undefined for the first GCD of the pull - default behavior is to allow 2 weaves in case of missing pre-pull action\n\t * @returns number of allowed weaves after the leading GCD before flagging as bad weaving\n\t */\n\tprotected getMaxWeaves(weave: Weave): number {\n\t\tif (weave.leadingGcdEvent == null) {\n\t\t\treturn DEFAULT_MAX_WEAVES\n\t\t}\n\n\t\tconst castTime = this.castTime.forEvent(weave.leadingGcdEvent)\n\t\tif (castTime == null)  {\n\t\t\treturn DEFAULT_MAX_WEAVES\n\t\t}\n\n\t\tconst maxWeaves = matchClosestLower(CAST_TIME_MAX_WEAVES, castTime) ?? DEFAULT_MAX_WEAVES\n\t\tconst recastTime = this.castTime.recastForEvent(weave.leadingGcdEvent) ?? BASE_GCD\n\n\t\treturn maxWeaves - (recastTime < REDUCE_MAX_WEAVES_RECAST_BELOW ? 1 : 0)\n\t}\n\n\toverride output() {\n\t\tif (this.badWeaves.length === 0) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst panels = this.badWeaves.map(item => ({\n\t\t\tkey: item.leadingGcdEvent?.timestamp ?? this.parser.pull.timestamp,\n\t\t\ttitle: {\n\t\t\t\tcontent: <>\n\t\t\t\t\t<strong>{this.parser.formatEpochTimestamp(item.leadingGcdEvent?.timestamp ?? this.parser.pull.timestamp)}</strong>\n\t\t\t\t\t&nbsp;-&nbsp;\n\t\t\t\t\t<Plural\n\t\t\t\t\t\tid=\"core.weaving.panel-count\"\n\t\t\t\t\t\tvalue={item.weaves.length}\n\t\t\t\t\t\t_1=\"# weave\"\n\t\t\t\t\t\tother=\"# weaves\"\n\t\t\t\t\t/>\n\t\t\t\t\t&nbsp;(\n\t\t\t\t\t{this.parser.formatDuration(item.gcdTimeDiff)}\n\t\t\t\t\t&nbsp;\n\t\t\t\t\t<Trans id=\"core.weaving.between-gcds\">between GCDs</Trans>\n\t\t\t\t\t)\n\t\t\t\t</>,\n\t\t\t},\n\t\t\tcontent: {\n\t\t\t\tcontent: <Rotation events={[\n\t\t\t\t\t...(item.leadingGcdEvent != null ? [item.leadingGcdEvent] : []),\n\t\t\t\t\t...item.weaves,\n\t\t\t\t]}/>,\n\t\t\t},\n\t\t}))\n\n\t\treturn <Accordion\n\t\t\texclusive={false}\n\t\t\tpanels={panels}\n\t\t\tstyled\n\t\t\tfluid\n\t\t/>\n\t}\n}\n","import {ActionRow, ActionTimeline as CoreActionTimeline} from 'parser/core/modules/ActionTimeline'\n\nexport class ActionTimeline extends CoreActionTimeline {\n\tstatic override rows: ActionRow[] = [\n\t\t...CoreActionTimeline.rows,\n\t\t'BATTLE_LITANY',\n\t\t'DRAGON_SIGHT',\n\t\t'LANCE_CHARGE',\n\t\t'JUMP',\n\t\t'HIGH_JUMP',\n\t\t'MIRAGE_DIVE',\n\t\t'GEIRSKOGUL',\n\t\t'NASTROND',\n\t\t'STARDIVER',\n\t\t'SPINESHATTER_DIVE',\n\t\t'DRAGONFIRE_DIVE',\n\t\t'LIFE_SURGE',\n\t\t'ELUSIVE_JUMP',\n\t]\n}\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {Event, Events} from 'event'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {EvaluatedAction, EvaluationOutput, ExpectedGcdCountEvaluator, RaidBuffWindow, WindowEvaluator} from 'parser/core/modules/ActionWindow'\nimport {HistoryEntry} from 'parser/core/modules/ActionWindow/History'\nimport {Actors} from 'parser/core/modules/Actors'\nimport {GlobalCooldown} from 'parser/core/modules/GlobalCooldown'\nimport {SEVERITY} from 'parser/core/modules/Suggestions'\nimport React, {Fragment} from 'react'\nimport DISPLAY_ORDER from './DISPLAY_ORDER'\n\nconst BL_GCD_TARGET = 6\n\nconst BL_DOUBLE_DRG_ERROR = {\n\tNONE: 0,\n\tTHEY_OVERWROTE: 1,\n\tYOU_OVERWROTE: 2,\n}\n\n/**\n * so in theory, you don't have two dragoons in a party\n * but in practice, you might. This evaluator adds notes about\n * windows that either got truncated or stepped on another drg's dragon toes\n */\nclass DoubleDrgEvaluator implements WindowEvaluator {\n\tprivate doubleDrgNote: (window: HistoryEntry<EvaluatedAction[]>) => number\n\n\tconstructor(doubleDrgNote: (window: HistoryEntry<EvaluatedAction[]>) => number) {\n\t\tthis.doubleDrgNote = doubleDrgNote\n\t}\n\n\t// this is purely informational\n\tpublic suggest() { return undefined }\n\n\tpublic output(windows: Array<HistoryEntry<EvaluatedAction[]>>): EvaluationOutput | undefined {\n\t\tconst notes = windows.map(w => this.doubleDrgNote(w))\n\t\tif (notes.every(note => note === BL_DOUBLE_DRG_ERROR.NONE)) {\n\t\t\treturn undefined\n\t\t}\n\n\t\treturn {\n\t\t\tformat: 'notes',\n\t\t\theader: {\n\t\t\t\theader: <Trans id=\"drg.battlelitany.rotation-table.header.interference\">Window Interference</Trans>,\n\t\t\t\taccessor: 'interference',\n\t\t\t},\n\t\t\trows: notes.map(n => {\n\t\t\t\tif (n === BL_DOUBLE_DRG_ERROR.THEY_OVERWROTE) {\n\t\t\t\t\treturn <Trans id=\"drg.battlelitany.notes.they-overwrote\">Overwritten by Other DRG</Trans>\n\t\t\t\t}\n\n\t\t\t\tif (n === BL_DOUBLE_DRG_ERROR.YOU_OVERWROTE) {\n\t\t\t\t\treturn <Trans id=\"drg.battlelitany.notes.you-overwrote\">You Overwrote an Existing Window</Trans>\n\t\t\t\t}\n\n\t\t\t\treturn <></>\n\t\t\t}),\n\t\t}\n\t}\n}\n\n// this implementation of Battle Litany derives from core BuffWindow with a\n// set of custom evaluators that track number of players buffed and whether or\n// not the window overwrote (or was overwritten by) windows started by other DRGs\nexport class BattleLitany extends RaidBuffWindow {\n\tstatic override handle = 'battlelitany'\n\tstatic override title = t('drg.battlelitany.title')`Battle Litany`\n\tstatic override displayOrder = DISPLAY_ORDER.BATTLE_LITANY\n\n\t@dependency private actors!: Actors\n\t@dependency private globalCooldown!: GlobalCooldown\n\n\tbuffAction = this.data.actions.BATTLE_LITANY\n\tbuffStatus = this.data.statuses.BATTLE_LITANY\n\n\t// track the buff applications to players by all drgs\n\tprivate buffApplications: Array<{\n\t\ttimestamp: number\n\t\tappliedByThisDrg: boolean\n\t\tjob: string\n\t}> = []\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tconst blStatusFilter = filter<Event>().type('statusApply').status(this.data.statuses.BATTLE_LITANY.id)\n\t\tthis.addEventHook(blStatusFilter, this.onBlStatusApply)\n\n\t\tconst suggestionIcon = this.data.actions.BATTLE_LITANY.icon\n\t\tconst suggestionWindowName = <ActionLink action=\"BATTLE_LITANY\" showIcon={false} />\n\t\tthis.addEvaluator(new ExpectedGcdCountEvaluator({\n\t\t\texpectedGcds: BL_GCD_TARGET,\n\t\t\tglobalCooldown: this.globalCooldown,\n\t\t\thasStacks: false,\n\t\t\tsuggestionIcon,\n\t\t\tsuggestionContent: <Trans id=\"drg.bl.suggestions.missedgcd.content\">\n\t\t\t\tTry to land at least 6 GCDs during every <ActionLink action=\"BATTLE_LITANY\" /> window.\n\t\t\t</Trans>,\n\t\t\tsuggestionWindowName,\n\t\t\tseverityTiers: {\n\t\t\t\t1: SEVERITY.MINOR,\n\t\t\t\t2: SEVERITY.MEDIUM,\n\t\t\t\t3: SEVERITY.MAJOR,\n\t\t\t},\n\t\t}))\n\n\t\tthis.addEvaluator(new DoubleDrgEvaluator(this.doubleDrgNote.bind(this)))\n\t}\n\n\t/**\n\t * Logs status applications for later analysis\n\t * Tracks if the buff was applied to player by this dragoon, and also\n\t * logs the job of the affected player\n\t * Job data was requested some time ago but am not sure how we want display to work\n\t * or if we still want it, so just holding it in data for now.\n\t */\n\tprivate onBlStatusApply(event: Events['statusApply']) {\n\t\tconst targetActor = this.actors.get(event.target)\n\t\tif (targetActor.playerControlled) {\n\t\t\tthis.buffApplications.push({\n\t\t\t\ttimestamp: event.timestamp,\n\t\t\t\tappliedByThisDrg: event.source === this.parser.actor.id,\n\t\t\t\tjob: targetActor.job,\n\t\t\t})\n\t\t}\n\t}\n\n\t// returns a status code indicating if a buff window was overwritten or truncated\n\t// by overlapping battle litany\n\tprivate doubleDrgNote(buffWindow: HistoryEntry<EvaluatedAction[]>): number {\n\t\tconst actualWindowDuration = (buffWindow?.end ?? buffWindow.start) - buffWindow.start\n\t\tconst lookbackStart = buffWindow.start - this.buffStatus.duration\n\n\t\t// we check whether or not you overwrote someone else first, as you\n\t\t// can directly control that\n\t\tconst otherDrgLookbackAppl = this.buffApplications.filter(ba => {\n\t\t\treturn (\n\t\t\t\t!ba.appliedByThisDrg &&\n\t\t\t\tlookbackStart <= ba.timestamp &&\n\t\t\t\tba.timestamp <= buffWindow.start\n\t\t\t)\n\t\t})\n\n\t\t// don't be rude\n\t\tif (otherDrgLookbackAppl.length > 0) {\n\t\t\treturn BL_DOUBLE_DRG_ERROR.YOU_OVERWROTE\n\t\t}\n\n\t\t// next, we check if someone else overwrote you\n\t\tconst otherDrgApplications = this.buffApplications.filter(ba => {\n\t\t\treturn (\n\t\t\t\t!ba.appliedByThisDrg &&\n\t\t\t\tbuffWindow.start <= ba.timestamp &&\n\t\t\t\tba.timestamp <= buffWindow.start + actualWindowDuration\n\t\t\t)\n\t\t})\n\n\t\t// whoops looks like the other drg overwrote you, bummer\n\t\tif (otherDrgApplications.length > 0) {\n\t\t\treturn BL_DOUBLE_DRG_ERROR.THEY_OVERWROTE\n\t\t}\n\n\t\t// otherwise we're all good\n\t\treturn BL_DOUBLE_DRG_ERROR.NONE\n\t}\n}\n","export default {\n\tBLOOD_OF_THE_DRAGON_CHECKLIST: 1,\n\tDISEMBOWEL: 2,\n\tDEBUFFS: 3,\n\tDRIFT: 10,\n\tBLOOD_OF_THE_DRAGON_GAUGE: 11,\n\tPOSITIONALS: 12,\n\tWEAVING: 13,\n\tLANCE_CHARGE: 14,\n\tDRAGON_SIGHT: 15,\n\tBATTLE_LITANY: 16,\n\tTINCTURES: 17,\n}\n","import {t} from '@lingui/macro'\nimport {Trans, Plural} from '@lingui/react'\nimport Color from 'color'\nimport {ActionLink, DataLink, StatusLink} from 'components/ui/DbLink'\nimport {ActionKey} from 'data/ACTIONS'\nimport {StatusKey} from 'data/STATUSES'\nimport {Event, Events} from 'event'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport BrokenLog from 'parser/core/modules/BrokenLog'\nimport {Cooldowns} from 'parser/core/modules/Cooldowns'\nimport Downtime from 'parser/core/modules/Downtime'\nimport {CounterGauge, Gauge as CoreGauge} from 'parser/core/modules/Gauge'\nimport Suggestions, {TieredSuggestion, Suggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport {Timeline} from 'parser/core/modules/Timeline'\nimport React, {Fragment} from 'react'\nimport {Icon, Message, Table, Accordion, Button} from 'semantic-ui-react'\nimport DISPLAY_ORDER from './DISPLAY_ORDER'\n\nconst DRAGON_DURATION_MILLIS = 30000\nconst LOTD_BUFF_DELAY_MIN = 30000\nconst LOTD_BUFF_DELAY_MAX = 60000\n\nconst LOTD_SHOULD_RUSH_THRESHOLD = 5000\t\t// two GCDs\nconst LOTD_LATE_WINDOW_THRESHOLD = 10000\t// Nastrond CD\n\nconst EXPECTED_NASTRONDS_PER_WINDOW = 3\n\ntype DrgTrackedBuffs = 'LANCE_CHARGE' | 'RIGHT_EYE' | 'BATTLE_LITANY'\n\ninterface ActionWithBuffs {\n\ttimestamp: number\n\tbuffs: StatusKey[],\n\taction: ActionKey,\n}\n\ninterface LifeWindow {\n\tstart: number\n\tduration: number\n\tnastronds: ActionWithBuffs[]\n\tstardivers: ActionWithBuffs[]\n\ttimeToNextBuff: Record<DrgTrackedBuffs, number>\n\tactiveBuffs: StatusKey[],\n\tbuffsInDelayWindow: Record<DrgTrackedBuffs, boolean>\n\tdtOverlapTime: number | null\n\tisLast: boolean\n\tshouldDelay: boolean\n\tshowNoDelayNote: boolean\n\tmissedSdBuff: boolean\n}\n\ninterface LifeWindows {\n\tcurrent?: LifeWindow\n\thistory: LifeWindow[]\n}\n\n// couple flags for detecting end of fight errors\nconst END_OF_FIGHT_ERROR = {\n\tNONE: 0,\n\tSHOULD_HAVE_RUSHED: 1,\n\tOPENED_TOO_LATE: 2,\n}\n\n// gauge constants\nconst MAX_EYES = 2\nconst EYES_PER_CAST = 1\nconst LOTD_COST = 2\n\n// this is like a light blue, similar to the color of mirage dive\n// eslint-disable-next-line @typescript-eslint/no-magic-numbers\nconst EYE_COLOR = Color.rgb(61, 135, 255).fade(0.25).toString()\n\n// Eye gauge is tracked with core gauge (apparently it's called \"First Brood's Gaze\" which I did not know until EW)\n// Life of the dragon windows are manually tracked and analyzed.\nexport class BloodOfTheDragon extends CoreGauge {\n\tstatic override handle = 'bloodOfTheDragon'\n\tstatic override title = t('drg.blood.title')`Life of the Dragon`\n\n\t@dependency private actors!: Actors\n\t@dependency private brokenLog!: BrokenLog\n\t@dependency private cooldowns!: Cooldowns\n\t@dependency private downtime!: Downtime\n\t@dependency private suggestions!: Suggestions\n\t@dependency private timeline!: Timeline\n\n\tstatic override displayOrder = DISPLAY_ORDER.BLOOD_OF_THE_DRAGON_GAUGE\n\n\t// Null assumption, in case they precast. In all likelyhood, this will actually be incorrect, but there's no harm if\n\t// that's the case since BotD should be the very first weave in the fight and that'll reset the duration to 30s anyway.\n\t// Also, this way we don't count the first second of the fight as erroneous downtime.\n\tprivate lifeDuration = 0\n\tprivate lifeWindows: LifeWindows = {\n\t\tcurrent: undefined,\n\t\thistory: [],\n\t}\n\tprivate lastEventTime = this.parser.pull.timestamp\n\tprivate lastMdTime = this.parser.pull.timestamp\n\tprivate lastGskTime = this.parser.pull.timestamp\n\n\tprivate eyeGauge = this.add(new CounterGauge({\n\t\tmaximum: MAX_EYES,\n\t\tgraph: {\n\t\t\tlabel: <Trans id=\"drg.gauge.resource.eyes\">First Brood's Gaze</Trans>,\n\t\t\tcolor: EYE_COLOR,\n\t\t},\n\t\tcorrectHistory: true,\t// correct for carryover in alliance raids\n\t\tdeterministic: true,\n\t}))\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\n\t\tthis.addEventHook(playerFilter.type('action').action(this.data.actions.MIRAGE_DIVE.id), this.onMirageDiveCast)\n\t\tthis.addEventHook(playerFilter.type('action').action(this.data.actions.GEIRSKOGUL.id), this.onGeirskogulCast)\n\t\tthis.addEventHook(playerFilter.type('action').action(this.data.actions.NASTROND.id), this.onNastrondCast)\n\t\tthis.addEventHook(playerFilter.type('action').action(this.data.actions.STARDIVER.id), this.onStardiverCast)\n\t\tthis.addEventHook(filter<Event>().actor(this.parser.actor.id).type('death'), this.onDeathLotd)\n\t\tthis.addEventHook('complete', this.onComplete)\n\n\t}\n\n\t// duplicate code from other PRs\n\tprivate getActiveDrgBuffs(): StatusKey[] {\n\t\tconst active: StatusKey[] = []\n\n\t\tif (this.actors.current.hasStatus(this.data.statuses.LANCE_CHARGE.id)) {\n\t\t\tactive.push('LANCE_CHARGE')\n\t\t}\n\n\t\tif (this.actors.current.hasStatus(this.data.statuses.BATTLE_LITANY.id)) {\n\t\t\tactive.push('BATTLE_LITANY')\n\t\t}\n\n\t\tif (\n\t\t\tthis.actors.current.hasStatus(this.data.statuses.RIGHT_EYE.id) ||\n\t\t\tthis.actors.current.hasStatus(this.data.statuses.RIGHT_EYE_SOLO.id)\n\t\t) {\n\t\t\tactive.push('RIGHT_EYE')\n\t\t}\n\n\t\treturn active\n\t}\n\n\tprivate createTimelineButton(timestamp: number) {\n\t\treturn <Button\n\t\t\tcircular\n\t\t\tcompact\n\t\t\ticon=\"time\"\n\t\t\tsize=\"small\"\n\t\t\tonClick={() => this.timeline.show(timestamp - this.parser.pull.timestamp, timestamp - this.parser.pull.timestamp)}\n\t\t\tcontent={this.parser.formatEpochTimestamp(timestamp)}\n\t\t/>\n\t}\n\t// end duplicate code\n\n\tprivate finishLifeWindow() {\n\t\tif (this.lifeWindows.current != null) {\n\t\t\tthis.lifeWindows.current.duration = this.parser.currentEpochTimestamp - this.lifeWindows.current.start\n\t\t\tthis.lifeWindows.history.push(this.lifeWindows.current)\n\t\t\tthis.lifeWindows.current = undefined\n\t\t}\n\t}\n\n\tprivate updateGauge() {\n\t\tconst elapsedTime = this.parser.currentEpochTimestamp - this.lastEventTime\n\t\tif (this.lifeWindows.current != null) {\n\t\t\tthis.lifeDuration -= elapsedTime\n\t\t\tif (this.lifeDuration <= 0) {\n\t\t\t\t// We're reverting out of Life\n\t\t\t\tthis.finishLifeWindow()\n\t\t\t\tthis.lifeDuration = 0\n\t\t\t}\n\t\t}\n\n\t\tthis.lastEventTime = this.parser.currentEpochTimestamp\n\t}\n\n\tonMirageDiveCast(event: Events['action']) {\n\t\tthis.updateGauge()\n\t\tthis.lastMdTime = event.timestamp\n\n\t\t// You can accrue eyes in LotD too\n\t\tthis.eyeGauge.generate(EYES_PER_CAST)\n\t}\n\n\tonGeirskogulCast(event: Events['action']) {\n\t\tthis.updateGauge()\n\t\tthis.lastGskTime = event.timestamp\n\n\t\tif (this.eyeGauge.value === MAX_EYES) {\n\t\t\t// LotD tiiiiiime~\n\t\t\tthis.lifeDuration = DRAGON_DURATION_MILLIS\n\t\t\tthis.lifeWindows.current = {\n\t\t\t\tstart: this.parser.currentEpochTimestamp,\n\t\t\t\tduration: this.lifeDuration,\n\t\t\t\tnastronds: [],\n\t\t\t\tstardivers: [],\n\t\t\t\ttimeToNextBuff: {\n\t\t\t\t\t'LANCE_CHARGE': this.cooldowns.remaining('LANCE_CHARGE'),\n\t\t\t\t\t'RIGHT_EYE': this.cooldowns.remaining('DRAGON_SIGHT'),\n\t\t\t\t\t'BATTLE_LITANY': this.cooldowns.remaining('BATTLE_LITANY'),\n\t\t\t\t},\n\t\t\t\tactiveBuffs: this.getActiveDrgBuffs(),\n\t\t\t\tbuffsInDelayWindow: {\n\t\t\t\t\t'LANCE_CHARGE': false,\n\t\t\t\t\t'RIGHT_EYE': false,\n\t\t\t\t\t'BATTLE_LITANY': false,\n\t\t\t\t},\n\t\t\t\tdtOverlapTime: null,\n\t\t\t\tisLast: false,\n\t\t\t\tshouldDelay: false,\n\t\t\t\tshowNoDelayNote: false,\n\t\t\t\tmissedSdBuff: false,\n\t\t\t}\n\t\t\tthis.eyeGauge.spend(LOTD_COST)\n\t\t}\n\t}\n\n\tonNastrondCast(event: Events['action']) {\n\t\tif (this.lifeWindows.current == null) {\n\t\t\t// Nastrond outside of LotD - gentlemen, we have us a broken log\n\t\t\tthis.brokenLog.trigger(this, 'no lotd nastrond', (\n\t\t\t\t<Trans id=\"drg.blood.trigger.no-lotd-nastrond\">\n\t\t\t\t\t<ActionLink {...this.data.actions.NASTROND}/> was cast while Life of the Dragon was deemed inactive.\n\t\t\t\t</Trans>\n\t\t\t))\n\t\t\treturn\n\t\t}\n\n\t\tif (\n\t\t\tthis.lifeWindows.current &&\n\t\t\t!this.lifeWindows.current.nastronds.some(nastrond => nastrond.timestamp === event.timestamp)\n\t\t) {\n\t\t\t// Dedupe Nastrond casts, since that can occasionally happen\n\t\t\tthis.lifeWindows.current.nastronds.push({\n\t\t\t\ttimestamp: event.timestamp,\n\t\t\t\tbuffs: this.getActiveDrgBuffs(),\n\t\t\t\taction: 'NASTROND',\n\t\t\t})\n\t\t}\n\t}\n\n\tonStardiverCast(event: Events['action']) {\n\t\tif (this.lifeWindows.current === null) {\n\t\t\t// Stardiver outside of LotD is also a sign of a broken log\n\t\t\tthis.brokenLog.trigger(this, 'no lotd stardiver', (\n\t\t\t\t<Trans id=\"drg.blood.trigger.no-lotd-stardiver\">\n\t\t\t\t\t<ActionLink {...this.data.actions.STARDIVER}/> was cast while Life of the Dragon was deemed inactive.\n\t\t\t\t</Trans>\n\t\t\t))\n\t\t\treturn\n\t\t}\n\n\t\tif (\n\t\t\tthis.lifeWindows.current &&\n\t\t\t!this.lifeWindows.current.stardivers.some(stardiver => stardiver.timestamp === event.timestamp)\n\t\t) {\n\t\t\t// Dedupe Stardiver casts, it's also AoE so it's probably going to happen on occasion too\n\t\t\tthis.lifeWindows.current.stardivers.push({\n\t\t\t\ttimestamp: event.timestamp,\n\t\t\t\tbuffs: this.getActiveDrgBuffs(),\n\t\t\t\taction: 'STARDIVER',\n\t\t\t})\n\t\t}\n\t}\n\n\tonDeathLotd() {\n\t\t// RIP\n\t\tthis.updateGauge()\n\t\tthis.lifeDuration = 0\n\t\tthis.finishLifeWindow()\n\t}\n\n\tintersectsDowntime(start: number) {\n\t\tconst windows = this.downtime.getDowntimeWindows(start)\n\t\tconst end = start + DRAGON_DURATION_MILLIS\n\n\t\tfor (const dtWindow of windows) {\n\t\t\tif (dtWindow.start < end) {\n\t\t\t\treturn dtWindow.start\n\t\t\t}\n\t\t}\n\n\t\treturn null\n\t}\n\n\tanalyzeLifeWindows() {\n\t\tfor (const lifeWindow of this.lifeWindows.history) {\n\t\t\t// downtime overlap\n\t\t\tlifeWindow.dtOverlapTime = this.intersectsDowntime(Math.min(\n\t\t\t\tlifeWindow.start + this.data.actions.HIGH_JUMP.cooldown,\n\t\t\t\tthis.parser.pull.timestamp + this.parser.pull.duration,\n\t\t\t))\n\n\t\t\t// flag for last life window\n\t\t\tlifeWindow.isLast = lifeWindow.start + lifeWindow.duration >= (this.parser.pull.timestamp + this.parser.pull.duration)\n\n\t\t\t// A window should be delayed if:\n\t\t\t// - there are no buffs off cooldown at any point in this window\n\t\t\t// - there are no upcoming downtime windows (checked here)\n\t\t\t// - there are buffs off cooldown in the theoretical delayed window\n\t\t\t// - there could be another window in 30s (end of fight check)\n\t\t\tlet activeBuffsInWindow = lifeWindow.activeBuffs.length > 0\n\t\t\tconst shouldBeDelayed = lifeWindow.activeBuffs.length === 0 && lifeWindow.dtOverlapTime === null && lifeWindow.start + LOTD_BUFF_DELAY_MAX < (this.parser.pull.timestamp + this.parser.pull.duration)\n\n\t\t\tlet buffsExistInDelayWindow = false\n\n\t\t\tlet buffKey: keyof typeof lifeWindow.timeToNextBuff\n\t\t\tfor (buffKey in lifeWindow.timeToNextBuff) {\n\t\t\t\t// check if the time to the next buff falls within the next expected window\n\t\t\t\tlifeWindow.buffsInDelayWindow[buffKey] = lifeWindow.timeToNextBuff[buffKey] >= LOTD_BUFF_DELAY_MIN && lifeWindow.timeToNextBuff[buffKey] <= LOTD_BUFF_DELAY_MAX\n\n\t\t\t\t// this is just a running or (instead of a map later)\n\t\t\t\tbuffsExistInDelayWindow = lifeWindow.buffsInDelayWindow[buffKey] || buffsExistInDelayWindow\n\n\t\t\t\t// ok now check if the buff comes off cd during the current window\n\t\t\t\tactiveBuffsInWindow = lifeWindow.timeToNextBuff[buffKey] < lifeWindow.duration || activeBuffsInWindow\n\t\t\t}\n\n\t\t\t// ok now use all the flags to determine if a window should be delayed\n\t\t\tlifeWindow.shouldDelay = !activeBuffsInWindow && buffsExistInDelayWindow && shouldBeDelayed\n\n\t\t\t// if we're not delaying due to downtime in this fight, show an info note\n\t\t\tlifeWindow.showNoDelayNote = lifeWindow.dtOverlapTime !== null && !activeBuffsInWindow && buffsExistInDelayWindow\n\n\t\t\t// check the stardiver cast buffs\n\t\t\t// count a miss if the window could be delayed\n\t\t\tlifeWindow.missedSdBuff = (activeBuffsInWindow || lifeWindow.shouldDelay) && lifeWindow.stardivers.length === 1 && lifeWindow.stardivers[0].buffs.length === 0\n\t\t}\n\t}\n\n\t/**\n\t * The Endwalker DRG opener usually has us delay the first life of the dragon to around 1 minute in order\n\t * to synchronize it with buffs. Done properly, this keeps LotD in alignment for the whole fight.\n\t * However, if we continue this pattern for the whole fight we might end up in a situation where we should've used\n\t * life of the dragon without buffs at the end of the fight in order to avoid losing it entirely.\n\t * This function does a check to see if there was room to rush a final window.\n\t */\n\tprivate shouldRushFinalWindow() {\n\t\t// just in case someone uses 0 lotd windows???\n\t\tif (this.lifeWindows.history.length < 1) {\n\t\t\t// this feels \"technically correct\"\n\t\t\treturn END_OF_FIGHT_ERROR.NONE\n\t\t}\n\n\t\t// there's actually two conditions here\n\t\t// first condition: if we still have two eyes at the end of the fight\n\t\tif (this.eyeGauge.value === MAX_EYES) {\n\t\t\t// check to see what happened\n\t\t\t// if the last gsk happened before the last mirage dive, we could've opened a window\n\t\t\tif (this.lastGskTime < this.lastMdTime) {\n\t\t\t\t// if the amount of time left in the fight would've allowed at least one nastrond, we should've rushed\n\t\t\t\tconst remaining = this.parser.pull.duration - (this.lastMdTime - this.parser.pull.timestamp)\n\n\t\t\t\t// if we had room for like two GCDs we could've fit at least one additional nastrond (stonks)\n\t\t\t\tif (remaining > LOTD_SHOULD_RUSH_THRESHOLD) {\n\t\t\t\t\treturn END_OF_FIGHT_ERROR.SHOULD_HAVE_RUSHED\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// second condition:\n\t\t// - we actually did open a window but it got severely truncated by the fight\n\t\t// in order for this to be possible, we need to actually be in a lotd that was cut short by the end of the fight\n\t\t// see this log for a rather extreme example of this: https://www.fflogs.com/reports/B4Q16j3WG9DFygNR#fight=13&source=124\n\t\tconst lastWindow = this.lifeWindows.history[this.lifeWindows.history.length - 1]\n\t\tif (lastWindow.duration < DRAGON_DURATION_MILLIS) {\n\t\t\t// check the duration from last mirage dive time, assuming we had max eyes because we're now in life\n\t\t\tconst remainingTimeForLife = this.parser.pull.duration - (this.lastMdTime - this.parser.pull.timestamp)\n\n\t\t\t// if we had a significant amount of time left we could've been in life instead\n\t\t\t// this should probably be at least 10 seconds, since that's the nastrond CD, potentially indicating a lost cast\n\t\t\tif (remainingTimeForLife - lastWindow.duration > LOTD_LATE_WINDOW_THRESHOLD) {\n\t\t\t\t// we had time to do this\n\t\t\t\treturn END_OF_FIGHT_ERROR.OPENED_TOO_LATE\n\t\t\t}\n\t\t}\n\n\t\treturn END_OF_FIGHT_ERROR.NONE\n\t}\n\n\tonComplete() {\n\t\tthis.updateGauge()\n\t\tthis.finishLifeWindow()\n\t\tthis.analyzeLifeWindows()\n\t\tconst noBuffSd = this.lifeWindows.history.filter(window => !window.isLast && window.missedSdBuff).length\n\t\tconst noLifeSd = this.lifeWindows.history.filter(window => !window.isLast && window.stardivers.length === 0).length\n\t\tconst noFullNsLife = this.lifeWindows.history.filter(window => !window.isLast && window.nastronds.length < EXPECTED_NASTRONDS_PER_WINDOW).length\n\t\tconst shouldRush = this.shouldRushFinalWindow()\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.MIRAGE_DIVE.icon,\n\t\t\tcontent: <Trans id=\"drg.blood.suggestions.eyes.content\">\n\t\t\t\tAvoid using <ActionLink {...this.data.actions.MIRAGE_DIVE}/> when you already have {MAX_EYES} Eyes. Wasting Eyes will delay your Life of the Dragon windows and potentially cost you a lot of DPS.\n\t\t\t</Trans>,\n\t\t\tvalue: this.eyeGauge.overCap,\n\t\t\ttiers: {\n\t\t\t\t1: SEVERITY.MEDIUM,\n\t\t\t\t2: SEVERITY.MAJOR,\n\t\t\t},\n\t\t\twhy: <Trans id=\"drg.blood.suggestions.eyes.why\">\n\t\t\t\tYou used Mirage Dive <Plural value={this.eyeGauge.overCap} one=\"# time\" other=\"# times\"/> when you already had {MAX_EYES} Eyes.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\t// each window should have a stardiver\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.STARDIVER.icon,\n\t\t\tcontent: <Trans id=\"drg.suggestions.stardiver.content\">\n\t\t\t\tEach Life of the Dragon window should contain 1 <ActionLink {...this.data.actions.STARDIVER}/> use.\n\t\t\t</Trans>,\n\t\t\tvalue: noLifeSd,\n\t\t\ttiers: {\n\t\t\t\t1: SEVERITY.MEDIUM,\n\t\t\t\t2: SEVERITY.MAJOR,\n\t\t\t},\n\t\t\twhy: <Trans id=\"drg.suggetions.stardiver.why\">{noLifeSd} of your Life of the Dragon windows were missing a <ActionLink {...this.data.actions.STARDIVER}/> use.</Trans>,\n\t\t}))\n\n\t\t// each window should have 3 nastronds\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.NASTROND.icon,\n\t\t\tcontent: <Trans id=\"drg.suggestions.nastrond.content\">Each Life of the Dragon window should contain 3 <ActionLink {...this.data.actions.NASTROND}/> uses.</Trans>,\n\t\t\tvalue: noFullNsLife,\n\t\t\ttiers: {\n\t\t\t\t1: SEVERITY.MEDIUM,\n\t\t\t\t2: SEVERITY.MAJOR,\n\t\t\t},\n\t\t\twhy: <Trans id=\"drg.suggestions.nastrond.why\">{noFullNsLife} of your Life of the Dragon windows were missing one or more <ActionLink {...this.data.actions.NASTROND}/> uses.</Trans>,\n\t\t}))\n\n\t\t// this suggestion only counts places where a stardiver could be buffed\n\t\t// if a window cannot be delayed and has no buffs, it doesn't count\n\t\tif (noBuffSd > 0) {\n\t\t\tthis.suggestions.add(new Suggestion({\n\t\t\t\ticon: this.data.actions.STARDIVER.icon,\n\t\t\t\tcontent: <Trans id=\"drg.blood.suggestions.buffed-stardiver\">\n\t\t\t\t\tTry to ensure that <ActionLink {...this.data.actions.STARDIVER} /> always lands while at least one of <ActionLink {...this.data.actions.LANCE_CHARGE} />, <ActionLink {...this.data.actions.DRAGON_SIGHT} />, or <ActionLink {...this.data.actions.BATTLE_LITANY} /> is active. Depending on the fight specifics, this may not always be possible. See the Timeline module below for details.\n\t\t\t\t</Trans>,\n\t\t\t\tseverity: SEVERITY.MINOR,\n\t\t\t\twhy: <Trans id=\"drg.blood.suggestions.buffsed-stardiver.why\">\n\t\t\t\t\tWhen <ActionLink {...this.data.actions.STARDIVER} /> could have been buffed, you used it <Plural value={noBuffSd} one=\"# time\" other=\"# times\" /> without a buff.\n\t\t\t\t</Trans>,\n\t\t\t}))\n\t\t}\n\n\t\tif (shouldRush === END_OF_FIGHT_ERROR.SHOULD_HAVE_RUSHED) {\n\t\t\tthis.suggestions.add(new Suggestion({\n\t\t\t\ticon: this.data.actions.NASTROND.icon,\n\t\t\t\tcontent: <Trans id=\"drg.blood.suggestions.rush\">Try to make sure you enter Life of the Dragon before the fight ends, even if it does not align with your buffs.</Trans>,\n\t\t\t\tseverity: SEVERITY.MAJOR,\n\t\t\t\twhy: <Trans id=\"drg.blood.suggestions.rush.why\">\n\t\t\t\t\tYou could have entered Life of the Dragon one more time before the end of the fight.\n\t\t\t\t</Trans>,\n\t\t\t}))\n\t\t} else if (shouldRush === END_OF_FIGHT_ERROR.OPENED_TOO_LATE) {\n\t\t\tconst remainingTimeForLife = (this.parser.pull.duration - (this.lastMdTime - this.parser.pull.timestamp)) / 1000\n\t\t\tconst lastWindowDuration = this.lifeWindows.history[this.lifeWindows.history.length - 1].duration / 1000\n\n\t\t\t// medium severity, they did use it but it got cutoff\n\t\t\tthis.suggestions.add(new Suggestion({\n\t\t\t\ticon: this.data.actions.NASTROND.icon,\n\t\t\t\tcontent: <Trans id=\"drg.blood.suggestions.late-window\">Avoid entering Life of the Dragon right before the end of the fight. Try to enter Life of the Dragon earlier, even if it does not align with your buffs, in order to get as many uses of <DataLink action=\"NASTROND\" /> and <DataLink action=\"STARDIVER\" /> as possible before the end of the fight.</Trans>,\n\t\t\t\tseverity: SEVERITY.MEDIUM,\n\t\t\t\twhy: <Trans id=\"drg.blood.suggestions.rush.late-window.why\">\n\t\t\t\t\tYour final Life of the Dragon window lasted {lastWindowDuration.toFixed(1)}s, but could have been used {remainingTimeForLife.toFixed(1)}s before the end of the fight.\n\t\t\t\t</Trans>,\n\t\t\t}))\n\t\t}\n\t}\n\n\tprivate windowTable(lifeWindow: LifeWindow) {\n\t\tconst casts = lifeWindow.nastronds.concat(lifeWindow.stardivers)\n\t\tcasts.sort((a, b) => { return a.timestamp - b.timestamp })\n\n\t\tconst rows = casts.map(cast => {\n\t\t\tconst buffs = cast.buffs.map(id => {\n\t\t\t\treturn <StatusLink key={id} showName={false} iconSize=\"35px\" {...this.data.statuses[id]} />\n\t\t\t})\n\n\t\t\treturn <Table.Row key={cast.timestamp} warning={cast.action === 'STARDIVER' && lifeWindow.missedSdBuff}>\n\t\t\t\t<Table.Cell>{this.createTimelineButton(cast.timestamp)}</Table.Cell>\n\t\t\t\t<Table.Cell><ActionLink {...this.data.actions[cast.action]} /></Table.Cell>\n\t\t\t\t<Table.Cell>{buffs}</Table.Cell>\n\t\t\t</Table.Row>\n\t\t})\n\n\t\tconst delayBuffs = Object.entries(lifeWindow.buffsInDelayWindow)\n\t\t\t.filter(([_, inWindow]) => {\n\t\t\t\treturn inWindow\n\t\t\t})\n\t\t\t.map(([buffKey, _], idx) => {\n\t\t\t\treturn <Message.Item key={idx}><Trans id=\"drg.blood.delay-buff\"><ActionLink {...this.data.statuses[buffKey as StatusKey]} /> in {this.parser.formatDuration(lifeWindow.timeToNextBuff[buffKey as DrgTrackedBuffs])}</Trans></Message.Item>\n\t\t\t})\n\n\t\treturn <Fragment>\n\t\t\t{lifeWindow.isLast && (\n\t\t\t\t<Message info>\n\t\t\t\t\t<p><Trans id=\"drg.blood.final-window-explain\">This window would last past the end of the fight and does not count against missing casts of <ActionLink {...this.data.actions.NASTROND} /> and <ActionLink {...this.data.actions.STARDIVER} /> in the Suggestions. The warnings will still be shown for completeness.</Trans></p>\n\t\t\t\t</Message>\n\t\t\t)}\n\t\t\t{lifeWindow.stardivers.length === 0 && (\n\t\t\t\t<Message error>\n\t\t\t\t\t<p><Icon name=\"warning sign\"/> <Trans id=\"drg.blood.no-stardiver-explain\">You did not use <ActionLink {...this.data.actions.STARDIVER}/> during this window.</Trans></p>\n\t\t\t\t</Message>\n\t\t\t)}\n\t\t\t{lifeWindow.nastronds.length < EXPECTED_NASTRONDS_PER_WINDOW && (\n\t\t\t\t<Message error>\n\t\t\t\t\t<p><Icon name=\"warning sign\"/> <Trans id=\"drg.blood.no-nastrond-explain\">You missed one or more uses of <ActionLink {...this.data.actions.NASTROND}/> during this window.</Trans></p>\n\t\t\t\t</Message>\n\t\t\t)}\n\t\t\t{lifeWindow.missedSdBuff && (\n\t\t\t\t<Message warning>\n\t\t\t\t\t<p><Trans id=\"drg.blood.no-buff-stardiver-explain\">You did not use <ActionLink {...this.data.actions.STARDIVER}/> while buffed during this window.</Trans></p>\n\t\t\t\t</Message>\n\t\t\t)}\n\t\t\t{lifeWindow.shouldDelay && (\n\t\t\t\t<Message warning>\n\t\t\t\t\t<p><Trans id=\"drg.blood.delay-explain\"> If possible, Life of the Dragon windows should line up with your personal buffs. This window could be delayed to line up with:\n\t\t\t\t\t</Trans></p>\n\t\t\t\t\t<Message.List>\n\t\t\t\t\t\t{delayBuffs}\n\t\t\t\t\t</Message.List>\n\t\t\t\t</Message>\n\t\t\t)}\n\t\t\t{lifeWindow.showNoDelayNote && (\n\t\t\t\t<Message info>\n\t\t\t\t\t<p><Trans id=\"drg.blood.no-delay-explain\">This window cannot be delayed due to downtime occurring at {this.parser.formatEpochTimestamp(lifeWindow.dtOverlapTime ?? 0)}. This window would otherwise be delayed for better buff alignment.</Trans></p>\n\t\t\t\t</Message>\n\t\t\t)}\n\t\t\t<Table>\n\t\t\t\t<Table.Header>\n\t\t\t\t\t<Table.Row key=\"header\">\n\t\t\t\t\t\t<Table.HeaderCell><Trans id=\"drg.blood.table.time\">Time</Trans></Table.HeaderCell>\n\t\t\t\t\t\t<Table.HeaderCell><Trans id=\"drg.blood.table.action\">Action</Trans></Table.HeaderCell>\n\t\t\t\t\t\t<Table.HeaderCell><Trans id=\"drg.blood.table.statuses\">Personal Buffs</Trans></Table.HeaderCell>\n\t\t\t\t\t</Table.Row>\n\t\t\t\t</Table.Header>\n\t\t\t\t{rows}\n\t\t\t</Table>\n\t\t</Fragment>\n\t}\n\n\tformatWindowTitle(lifeWindow: LifeWindow) {\n\t\t// flag the row if we see either:\n\t\t// - a non-buffed stardiver in any window, except the windows that cannot be delayed\n\t\t// - a window that could be delayed but wasn't\n\t\tconst windowWarning = lifeWindow.shouldDelay || lifeWindow.missedSdBuff\n\t\tconst windowError = lifeWindow.stardivers.length === 0 || lifeWindow.nastronds.length < EXPECTED_NASTRONDS_PER_WINDOW\n\t\tconst title = <>{this.parser.formatEpochTimestamp(lifeWindow.start)} <span> - </span> <Trans id=\"drg.blood.windows.hits\"><Plural value={lifeWindow.nastronds.length} one=\"# Nastrond\" other=\"# Nastronds\" />, <Plural value={lifeWindow.stardivers.length} one=\"# Stardiver\" other=\"# Stardivers\" /></Trans></>\n\n\t\tif (windowError) {\n\t\t\treturn <span className=\"text-error\">{title}</span>\n\t\t}\n\n\t\tif (windowWarning) {\n\t\t\treturn <span className=\"text-warning\">{title}</span>\n\t\t}\n\n\t\treturn title\n\t}\n\n\toverride output() {\n\t\tif (this.lifeWindows.history.length > 0) {\n\t\t\tconst lotdPanels = this.lifeWindows.history.map(window => {\n\t\t\t\treturn {\n\t\t\t\t\ttitle: {\n\t\t\t\t\t\tkey: `title-${window.start}`,\n\t\t\t\t\t\tcontent: this.formatWindowTitle(window),\n\t\t\t\t\t},\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\tkey: `content-${window.start}`,\n\t\t\t\t\t\tcontent: this.windowTable(window),\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t})\n\n\t\t\treturn <Fragment>\n\t\t\t\t<Accordion exclusive={false} panels={lotdPanels} styled fluid />\n\t\t\t</Fragment>\n\t\t}\n\n\t\t// This should really never happen but if they didn't go into LotD once, we shouldn't bother showing the section\n\t\treturn false\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Trans, Plural} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {ActionKey} from 'data/ACTIONS'\nimport {Cause, Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport Checklist, {Rule, Requirement} from 'parser/core/modules/Checklist'\nimport {Data} from 'parser/core/modules/Data'\nimport {Invulnerability} from 'parser/core/modules/Invulnerability'\nimport {PieChartStatistic, Statistics} from 'parser/core/modules/Statistics'\nimport {Statuses} from 'parser/core/modules/Statuses'\nimport Suggestions, {TieredSuggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport React from 'react'\nimport DISPLAY_ORDER from './DISPLAY_ORDER'\n\nconst BAD_LIFE_SURGE_CONSUMERS: ActionKey[] = [\n\t'TRUE_THRUST',\n\t'RAIDEN_THRUST',\n\t'VORPAL_THRUST',\n\t'DISEMBOWEL',\n\t'CHAOS_THRUST',\n\t'PIERCING_TALON',\n\t'DOOM_SPIKE',\n\t'SONIC_THRUST',\n]\n\nconst FINAL_COMBO_HITS: ActionKey[] = [\n\t'FANG_AND_CLAW',\n\t'WHEELING_THRUST',\n]\n\n// these are the consumers we care to show in the chart\nconst CHART_LIFE_SURGE_CONSUMERS: ActionKey[] = [\n\t'FULL_THRUST',\n\t'HEAVENS_THRUST',\n\t'FANG_AND_CLAW',\n\t'WHEELING_THRUST',\n\t'COERTHAN_TORMENT',\n]\n\nconst CHART_COLORS: {[actionId in ActionKey]?: string} = {\n\t'FULL_THRUST': '#0e81f7',\n\t'HEAVENS_THRUST': '#0e81f7',\n\t'FANG_AND_CLAW': '#b36b00',\n\t'WHEELING_THRUST': '#b36b00',\n\t'COERTHAN_TORMENT': '#b36b00',\n}\n\nconst OTHER_ACTION_COLOR: string = '#660000'\nconst MIN_COT_HITS: number = 3\n\nexport default class Buffs extends Analyser {\n\tstatic override handle = 'buffs'\n\tstatic override title = t('drg.buffs.title')`Buffs`\n\n\tprivate badLifeSurges: number = 0\n\tprivate fifthGcd: boolean = false\n\tprivate soloDragonSightCount: number = 0\n\tprivate lifeSurgeCasts: number[] = []\n\n\t@dependency private actors!: Actors\n\t@dependency private checklist!: Checklist\n\t@dependency private statuses!: Statuses\n\t@dependency private invulnerability!: Invulnerability\n\t@dependency private suggestions!: Suggestions\n\t@dependency private data!: Data\n\t@dependency private statistics!: Statistics\n\n\tprivate badLifeSurgeConsumers = BAD_LIFE_SURGE_CONSUMERS.map(k => this.data.actions[k].id)\n\tprivate finalComboHits = FINAL_COMBO_HITS.map(k => this.data.actions[k].id)\n\tprivate chartLifeSurgeConsumers = CHART_LIFE_SURGE_CONSUMERS.map(k => this.data.actions[k].id)\n\tprivate chartColors: Record<number, string> = {}\n\n\toverride initialise() {\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\t\tthis.addEventHook(playerFilter.type('action'), this.onCast)\n\n\t\tthis.addEventHook(playerFilter.action(this.data.actions.DRAGON_SIGHT.id), this.onDragonSight)\n\t\tthis.addEventHook(playerFilter.type('damage').cause(filter<Cause>().action(this.data.actions.COERTHAN_TORMENT.id)), this.onCot)\n\t\tthis.addEventHook('complete', this.onComplete)\n\n\t\tfor (const [k, v] of Object.entries(CHART_COLORS)) {\n\t\t\tthis.chartColors[this.data.actions[k as ActionKey].id] = v\n\t\t}\n\t}\n\n\tprivate onCast(event: Events['action']) {\n\t\tconst action = this.data.getAction(event.action)\n\t\tif (action && action.onGcd) {\n\t\t\t// always mark consumed buff for stat chart\n\t\t\tif (this.actors.current.hasStatus(this.data.statuses.LIFE_SURGE.id)) {\n\t\t\t\tthis.lifeSurgeCasts.push(action.id)\n\t\t\t}\n\n\t\t\t// 4-5 combo hit checks\n\t\t\tif (this.badLifeSurgeConsumers.includes(action.id)) {\n\t\t\t\tthis.fifthGcd = false // Reset the 4-5 combo hit flag on other GCDs\n\t\t\t\tif (this.actors.current.hasStatus(this.data.statuses.LIFE_SURGE.id)) {\n\t\t\t\t\tthis.badLifeSurges++\n\t\t\t\t}\n\t\t\t} else if (this.finalComboHits.includes(action.id)) {\n\t\t\t\tif (!this.fifthGcd) {\n\t\t\t\t\t// If we get 2 of these in a row (4-5 combo hits), only the first one is considered bad, so set a flag to ignore the next one\n\t\t\t\t\tthis.fifthGcd = true\n\t\t\t\t\tif (this.actors.current.hasStatus(this.data.statuses.LIFE_SURGE.id)) {\n\t\t\t\t\t\tthis.badLifeSurges++\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onDragonSight(event: Events['action']) {\n\t\t// self cast\n\t\tif (event.source === event.target) {\n\t\t\tthis.soloDragonSightCount += 1\n\t\t}\n\t}\n\n\tprivate onCot(event: Events['damage']) {\n\t\t// note that this doesn't track if you actually hit\n\t\t// that's probably ok? this is just checking to make sure that you've got the idea of using LS on more\n\t\t// than 3 targets\n\t\tconst hits = event.targets.length\n\n\t\t// this action is pushed onto the statistic graph data by onCast, don't duplicate that\n\t\t// if coerthan torment is life surged and hits less than three targets, it's no good\n\t\tif (this.actors.current.hasStatus(this.data.statuses.LIFE_SURGE.id) && hits < MIN_COT_HITS) {\n\t\t\tthis.badLifeSurges++\n\t\t}\n\t}\n\n\tprivate getPowerSurgeUptimePercent() {\n\t\tconst statusUptime = this.statuses.getUptime('POWER_SURGE', this.actors.current)\n\t\tconst fightUptime = this.parser.currentDuration - this.invulnerability.getDuration({types: ['invulnerable']})\n\t\treturn (statusUptime / fightUptime) * 100\n\t}\n\n\tprivate onComplete() {\n\t\tthis.checklist.add(new Rule({\n\t\t\tname: <Trans id=\"drg.buffs.checklist.name\">Keep {this.data.statuses.POWER_SURGE.name} up</Trans>,\n\t\t\tdescription: <Trans id=\"drg.buffs.checklist.description\">\n\t\t\t\t<DataLink action=\"DISEMBOWEL\"/> and <DataLink action=\"SONIC_THRUST\" /> grant <DataLink status=\"POWER_SURGE\" /> which provides a 10% boost to your personal damage and should always be kept up.\n\t\t\t</Trans>,\n\t\t\tdisplayOrder: DISPLAY_ORDER.DISEMBOWEL,\n\t\t\trequirements: [\n\t\t\t\tnew Requirement({\n\t\t\t\t\tname: <Trans id=\"drg.buffs.checklist.requirement.name\"><DataLink status=\"POWER_SURGE\" /> uptime</Trans>,\n\t\t\t\t\tpercent: () => this.getPowerSurgeUptimePercent(),\n\t\t\t\t}),\n\t\t\t],\n\t\t}))\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.LIFE_SURGE.icon,\n\t\t\tcontent: <Trans id=\"drg.buffs.suggestions.life-surge.content\">\n\t\t\t\t<DataLink action=\"LIFE_SURGE\"/> should be used on <DataLink action=\"HEAVENS_THRUST\"/>, your highest potency ability, as much as possible. In order to keep <DataLink action=\"LIFE_SURGE\" /> on cooldown, it may sometimes be necessary to use it on a 5th combo hit. In multi-target scenarios, <DataLink action=\"LIFE_SURGE\" /> can be used on <DataLink action=\"COERTHAN_TORMENT\" /> if you hit at least three targets.\n\t\t\t</Trans>,\n\t\t\ttiers: {\n\t\t\t\t1: SEVERITY.MINOR,\n\t\t\t\t2: SEVERITY.MEDIUM,\n\t\t\t\t4: SEVERITY.MAJOR,\n\t\t\t},\n\t\t\tvalue: this.badLifeSurges,\n\t\t\twhy: <Trans id=\"drg.buffs.suggestions.life-surge.why\">\n\t\t\t\tYou used {this.data.actions.LIFE_SURGE.name} on a non-optimal GCD <Plural value={this.badLifeSurges} one=\"# time\" other=\"# times\"/>.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.DRAGON_SIGHT.icon,\n\t\t\tcontent: <Trans id=\"drg.buffs.suggestions.solo-ds.content\">\n\t\t\t\tAlthough it doesn't impact your personal DPS, try to always use <DataLink action=\"DRAGON_SIGHT\" /> on a partner in group content so that someone else can benefit from the damage bonus too.\n\t\t\t</Trans>,\n\t\t\ttiers: {\n\t\t\t\t1: SEVERITY.MINOR,\n\t\t\t},\n\t\t\tvalue: this.soloDragonSightCount,\n\t\t\twhy: <Trans id=\"drg.buffs.suggestions.solo-ds.why\">\n\t\t\t\t{this.soloDragonSightCount} of your Dragon Sight casts didn't have a tether partner.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\t// make a lil graph of life surge uses\n\t\t// get total LS casts\n\t\tconst totalLsCasts = this.lifeSurgeCasts.length\n\n\t\t// format for graph\n\t\tconst data = []\n\n\t\t// count the things we care about (total - tracked should usually equal bad LS uses)\n\t\tlet trackedCastCount = 0\n\t\tfor (const actionId of this.chartLifeSurgeConsumers) {\n\t\t\tconst value = this.lifeSurgeCasts.filter(i => actionId === i).length\n\n\t\t\t// don't put 0s in the chart\n\t\t\tif (value === 0) { continue }\n\n\t\t\tdata.push({\n\t\t\t\tvalue,\n\t\t\t\tcolor: this.chartColors[actionId],\n\t\t\t\tcolumns: [\n\t\t\t\t\tthis.data.getAction(actionId)?.name,\n\t\t\t\t\tvalue,\n\t\t\t\t\tthis.lsCastPercent(value, totalLsCasts),\n\t\t\t\t] as const,\n\t\t\t})\n\n\t\t\ttrackedCastCount += value\n\t\t}\n\n\t\t// push other column if bad use\n\t\tconst otherCasts = totalLsCasts - trackedCastCount\n\t\tif (otherCasts > 0) {\n\t\t\tdata.push({\n\t\t\t\tvalue: otherCasts,\n\t\t\t\tcolor: OTHER_ACTION_COLOR,\n\t\t\t\tcolumns: [\n\t\t\t\t\t'Other',\n\t\t\t\t\totherCasts,\n\t\t\t\t\tthis.lsCastPercent(otherCasts, totalLsCasts),\n\t\t\t\t] as const,\n\t\t\t})\n\t\t}\n\n\t\tif (data.length > 0) {\n\t\t\tthis.statistics.add(new PieChartStatistic({\n\t\t\t\theadings: ['Life Surge Consumer', 'Count', '%'],\n\t\t\t\tdata,\n\t\t\t}))\n\t\t}\n\t}\n\n\tprivate lsCastPercent(value: number, total: number): string {\n\t\treturn ((value / total) * 100).toFixed(2) + '%'\n\t}\n}\n","import ACTIONS from 'data/ACTIONS'\nimport {Combos as CoreCombos} from 'parser/core/modules/Combos'\n\nexport class Combos extends CoreCombos {\n\toverride suggestionIcon = ACTIONS.HEAVENS_THRUST.icon\n}\n","import {Trans} from '@lingui/react'\nimport {ActionLink, DataLink} from 'components/ui/DbLink'\nimport {dependency} from 'parser/core/Injectable'\nimport Checklist, {Rule, Requirement} from 'parser/core/modules/Checklist'\nimport {DoTs as CoreDoTs} from 'parser/core/modules/DoTs'\nimport Suggestions, {TieredSuggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport React from 'react'\nimport DISPLAY_ORDER from './DISPLAY_ORDER'\n\nexport default class Debuffs extends CoreDoTs {\n\t@dependency private checklist!: Checklist\n\t@dependency private suggestions!: Suggestions\n\n\toverride trackedStatuses = [\n\t\tthis.data.statuses.CHAOTIC_SPRING.id,\n\t]\n\n\taddChecklistRules() {\n\t\tthis.checklist.add(new Rule({\n\t\t\tname: <Trans id=\"drg.debuffs.checklist.name\">Keep your debuffs up</Trans>,\n\t\t\tdescription: <Trans id=\"drg.debuffs.checklist.description\">\n\t\t\t\t<ActionLink {...this.data.actions.CHAOTIC_SPRING} /> provides a potent DoT which should be maintained at all times.\n\t\t\t</Trans>,\n\t\t\tdisplayOrder: DISPLAY_ORDER.DEBUFFS,\n\t\t\ttarget: 90,\n\t\t\trequirements: [\n\t\t\t\tnew Requirement({\n\t\t\t\t\tname: <Trans id=\"drg.debuffs.checklist.requirement.chaos-thrust.name\"><ActionLink {...this.data.actions.CHAOTIC_SPRING} /> uptime</Trans>,\n\t\t\t\t\tpercent: () => this.getUptimePercent(this.data.statuses.CHAOTIC_SPRING.id),\n\t\t\t\t}),\n\t\t\t],\n\t\t}))\n\t}\n\n\taddClippingSuggestions() {\n\t\tconst chaosThrustClipPerMinute = this.getClippingAmount(this.data.statuses.CHAOTIC_SPRING.id)\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.CHAOS_THRUST.icon,\n\t\t\tcontent: <Trans id=\"drg.debuffs.suggestions.clipping.content\">\n\t\t\t\tAvoid refreshing <ActionLink {...this.data.actions.CHAOTIC_SPRING} /> significantly earlier or later than its expiration, as it usually indicates rotational errors. DRG's strict 10-GCD rotation should have you refreshing Chaos Thrust within 2 seconds before or after expiry, depending on your skill speed.\n\t\t\t</Trans>,\n\t\t\ttiers: {\n\t\t\t\t5000: SEVERITY.MINOR,\n\t\t\t\t10000: SEVERITY.MEDIUM,\n\t\t\t\t15000: SEVERITY.MAJOR,\n\t\t\t},\n\t\t\tvalue: chaosThrustClipPerMinute,\n\t\t\twhy: <Trans id=\"drg.debuffs.suggestions.clipping.why\">\n\t\t\t\tAn average of {this.parser.formatDuration(chaosThrustClipPerMinute, 1)} seconds of <DataLink status=\"CHAOTIC_SPRING\" /> clipped per minute due to early refreshes.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n}\n","import {ActionLink} from 'components/ui/DbLink'\nimport {Action} from 'data/ACTIONS'\nimport React from 'react'\nimport Suggestion from '../../Suggestions/Suggestion'\nimport {EvaluatedAction} from '../EvaluatedAction'\nimport {HistoryEntry} from '../History'\nimport {EvaluationOutput, WindowEvaluator} from './WindowEvaluator'\n\n/**\n * Lists the number of actions used in a window without any expected minimums\n */\nexport class DisplayedActionEvaluator implements WindowEvaluator {\n\tprivate expectedActions: Action[]\n\n\tconstructor(actions: Action[]) {\n\t\tthis.expectedActions = actions\n\t}\n\n\tpublic output(windows: Array<HistoryEntry<EvaluatedAction[]>>): EvaluationOutput[]  {\n\t\treturn this.expectedActions.map(action => {\n\t\t\treturn {\n\t\t\t\tformat: 'table',\n\t\t\t\theader: {\n\t\t\t\t\theader: <ActionLink showName={false} {...action}/>,\n\t\t\t\t\taccessor: action.name,\n\t\t\t\t},\n\t\t\t\trows: windows.map(window => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tactual: this.countUsed(window, action),\n\t\t\t\t\t\texpected: undefined,\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t}\n\t\t})\n\t}\n\n\tpublic suggest(): Suggestion | undefined {\n\t\treturn undefined\n\t}\n\n\tprotected countUsed(window: HistoryEntry<EvaluatedAction[]>, action: Action) {\n\t\treturn window.data.filter(cast => cast.action.id === action.id).length\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {RotationTargetOutcome} from 'components/ui/RotationTable'\nimport {Events} from 'event'\nimport _ from 'lodash'\nimport {dependency} from 'parser/core/Injectable'\nimport {BuffWindow, calculateExpectedGcdsForTime, EvaluatedAction, EvaluationOutput, ExpectedActionsEvaluator, ExpectedGcdCountEvaluator, WindowEvaluator} from 'parser/core/modules/ActionWindow'\nimport {DisplayedActionEvaluator} from 'parser/core/modules/ActionWindow/evaluators/DisplayedActionEvaluator'\nimport {HistoryEntry} from 'parser/core/modules/ActionWindow/History'\nimport {GlobalCooldown} from 'parser/core/modules/GlobalCooldown'\nimport {SEVERITY} from 'parser/core/modules/Suggestions'\nimport React from 'react'\nimport {ensureArray, isDefined} from 'utilities'\nimport DISPLAY_ORDER from './DISPLAY_ORDER'\n\n// give it a gcd for marking as truncated window\nconst SHORT_WINDOW_BUFFER: number = 2500\n\nconst EXPECTED_GCD_COUNT = 8\n\n// indicator for why the window was short (did you die or did your partner)\nconst SHORT_WINDOW_FAULT = {\n\tNONE: 0,\t\t\t// everything's fine, no one's at fault\n\tPARTNER: 1,\n\tDRG: 2,\n}\n\n// Override WindowEvaluator directly to allow the column to not show if all windows\n// have None status.\nclass ShortWindowEvaluator implements WindowEvaluator {\n\n\tprivate shortWindowReason: (window: HistoryEntry<EvaluatedAction[]>) => number\n\n\tconstructor(shortWindowReason: (window: HistoryEntry<EvaluatedAction[]>) => number) {\n\t\tthis.shortWindowReason = shortWindowReason\n\t}\n\n\tpublic suggest()  { return undefined }\n\n\tpublic output(windows: Array<HistoryEntry<EvaluatedAction[]>>): EvaluationOutput | undefined {\n\t\tconst faults = windows.map(window => this.shortWindowReason(window))\n\t\tif (faults.every(fault => fault === SHORT_WINDOW_FAULT.NONE)) {\n\t\t\treturn undefined\n\t\t}\n\t\treturn {\n\t\t\tformat: 'notes',\n\t\t\theader: {\n\t\t\t\theader: <Trans id=\"drg.ds.notes.header\">Short Window Cause</Trans>,\n\t\t\t\taccessor: 'shortwindow',\n\t\t\t},\n\t\t\trows: faults.map(fault => {\n\t\t\t\t// check for a truncated window if not rushing, which would indicate that the tether partner (or the DRG) died\n\t\t\t\tif (fault === SHORT_WINDOW_FAULT.PARTNER) {\n\t\t\t\t\treturn <Trans id=\"drg.ds.notes.partnerdied\">Partner Died</Trans>\n\t\t\t\t}\n\n\t\t\t\tif (fault === SHORT_WINDOW_FAULT.DRG) {\n\t\t\t\t\treturn <Trans id=\"drg.ds.notes.drgdied\">You Died</Trans>\n\t\t\t\t}\n\n\t\t\t\treturn <></>\n\t\t\t}),\n\t\t}\n\n\t}\n}\n\nexport default class DragonSight extends BuffWindow {\n\tstatic override handle = 'dragonsight'\n\tstatic override title = t('drg.dragonsight.title')`Dragon Sight`\n\tstatic override displayOrder = DISPLAY_ORDER.DRAGON_SIGHT\n\n\t@dependency globalCooldown!: GlobalCooldown\n\n\tbuffAction = this.data.actions.DRAGON_SIGHT\n\toverride buffStatus = [this.data.statuses.RIGHT_EYE, this.data.statuses.RIGHT_EYE_SOLO]\n\n\tdeathTimes: number[] = []\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tthis.addEventHook({type: 'death', actor: this.parser.actor.id}, this.onDeath)\n\n\t\tconst suggestionIcon = this.data.actions.DRAGON_SIGHT.icon\n\t\tconst suggestionWindowName = <ActionLink action=\"DRAGON_SIGHT\" showIcon={false}/>\n\t\tthis.addEvaluator(new ExpectedGcdCountEvaluator({\n\t\t\texpectedGcds: EXPECTED_GCD_COUNT,\n\t\t\tglobalCooldown: this.globalCooldown,\n\t\t\thasStacks: false,\n\t\t\tsuggestionIcon,\n\t\t\tsuggestionContent: <Trans id=\"drg.ds.suggestions.missedgcd.content\">\n\t\t\t\tTry to land at least 8 GCDs during every <ActionLink action=\"DRAGON_SIGHT\" /> window.\n\t\t\t</Trans>,\n\t\t\tsuggestionWindowName,\n\t\t\tseverityTiers: {\n\t\t\t\t1: SEVERITY.MINOR,\n\t\t\t\t2: SEVERITY.MEDIUM,\n\t\t\t\t4: SEVERITY.MAJOR,\n\t\t\t},\n\t\t\tadjustCount: this.adjustExpectedGcdCount.bind(this),\n\t\t}))\n\n\t\tconst expectedActions = [\n\t\t\t{\n\t\t\t\taction: this.data.actions.HIGH_JUMP,\n\t\t\t\texpectedPerWindow: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\taction: this.data.actions.GEIRSKOGUL,\n\t\t\t\texpectedPerWindow: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\taction: this.data.actions.MIRAGE_DIVE,\n\t\t\t\texpectedPerWindow: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\taction: this.data.actions.SPINESHATTER_DIVE,\n\t\t\t\texpectedPerWindow: this.parser.patch.before('6.1') ? 1 : 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\taction: this.data.actions.DRAGONFIRE_DIVE,\n\t\t\t\texpectedPerWindow: 1,\n\t\t\t},\n\t\t]\n\n\t\t// 6.08 changed the potencies such that it's generally better to always use LS on\n\t\t// Heavens' Thrust. Before that, we generally expected one in each two minute window.\n\t\tif (this.parser.patch.before('6.08')) {\n\t\t\texpectedActions.push({\n\t\t\t\taction: this.data.actions.LIFE_SURGE,\n\t\t\t\texpectedPerWindow: 1,\n\t\t\t})\n\t\t}\n\n\t\tthis.addEvaluator(new ExpectedActionsEvaluator({\n\t\t\texpectedActions,\n\t\t\tsuggestionIcon,\n\t\t\tsuggestionContent: <Trans id=\"drg.lc.suggestions.missedaction.content\">Try to use as many of your oGCDs as possible during <ActionLink action=\"DRAGON_SIGHT\" />. Remember to keep your abilities on cooldown, when possible, to prevent them from drifting outside of your buff windows.</Trans>,\n\t\t\tsuggestionWindowName,\n\t\t\tseverityTiers: {\n\t\t\t\t1: SEVERITY.MINOR,\n\t\t\t\t3: SEVERITY.MEDIUM,\n\t\t\t\t6: SEVERITY.MAJOR,\n\t\t\t},\n\t\t\tadjustCount: this.adjustExpectedActionCount.bind(this),\n\t\t\tadjustOutcome: this.adjustExpectedActionOutcome.bind(this),\n\t\t}))\n\n\t\tthis.addEvaluator(new ShortWindowEvaluator(this.buffTargetDied.bind(this)))\n\n\t\t// display ordering\n\t\tif (this.parser.patch.after('6.05')) {\n\t\t\tthis.addEvaluator(new DisplayedActionEvaluator([this.data.actions.LIFE_SURGE]))\n\t\t}\n\t}\n\n\tprivate onDeath(event: Events['death']) {\n\t\tthis.deathTimes.push(event.timestamp)\n\t}\n\n\tprivate adjustExpectedGcdCount(window: HistoryEntry<EvaluatedAction[]>) {\n\t\t// ok so we don't want to penalize people for when their buff ends early because their partner died\n\t\tif (this.buffTargetDied(window) === SHORT_WINDOW_FAULT.PARTNER) {\n\t\t\t// you get what you get and that's ok in this case\n\t\t\treturn -calculateExpectedGcdsForTime(EXPECTED_GCD_COUNT, this.globalCooldown.getDuration(), window.start, window.end)\n\t\t}\n\n\t\t// note that if the drg died we don't reduce gcds because that's something you personally can fix\n\t\t// if neither player died, there is also no adjustment to make\n\t\treturn 0\n\t}\n\n\tprivate adjustExpectedActionCount(window: HistoryEntry<EvaluatedAction[]>) {\n\t\t// so if a drg is rushing we don't really have expectations of specific actions that get fit in the window, we just want the buff used.\n\t\t// also adjust expected tracked gcds for partner dying\n\t\tif (this.isRushedEndOfPullWindow(window) ||\n\t\t\tthis.buffTargetDied(window) === SHORT_WINDOW_FAULT.PARTNER) {\n\t\t\treturn -1\n\t\t}\n\n\t\t// unlike lance charge, there are no adjustments expected here due to DS being a two minute CD\n\t\treturn 0\n\t}\n\n\tprivate adjustExpectedActionOutcome(window: HistoryEntry<EvaluatedAction[]>) {\n\t\t// adjust highlighting for partner dying\n\t\t// if partner dies, we reduce expected to 0 but still highlight a 0 in the table\n\t\tif (this.buffTargetDied(window) === SHORT_WINDOW_FAULT.PARTNER) {\n\t\t\treturn (actual: number, expected?: number) => {\n\t\t\t\tif (!isDefined(expected) || actual <= expected) {\n\t\t\t\t\treturn RotationTargetOutcome.NEGATIVE\n\t\t\t\t}\n\t\t\t\treturn RotationTargetOutcome.POSITIVE\n\t\t\t}\n\t\t}\n\t}\n\n\t// pulled into a helper due to use in multiple spots\n\t// returns true if:\n\t// - the buff ended early during the fight\n\tprivate buffTargetDied(buffWindow: HistoryEntry<EvaluatedAction[]>): number {\n\t\tconst windowDurationMillis = _.max(ensureArray(this.buffStatus).map(s => s.duration)) ?? 0\n\t\tconst actualWindowDuration = (buffWindow?.end ?? buffWindow.start) - buffWindow.start\n\n\t\t// first check if the window would go past the end, and then check if the actual buff duration was\n\t\t// shorter than expected\n\t\tif (this.isRushedEndOfPullWindow(buffWindow)) {\n\t\t\treturn SHORT_WINDOW_FAULT.NONE\n\t\t}\n\n\t\t// if the window duration does not match the actual time (within a reasonable threshold)\n\t\t// mark it\n\t\tif (actualWindowDuration < (windowDurationMillis - SHORT_WINDOW_BUFFER)) {\n\t\t\t// ok now check to see if a player death happened within the expected window.\n\t\t\tconst playerDeath = this.deathTimes.filter(deathTime => {\n\t\t\t\t// check if time is within reasonable distance of the window end\n\t\t\t\treturn (buffWindow.start < deathTime && deathTime < buffWindow.start + (actualWindowDuration + SHORT_WINDOW_BUFFER))\n\t\t\t})\n\n\t\t\t// if there was a player death, oops it's your fault now\n\t\t\tif (playerDeath.length > 0) {\n\t\t\t\treturn SHORT_WINDOW_FAULT.DRG\n\t\t\t}\n\n\t\t\t// otherwise it's your partner and you're off the hook\n\t\t\treturn SHORT_WINDOW_FAULT.PARTNER\n\t\t}\n\n\t\treturn SHORT_WINDOW_FAULT.NONE\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {ActionKey} from 'data/ACTIONS'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Data} from 'parser/core/modules/Data'\nimport Downtime from 'parser/core/modules/Downtime'\nimport {Timeline} from 'parser/core/modules/Timeline'\nimport React, {Fragment} from 'react'\nimport {Table, Button} from 'semantic-ui-react'\nimport DISPLAY_ORDER from './DISPLAY_ORDER'\n\n// Buffer (ms) to forgive insignificant drift, we really only care about GCD drift here\n// and not log inconsistencies / sks issues / misguided weaving\nconst DRIFT_BUFFER = 1250\n\nconst DRIFT_ABILITIES: ActionKey[] = [\n\t'HIGH_JUMP',\n\t'GEIRSKOGUL',\n]\n\nclass DriftWindow {\n\tactionId: number\n\tstart: number\n\tend: number = 0\n\tdrift: number = 0\n\n\tconstructor(actionId: number, start: number) {\n\t\tthis.actionId = actionId\n\t\tthis.start = start\n\t}\n}\n\nexport default class Drift extends Analyser {\n\tstatic override debug = false\n\tstatic override handle = 'drift'\n\tstatic override title = t('drg.drift.title')`Ability Drift`\n\tstatic override displayOrder = DISPLAY_ORDER.DRIFT\n\n\t@dependency private downtime!: Downtime\n\t@dependency private timeline!: Timeline\n\t@dependency private data!: Data\n\n\tprivate driftedWindows: DriftWindow[] = []\n\n\tprivate driftAbilities = DRIFT_ABILITIES.map(k => this.data.actions[k].id)\n\tprivate cooldownMs: Record<number, number> = {}\n\n\tprivate currentWindows: Record<number, DriftWindow> = {}\n\n\toverride initialise() {\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\t\tthis.addEventHook(playerFilter.type('action').action(oneOf(this.driftAbilities)), this.onDriftableCast)\n\n\t\tDRIFT_ABILITIES.forEach(id => {\n\t\t\tconst action = this.data.actions[id]\n\t\t\tthis.cooldownMs[action.id] = action.cooldown ?? 0\n\t\t\tthis.currentWindows[action.id] = new DriftWindow(action.id, this.parser.pull.timestamp)\n\t\t})\n\t}\n\n\tprivate onDriftableCast(event: Events['action']) {\n\t\t// Get skill info.\n\t\tconst actionId = event.action\n\n\t\tconst cooldown = this.cooldownMs[actionId]\n\t\t// this.debug(cooldown)\n\n\t\t// Calculate drift\n\t\tconst window = this.currentWindows[actionId]\n\t\twindow.end = event.timestamp\n\n\t\t// Cap at this event's timestamp, as if we used before it came off CD, it's certainly driftless! (ms-range negative drift is common)\n\t\tconst plannedUseTime = Math.min(window.start + cooldown, event.timestamp)\n\t\tthis.debug(this.parser.formatEpochTimestamp(plannedUseTime))\n\n\t\tlet expectedUseTime = 0\n\n\t\tif (this.downtime.isDowntime(plannedUseTime)) {\n\t\t\tconst downtimeWindow = this.downtime.getDowntimeWindows(plannedUseTime, plannedUseTime)[0]\n\n\t\t\t// in theory the second case shouldn't trigger, but just in case since we've had this break before...\n\t\t\texpectedUseTime = downtimeWindow?.end ?? plannedUseTime\n\t\t} else {\n\t\t\texpectedUseTime = plannedUseTime\n\t\t}\n\n\t\twindow.drift = Math.max(0, window.end - expectedUseTime)\n\n\t\t// Push to table.\n\t\tthis.driftedWindows.push(window)\n\t\tthis.currentWindows[actionId] = new DriftWindow(actionId, event.timestamp)\n\t}\n\n\tprivate createTimelineButton(timestamp: number) {\n\t\treturn <Button\n\t\t\tcircular\n\t\t\tcompact\n\t\t\ticon=\"time\"\n\t\t\tsize=\"small\"\n\t\t\tonClick={() => this.timeline.show(timestamp - this.parser.pull.timestamp, timestamp - this.parser.pull.timestamp)}\n\t\t\tcontent={this.parser.formatEpochTimestamp(timestamp)}\n\t\t/>\n\t}\n\n\tprivate createDriftTable(casts: DriftWindow[]) {\n\t\tlet totalDrift = 0\n\t\tif (casts.length === 0) { // Don't draw table if nothing was cast.\n\t\t\treturn\n\t\t}\n\t\tconst action = this.data.getAction(casts[0].actionId)\n\t\treturn <Table>\n\t\t\t<Table.Header>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.HeaderCell><ActionLink {...action} /> <Trans id=\"drg.drift.table.heading-1\">Casts</Trans></Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell><Trans id=\"drg.drift.table.heading-2\">Drift</Trans></Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell><Trans id=\"drg.drift.table.heading-3\">Total Drift</Trans></Table.HeaderCell>\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{casts.map((event, index) => {\n\t\t\t\t\ttotalDrift += (index > 0) ? event.drift : 0\n\t\t\t\t\treturn <Table.Row key={event.end} warning={index > 0 && event.drift > DRIFT_BUFFER}>\n\t\t\t\t\t\t<Table.Cell>{this.createTimelineButton(event.end)}</Table.Cell>\n\t\t\t\t\t\t<Table.Cell>{event.drift !== null && index > 0 ? this.parser.formatDuration(event.drift) : '-'}</Table.Cell>\n\t\t\t\t\t\t<Table.Cell>{totalDrift ? this.parser.formatDuration(totalDrift) : '-'}</Table.Cell>\n\t\t\t\t\t</Table.Row>\n\t\t\t\t})}\n\t\t\t</Table.Body>\n\t\t</Table>\n\t}\n\n\toverride output() {\n\t\t// Nothing to show\n\t\tif (!this.driftedWindows.length) { return }\n\n\t\treturn <Fragment>\n\t\t\t<Table style={{border: 'none'}}>\n\t\t\t\t<Table.Body>\n\t\t\t\t\t<Table.Row>\n\t\t\t\t\t\t<Table.Cell style={{verticalAlign: 'top'}}>\n\t\t\t\t\t\t\t{this.createDriftTable(this.driftedWindows.filter((ability) => {\n\t\t\t\t\t\t\t\treturn ability.actionId === this.data.actions.HIGH_JUMP.id\n\t\t\t\t\t\t\t}))}\n\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t<Table.Cell style={{verticalAlign: 'top'}}>\n\t\t\t\t\t\t\t{this.createDriftTable(this.driftedWindows.filter((ability) => {\n\t\t\t\t\t\t\t\treturn ability.actionId === this.data.actions.GEIRSKOGUL.id\n\t\t\t\t\t\t\t}))}\n\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t</Table.Row>\n\t\t\t\t</Table.Body>\n\t\t\t</Table>\n\t\t</Fragment>\n\t}\n}\n","import {Trans, Plural} from '@lingui/react'\nimport Color from 'color'\nimport {DataLink} from 'components/ui/DbLink'\nimport {ActionKey} from 'data/ACTIONS'\nimport {Event} from 'event'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {CounterGauge, Gauge as CoreGauge} from 'parser/core/modules/Gauge'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\n// you get 2 (two) scales\nconst MAX_FOCUS = 2\nconst FMF_PER_CAST = 1\nconst WWT_COST = 2\n\n// this is like a purple which is close to the color used on the gauge\n// eslint-disable-next-line @typescript-eslint/no-magic-numbers\nconst FMF_COLOR = Color.rgb(196, 101, 234).fade(0.25).toString()\n\nconst FMF_GENERATORS: ActionKey[] = [\n\t'RAIDEN_THRUST',\n\t'DRACONIAN_FURY',\n]\n\n// todo:\n// - check how this handles situations where drg carried over a fmf stack\nexport class Gauge extends CoreGauge {\n\t@dependency private suggestions!: Suggestions\n\n\t// this is technically a gauge for Firstminds' Focus which enables wyrmwind thrust\n\tprivate fmfGauge = this.add(new CounterGauge({\n\t\tmaximum: MAX_FOCUS,\n\t\tgraph: {\n\t\t\tlabel: <Trans id=\"drg.gauge.resource.fmf\">Firstminds' Focus</Trans>,\n\t\t\tcolor: FMF_COLOR,\n\t\t},\n\t\tcorrectHistory: true,\n\t\tdeterministic: true,\n\t}))\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\n\t\tthis.addEventHook(playerFilter.type('action').action(this.data.matchActionId(FMF_GENERATORS)), this.onGeneratorCast)\n\t\tthis.addEventHook(playerFilter.type('action').action(this.data.actions.WYRMWIND_THRUST.id), this.onWwtCast)\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onGeneratorCast() {\n\t\tthis.fmfGauge.generate(FMF_PER_CAST)\n\t}\n\n\tprivate onWwtCast() {\n\t\tthis.fmfGauge.spend(WWT_COST)\n\t}\n\n\tprivate onComplete() {\n\t\tconst fmfOvercap = this.fmfGauge.overCap\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.WYRMWIND_THRUST.icon,\n\t\t\tcontent: <Trans id=\"drg.gauge.suggestions.overcapped-fmf.content\">\n\t\t\t\tMake sure to use <DataLink action=\"WYRMWIND_THRUST\" /> before <DataLink action=\"RAIDEN_THRUST\" /> or <DataLink action=\"DRACONIAN_FURY\" /> when you already have two stacks of Firstminds' Focus to prevent losing uses of <DataLink action=\"WYRMWIND_THRUST\" /> by overcapping.\n\t\t\t</Trans>,\n\t\t\ttiers: {\n\t\t\t\t1: SEVERITY.MEDIUM,\n\t\t\t\t2: SEVERITY.MAJOR,\n\t\t\t},\n\t\t\tvalue: fmfOvercap,\n\t\t\twhy: <Trans id=\"drg.gauge.suggestions.overcapped-fmf.why\">\n\t\t\t\t<Plural value={fmfOvercap} one=\"# Firstminds' Focus stack\" other=\"# Firstminds' Focus stacks\" /> were lost.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {Event, Events} from 'event'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {BuffWindow, EvaluatedAction, ExpectedActionsEvaluator, ExpectedGcdCountEvaluator, TrackedAction} from 'parser/core/modules/ActionWindow'\nimport {DisplayedActionEvaluator} from 'parser/core/modules/ActionWindow/evaluators/DisplayedActionEvaluator'\nimport {HistoryEntry} from 'parser/core/modules/ActionWindow/History'\nimport {Cooldowns} from 'parser/core/modules/Cooldowns'\nimport {GlobalCooldown} from 'parser/core/modules/GlobalCooldown'\nimport {SEVERITY} from 'parser/core/modules/Suggestions'\nimport React from 'react'\nimport {Message} from 'semantic-ui-react'\nimport DISPLAY_ORDER from './DISPLAY_ORDER'\n\ninterface SsdDelayTracker {\n\tnextWindowHoldSuccess: boolean\n\tssdHeld: boolean\n\texpectsTwo: boolean\n\tssdUseCount: number\n\tstart: number\n}\n\nexport default class LanceCharge extends BuffWindow {\n\tstatic override handle: string = 'lancecharge'\n\tstatic override title = t('drg.lancecharge.title')`Lance Charge`\n\tstatic override displayOrder = DISPLAY_ORDER.LANCE_CHARGE\n\n\t@dependency globalCooldown!: GlobalCooldown\n\t@dependency cooldowns!: Cooldowns\n\n\toverride buffStatus = this.data.statuses.LANCE_CHARGE\n\n\toverride prependMessages = <Message info>\n\t\t<Trans id=\"drg.lc.prepend-message\">Both charges of <ActionLink action=\"SPINESHATTER_DIVE\" /> should be used while both <ActionLink action=\"LANCE_CHARGE\" /> and <ActionLink action=\"DRAGON_SIGHT\" /> are active. Since this is not always possible, we do our best in this module to avoid marking windows where <ActionLink action=\"SPINESHATTER_DIVE\" showIcon={false} /> was correctly held as errors. <ActionLink action=\"DRAGONFIRE_DIVE\" /> should be used in every other window.</Trans>\n\t</Message>\n\n\tprivate ssdDelays: SsdDelayTracker[] = []\n\tprivate currentSsdWindow?: SsdDelayTracker\n\tprivate previousSsdWindow?: SsdDelayTracker\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tconst lcStatusFilter = filter<Event>()\n\t\t\t.source(this.parser.actor.id)\n\t\t\t.status(this.data.statuses.LANCE_CHARGE.id)\n\n\t\tconst ssdActionFilter = filter<Event>().source(this.parser.actor.id).type('action')\n\t\t\t.action(this.data.actions.SPINESHATTER_DIVE.id)\n\n\t\tthis.addEventHook(lcStatusFilter.type('statusApply'), this.onLcStatusApply)\n\t\tthis.addEventHook(ssdActionFilter, this.onSsd)\n\t\tthis.addEventHook(lcStatusFilter.type('statusRemove'), this.onLcStatusRemove)\n\n\t\tconst suggestionIcon = this.data.actions.LANCE_CHARGE.icon\n\t\tconst suggestionWindowName = <ActionLink action=\"LANCE_CHARGE\" showIcon={false}/>\n\t\tthis.addEvaluator(new ExpectedGcdCountEvaluator({\n\t\t\texpectedGcds: 8,\n\t\t\tglobalCooldown: this.globalCooldown,\n\t\t\thasStacks: false,\n\t\t\tsuggestionIcon,\n\t\t\tsuggestionContent: <Trans id=\"drg.lc.suggestions.missedgcd.content\">\n\t\t\t\tTry to land at least 8 GCDs during every <ActionLink action=\"LANCE_CHARGE\" /> window.\n\t\t\t</Trans>,\n\t\t\tsuggestionWindowName,\n\t\t\tseverityTiers: {\n\t\t\t\t1: SEVERITY.MINOR,\n\t\t\t\t2: SEVERITY.MEDIUM,\n\t\t\t\t4: SEVERITY.MAJOR,\n\t\t\t},\n\t\t}))\n\n\t\tthis.addEvaluator(new ExpectedActionsEvaluator({\n\t\t\texpectedActions: [\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.HIGH_JUMP,\n\t\t\t\t\texpectedPerWindow: 1,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.GEIRSKOGUL,\n\t\t\t\t\texpectedPerWindow: 1,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.MIRAGE_DIVE,\n\t\t\t\t\texpectedPerWindow: 1,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.SPINESHATTER_DIVE,\n\t\t\t\t\texpectedPerWindow: 1,\n\t\t\t\t},\n\t\t\t],\n\t\t\tsuggestionIcon,\n\t\t\tsuggestionContent: <Trans id=\"drg.lc.suggestions.missedaction.content\">Try to use as many of your oGCDs as possible during <ActionLink action=\"LANCE_CHARGE\" />. Remember to keep your abilities on cooldown, when possible, to prevent them from drifting outside of your buff windows.</Trans>,\n\t\t\tsuggestionWindowName,\n\t\t\tseverityTiers: {\n\t\t\t\t1: SEVERITY.MINOR,\n\t\t\t\t6: SEVERITY.MEDIUM,\n\t\t\t\t12: SEVERITY.MAJOR,\n\t\t\t},\n\t\t\tadjustCount: this.adjustExpectedActionCount.bind(this),\n\t\t}))\n\n\t\tthis.addEvaluator(new DisplayedActionEvaluator([this.data.actions.LIFE_SURGE, this.data.actions.DRAGONFIRE_DIVE]))\n\t}\n\n\tprivate onLcStatusApply(event: Events['statusApply']) {\n\t\t// construct current\n\t\tthis.currentSsdWindow = {\n\t\t\tnextWindowHoldSuccess: false,\n\t\t\tssdHeld: false,\n\t\t\tssdUseCount: 0,\n\t\t\tstart: event.timestamp,\n\t\t\texpectsTwo: this.previousSsdWindow?.ssdHeld ?? false,\n\t\t}\n\n\t\tthis.ssdDelays.push(this.currentSsdWindow)\n\t}\n\n\tprivate onSsd() {\n\t\tif (this.currentSsdWindow != null) {\n\t\t\tthis.currentSsdWindow.ssdUseCount += 1\n\t\t}\n\t}\n\n\tprivate onLcStatusRemove() {\n\t\t// little bit of analysis\n\t\tif (this.currentSsdWindow != null) {\n\t\t\tconst ssdCharges = this.cooldowns.charges('SPINESHATTER_DIVE')\n\n\t\t\tif (ssdCharges >= 1) {\n\t\t\t\tthis.currentSsdWindow.ssdHeld = true\n\t\t\t}\n\n\t\t\tif (this.previousSsdWindow) {\n\t\t\t\tif (this.currentSsdWindow.ssdUseCount === 2 && this.previousSsdWindow.ssdHeld) {\n\t\t\t\t\tthis.previousSsdWindow.nextWindowHoldSuccess = true\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.previousSsdWindow = this.currentSsdWindow\n\t\t\tthis.currentSsdWindow = undefined\n\t\t}\n\t}\n\n\tprivate adjustExpectedActionCount(window: HistoryEntry<EvaluatedAction[]>, action: TrackedAction) {\n\t\t// so if a drg is rushing we don't really have expectations of specific actions that get fit in the window, we just want the buff used.\n\t\tif (this.isRushedEndOfPullWindow(window) && action.action.id !== this.data.actions.DRAGONFIRE_DIVE.id) {\n\t\t\treturn -1\n\t\t}\n\n\t\t// SSD: if a buff window didn't have a SSD but the next one actually contained two SSDs, we correct\n\t\t// this window to expect 0 (this is due to SSD having charges and it's optimal to use both during the 2 minute windows)\n\t\tif (action.action.id === this.data.actions.SPINESHATTER_DIVE.id) {\n\t\t\t// ok quick eject if there's only actually one SSD here because in that case this check isn't relevant\n\t\t\t// this is just to avoid flagging an error if someone does hold charges correctly\n\t\t\tconst currentWindowSsd = window.data.filter(d => d.action.id === this.data.actions.SPINESHATTER_DIVE.id)\n\t\t\tif (currentWindowSsd.length === 1) {\n\t\t\t\treturn 0\n\t\t\t}\n\n\t\t\t// find the window extra data\n\t\t\tconst ssdDelay = this.ssdDelays.find(d => d.start === window.start)\n\n\t\t\tif (ssdDelay) {\n\t\t\t\tif (ssdDelay.ssdHeld && ssdDelay.nextWindowHoldSuccess) {\n\t\t\t\t\treturn -1\n\t\t\t\t}\n\t\t\t\tif (ssdDelay.expectsTwo) {\n\t\t\t\t\treturn 1\n\t\t\t\t}\n\n\t\t\t\t// if we weren't expecting two but got two anyway, sure give it to them\n\t\t\t\t// this should only happen on the first window or after a downtime reset\n\t\t\t\tif (!ssdDelay.expectsTwo && currentWindowSsd.length === 2) {\n\t\t\t\t\treturn 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn 0\n\t}\n}\n","import {CooldownDowntime} from 'parser/core/modules/CooldownDowntime'\n\n// +2s start of fight buffer added for all first use\n// at high skill speeds, Battle Litany is first, so the order is a bit fluid,\n// however all are used before the third GCD\nconst BUFF_FIRST_USE_OFFSET = 7000\n\n// ordering for jumps and GSK can shift, though LS is constant\n// Currenly, last jump (DFD usually) is used before 9th GCD\nconst JUMP_FIRST_USE_OFFSET = 24500\n\n// always before Full Thrust, the 8th GCD\nconst LIFE_SURGE_FIRST_USE_OFFSET = 22000\n\nexport default class OGCDDowntime extends CooldownDowntime {\n\toverride defaultFirstUseOffset = BUFF_FIRST_USE_OFFSET\n\toverride trackedCds = [\n\t\t{\n\t\t\tcooldowns: [this.data.actions.HIGH_JUMP],\n\t\t\tfirstUseOffset: JUMP_FIRST_USE_OFFSET,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.GEIRSKOGUL],\n\t\t\tfirstUseOffset: JUMP_FIRST_USE_OFFSET,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.SPINESHATTER_DIVE],\n\t\t\tfirstUseOffset: JUMP_FIRST_USE_OFFSET,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.DRAGONFIRE_DIVE],\n\t\t\tfirstUseOffset: JUMP_FIRST_USE_OFFSET,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.LIFE_SURGE],\n\t\t\tfirstUseOffset: LIFE_SURGE_FIRST_USE_OFFSET,\n\t\t},\n\t\t{cooldowns: [this.data.actions.LANCE_CHARGE]},\n\t\t{cooldowns: [this.data.actions.DRAGON_SIGHT]},\n\t\t{cooldowns: [this.data.actions.BATTLE_LITANY]},\n\t]\n}\n","import {Positionals as CorePositionals} from 'parser/core/modules/Positionals'\n\nexport class Positionals extends CorePositionals {\n\tpositionals = [\n\t\tthis.data.actions.CHAOTIC_SPRING,\n\t\tthis.data.actions.FANG_AND_CLAW,\n\t\tthis.data.actions.WHEELING_THRUST,\n\t]\n}\n","import {Plural, Trans} from '@lingui/react'\nimport {ActionLink, StatusLink} from 'components/ui/DbLink'\nimport {Procs as CoreProcs} from 'parser/core/modules/Procs'\nimport {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\nexport default class Procs extends CoreProcs {\n\ttrackedProcs = [\n\t\t{\n\t\t\tprocStatus: this.data.statuses.SHARPER_FANG_AND_CLAW,\n\t\t\tconsumeActions: [this.data.actions.FANG_AND_CLAW],\n\t\t},\n\t\t{\n\t\t\tprocStatus: this.data.statuses.ENHANCED_WHEELING_THRUST,\n\t\t\tconsumeActions: [this.data.actions.WHEELING_THRUST],\n\t\t},\n\t\t{\n\t\t\tprocStatus: this.data.statuses.DIVE_READY,\n\t\t\tconsumeActions: [this.data.actions.MIRAGE_DIVE],\n\t\t},\n\t]\n\n\tprotected override addJobSpecificSuggestions(): void {\n\t\tconst droppedFang = this.getDropCountForStatus(this.data.statuses.SHARPER_FANG_AND_CLAW.id)\n\t\tconst droppedWheeling = this.getDropCountForStatus(this.data.statuses.ENHANCED_WHEELING_THRUST.id)\n\t\tconst droppedMirage = this.getDropCountForStatus(this.data.statuses.DIVE_READY.id)\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: droppedFang >= droppedWheeling ? this.data.actions.FANG_AND_CLAW.icon : this.data.actions.WHEELING_THRUST.icon,\n\t\t\tcontent: <Trans id=\"drg.procs.suggestions.extenders.content\">\n\t\t\t\tAvoid interrupting your combos at the <ActionLink {...this.data.actions.FANG_AND_CLAW}/> and <ActionLink {...this.data.actions.WHEELING_THRUST}/> stages, as it causes you to lose the procs that allow you to cast them.\n\t\t\t</Trans>,\n\t\t\ttiers: {\n\t\t\t\t1: SEVERITY.MINOR,\n\t\t\t\t2: SEVERITY.MEDIUM,\n\t\t\t\t4: SEVERITY.MAJOR,\n\t\t\t},\n\t\t\tvalue: droppedFang + droppedWheeling,\n\t\t\twhy: <Trans id=\"drg.procs.suggestions.extenders.why\">\n\t\t\t\tYou dropped <Plural value={droppedFang} one=\"# Fang and Claw proc\" other=\"# Fang and Claw procs\"/> and <Plural value={droppedWheeling} one=\"# Wheeling Thrust proc\" other=\"# Wheeling Thrust procs\"/>.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.MIRAGE_DIVE.icon,\n\t\t\tcontent: <Trans id=\"drg.procs.suggestions.mirage-dropped.content\">\n\t\t\t\tAvoid letting your <StatusLink {...this.data.statuses.DIVE_READY}/> procs fall off, as it can delay your Life of the Dragon windows and potentially cost you a lot of DPS.\n\t\t\t</Trans>,\n\t\t\ttiers: {\n\t\t\t\t1: SEVERITY.MEDIUM,\n\t\t\t\t3: SEVERITY.MAJOR,\n\t\t\t},\n\t\t\tvalue: droppedMirage,\n\t\t\twhy: <Trans id=\"drg.procs.suggestions.mirage-dropped.why\">\n\t\t\t\tYou dropped <Plural value={droppedMirage} one=\"# Mirage Dive proc\" other=\"# Mirage Dive procs\"/>.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n}\n","import ACTIONS from 'data/ACTIONS'\nimport {Tincture as CoreTincture} from 'parser/core/modules/Tincture'\nimport DISPLAY_ORDER from './DISPLAY_ORDER'\n\nexport default class Tincture extends CoreTincture {\n\tbuffAction = ACTIONS.INFUSION_STR // Just in case there is an issue coming up with the core module, copied from SAM.\n\tstatic override displayOrder = DISPLAY_ORDER.TINCTURES // Change order of display of modules.\n}\n","import {ActionKey} from 'data/ACTIONS'\nimport {Weaving as CoreWeaving, Weave} from 'parser/core/modules/Weaving'\nimport DISPLAY_ORDER from './DISPLAY_ORDER'\n\n// With the reduced animation lock, it's just stardiver that's the bad weave\nconst JUMPS: ActionKey[] = [\n\t'STARDIVER',\n]\n\nconst JUMPS_600: ActionKey[] = [\n\t'JUMP',\n\t'HIGH_JUMP',\n\t'SPINESHATTER_DIVE',\n\t'DRAGONFIRE_DIVE',\n]\n\nexport default class Weaving extends CoreWeaving {\n\tstatic override displayOrder = DISPLAY_ORDER.WEAVING\n\n\tprivate jumpIds = JUMPS.map(key => this.data.actions[key].id)\n\n\toverride getMaxWeaves(weave: Weave) {\n\t\tif (this.parser.patch.before('6.1')) {\n\t\t\tconst jump600Ids = JUMPS_600.map(key => this.data.actions[key].id)\n\t\t\tthis.jumpIds.push(...jump600Ids)\n\t\t}\n\n\t\tif (weave.weaves.some(weave => this.jumpIds.includes(weave.action))) {\n\t\t\treturn 1\n\t\t}\n\n\t\treturn super.getMaxWeaves(weave)\n\t}\n}\n","import {ActionTimeline} from './ActionTimeline'\nimport {BattleLitany} from './BattleLitany'\nimport {BloodOfTheDragon} from './BloodOfTheDragon'\nimport Buffs from './Buffs'\nimport {Combos} from './Combos'\nimport Debuffs from './Debuffs'\nimport DragonSight from './DragonSight'\nimport Drift from './Drift'\nimport {Gauge} from './Gauge'\nimport LanceCharge from './LanceCharge'\nimport OGCDDowntime from './OGCDDowntime'\nimport {Positionals} from './Positionals'\nimport Procs from './Procs'\nimport Tincture from './Tincture'\nimport Weaving from './Weaving'\n\nexport default [\n\tActionTimeline,\n\tBattleLitany,\n\tBloodOfTheDragon,\n\tBuffs,\n\tCombos,\n\tDebuffs,\n\tDragonSight,\n\tDrift,\n\tGauge,\n\tLanceCharge,\n\tOGCDDowntime,\n\tPositionals,\n\tProcs,\n\tTincture,\n\tWeaving,\n]\n","require('../../modules/es.math.trunc');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Math.trunc;\n","var $ = require('../internals/export');\n\nvar ceil = Math.ceil;\nvar floor = Math.floor;\n\n// `Math.trunc` method\n// https://tc39.es/ecma262/#sec-math.trunc\n$({ target: 'Math', stat: true }, {\n  trunc: function trunc(it) {\n    return (it > 0 ? floor : ceil)(it);\n  }\n});\n","var parent = require('../../es/math/trunc');\n\nmodule.exports = parent;\n"],"names":["module","exports","ItemDepth","ActionTimeline","CastTime","Cooldowns","Data","Timeline","resolvedRows","groupRows","action","this","addRow","content","constructor","rows","config","resolvedConfig","resolveConfig","push","addEventHook","onComplete","populatedGroups","row","populateRow","forEach","specifier","cooldowns","groups","group","add","allGroups","has","finalConfig","Array","isArray","ensureArray","existingRow","get","isDefined","firstContent","label","Trans","id","data","actions","name","cooldownHistory","timeline","ContainerRow","order","collapse","set","addCooldownItems","addChargeItems","chargeHistory","history","entry","duration","getCooldownDuration","start","parser","pull","timestamp","end","addItem","SimpleItem","className","item","delta","ActionItem","depth","ACTION","ChargeGainItem","CHARGE_GAIN","endReason","CooldownEndReason","castTime","forAction","Math","max","Analyser","handle","debug","dependency","Content","styles","Icon","BaseItem","DoTs","Actors","Invulnerability","Statuses","trackedStatuses","statusApplications","filter","type","source","actor","status","oneOf","onApply","event","getStatus","trackedStatus","target","trackedStatusOnTarget","lastApplied","totalClipping","excludeApplication","clip","addChecklistRules","addClippingSuggestions","statusId","statuses","getUptime","actors","foes","invulnerability","getDuration","types","fightDuration","round","estimateHelp","__all","legacyFflogs","GlobalCooldown","Statistics","SpeedAdjustments","speedAdjustments","getAdjustedDuration","BASE_GCD","isAdjustmentEstimated","estimated","isEstimated","statistics","SimpleStatistic","title","icon","ATTACK","value","formatDuration","info","report","meta","undefined","Positionals","Checklist","positionalResults","positionals","cause","matchCauseActionId","positional","onCast","getAction","positionalResult","getOrCreatePositionalResult","positionalHit","targets","bonusPercent","hits","misses","result","missed_positional_combo_bonus_percent","calculateBonusPercent","getBasePotency","getPotencyWithMods","BonusModifier","missedPositionalBonusPercents","base","bonus","relative_timestamp","relativeTimestamp","circular","compact","size","onClick","show","formatEpochTimestamp","length","checklist","Rule","displayOrder","DISPLAY_ORDER","description","requirements","positionalRequirement","actual","expected","percent","Requirement","weight","overrideDisplay","toFixed","total","current","unstackable","celled","textAlign","numHits","numMisses","success","style","whiteSpace","showName","positive","negative","miss","createTimelineButton","ft","statusSpecifier","targetSpecifier","edges","edgesForActor","statusHistory","a","b","uptime","application","edge","side","events","apply","refresh","splitRangeForInvulns","statusDuration","remove","currentEpochTimestamp","min","range","finalRanges","invulns","getWindows","actorFilter","kind","invuln","previousRange","Tincture","buffStatus","MEDICATED","BuffWindow","CAST_TIME_MAX_WEAVES","WEAVING_SEVERITY","SEVERITY","Weaving","Suggestions","suggestionIcon","moduleLink","cursor","scrollTo","message","suggestionContent","severity","weaves","ongoingCastEvent","leadingGcdEvent","trailingGcdEvent","badWeaves","playerFilter","onBeginCast","clearWeave","autoAttack","isOgcd","saveIfBad","suggestions","TieredSuggestion","why","tiers","leadingTimestamp","gcdTimeDiff","weave","isBadWeave","onGcd","weaveCount","isActive","recast","recastForEvent","getMaxWeaves","forEvent","matchClosestLower","panels","key","exclusive","styled","fluid","CoreActionTimeline","DoubleDrgEvaluator","doubleDrgNote","windows","notes","w","every","note","format","header","accessor","n","BattleLitany","buffAction","BATTLE_LITANY","buffApplications","blStatusFilter","onBlStatusApply","suggestionWindowName","showIcon","addEvaluator","ExpectedGcdCountEvaluator","expectedGcds","globalCooldown","hasStacks","severityTiers","bind","targetActor","playerControlled","appliedByThisDrg","job","buffWindow","actualWindowDuration","lookbackStart","ba","RaidBuffWindow","DRAGON_DURATION_MILLIS","EYE_COLOR","Color","fade","toString","BloodOfTheDragon","BrokenLog","Downtime","lifeDuration","lifeWindows","lastEventTime","lastMdTime","lastGskTime","eyeGauge","CounterGauge","maximum","graph","color","correctHistory","deterministic","MIRAGE_DIVE","onMirageDiveCast","GEIRSKOGUL","onGeirskogulCast","NASTROND","onNastrondCast","STARDIVER","onStardiverCast","onDeathLotd","active","hasStatus","LANCE_CHARGE","RIGHT_EYE","RIGHT_EYE_SOLO","Button","elapsedTime","finishLifeWindow","updateGauge","generate","nastronds","stardivers","timeToNextBuff","remaining","activeBuffs","getActiveDrgBuffs","buffsInDelayWindow","dtOverlapTime","isLast","shouldDelay","showNoDelayNote","missedSdBuff","spend","some","nastrond","buffs","brokenLog","trigger","stardiver","downtime","getDowntimeWindows","dtWindow","lifeWindow","intersectsDowntime","HIGH_JUMP","cooldown","activeBuffsInWindow","shouldBeDelayed","buffsExistInDelayWindow","buffKey","lastWindow","analyzeLifeWindows","noBuffSd","window","noLifeSd","noFullNsLife","shouldRush","shouldRushFinalWindow","MAX_EYES","overCap","Suggestion","DRAGON_SIGHT","remainingTimeForLife","lastWindowDuration","casts","cast","iconSize","Table","warning","delayBuffs","idx","Message","Fragment","error","windowWarning","windowError","lotdPanels","formatWindowTitle","windowTable","Accordion","CoreGauge","BAD_LIFE_SURGE_CONSUMERS","FINAL_COMBO_HITS","CHART_LIFE_SURGE_CONSUMERS","CHART_COLORS","Buffs","badLifeSurges","fifthGcd","soloDragonSightCount","lifeSurgeCasts","badLifeSurgeConsumers","k","finalComboHits","chartLifeSurgeConsumers","chartColors","onDragonSight","COERTHAN_TORMENT","onCot","v","LIFE_SURGE","currentDuration","POWER_SURGE","getPowerSurgeUptimePercent","totalLsCasts","trackedCastCount","actionId","i","columns","lsCastPercent","otherCasts","PieChartStatistic","headings","Combos","ACTIONS","CoreCombos","Debuffs","CHAOTIC_SPRING","getUptimePercent","chaosThrustClipPerMinute","getClippingAmount","CHAOS_THRUST","CoreDoTs","DisplayedActionEvaluator","expectedActions","countUsed","ShortWindowEvaluator","shortWindowReason","faults","fault","DragonSight","deathTimes","onDeath","adjustCount","adjustExpectedGcdCount","expectedPerWindow","SPINESHATTER_DIVE","patch","before","DRAGONFIRE_DIVE","ExpectedActionsEvaluator","adjustExpectedActionCount","adjustOutcome","adjustExpectedActionOutcome","buffTargetDied","after","calculateExpectedGcdsForTime","isRushedEndOfPullWindow","RotationTargetOutcome","windowDurationMillis","s","deathTime","DRIFT_ABILITIES","DriftWindow","drift","Drift","driftedWindows","driftAbilities","cooldownMs","currentWindows","onDriftableCast","plannedUseTime","expectedUseTime","isDowntime","downtimeWindow","totalDrift","index","border","verticalAlign","createDriftTable","ability","FMF_COLOR","FMF_GENERATORS","Gauge","fmfGauge","matchActionId","onGeneratorCast","WYRMWIND_THRUST","onWwtCast","fmfOvercap","LanceCharge","prependMessages","ssdDelays","currentSsdWindow","previousSsdWindow","lcStatusFilter","ssdActionFilter","onLcStatusApply","onSsd","onLcStatusRemove","nextWindowHoldSuccess","ssdHeld","ssdUseCount","expectsTwo","charges","currentWindowSsd","d","ssdDelay","JUMP_FIRST_USE_OFFSET","OGCDDowntime","defaultFirstUseOffset","trackedCds","firstUseOffset","CooldownDowntime","FANG_AND_CLAW","WHEELING_THRUST","CorePositionals","Procs","trackedProcs","procStatus","SHARPER_FANG_AND_CLAW","consumeActions","ENHANCED_WHEELING_THRUST","DIVE_READY","droppedFang","getDropCountForStatus","droppedWheeling","droppedMirage","CoreProcs","CoreTincture","JUMPS","JUMPS_600","jumpIds","jump600Ids","CoreWeaving","path","trunc","$","ceil","floor","stat","it","parent"],"sourceRoot":""}