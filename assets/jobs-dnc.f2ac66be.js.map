{"version":3,"file":"assets/jobs-dnc.f2ac66be.js","mappings":"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","sources":["webpack://@xivanalysis/client/./src/components/ui/RotationTable.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/Statuses.ts","webpack://@xivanalysis/client/./src/parser/jobs/dnc/modules/AoEUsages.ts","webpack://@xivanalysis/client/./src/parser/jobs/dnc/modules/Combos.ts","webpack://@xivanalysis/client/./src/parser/jobs/dnc/modules/Defensives.ts","webpack://@xivanalysis/client/./src/parser/jobs/dnc/CommonData.tsx","webpack://@xivanalysis/client/./src/parser/jobs/dnc/modules/DirtyDancing.tsx","webpack://@xivanalysis/client/./src/parser/jobs/dnc/DISPLAY_ORDER.ts","webpack://@xivanalysis/client/./src/parser/jobs/dnc/modules/Gauge.tsx","webpack://@xivanalysis/client/./src/parser/jobs/dnc/modules/OGCDDowntime.tsx","webpack://@xivanalysis/client/./src/parser/jobs/dnc/modules/Procs.tsx","webpack://@xivanalysis/client/./src/parser/jobs/dnc/modules/Technicalities.tsx","webpack://@xivanalysis/client/./src/parser/jobs/dnc/modules/index.ts"],"sourcesContent":["import {Trans} from '@lingui/react'\nimport Rotation, {RotationEvent} from 'components/ui/Rotation'\nimport React from 'react'\nimport {Button, Table} from 'semantic-ui-react'\nimport {isDefined, formatDuration} from 'utilities'\n\nexport interface RotationTarget {\n\t/**\n\t * Displayed header\n\t */\n\theader: React.ReactNode\n\t/**\n\t * Accessor can either be a string, in which case this will resolve to the value assigned to the same key in the `targetsData` field in each entry,\n\t * or a function resolving the entry to the `RotationTargetData`.\n\t */\n\taccessor: string | ((entry: RotationTableEntry) => RotationTargetData)\n}\n\nexport interface RotationNotes {\n\t/**\n\t * Displayed header\n\t */\n\theader: React.ReactNode\n\t/**\n\t * Accessor can either be a string, in which case this will resolve to the value assigned to the same key in the `targetsData` field in each entry,\n\t * or a function resolving the entry to the `RotationTargetData`.\n\t */\n\taccessor: string | ((entry: RotationTableEntry) => React.ReactNode)\n}\n\n/**\n * Determines how a rotation target gets highlighted (negative = red, positive = green)\n */\nexport enum RotationTargetOutcome { NEGATIVE, NEUTRAL, POSITIVE }\n\nexport interface RotationTargetData {\n\t/**\n\t * Expected target number\n\t */\n\texpected?: number\n\t/**\n\t * Recorded number\n\t */\n\tactual: number\n\t/**\n\t * Optional function to override the default positive/negative highlighting\n\t */\n\ttargetComparator?: (actual: number, expected?: number) => RotationTargetOutcome\n}\n\nexport interface RotationTableTargetData {\n\t/**\n\t * Identifier to Target Data mapping\n\t */\n\t[id: string]: RotationTargetData\n}\n\nexport interface RotationTableNotesMap {\n\t/**\n\t * Identifier to Notes mapping\n\t */\n\t[id: string]: React.ReactNode\n}\n\nexport interface RotationTableEntry {\n\t/**\n\t * Start point relative to fight start\n\t */\n\tstart: number\n\t/**\n\t * End point relative to fight start\n\t */\n\tend: number\n\t/**\n\t * Map of pre calculated target data\n\t */\n\ttargetsData?: RotationTableTargetData\n\t/**\n\t * Map of pre calculated target data\n\t */\n\tnotesMap?: RotationTableNotesMap\n\t/**\n\t * Rotation to display that occurs during this entry\n\t */\n\trotation: RotationEvent[]\n}\n\ninterface RotationTableProps {\n\t/**\n\t * List of Targets to display, consisting of the displayed header and the accessor to resolve the actual and expected values\n\t */\n\ttargets?: RotationTarget[]\n\t/**\n\t * List of Notes to display, consisting of the displayed header and the accessor to resolve the value\n\t */\n\tnotes?: RotationNotes[]\n\t/**\n\t * List of table entries, consisting of a time frame and the rotation, with optionally a pre calculated target data\n\t */\n\tdata: RotationTableEntry[]\n\t/**\n\t * Optional Callback to display the jump to time button.\n\t * Usually this should be a pass through of the `Timeline.show` function.\n\t * @param start\n\t * @param end\n\t * @param scrollTo\n\t */\n\tonGoto?: (start: number, end: number, scrollTo?: boolean) => void\n\t/**\n\t * Optional property to provide a JSX.Element (translation tag) for the header value.\n\t * Defaults to \"Rotation\"\n\t */\n\theaderTitle?: JSX.Element\n}\n\ninterface RotationTableRowProps {\n\t/**\n\t * List of Targets to display, consisting of the displayed header and the accessor to resolve the actual and expected values\n\t */\n\ttargets: RotationTarget[]\n\t/**\n\t * List of Notes to display, consisting of the displayed header and the accessor to resolve the value\n\t */\n\tnotes: RotationNotes[]\n\t/**\n\t * Optional Callback to display the jump to time button.\n\t * Usually this should be a pass through of the `Timeline.show` function.\n\t * @param start\n\t * @param end\n\t * @param scrollTo\n\t */\n\tonGoto?: (start: number, end: number, scrollTo?: boolean) => void\n}\n\nexport class RotationTable extends React.Component<RotationTableProps> {\n\tstatic defaultTargetComparator(actual: number, expected?: number): RotationTargetOutcome {\n\t\tif (!isDefined(expected)) {\n\t\t\treturn RotationTargetOutcome.NEUTRAL\n\t\t}\n\n\t\tif (actual >= expected) {\n\t\t\treturn RotationTargetOutcome.POSITIVE\n\t\t}\n\n\t\treturn RotationTargetOutcome.NEGATIVE\n\t}\n\n\tstatic targetAccessorResolver = (entry: RotationTableEntry, target: RotationTarget): RotationTargetData => {\n\t\tif (typeof target.accessor === 'string' && entry.targetsData != null) {\n\t\t\treturn entry.targetsData[target.accessor]\n\t\t}\n\n\t\tif (typeof target.accessor === 'function') {\n\t\t\treturn target.accessor(entry)\n\t\t}\n\n\t\treturn {\n\t\t\tactual: 0,\n\t\t\texpected: 0,\n\t\t}\n\t}\n\n\tstatic notesAccessorResolver = (entry: RotationTableEntry, note: RotationNotes): React.ReactNode => {\n\t\tif (typeof note.accessor === 'string' && entry.notesMap != null) {\n\t\t\treturn entry.notesMap[note.accessor]\n\t\t}\n\n\t\tif (typeof note.accessor === 'function') {\n\t\t\treturn note.accessor(entry)\n\t\t}\n\n\t\treturn null\n\t}\n\n\tstatic TargetCell = ({actual, expected, targetComparator}: RotationTargetData) => {\n\t\tif (targetComparator === undefined) {\n\t\t\ttargetComparator = RotationTable.defaultTargetComparator\n\t\t}\n\t\tconst targetOutcome = targetComparator(actual, expected)\n\n\t\treturn <Table.Cell\n\t\t\ttextAlign=\"center\"\n\t\t\tpositive={targetOutcome === RotationTargetOutcome.POSITIVE}\n\t\t\tnegative={targetOutcome === RotationTargetOutcome.NEGATIVE}\n\t\t>\n\t\t\t{actual}/{expected === undefined ? '-' : expected}\n\t\t</Table.Cell>\n\t}\n\n\tstatic Row = ({onGoto, targets, notes, notesMap, start, end, targetsData, rotation}: RotationTableRowProps & RotationTableEntry) =>\n\t\t<Table.Row>\n\t\t\t<Table.Cell textAlign=\"center\">\n\t\t\t\t<span style={{marginRight: 5}}>{formatDuration(start, {secondPrecision: 0})}</span>\n\t\t\t\t{typeof onGoto === 'function' && <Button\n\t\t\t\t\tcircular\n\t\t\t\t\tcompact\n\t\t\t\t\tsize=\"mini\"\n\t\t\t\t\ticon=\"time\"\n\t\t\t\t\tonClick={() => onGoto(start, end)}\n\t\t\t\t/>}\n\t\t\t</Table.Cell>\n\t\t\t{\n\t\t\t\ttargets\n\t\t\t\t\t.map(target => RotationTable.targetAccessorResolver({start, end, targetsData, rotation}, target))\n\t\t\t\t\t.map((targetEntry, i) => <RotationTable.TargetCell key={`target_${i}`} {...targetEntry}/>)\n\t\t\t}\n\t\t\t<Table.Cell>\n\t\t\t\t<Rotation events={rotation}/>\n\t\t\t</Table.Cell>\n\t\t\t{\n\t\t\t\tnotes\n\t\t\t\t\t.map(note => RotationTable.notesAccessorResolver({start, end, targetsData, notesMap, rotation}, note))\n\t\t\t\t\t.map((noteEntry, i) =>\n\t\t\t\t\t\t<Table.Cell\n\t\t\t\t\t\t\tkey={`notes_${i}`}\n\t\t\t\t\t\t\ttextAlign=\"center\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{noteEntry}\n\t\t\t\t\t\t</Table.Cell>,\n\t\t\t\t\t)\n\t\t\t}\n\t\t</Table.Row>\n\n\toverride render(): React.ReactNode {\n\t\tconst {\n\t\t\ttargets,\n\t\t\tnotes,\n\t\t\tdata,\n\t\t\tonGoto,\n\t\t\theaderTitle,\n\t\t} = this.props\n\n\t\treturn <Table compact unstackable celled>\n\t\t\t<Table.Header>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.HeaderCell collapsing>\n\t\t\t\t\t\t<strong><Trans id=\"core.ui.rotation-table.header.time\">Time</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t{\n\t\t\t\t\t\t(targets || []).map((target, i) =>\n\t\t\t\t\t\t\t<Table.HeaderCell key={`target_header_${i}`} textAlign=\"center\" collapsing>\n\t\t\t\t\t\t\t\t<strong>{target.header}</strong>\n\t\t\t\t\t\t\t</Table.HeaderCell>,\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong>{(headerTitle)? headerTitle : <Trans id=\"core.ui.rotation-table.header.rotation\">Rotation</Trans>}</strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t{\n\t\t\t\t\t\t(notes || []).map((note, i) =>\n\t\t\t\t\t\t\t<Table.HeaderCell key={`note_header_${i}`} textAlign=\"center\" collapsing>\n\t\t\t\t\t\t\t\t<strong>{note.header}</strong>\n\t\t\t\t\t\t\t</Table.HeaderCell>,\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{\n\t\t\t\t\tdata.map((entry) =>\n\t\t\t\t\t\t<RotationTable.Row key={entry.start} onGoto={onGoto} targets={targets || []} notes={notes || []} {...entry}/>,\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t</Table.Body>\n\t\t</Table>\n\t}\n}\n","import {Status, StatusKey} from 'data/STATUSES'\nimport {Events} from 'event'\nimport {ensureArray} from 'utilities'\nimport {Analyser} from '../Analyser'\nimport {dependency} from '../Injectable'\nimport {Actor, StatusEvent} from './Actors'\nimport {Data} from './Data'\nimport {Invulnerability} from './Invulnerability'\n\ninterface Edge {\n\tside: 'apply' | 'remove'\n\ttimestamp: number\n}\n\nexport class Statuses extends Analyser {\n\tstatic override handle = 'statuses'\n\tstatic override debug = false\n\n\t@dependency private readonly data!: Data\n\t@dependency private readonly invulnerability!: Invulnerability\n\n\t/**\n\t * Calculate the total uptime of the specified status across allspecified actors.\n\t * @param statusSpecifier Status to calculate uptime of.\n\t * @param targetSpecifier Target(s) that should be checked for the status.\n\t * @param source Source of statuses to filter by. Defaults to the parsed actor.\n\t */\n\tgetUptime(\n\t\tstatusSpecifier: StatusKey | Status,\n\t\ttargetSpecifier: Actor | Actor[],\n\t\tsource = this.parser.actor\n\t) {\n\t\t// Resolve arguments.\n\t\tconst status = typeof statusSpecifier === 'string'\n\t\t\t? this.data.statuses[statusSpecifier]\n\t\t\t: statusSpecifier\n\n\t\tconst targets = ensureArray(targetSpecifier)\n\n\t\t// Collect all the status history for the specified status/target/source combo.\n\t\tconst edges = targets.flatMap(target => this.edgesForActor(\n\t\t\ttarget,\n\t\t\ttarget.statusHistory.get(status.id)?.get(source.id) ?? []\n\t\t))\n\n\t\t// Edges are mapped from multiple potential targets; interlace by sorting by timestamp.\n\t\tedges.sort((a, b) => a.timestamp - b.timestamp)\n\n\t\t// Sum time when any of the specified targets had the status.\n\t\tconst meta = {uptime: 0, depth: 0, application: 0}\n\t\tfor (const edge of edges) {\n\t\t\tif (edge.side === 'apply') {\n\t\t\t\tif (meta.depth === 0) {\n\t\t\t\t\tmeta.application = edge.timestamp\n\t\t\t\t}\n\t\t\t\tmeta.depth ++\n\n\t\t\t} else {\n\t\t\t\tmeta.depth --\n\t\t\t\tif (meta.depth === 0) {\n\t\t\t\t\tmeta.uptime += edge.timestamp - meta.application\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.debug(`Status ${status.name} ${edge.side} at ${this.ft(edge.timestamp)}, depth=${meta.depth}`)\n\t\t}\n\n\t\treturn meta.uptime\n\t}\n\n\tprivate edgesForActor(target: Actor, events: StatusEvent[]) {\n\t\t// We can safely assume status events from an actor will alternate between apply and remove.\n\t\tconst edges: Edge[] = []\n\t\tlet apply: Events['statusApply'] | undefined\n\t\tlet refresh: Events['statusApply'] | undefined\n\n\t\tfor (const event of events) {\n\t\t\t// Track the initial application and refreshes.\n\t\t\tif (event.type === 'statusApply') {\n\t\t\t\tapply ??= event\n\t\t\t\trefresh = event\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif (apply == null) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Window has been closed, merge any edges in.\n\t\t\tedges.push(...this.splitRangeForInvulns(\n\t\t\t\ttarget,\n\t\t\t\tapply.timestamp,\n\t\t\t\tevent.timestamp\n\t\t\t))\n\t\t\tapply = undefined\n\t\t}\n\n\t\t// If we've got a dangling apply, build edges for it.\n\t\tif (apply != null) {\n\t\t\t// Try to find a reasonable remove time for the status, if it has a duration.  Cap to the end of the fight.\n\t\t\tconst statusDuration = this.data.getStatus(apply.status)?.duration\n\t\t\tconst remove = statusDuration == null\n\t\t\t\t? this.parser.currentEpochTimestamp\n\t\t\t\t: Math.min((refresh ?? apply).timestamp + statusDuration, this.parser.currentEpochTimestamp)\n\n\t\t\tedges.push(...this.splitRangeForInvulns(\n\t\t\t\ttarget,\n\t\t\t\tapply.timestamp,\n\t\t\t\tremove,\n\t\t\t))\n\t\t}\n\n\t\treturn edges\n\t}\n\n\tprivate splitRangeForInvulns(target: Actor, apply: number, remove: number): Edge[] {\n\t\tlet range = {apply, remove}\n\t\tconst finalRanges = [range]\n\n\t\t// Get the invuln windows that occured during this range\n\t\tconst invulns = this.invulnerability.getWindows({\n\t\t\tstart: apply,\n\t\t\tend: remove,\n\t\t\tactorFilter: actor => actor.kind === target.kind,\n\t\t\ttypes: ['invulnerable'],\n\t\t})\n\n\t\tfor (const invuln of invulns) {\n\t\t\t// Invuln clipped start of range.\n\t\t\tif (invuln.start < range.apply && invuln.end >= range.apply) {\n\t\t\t\tthis.debug(`Start clip, [${this.ft(range.apply)},${this.ft(range.remove)}] -> [${this.ft(invuln.end)},${this.ft(range.remove)}]`)\n\n\t\t\t\trange.apply = invuln.end\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Invuln clipped end of range.\n\t\t\tif (invuln.start <= range.remove && invuln.end > range.remove) {\n\t\t\t\tthis.debug(`End clip, [${this.ft(range.apply)},${this.ft(range.remove)}] -> [${this.ft(range.apply)},${this.ft(invuln.start)}]`)\n\n\t\t\t\trange.remove = invuln.start\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Everything else should be a range split, sanity check.\n\t\t\tif (invuln.start < range.apply || invuln.end > range.remove) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tthis.debug(`Split [${this.ft(range.apply)},${this.ft(range.remove)}] -> [${this.ft(range.apply)},${this.ft(invuln.start)}], [${this.ft(invuln.end)},${this.ft(range.remove)}]`)\n\n\t\t\t// Split the range into two around the invuln.\n\t\t\tconst previousRange = range\n\t\t\trange = {...range}\n\t\t\tfinalRanges.push(range)\n\n\t\t\tpreviousRange.remove = invuln.start\n\t\t\trange.apply = invuln.end\n\t\t}\n\n\t\t// Map the ranges into edges.\n\t\treturn finalRanges.flatMap(range => [\n\t\t\t{side: 'apply', timestamp: range.apply},\n\t\t\t{side: 'remove', timestamp: range.remove},\n\t\t] as const)\n\t}\n\n\t// Small utility for formatting timestamps, as we do it a _lot_ in debug messages\n\tprivate ft = (timestamp: number) => this.parser.formatEpochTimestamp(timestamp, 1)\n}\n","import {AoEUsages as CoreAoE} from 'parser/core/modules/AoEUsages'\n\nexport class AoEUsages extends CoreAoE {\n\tsuggestionIcon = this.data.actions.WINDMILL.icon\n\n\ttrackedActions = [\n\t\t{\n\t\t\taoeAction: this.data.actions.WINDMILL,\n\t\t\tstActions: [this.data.actions.CASCADE],\n\t\t\tminTargets: 3,\n\t\t},\n\t\t{\n\t\t\taoeAction: this.data.actions.RISING_WINDMILL,\n\t\t\tstActions: [this.data.actions.REVERSE_CASCADE],\n\t\t\tminTargets: 2,\n\t\t},\n\t\t{\n\t\t\taoeAction: this.data.actions.BLOODSHOWER,\n\t\t\tstActions: [this.data.actions.FOUNTAINFALL],\n\t\t\tminTargets: 2,\n\t\t},\n\t]\n}\n","import {Combos as CoreCombos} from 'parser/core/modules/Combos'\n\nexport class Combos extends CoreCombos {\n\toverride suggestionIcon = this.data.actions.CASCADE.icon\n}\n","import {Defensives as CoreDefensives} from 'parser/core/modules/Defensives'\n\nexport class Defensives extends CoreDefensives {\n\tprotected override trackedDefensives = [\n\t\tthis.data.actions.SHIELD_SAMBA,\n\t\tthis.data.actions.IMPROVISATION,\n\t\tthis.data.actions.CURING_WALTZ,\n\t]\n}\n","import {ActionKey} from 'data/ACTIONS'\nimport {SEVERITY} from 'parser/core/modules/Suggestions'\n\nexport const STANDARD_FINISHES: ActionKey[] = [\n\t'STANDARD_FINISH',\n\t'SINGLE_STANDARD_FINISH',\n\t'DOUBLE_STANDARD_FINISH',\n]\n\nexport const TECHNICAL_FINISHES: ActionKey[] = [\n\t'TECHNICAL_FINISH',\n\t'SINGLE_TECHNICAL_FINISH',\n\t'DOUBLE_TECHNICAL_FINISH',\n\t'TRIPLE_TECHNICAL_FINISH',\n\t'QUADRUPLE_TECHNICAL_FINISH',\n]\n\nexport const FINISHES: ActionKey[] = [\n\t...STANDARD_FINISHES,\n\t...TECHNICAL_FINISHES,\n]\n\nexport const DEFAULT_SEVERITY_TIERS  = {\n\t1: SEVERITY.MINOR,\n\t3: SEVERITY.MEDIUM,\n\t5: SEVERITY.MAJOR,\n}\n\nexport const STEPS: ActionKey[] = [\n\t'STANDARD_STEP',\n\t'TECHNICAL_STEP',\n]\n\nexport const DANCE_MOVES: ActionKey[] = [\n\t'ENTRECHAT',\n\t'EMBOITE',\n\t'JETE',\n\t'PIROUETTE',\n]\n","import {t} from '@lingui/macro'\nimport {Plural, Trans} from '@lingui/react'\nimport {ActionLink, StatusLink} from 'components/ui/DbLink'\nimport {RotationTable} from 'components/ui/RotationTable'\nimport {StatusKey} from 'data/STATUSES'\nimport {Event, Events} from 'event'\nimport _ from 'lodash'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport CheckList, {Requirement, Rule} from 'parser/core/modules/Checklist'\nimport {Data} from 'parser/core/modules/Data'\nimport Downtime from 'parser/core/modules/Downtime'\nimport {Invulnerability} from 'parser/core/modules/Invulnerability'\nimport {Statuses} from 'parser/core/modules/Statuses'\nimport Suggestions, {SEVERITY, TieredSuggestion, Suggestion} from 'parser/core/modules/Suggestions'\nimport {Timeline} from 'parser/core/modules/Timeline'\nimport React, {Fragment} from 'react'\nimport {Icon, Message} from 'semantic-ui-react'\nimport {isSuccessfulHit} from 'utilities'\nimport {DANCE_MOVES, DEFAULT_SEVERITY_TIERS, FINISHES, STEPS} from '../CommonData'\nimport DISPLAY_ORDER from '../DISPLAY_ORDER'\n\nconst DANCE_COMPLETION_LENIENCY_MILLIS = 1000\n\nclass Dance {\n\tend?: number\n\tinitiatingStep: Events['action']\n\trotation: Array<Events['action']> = []\n\tdancing: boolean = false\n\tresolved: boolean = false\n\n\tdirty: boolean = false\n\tmissed: boolean = false\n\tfootloose: boolean = false\n\n\tdata!: Data\n\n\tpublic get error(): boolean {\n\t\treturn this.dirty || this.missed || this.footloose\n\t}\n\n\tpublic get expectedFinishId(): number {\n\t\tconst actualFinish = _.last(this.rotation)\n\n\t\t// Bail if something's wrong\n\t\tif (actualFinish == null) { return -1 }\n\n\t\t// If the player actually finished with one of the two expected finishes, just return that\n\t\tif (actualFinish.action === this.data.actions.QUADRUPLE_TECHNICAL_FINISH.id ||\n\t\t\tactualFinish.action === this.data.actions.DOUBLE_STANDARD_FINISH.id) {\n\t\t\treturn actualFinish.action\n\t\t}\n\n\t\t// If the player messed up Standard Step, return Double Standard Finish\n\t\tif (actualFinish.action === this.data.actions.STANDARD_FINISH.id ||\n\t\t\tactualFinish.action === this.data.actions.SINGLE_STANDARD_FINISH.id) {\n\t\t\treturn this.data.actions.DOUBLE_STANDARD_FINISH.id\n\t\t}\n\n\t\t// Process of elimination, they messed up Technical so return Quadruple Technical Finish\n\t\treturn this.data.actions.QUADRUPLE_TECHNICAL_FINISH.id\n\t}\n\n\tpublic get expectedEndTime(): number {\n\t\tconst actionData = this.data.getAction(this.initiatingStep.action)\n\t\tif (actionData == null) { return this.initiatingStep.timestamp }\n\t\treturn this.start + (actionData.gcdRecast ?? 0)\n\t\t\t+ this.expectedDanceMoves * this.data.actions.JETE.cooldown // All of the dance moves have the same cooldown, so just pick one\n\t\t\t+ DANCE_COMPLETION_LENIENCY_MILLIS // Additional leniency to account for network latency\n\t}\n\n\tpublic get expectedDanceMoves(): number {\n\t\tif (this.initiatingStep.action === this.data.actions.STANDARD_STEP.id) {\n\t\t\treturn 2\n\t\t}\n\t\tif (this.initiatingStep.action === this.data.actions.TECHNICAL_STEP.id) {\n\t\t\treturn DANCE_MOVES.length\n\t\t}\n\t\treturn 0\n\t}\n\n\tpublic get start(): number {\n\t\treturn this.initiatingStep.timestamp\n\t}\n\n\tconstructor(danceEvent: Events['action'], data: Data) {\n\t\tthis.initiatingStep = danceEvent\n\t\tthis.dancing = true\n\t\tthis.data = data\n\t}\n}\n\nexport class DirtyDancing extends Analyser {\n\tstatic override handle = 'dirtydancing'\n\tstatic override title = t('dnc.dirty-dancing.title')`Dance Issues`\n\tstatic override displayOrder = DISPLAY_ORDER.DIRTY_DANCING\n\n\t@dependency private actors!: Actors\n\t@dependency private checklist!: CheckList\n\t@dependency private data!: Data\n\t@dependency private downtime!: Downtime\n\t@dependency private invulnerability!: Invulnerability\n\t@dependency private suggestions!: Suggestions\n\t@dependency private statuses!: Statuses\n\t@dependency private timeline!: Timeline\n\n\tprivate danceHistory: Dance[] = []\n\tprivate missedDances = 0\n\tprivate dirtyDances = 0\n\tprivate footlooseDances = 0\n\n\tprivate previousUseTimestamp = {\n\t\t[this.data.actions.STANDARD_STEP.id]: this.parser.pull.timestamp,\n\t\t[this.data.actions.TECHNICAL_STEP.id]: this.parser.pull.timestamp,\n\t}\n\tprivate totalDrift = {\n\t\t[this.data.actions.STANDARD_STEP.id]: 0,\n\t\t[this.data.actions.TECHNICAL_STEP.id]: 0,\n\t}\n\tprivate danceMoveIds = DANCE_MOVES.map(key => this.data.actions[key].id)\n\n\toverride initialise() {\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\t\tthis.addEventHook(playerFilter.type('action').action(this.data.matchActionId(STEPS)), this.beginDance)\n\t\tthis.addEventHook(playerFilter.type('action').action(this.data.matchActionId(DANCE_MOVES)), this.continueDance)\n\t\tthis.addEventHook(playerFilter.type('action').action(this.data.matchActionId(FINISHES)), this.finishDance)\n\t\tthis.addEventHook(playerFilter.type('damage').cause(this.data.matchCauseAction(FINISHES)), this.resolveDance)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate addDanceToHistory(event: Events['action']): Dance {\n\t\tconst newDance = new Dance(event, this.data)\n\t\tnewDance.rotation.push(event)\n\t\tthis.danceHistory.push(newDance)\n\t\tconst stepId = event.action\n\t\tif (this.previousUseTimestamp[stepId]) {\n\t\t\tconst lastUse = this.previousUseTimestamp[stepId]\n\t\t\tconst downtime = this.downtime.getDowntime(lastUse, event.timestamp)\n\t\t\tconst drift = Math.max(0, event.timestamp - lastUse - (this.data.getAction(stepId)?.cooldown ?? 0) - downtime)\n\t\t\tthis.totalDrift[stepId] += drift\n\t\t\tthis.previousUseTimestamp[stepId] = event.timestamp\n\t\t}\n\n\t\treturn newDance\n\t}\n\n\tprivate beginDance(event: Events['action']) {\n\t\tthis.addDanceToHistory(event)\n\t}\n\n\tprivate get lastDance(): Dance | undefined {\n\t\treturn _.last(this.danceHistory)\n\t}\n\n\tprivate continueDance(event: Events['action']) {\n\t\tconst dance = this.lastDance\n\t\tif (dance && dance.dancing) {\n\t\t\tdance.rotation.push(event)\n\t\t}\n\t}\n\n\tprivate finishDance(event: Events['action']) {\n\t\tlet dance = this.lastDance\n\t\tif (dance && dance.dancing) {\n\t\t\tdance.rotation.push(event)\n\t\t} else {\n\t\t\tdance = this.addDanceToHistory(event)\n\t\t}\n\t\tdance.dancing = false\n\t}\n\n\tprivate resolveDance(event: Events['damage']) {\n\t\tconst dance = this.lastDance\n\n\t\tif (!dance || dance.resolved) {\n\t\t\treturn\n\t\t}\n\n\t\tconst finisher = dance.rotation[dance.rotation.length-1]\n\t\tdance.end = finisher.timestamp\n\n\t\t// Count dance as dirty if we didn't get the expected finisher, and the fight wouldn't have ended or been in an invuln window before we could have\n\t\tif (finisher.action !== dance.expectedFinishId && dance.expectedEndTime <= this.parser.pull.timestamp + this.parser.pull.duration) {\n\t\t\tthis.addTimestampHook(dance.expectedEndTime, ({timestamp}) => {\n\t\t\t\tdance.dirty = !this.invulnerability.isActive({\n\t\t\t\t\ttimestamp,\n\t\t\t\t\ttypes: ['invulnerable'],\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\n\t\t// If the finisher didn't hit anything, and something could've been, ding it.\n\t\t// Don't gripe if the boss is invuln, there is use-case for finishing during the downtime\n\t\tif (\n\t\t\t!isSuccessfulHit(event)\n\t\t\t&& !this.invulnerability.isActive({\n\t\t\t\ttimestamp: finisher.timestamp,\n\t\t\t\ttypes: ['invulnerable'],\n\t\t\t})\n\t\t) {\n\t\t\tdance.missed = true\n\t\t}\n\t\t// Dancer messed up if more step actions were recorded than we expected\n\t\tconst actualCount = dance.rotation.filter(step => this.danceMoveIds.includes(step.action)).length\n\t\t// Only ding if the step count is greater than expected, we're not going to catch the steps in the opener dance\n\t\tif (actualCount > dance.expectedDanceMoves) {\n\t\t\tdance.footloose = true\n\t\t}\n\n\t\tdance.resolved = true\n\t}\n\n\tprivate getStatusUptimePercent(statusKey: StatusKey): number {\n\t\t// Exclude downtime from both the status time and expected uptime\n\t\tconst statusTime = Math.max(this.statuses.getUptime(statusKey, this.actors.friends) - this.downtime.getDowntime(), 0)\n\t\tconst uptime = Math.max(this.parser.currentDuration - this.downtime.getDowntime(), 0)\n\n\t\treturn (statusTime / uptime) * 100\n\t}\n\n\tprivate onComplete() {\n\t\tconst zeroStandards = this.danceHistory.filter(dance => dance.dirty && dance.initiatingStep.action === this.data.actions.STANDARD_STEP.id &&\n\t\t\t_.last(dance.rotation)?.action === this.data.actions.STANDARD_FINISH.id).length\n\t\tconst zeroTechnicals = this.danceHistory.filter(dance => dance.dirty && dance.initiatingStep.action === this.data.actions.TECHNICAL_STEP.id &&\n\t\t\t_.last(dance.rotation)?.action === this.data.actions.TECHNICAL_FINISH.id).length\n\t\tthis.missedDances = this.danceHistory.filter(dance => dance.missed).length\n\t\tthis.dirtyDances = Math.max(this.danceHistory.filter(dance => dance.dirty).length - (zeroStandards + zeroTechnicals), 0)\n\t\tthis.footlooseDances = this.danceHistory.filter(dance => dance.footloose).length\n\n\t\t// Suggest to move closer for finishers.\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.TECHNICAL_FINISH.icon,\n\t\t\tcontent: <Trans id=\"dnc.dirty-dancing.suggestions.missed-finishers.content\">\n\t\t\t\t<ActionLink {...this.data.actions.TECHNICAL_FINISH} /> and <ActionLink {...this.data.actions.STANDARD_FINISH} /> are a significant source of damage. Make sure you're in range when finishing a dance.\n\t\t\t</Trans>,\n\t\t\ttiers: DEFAULT_SEVERITY_TIERS,\n\t\t\tvalue: this.missedDances,\n\t\t\twhy: <Trans id=\"dnc.dirty-dancing.suggestions.missed-finishers.why\">\n\t\t\t\t<Plural value={this.missedDances} one=\"# finish\" other=\"# finishes\"/> missed.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\t// Suggestion to get all expected finishers\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.STANDARD_FINISH.icon,\n\t\t\tcontent: <Trans id=\"dnc.dirty-dancing.suggestions.dirty-dances.content\">\n\t\t\t\tPerforming fewer steps than expected reduces the damage of your finishes. Make sure you perform the expected number of steps.\n\t\t\t</Trans>,\n\t\t\ttiers: DEFAULT_SEVERITY_TIERS,\n\t\t\tvalue: this.dirtyDances,\n\t\t\twhy: <Trans id=\"dnc.dirty-dancing.suggestions.dirty-dances.why\">\n\t\t\t\t<Plural value={this.dirtyDances} one=\"# dance\" other=\"# dances\"/> finished with missing steps.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\t// Suggestion to not faff about with steps\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.EMBOITE.icon,\n\t\t\tcontent: <Trans id=\"dnc.dirty-dancing.suggestions.footloose.content\">\n\t\t\t\tPerforming the wrong steps makes your dance take longer and leads to a loss of DPS uptime. Make sure to perform your dances correctly.\n\t\t\t</Trans>,\n\t\t\ttiers: DEFAULT_SEVERITY_TIERS,\n\t\t\tvalue: this.footlooseDances,\n\t\t\twhy: <Trans id=\"dnc.dirty-dancing.suggestions.footloose.why\">\n\t\t\t\t<Plural value={this.footlooseDances} one=\"# dance\" other=\"# dances\"/> finished with extra steps.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\tconst standardFinishUptimePct = this.getStatusUptimePercent('STANDARD_FINISH')\n\t\tthis.checklist.add(new Rule({\n\t\t\tname: <Trans id=\"dnc.dirty-dancing.checklist.standard-finish-buff.name\">Keep your <StatusLink {...this.data.statuses.STANDARD_FINISH} /> buff up</Trans>,\n\t\t\tdescription: <Trans id=\"dnc.dirty-dancing.checklist.standard-finish-buff.description\">\n\t\t\t\tYour <StatusLink {...this.data.statuses.STANDARD_FINISH} /> buff contributes significantly to your overall damage, and the damage of your <StatusLink {...this.data.statuses.DANCE_PARTNER} /> as well. Make sure to keep it up at all times.\n\t\t\t</Trans>,\n\t\t\ttarget: 95,\n\t\t\trequirements: [\n\t\t\t\tnew Requirement({\n\t\t\t\t\tname: <Trans id=\"dnc.dirty-dancing.checklist.standard-finish-buff.uptime\"><StatusLink {...this.data.statuses.STANDARD_FINISH} /> uptime</Trans>,\n\t\t\t\t\tpercent: standardFinishUptimePct,\n\t\t\t\t}),\n\t\t\t],\n\t\t}))\n\n\t\tconst closedPositionUptimePct = this.getStatusUptimePercent('CLOSED_POSITION')\n\t\tthis.checklist.add(new Rule({\n\t\t\tname: <Trans id=\"dnc.dirty-dancing.checklist.closed-position-buff.name\">Choose a <StatusLink {...this.data.statuses.DANCE_PARTNER} /></Trans>,\n\t\t\tdescription: <Trans id=\"dnc.dirty-dancing.checklist.closed-position-buff.description\">\n\t\t\t\tChoosing a <StatusLink {...this.data.statuses.DANCE_PARTNER} /> will also give them the <StatusLink {...this.data.statuses.STANDARD_FINISH_PARTNER} /> and <StatusLink {...this.data.statuses.DEVILMENT} /> buffs. Make sure to keep it up at all times except for rare circumstances where a switch is warranted.\n\t\t\t</Trans>,\n\t\t\ttarget: 95,\n\t\t\trequirements: [\n\t\t\t\tnew Requirement({\n\t\t\t\t\tname: <Trans id=\"dnc.dirty-dancing.checklist.closed-position-buff.uptime\"><StatusLink {...this.data.statuses.CLOSED_POSITION} /> uptime (excluding downtime)</Trans>,\n\t\t\t\t\tpercent: closedPositionUptimePct,\n\t\t\t\t}),\n\t\t\t],\n\t\t}))\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.STANDARD_STEP.icon,\n\t\t\tcontent: <Trans id=\"dnc.dirty-dancing.suggestions.zero-standard.content\">\n\t\t\t\tUsing <ActionLink {...this.data.actions.STANDARD_FINISH} /> without completing any steps provides no damage buff to you and your <StatusLink {...this.data.statuses.DANCE_PARTNER} />, which is a core part of the job. Make sure to perform your dances correctly.\n\t\t\t</Trans>,\n\t\t\ttiers: {\n\t\t\t\t1: SEVERITY.MEDIUM,\n\t\t\t\t2: SEVERITY.MAJOR,\n\t\t\t},\n\t\t\tvalue: zeroStandards,\n\t\t\twhy: <Trans id=\"dnc.dirty-dancing.suggestions.zero-standard.why\">\n\t\t\t\t<Plural value={zeroStandards} one=\"# Standard Step was\" other=\"# Standard Steps were\"/> completed with no dance steps.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\tif (zeroTechnicals > 0) {\n\t\t\tthis.suggestions.add(new Suggestion({\n\t\t\t\ticon: this.data.actions.TECHNICAL_STEP.icon,\n\t\t\t\tcontent: <Trans id=\"dnc.dirty-dancing.suggestions.zero-technical.content\">\n\t\t\t\t\tUsing <ActionLink {...this.data.actions.TECHNICAL_FINISH} /> without completing any steps provides no damage buff to you and your party, which is a core part of the job. Make sure to perform your dances correctly.\n\t\t\t\t</Trans>,\n\t\t\t\tseverity: SEVERITY.MAJOR,\n\t\t\t\twhy: <Trans id=\"dnc.dirty-dancing.suggestions.zero-technical.why\">\n\t\t\t\t\t<Plural value={zeroTechnicals} one=\"# Technical Step was\" other=\"# Technical Steps were\"/> completed with no dance steps.\n\t\t\t\t</Trans>,\n\t\t\t}))\n\t\t}\n\t}\n\n\toverride output() {\n\t\tif (this.danceHistory.some(dance => dance.error)) {\n\t\t\treturn <Fragment>\n\t\t\t\t<Message>\n\t\t\t\t\t<Trans id=\"dnc.dirty-dancing.rotation-table.message\">\n\t\t\t\t\t\tOne of Dancer's primary responsibilities is buffing the party's damage via dances.<br />\n\t\t\t\t\t\tEach dance also contributes to the Dancer's own damage and should be performed correctly.\n\t\t\t\t\t</Trans>\n\t\t\t\t</Message>\n\t\t\t\t<RotationTable\n\t\t\t\t\tnotes={[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\theader: <Trans id=\"dnc.dirty-dancing.rotation-table.header.missed\">Hit Target</Trans>,\n\t\t\t\t\t\t\taccessor: 'missed',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\theader: <Trans id=\"dnc.dirty-dancing.rotation-table.header.dirty\">Correct Finish</Trans>,\n\t\t\t\t\t\t\taccessor: 'dirty',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\theader: <Trans id=\"dnc.dirty-dancing.rotation-table.header.footloose\">No Extra Moves</Trans>,\n\t\t\t\t\t\t\taccessor: 'footloose',\n\t\t\t\t\t\t},\n\t\t\t\t\t]}\n\t\t\t\t\tdata={this.danceHistory.filter(dance => dance.error).map(dance => {\n\t\t\t\t\t\treturn ({\n\t\t\t\t\t\t\tstart: dance.start - this.parser.pull.timestamp,\n\t\t\t\t\t\t\tend: dance.end != null ?\n\t\t\t\t\t\t\t\tdance.end - this.parser.pull.timestamp :\n\t\t\t\t\t\t\t\tdance.start - this.parser.pull.timestamp,\n\t\t\t\t\t\t\tnotesMap: {\n\t\t\t\t\t\t\t\tmissed: <>{this.getNotesIcon(dance.missed)}</>,\n\t\t\t\t\t\t\t\tdirty: <>{this.getNotesIcon(dance.dirty)}</>,\n\t\t\t\t\t\t\t\tfootloose: <>{this.getNotesIcon(dance.footloose)}</>,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\trotation: dance.rotation,\n\t\t\t\t\t\t})\n\t\t\t\t\t})}\n\t\t\t\t\tonGoto={this.timeline.show}\n\t\t\t\t/>\n\t\t\t</Fragment>\n\t\t}\n\t}\n\n\tprivate getNotesIcon(ruleFailed: boolean): TODO {\n\t\treturn <Icon\n\t\t\tname={ruleFailed ? 'remove' : 'checkmark'}\n\t\t\tclassName={ruleFailed ? 'text-error' : 'text-success'}\n\t\t/>\n\t}\n}\n","export default {\n\tDIRTY_DANCING: 1,\n\tTECHNICALITIES: 2,\n\tWEAVING: 3,\n}\n","import {Plural, Trans} from '@lingui/react'\nimport Color from 'color'\nimport {DataLink} from 'components/ui/DbLink'\nimport {ActionKey} from 'data/ACTIONS'\nimport {JOBS, JobKey} from 'data/JOBS'\nimport {StatusKey} from 'data/STATUSES'\nimport {Event, Events} from 'event'\nimport {EventHook} from 'parser/core/Dispatcher'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport {CounterGauge, Gauge as CoreGauge} from 'parser/core/modules/Gauge'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\n// More lenient than usual due to the probable unreliability of the data.\nconst GAUGE_SEVERITY_TIERS = {\n\t1: SEVERITY.MINOR,\n\t5: SEVERITY.MEDIUM,\n\t10: SEVERITY.MAJOR,\n}\n\n/** Feather configuration */\nconst FEATHER_GENERATORS: ActionKey[] = [\n\t'REVERSE_CASCADE',\n\t'FOUNTAINFALL',\n\t'RISING_WINDMILL',\n\t'BLOODSHOWER',\n]\nconst FEATHER_CONSUMERS: ActionKey[] = [\n\t'FAN_DANCE',\n\t'FAN_DANCE_II',\n]\nconst FEATHER_GENERATION_CHANCE = .5\nconst MAX_FEATHERS = 4\n\n/** Esprit configuration */\nconst ESPRIT_STATUSES: StatusKey[] = [\n\t'ESPRIT',\n\t'ESPRIT_TECHNICAL',\n]\n\n// These are generally the on-GCD 'Abilities' such as NIN's Ninjutsu and SAM's Tsubame Iaijutsu\nconst ESPRIT_EXCEPTIONS_PARTY: ActionKey[] = [\n\t'FUMA_SHURIKEN',\n\t'FUMA_SHURIKEN_TCJ_TEN',\n\t'FUMA_SHURIKEN_TCJ_CHI',\n\t'FUMA_SHURIKEN_TCJ_JIN',\n\t'KATON',\n\t'KATON_TCJ',\n\t'RAITON_TCJ',\n\t'HYOTON_TCJ',\n\t'GOKA_MEKKYAKU',\n\t'HYOSHO_RANRYU',\n\t'SUITON',\n\t'SUITON_TCJ',\n\t'KAESHI_GOKEN',\n\t'KAESHI_HIGANBANA',\n\t'KAESHI_SETSUGEKKA',\n\t'KAESHI_NAMIKIRI',\n]\n\nconst ESPRIT_GENERATION_AMOUNT_PARTY = 10\nconst ESPRIT_RATE_PARTY_DEFAULT = 0.2\n\n/* eslint-disable @typescript-eslint/no-magic-numbers */\nconst ESPRIT_RATE_PARTY_TESTED = new Map<JobKey, number>([\n\t['MONK', 0.17],\n\t['DRAGOON', 0.18],\n\t['NINJA', 0.16],\n\t['SAMURAI', 0.19],\n\t['BLACK_MAGE', 0.25],\n\t['RED_MAGE', 0.21],\n])\n/* eslint-enable @typescript-eslint/no-magic-numbers */\n\nconst ESPRIT_GENERATION_AMOUNT_COMBO = 5\nconst ESPRIT_GENERATION_AMOUNT_PROC = 10\n\nconst SABER_DANCE_COST = 50\n\n/** Graph colors */\nconst FADE_AMOUNT = 0.25\nconst ESRPIT_COLOR = Color(JOBS.DANCER.colour).fade(FADE_AMOUNT)\nconst FEATHERS_COLOR = Color('#8DA147').fade(FADE_AMOUNT)\n\nexport class Gauge extends CoreGauge {\n\t@dependency private actors!: Actors\n\t@dependency private suggestions!: Suggestions\n\n\tprivate featherGauge = this.add(new CounterGauge({\n\t\tmaximum: MAX_FEATHERS,\n\t\tgraph: {\n\t\t\tlabel: <Trans id=\"dnc.gauge.resource.feathers\">Feathers</Trans>,\n\t\t\tcolor: FEATHERS_COLOR,\n\t\t},\n\t\tcorrectHistory: true,\n\t\tdeterministic: false,\n\t}))\n\tprivate espritGauge = this.add(new CounterGauge({\n\t\tgraph: {\n\t\t\tlabel: <Trans id=\"dnc.gauge.resource.esprit\">Esprit</Trans>,\n\t\t\tcolor: ESRPIT_COLOR,\n\t\t},\n\t\tcorrectHistory: true,\n\t\tdeterministic: false,\n\t}))\n\n\tprivate espritBuffs: Map<string, EventHook<Events['damage']>> = new Map<string, EventHook<Events['damage']>>()\n\n\tprivate espritGenerationExceptionIds: number[] = ESPRIT_EXCEPTIONS_PARTY.map(key => this.data.actions[key].id)\n\n\tprivate espritGeneratorsSelf = new Map<number, number>([\n\t\t[this.data.actions.CASCADE.id, ESPRIT_GENERATION_AMOUNT_COMBO],\n\t\t[this.data.actions.FOUNTAIN.id, ESPRIT_GENERATION_AMOUNT_COMBO],\n\t\t[this.data.actions.WINDMILL.id, ESPRIT_GENERATION_AMOUNT_COMBO],\n\t\t[this.data.actions.BLADESHOWER.id, ESPRIT_GENERATION_AMOUNT_COMBO],\n\t\t[this.data.actions.REVERSE_CASCADE.id, ESPRIT_GENERATION_AMOUNT_PROC],\n\t\t[this.data.actions.FOUNTAINFALL.id, ESPRIT_GENERATION_AMOUNT_PROC],\n\t\t[this.data.actions.RISING_WINDMILL.id, ESPRIT_GENERATION_AMOUNT_PROC],\n\t\t[this.data.actions.BLOODSHOWER.id, ESPRIT_GENERATION_AMOUNT_PROC],\n\t])\n\n\tprotected pauseGeneration = false;\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\t\tconst statusApplyFilter = playerFilter.type('statusApply')\n\t\tconst statusRemoveFilter = playerFilter.type('statusRemove')\n\t\tconst damageFilter = playerFilter.type('damage')\n\t\tconst espritStatusMatcher = this.data.matchStatusId(ESPRIT_STATUSES)\n\n\t\tthis.addEventHook(statusApplyFilter.status(espritStatusMatcher), this.addEspritGenerationHook)\n\t\tthis.addEventHook(statusRemoveFilter.status(espritStatusMatcher), this.removeEspritGenerationHook)\n\n\t\tthis.addEventHook(damageFilter.cause(this.data.matchCauseActionId([this.data.actions.SABER_DANCE.id])), this.onConsumeEsprit)\n\n\t\tthis.addEventHook(damageFilter.cause(this.data.matchCauseAction(FEATHER_GENERATORS)), this.onCastGenerator)\n\t\tthis.addEventHook(playerFilter.type('action').action(this.data.matchActionId(FEATHER_CONSUMERS)), this.onConsumeFeather)\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\toverride onDeath(event: Events['death']) {\n\t\tsuper.onDeath(event)\n\t\tthis.pauseGeneration = true\n\t}\n\n\toverride onRaise() {\n\t\tsuper.onRaise()\n\t\tthis.pauseGeneration = false\n\t}\n\n\tpublic feathersSpentInRange(start: number, end: number): number {\n\t\tif (start > end) {\n\t\t\treturn -1\n\t\t}\n\t\treturn this.featherGauge.history.filter(event => start <= event.timestamp && event.timestamp <= end && event.reason === 'spend').length\n\t}\n\n\t/* Esprit buff application/removal hooks */\n\tprivate addEspritGenerationHook(event: Events['statusApply']) {\n\t\tconst eventActor = event.target\n\t\tif (this.espritBuffs.get(eventActor) == null) {\n\t\t\tconst eventFilter = filter<Event>()\n\t\t\t\t.type('damage')\n\t\t\t\t.source(eventActor)\n\t\t\tthis.espritBuffs.set(eventActor, this.addEventHook(eventFilter, this.onDamage))\n\t\t}\n\t}\n\n\tprivate removeEspritGenerationHook(event: Events['statusRemove']) {\n\t\tconst eventActor = event.target\n\t\tif (this.espritBuffs.has(eventActor)) {\n\t\t\tconst eventHook = this.espritBuffs.get(eventActor)\n\t\t\tif (eventHook == null) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tthis.removeEventHook(eventHook)\n\t\t\tthis.espritBuffs.delete(eventActor)\n\t\t}\n\t}\n\n\t/* Gauge Event Hooks */\n\tprivate onDamage(event: Events['damage']) {\n\t\tif (this.pauseGeneration) {\n\t\t\treturn\n\t\t}\n\n\t\tif (event.cause.type !== 'action') {\n\t\t\treturn\n\t\t}\n\n\t\tconst action = this.data.getAction(event.cause.action)\n\t\tif (action == null) { return }\n\n\t\tif (!action.onGcd) {\n\t\t\treturn\n\t\t}\n\n\t\tif (this.espritGenerationExceptionIds.includes(action.id)) {\n\t\t\treturn\n\t\t}\n\n\t\tconst eventActor = this.actors.get(event.source)\n\t\t// Determine how much Esprit is being generated. Differs if it's the player generating for themselves, or if it's another member of the party generating for the player\n\t\tconst generatedAmt = event.source === this.parser.actor.id ?\n\t\t\t// The dancer's own generation is limited to the 4 combo GCDs and the 4 proc GCDs, so get the amount from the map\n\t\t\tthis.espritGeneratorsSelf.get(action.id) ?? 0 :\n\t\t\t// The party has a ~20% chance to generate 10 Esprit for the player\n\t\t\t// For the jobs that theorycrafters have determined a more precise rate, use that instead\n\t\t\tESPRIT_GENERATION_AMOUNT_PARTY * (ESPRIT_RATE_PARTY_TESTED.get(eventActor.job) ?? ESPRIT_RATE_PARTY_DEFAULT)\n\n\t\t// If we actually generate something, add it to the gauge\n\t\tif (generatedAmt > 0) {\n\t\t\tthis.espritGauge.generate(generatedAmt)\n\t\t}\n\t}\n\n\tprivate onConsumeEsprit() {\n\t\tthis.espritGauge.spend(SABER_DANCE_COST)\n\t}\n\n\tprivate onCastGenerator() {\n\t\tthis.featherGauge.generate(FEATHER_GENERATION_CHANCE)\n\t}\n\n\tprivate onConsumeFeather() {\n\t\tthis.featherGauge.spend(1)\n\t}\n\n\t/* Parse Completion and output */\n\tprivate onComplete() {\n\t\tconst missedSaberDances = Math.floor(this.espritGauge.overCap / SABER_DANCE_COST)\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.SABER_DANCE.icon,\n\t\t\tcontent: <Trans id=\"dnc.esprit.suggestions.overcapped-esprit.content\">\n\t\t\t\tYou may have lost uses of <DataLink action=\"SABER_DANCE\" /> due to overcapping your Esprit gauge. Make sure you use it, especially if your gauge is above 80.\n\t\t\t</Trans>,\n\t\t\ttiers: GAUGE_SEVERITY_TIERS,\n\t\t\tvalue: missedSaberDances,\n\t\t\twhy: <Trans id=\"dnc.esprit.suggestions.overcapped-esprit.why\">\n\t\t\t\t<Plural value={missedSaberDances} one=\"# Saber Dance\" other=\"# Saber Dances\"/> may have been missed.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\tconst featherOvercap = Math.floor(this.featherGauge.overCap)\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.FAN_DANCE_III.icon,\n\t\t\tcontent: <Trans id=\"dnc.feather-gauge.suggestions.overcapped-feathers.content\">\n\t\t\t\tYou may have lost uses of your <DataLink action=\"FAN_DANCE\" />s due to using one of your procs while already holding four feathers. Make sure to use a feather with <DataLink showIcon={false} action=\"FAN_DANCE\" /> or <DataLink showIcon={false} action=\"FAN_DANCE_II\" /> before using a proc to prevent overcapping.\n\t\t\t</Trans>,\n\t\t\ttiers: GAUGE_SEVERITY_TIERS,\n\t\t\tvalue: featherOvercap,\n\t\t\twhy: <Trans id=\"dnc.feather-gauge.suggestions.overcapped-feathers.why\">\n\t\t\t\t<Plural value={featherOvercap} one=\"# feather\" other=\"# feathers\"/> may have been lost.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n}\n","import {CooldownDowntime} from 'parser/core/modules/CooldownDowntime'\n\n/**\n * The default allowance for dances is too lenient since in practice\n * they're just GCDs and drifting them is heavily discouraged.\n * 250 ms should be enough to forgive light clipping.\n */\nconst ALLOWED_DANCE_DOWNTIME = 250\n\nexport default class OGCDDowntime extends CooldownDowntime {\n\ttrackedCds = [\n\t\t{\n\t\t\tcooldowns: [this.data.actions.TECHNICAL_STEP],\n\t\t\tallowedAverageDowntime: ALLOWED_DANCE_DOWNTIME,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.STANDARD_STEP],\n\t\t\tfirstUseOffset: -15000,\n\t\t\tallowedAverageDowntime: ALLOWED_DANCE_DOWNTIME,\n\t\t},\n\t\t{cooldowns: [this.data.actions.DEVILMENT]},\n\t\t{cooldowns: [this.data.actions.FLOURISH]},\n\t]\n}\n","import {Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Procs as CoreProcs} from 'parser/core/modules/Procs'\nimport React from 'react'\n\nexport class Procs extends CoreProcs {\n\toverride trackedProcs = [\n\t\t{\n\t\t\tprocStatus: this.data.statuses.THREEFOLD_FAN_DANCE,\n\t\t\tconsumeActions: [this.data.actions.FAN_DANCE_III],\n\t\t},\n\t\t{\n\t\t\tprocStatus: this.data.statuses.FOURFOLD_FAN_DANCE,\n\t\t\tconsumeActions: [this.data.actions.FAN_DANCE_IV],\n\t\t},\n\t\t{\n\t\t\tprocStatus: this.data.statuses.SILKEN_SYMMETRY,\n\t\t\tconsumeActions: [this.data.actions.REVERSE_CASCADE, this.data.actions.RISING_WINDMILL],\n\t\t},\n\t\t{\n\t\t\tprocStatus: this.data.statuses.SILKEN_FLOW,\n\t\t\tconsumeActions: [this.data.actions.FOUNTAINFALL, this.data.actions.BLOODSHOWER],\n\t\t},\n\t\t// We don't need to patch-specify this status construction since these just won't be present in pre-6.1 logs\n\t\t{\n\t\t\tprocStatus: this.data.statuses.FLOURISHING_SYMMETRY,\n\t\t\tconsumeActions: [this.data.actions.REVERSE_CASCADE, this.data.actions.RISING_WINDMILL],\n\t\t},\n\t\t{\n\t\t\tprocStatus: this.data.statuses.FLOURISHING_FLOW,\n\t\t\tconsumeActions: [this.data.actions.FOUNTAINFALL, this.data.actions.BLOODSHOWER],\n\t\t},\n\t\t{\n\t\t\tprocStatus: this.data.statuses.FLOURISHING_STARFALL,\n\t\t\tconsumeActions: [this.data.actions.STARFALL_DANCE],\n\t\t},\n\t\t{\n\t\t\tprocStatus: this.data.statuses.FLOURISHING_FINISH,\n\t\t\tconsumeActions: [this.data.actions.TILLANA],\n\t\t},\n\t]\n\n\toverride showDroppedProcSuggestion = true\n\toverride droppedProcIcon = this.data.actions.FOUNTAINFALL.icon\n\toverride droppedProcContent =\n\t\t<Trans id=\"dnc.procs.suggestions.drops.content\">\n\t\t\tAvoid dropping your procs unless absolutely necessary. If you have to drop one to keep your Esprit from overcapping, <DataLink status=\"SILKEN_SYMMETRY\"/> or <DataLink status=\"FLOURISHING_SYMMETRY\"/> will lose the least DPS overall.\n\t\t</Trans>\n\n\toverride showOverwroteProcSuggestion = true\n\toverride overwroteProcIcon = this.data.actions.REVERSE_CASCADE.icon\n\toverride overwroteProcContent =\n\t\t<Trans id=\"dnc.procs.suggestions.overwrite.content\">\n\t\t\tAvoid overwriting your procs. Your proc actions are stronger than your normal combo, so overwriting them is a significant DPS loss.\n\t\t</Trans>\n}\n","import {t} from '@lingui/macro'\nimport {Plural, Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {RotationTable} from 'components/ui/RotationTable'\nimport {StatusKey} from 'data/STATUSES'\nimport {Event, Events} from 'event'\nimport _ from 'lodash'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport {Data} from 'parser/core/modules/Data'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport {Timeline} from 'parser/core/modules/Timeline'\nimport React, {Fragment} from 'react'\nimport {Icon, Message} from 'semantic-ui-react'\nimport {TECHNICAL_FINISHES} from '../CommonData'\nimport DISPLAY_ORDER from '../DISPLAY_ORDER'\nimport {Gauge} from './Gauge'\n\n// Harsher than the default since you'll only have 4-5 total windows anyways\nconst TECHNICAL_SEVERITY_TIERS = {\n\t1: SEVERITY.MINOR,\n\t2: SEVERITY.MEDIUM,\n\t3: SEVERITY.MAJOR,\n}\n\nconst WINDOW_STATUSES: StatusKey[] = [\n\t'DEVILMENT',\n\t'TECHNICAL_FINISH',\n]\n\nconst FEATHER_THRESHHOLD = 3\nconst POST_WINDOW_GRACE_PERIOD_MILLIS = 500\n\nclass TechnicalWindow {\n\tstart: number\n\tend?: number\n\n\trotation: Array<Events['action']> = []\n\tgcdCount: number = 0\n\ttrailingGcdEvent?: Events['action']\n\n\tusedDevilment: boolean = false\n\thasDevilment: boolean = false\n\ttimelyDevilment: boolean = false\n\tpoolingProblem: boolean = false\n\n\tbuffsRemoved: number[] = []\n\tplayersBuffed: string[] = []\n\tcontainsOtherDNC: boolean = false\n\n\tconstructor(start: number) {\n\t\tthis.start = start\n\t}\n}\n\nexport class Technicalities extends Analyser {\n\tstatic override handle = 'technicalities'\n\tstatic override title = t('dnc.technicalities.title')`Technical Windows`\n\tstatic override displayOrder = DISPLAY_ORDER.TECHNICALITIES\n\n\t@dependency private actors!: Actors\n\t@dependency private suggestions!: Suggestions\n\t@dependency private timeline!: Timeline\n\t@dependency private gauge!: Gauge\n\t@dependency private data!: Data\n\n\tprivate history: TechnicalWindow[] = []\n\tprivate badDevilments: number = 0\n\n\tprivate technicalFinishIds = TECHNICAL_FINISHES.map(key => this.data.actions[key].id)\n\n\toverride initialise() {\n\t\tconst techFinishFilter = filter<Event>().type('statusApply').status(this.data.statuses.TECHNICAL_FINISH.id)\n\n\t\t// Ignore any actors besides players\n\t\tconst playerCharacters = this.parser.pull.actors\n\t\t\t.filter(actor => actor.playerControlled)\n\t\t\t.map(actor => actor.id)\n\n\t\tthis.addEventHook(\n\t\t\ttechFinishFilter\n\t\t\t\t.target(this.parser.actor.id),\n\t\t\tthis.tryOpenWindow)\n\n\t\tthis.addEventHook(\n\t\t\ttechFinishFilter\n\t\t\t\t.source(this.parser.actor.id)\n\t\t\t\t.target(oneOf(playerCharacters)),\n\t\t\tthis.countTechBuffs)\n\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.type('statusRemove')\n\t\t\t\t.target(this.parser.actor.id)\n\t\t\t\t.status(oneOf(WINDOW_STATUSES.map(key => this.data.statuses[key].id))),\n\t\t\tthis.tryCloseWindow,\n\t\t)\n\t\tthis.addEventHook(filter<Event>().type('action').source(this.parser.actor.id), this.onCast)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate countTechBuffs(event: Events['statusApply']) {\n\t\t// Get this from tryOpenWindow. If a window wasn't open, we'll open one.\n\t\t// If it was already open (because another Dancer went first), we'll keep using it\n\t\tconst lastWindow: TechnicalWindow = this.tryOpenWindow(event)\n\n\t\t// Find out how many players we hit with the buff.\n\t\tif (!lastWindow.playersBuffed.includes(event.target) && this.actors.get(event.target).playerControlled) {\n\t\t\tlastWindow.playersBuffed.push(event.target)\n\t\t}\n\t}\n\n\tprivate tryOpenWindow(event: Events['statusApply']): TechnicalWindow {\n\t\tconst lastWindow: TechnicalWindow | undefined = _.last(this.history)\n\n\t\t// Handle multiple dancer's buffs overwriting each other, we'll have a remove then an apply with the same timestamp\n\t\t// If that happens, re-open the last window and keep tracking\n\t\tif (lastWindow != null) {\n\t\t\tif (event.source !== this.parser.actor.id) {\n\t\t\t\tlastWindow.containsOtherDNC = true\n\t\t\t}\n\t\t\tif (!lastWindow.end) {\n\t\t\t\treturn lastWindow\n\t\t\t}\n\t\t\tif (lastWindow.end === event.timestamp) {\n\t\t\t\tlastWindow.end = undefined\n\t\t\t\treturn lastWindow\n\t\t\t}\n\t\t}\n\n\t\tconst newWindow = new TechnicalWindow(event.timestamp)\n\t\tthis.history.push(newWindow)\n\t\treturn newWindow\n\t}\n\n\tprivate tryCloseWindow(event: Events['statusRemove']) {\n\t\tconst lastWindow: TechnicalWindow | undefined = _.last(this.history)\n\n\t\tif (lastWindow == null) {\n\t\t\treturn\n\t\t}\n\n\t\t// Cache whether we've seen a buff removal event for this status, just in case they happen at exactly the same timestamp\n\t\tlastWindow.buffsRemoved.push(event.status)\n\n\t\tif (this.isWindowOkToClose(lastWindow)) {\n\t\t\tlastWindow.end = event.timestamp\n\n\t\t\t// Check to see if this window could've had more feathers due to possible pooling problems\n\t\t\tif (this.gauge.feathersSpentInRange(lastWindow.start, lastWindow.end) < FEATHER_THRESHHOLD) {\n\t\t\t\tconst previousWindow = this.history[this.history.length-2]\n\t\t\t\tconst feathersBeforeWindow = this.gauge.feathersSpentInRange((previousWindow && previousWindow.end || this.parser.pull.timestamp)\n\t\t\t\t\t+ POST_WINDOW_GRACE_PERIOD_MILLIS, lastWindow.start)\n\t\t\t\tlastWindow.poolingProblem = feathersBeforeWindow > 0\n\t\t\t} else {\n\t\t\t\tlastWindow.poolingProblem = false\n\t\t\t}\n\t\t}\n\t}\n\n\t// Make sure all applicable statuses have fallen off before the window closes\n\tprivate isWindowOkToClose(window: TechnicalWindow): boolean {\n\t\tif (window.hasDevilment && !window.buffsRemoved.includes(this.data.statuses.DEVILMENT.id)) {\n\t\t\treturn false\n\t\t}\n\t\tif (!window.buffsRemoved.includes(this.data.statuses.TECHNICAL_FINISH.id)) {\n\t\t\treturn false\n\t\t}\n\t\treturn true\n\t}\n\n\tprivate onCast(event: Events['action']) {\n\t\tconst lastWindow: TechnicalWindow | undefined = _.last(this.history)\n\n\t\tif (event.action === this.data.actions.DEVILMENT.id) {\n\t\t\tthis.handleDevilment(lastWindow)\n\t\t}\n\n\t\t// If we don't have a window, bail\n\t\tif (lastWindow == null) {\n\t\t\treturn\n\t\t}\n\n\t\tconst action = this.data.getAction(event.action)\n\n\t\t// Can't do anything else if we didn't get a valid action object\n\t\tif (action == null) {\n\t\t\treturn\n\t\t}\n\n\t\t// If this window isn't done yet add the action to the list\n\t\tif (!lastWindow.end) {\n\t\t\tlastWindow.rotation.push(event)\n\t\t\t// Check whether this window has a devilment status from before the window began\n\t\t\tif (!lastWindow.hasDevilment && this.actors.current.hasStatus(this.data.statuses.DEVILMENT.id)) {\n\t\t\t\tlastWindow.hasDevilment = true\n\t\t\t}\n\t\t\tif (action.onGcd) {\n\t\t\t\tlastWindow.gcdCount++\n\t\t\t}\n\t\t\tif (this.technicalFinishIds.includes(event.action) || lastWindow.playersBuffed.length < 1) {\n\t\t\t\tlastWindow.containsOtherDNC = true\n\t\t\t}\n\t\t\treturn\n\t\t}\n\n\t\t// If we haven't recorded a trailing GCD event for this closed window, do so now\n\t\tif (lastWindow.end && !lastWindow.trailingGcdEvent && action.onGcd) {\n\t\t\tlastWindow.trailingGcdEvent = event\n\t\t}\n\t}\n\n\t/** Check to see if Devilment was used at the proper time. In Endwalker, it should immediately follow Technical Finish */\n\tprivate handleDevilment(lastWindow: TechnicalWindow | undefined) {\n\t\tif (!this.actors.current.hasStatus(this.data.statuses.TECHNICAL_FINISH.id)) {\n\t\t\tthis.badDevilments++\n\t\t}\n\n\t\t// If we don't have a window for some reason, bail\n\t\tif (lastWindow == null || lastWindow.end) {\n\t\t\treturn\n\t\t}\n\n\t\tlastWindow.usedDevilment = true\n\n\t\tif (lastWindow.gcdCount === 0) {\n\t\t\tlastWindow.timelyDevilment = true\n\t\t}\n\t}\n\n\tprivate onComplete() {\n\t\t// Suggestion to use Devilment under Technical\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.DEVILMENT.icon,\n\t\t\tcontent: <Trans id=\"dnc.technicalities.suggestions.bad-devilments.content\">\n\t\t\t\tUsing <DataLink action=\"DEVILMENT\" /> outside of your <DataLink status=\"TECHNICAL_FINISH\" /> windows leads to an avoidable loss in DPS. Aside from certain opener situations, you should be using <DataLink action=\"DEVILMENT\" /> at the beginning of your <DataLink status=\"TECHNICAL_FINISH\" /> windows.\n\t\t\t</Trans>,\n\t\t\ttiers: TECHNICAL_SEVERITY_TIERS,\n\t\t\tvalue: this.badDevilments,\n\t\t\twhy: <Trans id=\"dnc.technicalities.suggestions.bad-devilments.why\">\n\t\t\t\t<Plural value={this.badDevilments} one=\"# Devilment\" other=\"# Devilments\"/> used outside <DataLink status=\"TECHNICAL_FINISH\" />.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\t// Suggestion to use Devilment ASAP in Technical\n\t\tconst lateDevilments = this.history.filter(window => window.usedDevilment && !window.timelyDevilment).length\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.DEVILMENT.icon,\n\t\t\tcontent: <Trans id=\"dnc.technicalities.suggestions.late-devilments.content\">\n\t\t\t\tUsing <DataLink action=\"DEVILMENT\" /> as early as possible during your <DataLink status=\"TECHNICAL_FINISH\" /> windows allows you to maximize the multiplicative bonuses that both statuses give you. It should be used immediately after <DataLink action=\"TECHNICAL_FINISH\" />.\n\t\t\t</Trans>,\n\t\t\ttiers: TECHNICAL_SEVERITY_TIERS,\n\t\t\tvalue: lateDevilments,\n\t\t\twhy: <Trans id=\"dnc.technicalities.suggestions.late-devilments.why\">\n\t\t\t\t<Plural value={lateDevilments} one=\"# Devilment was\" other=\"# Devilments were\"/> used later than optimal.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\t// Suggestion to pool feathers for Technical Windows\n\t\tconst unpooledWindows = this.history.filter(window => window.poolingProblem).length\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.FAN_DANCE.icon,\n\t\t\tcontent: <Trans id=\"dnc.technicalities.suggestions.unpooled.content\">\n\t\t\t\tPooling your Feathers before going into a <DataLink status=\"TECHNICAL_FINISH\" /> window allows you to use more <DataLink action=\"FAN_DANCE\" />s with the multiplicative bonuses active, increasing their effectiveness. Try to build and hold on to at least three feathers between windows.\n\t\t\t</Trans>,\n\t\t\ttiers: TECHNICAL_SEVERITY_TIERS,\n\t\t\tvalue: unpooledWindows,\n\t\t\twhy: <Trans id=\"dnc.technicalities.suggestions.unpooled.why\">\n\t\t\t\t<Plural value={unpooledWindows} one=\"# window\" other=\"# windows\"/> were missing potential <DataLink action=\"FAN_DANCE\" />s.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n\n\toverride output() {\n\t\tconst otherDancers = this.history.filter(window => window.containsOtherDNC).length > 0\n\t\treturn <Fragment>\n\t\t\t{otherDancers && (\n\t\t\t\t<Message>\n\t\t\t\t\t<Trans id=\"dnc.technicalities.rotation-table.message\">\n\t\t\t\t\t\tThis log contains <DataLink showIcon={false} action=\"TECHNICAL_STEP\" /> windows that were started or extended by other Dancers.<br />\n\t\t\t\t\t\tUse your best judgement about which windows you should be dumping <DataLink showIcon={false} action=\"DEVILMENT\" />, Feathers, and Esprit under.<br />\n\t\t\t\t\t\tTry to make sure they line up with other raid buffs to maximize damage.\n\t\t\t\t\t</Trans>\n\t\t\t\t</Message>\n\t\t\t)}\n\t\t\t<RotationTable\n\t\t\t\tnotes={[\n\t\t\t\t\t{\n\t\t\t\t\t\theader: <Trans id=\"dnc.technicalities.rotation-table.header.missed\"><DataLink showName={false} action=\"DEVILMENT\" /> On Time?</Trans>,\n\t\t\t\t\t\taccessor: 'timely',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\theader: <Trans id=\"dnc.technicalities.rotation-table.header.pooled\"><DataLink showName={false} action=\"FAN_DANCE\" /> Pooled?</Trans>,\n\t\t\t\t\t\taccessor: 'pooled',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\theader: <Trans id=\"dnc.technicalities.rotation-table.header.buffed\">Players Buffed</Trans>,\n\t\t\t\t\t\taccessor: 'buffed',\n\t\t\t\t\t},\n\t\t\t\t]}\n\t\t\t\tdata={this.history.map(window => {\n\t\t\t\t\treturn ({\n\t\t\t\t\t\tstart: window.start - this.parser.pull.timestamp,\n\t\t\t\t\t\tend: window.end != null ?\n\t\t\t\t\t\t\twindow.end - this.parser.pull.timestamp :\n\t\t\t\t\t\t\twindow.start - this.parser.pull.timestamp,\n\t\t\t\t\t\tnotesMap: {\n\t\t\t\t\t\t\ttimely: <>{this.getNotesIcon(!window.timelyDevilment)}</>,\n\t\t\t\t\t\t\tpooled: <>{this.getNotesIcon(window.poolingProblem)}</>,\n\t\t\t\t\t\t\tbuffed: <>{window.playersBuffed.length > 0 ? window.playersBuffed.length : 'N/A'}</>,\n\t\t\t\t\t\t},\n\t\t\t\t\t\trotation: window.rotation,\n\t\t\t\t\t})\n\t\t\t\t})}\n\t\t\t\tonGoto={this.timeline.show}\n\t\t\t/>\n\t\t</Fragment>\n\t}\n\tprivate getNotesIcon(ruleFailed: boolean) {\n\t\treturn <Icon\n\t\t\tname={ruleFailed ? 'remove' : 'checkmark'}\n\t\t\tclassName={ruleFailed ? 'text-error' : 'text-success'}\n\t\t/>\n\t}\n}\n","import {AoEUsages} from './AoEUsages'\nimport {Combos} from './Combos'\nimport {Defensives} from './Defensives'\nimport {DirtyDancing} from './DirtyDancing'\nimport {Gauge} from './Gauge'\nimport OGCDDowntime from './OGCDDowntime'\nimport {Procs} from './Procs'\nimport {Technicalities} from './Technicalities'\n\nexport default [\n\tAoEUsages,\n\tCombos,\n\tProcs,\n\tDefensives,\n\tDirtyDancing,\n\tOGCDDowntime,\n\tTechnicalities,\n\tGauge,\n]\n"],"names":["RotationTargetOutcome","RotationTable","this","props","targets","notes","data","onGoto","headerTitle","compact","unstackable","celled","collapsing","Trans","id","target","i","textAlign","header","note","entry","Row","start","actual","expected","isDefined","POSITIVE","NEGATIVE","NEUTRAL","React","targetAccessorResolver","accessor","targetsData","notesAccessorResolver","notesMap","TargetCell","targetComparator","undefined","defaultTargetComparator","targetOutcome","positive","negative","end","rotation","style","marginRight","formatDuration","secondPrecision","circular","size","icon","onClick","targetEntry","events","noteEntry","Statuses","Data","Invulnerability","ft","timestamp","parser","formatEpochTimestamp","statusSpecifier","targetSpecifier","source","actor","status","statuses","ensureArray","edges","edgesForActor","statusHistory","get","a","b","meta","uptime","depth","application","edge","side","debug","name","apply","refresh","event","type","push","splitRangeForInvulns","statusDuration","getStatus","duration","remove","currentEpochTimestamp","Math","min","range","finalRanges","invulns","invulnerability","getWindows","actorFilter","kind","types","invuln","previousRange","Analyser","handle","dependency","AoEUsages","suggestionIcon","actions","WINDMILL","trackedActions","aoeAction","stActions","CASCADE","minTargets","RISING_WINDMILL","REVERSE_CASCADE","BLOODSHOWER","FOUNTAINFALL","CoreAoE","Combos","CoreCombos","Defensives","trackedDefensives","SHIELD_SAMBA","IMPROVISATION","CURING_WALTZ","CoreDefensives","TECHNICAL_FINISHES","FINISHES","DEFAULT_SEVERITY_TIERS","SEVERITY","STEPS","DANCE_MOVES","Dance","danceEvent","initiatingStep","dancing","resolved","dirty","missed","footloose","actualFinish","action","QUADRUPLE_TECHNICAL_FINISH","DOUBLE_STANDARD_FINISH","STANDARD_FINISH","SINGLE_STANDARD_FINISH","actionData","getAction","gcdRecast","expectedDanceMoves","JETE","cooldown","STANDARD_STEP","TECHNICAL_STEP","length","DirtyDancing","Actors","CheckList","Downtime","Suggestions","Timeline","danceHistory","missedDances","dirtyDances","footlooseDances","previousUseTimestamp","pull","totalDrift","danceMoveIds","key","playerFilter","filter","addEventHook","matchActionId","beginDance","continueDance","finishDance","cause","matchCauseAction","resolveDance","onComplete","newDance","stepId","lastUse","downtime","getDowntime","drift","max","addDanceToHistory","dance","lastDance","finisher","expectedFinishId","expectedEndTime","addTimestampHook","isActive","isSuccessfulHit","step","statusKey","getUptime","actors","friends","currentDuration","zeroStandards","zeroTechnicals","TECHNICAL_FINISH","suggestions","add","TieredSuggestion","content","tiers","value","why","EMBOITE","standardFinishUptimePct","getStatusUptimePercent","checklist","Rule","description","DANCE_PARTNER","requirements","Requirement","percent","closedPositionUptimePct","STANDARD_FINISH_PARTNER","DEVILMENT","CLOSED_POSITION","Suggestion","severity","some","error","Fragment","Message","getNotesIcon","timeline","show","ruleFailed","Icon","className","title","displayOrder","GAUGE_SEVERITY_TIERS","FEATHER_GENERATORS","FEATHER_CONSUMERS","ESPRIT_STATUSES","ESPRIT_EXCEPTIONS_PARTY","ESPRIT_RATE_PARTY_TESTED","ESPRIT_GENERATION_AMOUNT_PROC","ESRPIT_COLOR","Color","JOBS","fade","FEATHERS_COLOR","Gauge","featherGauge","CounterGauge","maximum","graph","label","color","correctHistory","deterministic","espritGauge","espritBuffs","espritGenerationExceptionIds","espritGeneratorsSelf","FOUNTAIN","BLADESHOWER","pauseGeneration","statusApplyFilter","statusRemoveFilter","damageFilter","espritStatusMatcher","matchStatusId","addEspritGenerationHook","removeEspritGenerationHook","matchCauseActionId","SABER_DANCE","onConsumeEsprit","onCastGenerator","onConsumeFeather","history","reason","eventActor","eventFilter","set","onDamage","has","eventHook","removeEventHook","delete","onGcd","generatedAmt","job","generate","spend","missedSaberDances","floor","overCap","featherOvercap","FAN_DANCE_III","showIcon","CoreGauge","ALLOWED_DANCE_DOWNTIME","OGCDDowntime","trackedCds","cooldowns","allowedAverageDowntime","firstUseOffset","FLOURISH","CooldownDowntime","Procs","trackedProcs","procStatus","THREEFOLD_FAN_DANCE","consumeActions","FOURFOLD_FAN_DANCE","FAN_DANCE_IV","SILKEN_SYMMETRY","SILKEN_FLOW","FLOURISHING_SYMMETRY","FLOURISHING_FLOW","FLOURISHING_STARFALL","STARFALL_DANCE","FLOURISHING_FINISH","TILLANA","showDroppedProcSuggestion","droppedProcIcon","droppedProcContent","showOverwroteProcSuggestion","overwroteProcIcon","overwroteProcContent","CoreProcs","TECHNICAL_SEVERITY_TIERS","WINDOW_STATUSES","TechnicalWindow","gcdCount","trailingGcdEvent","usedDevilment","hasDevilment","timelyDevilment","poolingProblem","buffsRemoved","playersBuffed","containsOtherDNC","Technicalities","badDevilments","technicalFinishIds","techFinishFilter","playerCharacters","playerControlled","tryOpenWindow","oneOf","countTechBuffs","tryCloseWindow","onCast","lastWindow","newWindow","isWindowOkToClose","gauge","feathersSpentInRange","previousWindow","feathersBeforeWindow","window","handleDevilment","current","hasStatus","lateDevilments","unpooledWindows","FAN_DANCE","otherDancers","showName","timely","pooled","buffed"],"sourceRoot":""}