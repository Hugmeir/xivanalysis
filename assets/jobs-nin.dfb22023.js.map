{"version":3,"file":"assets/jobs-nin.dfb22023.js","mappings":"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","sources":["webpack://@xivanalysis/client/./node_modules/@babel/runtime-corejs3/core-js-stable/math/trunc.js","webpack://@xivanalysis/client/./src/parser/core/modules/ActionTimeline/ActionTimeline.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/ActionTimeline/ActionTimeline.module.css?2f05","webpack://@xivanalysis/client/./src/parser/core/modules/Defensives.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/GlobalCooldown.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/Positionals.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/Weaving.tsx","webpack://@xivanalysis/client/./src/parser/jobs/nin/modules/ActionTimeline.tsx","webpack://@xivanalysis/client/./src/parser/jobs/nin/modules/Combos.ts","webpack://@xivanalysis/client/./src/parser/jobs/nin/modules/Defensives.ts","webpack://@xivanalysis/client/./src/parser/jobs/nin/modules/Huton.tsx","webpack://@xivanalysis/client/./src/parser/jobs/nin/modules/DISPLAY_ORDER.js","webpack://@xivanalysis/client/./src/parser/jobs/nin/modules/HutonCastTime.ts","webpack://@xivanalysis/client/./src/parser/jobs/nin/modules/Kassatsu.tsx","webpack://@xivanalysis/client/./src/parser/jobs/nin/modules/Ninjutsu.tsx","webpack://@xivanalysis/client/./src/parser/jobs/nin/modules/Ninki.tsx","webpack://@xivanalysis/client/./src/parser/jobs/nin/modules/OGCDDowntime.ts","webpack://@xivanalysis/client/./src/parser/jobs/nin/modules/Positionals.ts","webpack://@xivanalysis/client/./src/parser/jobs/nin/modules/Raiju.tsx","webpack://@xivanalysis/client/./src/parser/jobs/nin/modules/TrickAttackUsage.tsx","webpack://@xivanalysis/client/./src/parser/jobs/nin/modules/TrickAttackWindow.tsx","webpack://@xivanalysis/client/./src/parser/jobs/nin/modules/Weaving.ts","webpack://@xivanalysis/client/./src/parser/jobs/nin/modules/index.ts","webpack://@xivanalysis/client/./node_modules/core-js-pure/es/math/trunc.js","webpack://@xivanalysis/client/./node_modules/core-js-pure/modules/es.math.trunc.js","webpack://@xivanalysis/client/./node_modules/core-js-pure/stable/math/trunc.js"],"sourcesContent":["module.exports = require(\"core-js-pure/stable/math/trunc\");","import {Trans} from '@lingui/react'\nimport {Action, ActionKey} from 'data/ACTIONS'\nimport {Analyser} from 'parser/core/Analyser'\nimport {dependency} from 'parser/core/Injectable'\nimport CastTime from 'parser/core/modules/CastTime'\nimport {ChargeHistoryEntry, CooldownEndReason, CooldownGroup, CooldownHistoryEntry, Cooldowns, SelectionSpecifier} from 'parser/core/modules/Cooldowns'\nimport {Data} from 'parser/core/modules/Data'\nimport {ActionItem, BaseItem, ContainerRow, SimpleItem, Timeline} from 'parser/core/modules/Timeline'\nimport React, {ReactNode} from 'react'\nimport {Icon} from 'semantic-ui-react'\nimport {ensureArray, isDefined} from 'utilities'\nimport styles from './ActionTimeline.module.css'\n\nconst ANIMATION_LOCK = 100\n\n// We're excluding the Action interface as it's unessecary for this config format, and complicates the discrimination later.\ntype RowSpecifierEntry = Exclude<SelectionSpecifier, Action>\n\n/**\n * One or more actions, action keys, or cooldown group IDs. The special-case\n * value \"GCD\" is available for selection of the GCD cooldown group.\n */\nexport type RowSpecifier = RowSpecifierEntry | RowSpecifierEntry[]\n\n/** Advanced configuration options for a row. */\nexport interface ActionRowConfig {\n\t/** Specifier(s) for items that should be displayed in this row. */\n\tcontent: RowSpecifier\n\t/** Label to display for the row. */\n\tlabel?: ReactNode\n\t/** Order of the row within the timeline. */\n\torder?: number\n}\n\n/** Configuration for a single row. */\nexport type ActionRow = RowSpecifier | ActionRowConfig\n\n// Internal row config used within the module\ntype InternalRowConfig =\n\t& Omit<ActionRowConfig, 'content'>\n\t& {content: readonly SelectionSpecifier[]}\n\nenum ItemDepth {\n\tCHARGE_GAIN = 0,\n\tACTION = 1,\n}\n\nexport class ActionTimeline extends Analyser {\n\tstatic override handle = 'actionTimeline'\n\tstatic override debug = false\n\n\t/**\n\t * Configuration for the rows generated by this module. Any cooldown groups\n\t * not represented in this configuration will be added to automatically\n\t * generated rows in order of use.\n\t */\n\tstatic rows: ActionRow[] = [\n\t\t{content: 'GCD', order: -97},\n\t]\n\n\t@dependency private castTime!: CastTime\n\t@dependency private cooldowns!: Cooldowns\n\t@dependency private data!: Data\n\t@dependency private timeline!: Timeline\n\n\tprivate resolvedRows: InternalRowConfig[] = []\n\tprivate groupRows = new Map<CooldownGroup, ContainerRow>()\n\n\t/** Retrieve the timeline row representing the specified action. */\n\tgetRow(action: ActionKey | Action) {\n\t\treturn this.addRow({content: [action]})\n\t}\n\n\toverride initialise() {\n\t\t// Add rows for all the configured entries\n\t\tfor (const config of (this.constructor as typeof ActionTimeline).rows) {\n\t\t\tconst resolvedConfig = this.resolveConfig(config)\n\t\t\tthis.resolvedRows.push(resolvedConfig)\n\t\t\tthis.addRow(resolvedConfig)\n\t\t}\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onComplete() {\n\t\t// Track the groups with configured rows so backfill doesn't duplicate\n\t\tconst populatedGroups = new Set<number>()\n\n\t\t// Add rows for all the configured entries\n\t\tfor (const config of this.resolvedRows) {\n\t\t\tconst row = this.addRow(config)\n\t\t\tthis.populateRow(row, config)\n\t\t\tconfig.content.forEach(specifier =>\n\t\t\t\tthis.cooldowns.groups(specifier).forEach(group => populatedGroups.add(group))\n\t\t\t)\n\t\t}\n\n\t\t// Figure out what groups have not been explicitly configured and build rows for them\n\t\tthis.cooldowns.allGroups()\n\t\t\t.filter(group => !populatedGroups.has(group))\n\t\t\t.forEach(group => {\n\t\t\t\tconst config = {content: [group]}\n\t\t\t\tconst row = this.addRow(config)\n\t\t\t\tthis.populateRow(row, config)\n\t\t\t})\n\t}\n\n\tprivate resolveConfig(config: ActionRow): InternalRowConfig {\n\t\t// Standardise the simple config into the main config shape\n\t\tlet finalConfig = config\n\t\tif (typeof finalConfig !== 'object' || Array.isArray(finalConfig)) {\n\t\t\tfinalConfig = {content: finalConfig}\n\t\t}\n\t\treturn {\n\t\t\t...finalConfig,\n\t\t\tcontent: ensureArray(finalConfig.content),\n\t\t}\n\t}\n\n\tprivate addRow(config: InternalRowConfig) {\n\t\t// If there's already a row for one of the specifiers, use it\n\t\tconst groups = config.content.flatMap(specifier => this.cooldowns.groups(specifier))\n\t\tconst existingRow = groups\n\t\t\t.map(group => this.groupRows.get(group))\n\t\t\t.find(isDefined)\n\t\tif (existingRow != null) {\n\t\t\treturn existingRow\n\t\t}\n\n\t\t// Using an IIFE because pattern matching isn't in the spec yet\n\t\tconst firstContent = config.content[0]\n\t\tconst label = (() => {\n\t\t\tif (config.label != null) { return config.label }\n\t\t\tif (firstContent === 'GCD')  { return <Trans id=\"core.action-timeline.label.gcd\">GCD</Trans> }\n\t\t\tif (typeof firstContent === 'string') { return this.data.actions[firstContent].name }\n\t\t\tif (typeof firstContent === 'number') { return this.cooldowns.cooldownHistory(firstContent)[0]?.action.name }\n\t\t\treturn firstContent.name\n\t\t})()\n\n\t\t// Build the row and save it to the groups for this config\n\t\t// TODO: collision handling?\n\t\tconst row = this.timeline.addRow(new ContainerRow({\n\t\t\tlabel,\n\t\t\torder: config.order,\n\t\t\tcollapse: true,\n\t\t}))\n\t\tgroups.forEach(group => this.groupRows.set(group, row))\n\n\t\treturn row\n\t}\n\n\tprivate populateRow(row: ContainerRow, {content}: InternalRowConfig) {\n\t\t// Add all the items\n\t\tthis.addCooldownItems(row, content.flatMap(specifier => this.cooldowns.cooldownHistory(specifier)))\n\t\tthis.addChargeItems(row, content.flatMap(specifier => this.cooldowns.chargeHistory(specifier)))\n\t}\n\n\tprivate addCooldownItems(row: ContainerRow, history: CooldownHistoryEntry[]) {\n\t\tfor (const entry of history) {\n\t\t\tconst duration = this.getCooldownDuration(entry)\n\n\t\t\t// TODO: with the adjusted cast time we might get some overlaps, should we try to avoid that?]\n\t\t\t// TODO: Add interrupt visuals. CD2 only records interrupts within the bounds of a cooldown, so we'll need to track it in some manner for long-cast actions.\n\t\t\tconst start = entry.start - this.parser.pull.timestamp\n\t\t\tconst end = start + duration\n\t\t\trow.addItem(new SimpleItem({\n\t\t\t\tstart,\n\t\t\t\tend,\n\t\t\t\tcontent: <div className={styles.cooldown}/>,\n\t\t\t}))\n\t\t}\n\t}\n\n\tprivate addChargeItems(row: ContainerRow, history: ChargeHistoryEntry[]) {\n\t\tfor (const entry of history) {\n\t\t\tconst item = entry.delta < 0\n\t\t\t\t? new ActionItem({\n\t\t\t\t\tdepth: ItemDepth.ACTION,\n\t\t\t\t\tstart: entry.timestamp - this.parser.pull.timestamp,\n\t\t\t\t\taction: entry.action,\n\t\t\t\t})\n\t\t\t\t: new ChargeGainItem({\n\t\t\t\t\tdepth: ItemDepth.CHARGE_GAIN,\n\t\t\t\t\tstart: entry.timestamp - this.parser.pull.timestamp,\n\t\t\t\t})\n\t\t\trow.addItem(item)\n\t\t}\n\t}\n\n\tprivate getCooldownDuration(entry: CooldownHistoryEntry) {\n\t\tlet duration = entry.end - entry.start\n\n\t\t// If the cooldown expired naturally, it _may_ have a cast time greater than its cooldown.\n\t\tif (entry.endReason === CooldownEndReason.EXPIRED) {\n\t\t\tconst castTime = this.castTime.forAction(entry.action.id, entry.start) ?? 0\n\n\t\t\t// We add the animation lock constant to the cast time to mimic the game's\n\t\t\t// behaviour - also sometimes known as \"caster tax\".\n\t\t\tduration = Math.max(duration, castTime + ANIMATION_LOCK)\n\t\t}\n\n\t\treturn duration\n\t}\n}\n\nclass ChargeGainItem extends BaseItem {\n\tContent = () => (\n\t\t<div className={styles.chargeGain}>\n\t\t\t<Icon name=\"angle double up\" className={styles.icon}/>\n\t\t</div>\n\t)\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"backgroundColour\":\"rgba(213, 221, 246, .4)\",\"chargeColor\":\"color(rgba(213, 221, 246, .4) a(100%) l(-20%))\",\"cooldown\":\"ActionTimeline-module_cooldown__3u1x3\",\"chargeGain\":\"ActionTimeline-module_chargeGain__3-Of9\",\"icon\":\"ActionTimeline-module_icon__8OvsF\"};","import {t} from '@lingui/macro'\nimport {Plural, Trans} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {Action, ActionKey} from 'data/ACTIONS'\nimport {JOBS, RoleKey} from 'data/JOBS'\nimport {Analyser} from 'parser/core/Analyser'\nimport {dependency} from 'parser/core/Injectable'\nimport {CooldownDowntime} from 'parser/core/modules/CooldownDowntime'\nimport {Data} from 'parser/core/modules/Data'\nimport React, {Fragment, ReactNode} from 'react'\nimport {Accordion, Button, Icon, Message, Table} from 'semantic-ui-react'\nimport {CooldownEndReason, CooldownHistoryEntry, Cooldowns} from './Cooldowns'\nimport DISPLAY_ORDER from './DISPLAY_ORDER'\nimport {Timeline} from './Timeline'\n\nconst DEFENSIVE_ROLE_ACTIONS: Map<RoleKey, ActionKey[]> = new Map<RoleKey, ActionKey[]>([\n\t['TANK', ['RAMPART', 'REPRISAL']],\n\t['MELEE', ['FEINT', 'BLOODBATH', 'SECOND_WIND']],\n\t['PHYSICAL_RANGED', ['SECOND_WIND']],\n\t['MAGICAL_RANGED', ['ADDLE']],\n\t['HEALER', []],\n])\n\nexport class Defensives extends Analyser {\n\tstatic override handle = 'defensives'\n\tstatic override title = t('core.defensives.title')`Defensives`\n\tstatic override displayOrder = DISPLAY_ORDER.DEFENSIVES\n\n\t@dependency protected cooldowns!:Cooldowns\n\t@dependency protected cooldownDowntime!: CooldownDowntime\n\t@dependency protected data!: Data\n\t@dependency private timeline!: Timeline\n\n\t/**\n\t * Implementing modules should provide a list of job-specific defensive actions to track\n\t */\n\tprotected trackedDefensives: Action[] = []\n\t/**\n\t * Implementing modules may override the main header message text\n\t */\n\tprotected headerContent: ReactNode = <Trans id=\"core.defensives.header.content\">\n\t\tUsing your mitigation and healing cooldowns can help you survive mistakes, or relieve some stress on the healers and let them deal more damage.<br/>\n\t\tWhile you shouldn't use them at the expense of your rotation or buff alignment, you should try to find helpful times to use them.\n\t</Trans>\n\n\toverride initialise() {\n\t\tconst roleDefensives = DEFENSIVE_ROLE_ACTIONS.get(JOBS[this.parser.actor.job].role)?.map(key => this.data.actions[key]) ?? []\n\t\troleDefensives.forEach(roleAction => {\n\t\t\tif (!this.trackedDefensives.find(action => roleAction.id === action.id)) {\n\t\t\t\tthis.trackedDefensives.push(roleAction)\n\t\t\t}\n\t\t})\n\t}\n\n\tprivate getUsageCount(defensive: Action): number {\n\t\treturn this.getUses(defensive).length\n\t}\n\n\tprivate getUses(defensive: Action): CooldownHistoryEntry[] {\n\t\treturn this.cooldowns.cooldownHistory(defensive).filter((entry) => entry.endReason !== CooldownEndReason.INTERRUPTED)\n\t}\n\n\tprivate getMaxUses(defensive: Action): number {\n\t\tconst totalAdditionalUses = this.getUses(defensive).reduce((acc, usage) => acc + this.getAdditionalUsageData(defensive, usage.start).chargesBeforeNextUse, this.getAdditionalUsageData(defensive).chargesBeforeNextUse)\n\t\treturn this.getUsageCount(defensive) + totalAdditionalUses\n\t}\n\n\toverride output() {\n\t\tif (this.trackedDefensives.length === 0) {\n\t\t\treturn\n\t\t}\n\n\t\treturn <Fragment>\n\t\t\t<Message icon>\n\t\t\t\t<Icon name=\"info\" />\n\t\t\t\t<Message.Content>\n\t\t\t\t\t{this.headerContent}\n\t\t\t\t\t<br/><br/>\n\t\t\t\t\t<Trans id=\"core.defensives.header.sub-content\">\n\t\t\t\t\t\tThe below tables will show you where you can gain additional uses of these cooldowns, without interfering with your existing ones.\n\t\t\t\t\t</Trans>\n\t\t\t\t</Message.Content>\n\t\t\t</Message>\n\t\t\t<Accordion\n\t\t\t\texclusive={false}\n\t\t\t\tstyled\n\t\t\t\tfluid\n\t\t\t\tpanels={\n\t\t\t\t\tthis.trackedDefensives.map((defensive, index) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tkey: defensive.id,\n\t\t\t\t\t\t\ttitle: {\n\t\t\t\t\t\t\t\tcontent: <><ActionLink key={index} {...defensive} /> - {this.getUsageCount(defensive)} / {this.getMaxUses(defensive)}</>,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcontent: {\n\t\t\t\t\t\t\t\tcontent: <Table compact unstackable celled>\n\t\t\t\t\t\t\t\t\t<Table.Body>\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tthis.tryGetAdditionalUseRow(defensive)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tthis.getUses(defensive).map((entry) => {\n\t\t\t\t\t\t\t\t\t\t\t\treturn this.getUsageRow(entry, defensive)\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</Table.Body>\n\t\t\t\t\t\t\t\t</Table>,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t/>\n\t\t</Fragment>\n\t}\n\n\tprivate getUsageRow(entry: CooldownHistoryEntry, defensive: Action): ReactNode {\n\t\treturn <>\n\t\t\t<Table.Row key={entry.start}>\n\t\t\t\t<Table.Cell>\n\t\t\t\t\t<Trans id=\"core.defensives.table.usage-row.text\">Used at <Button\n\t\t\t\t\t\tcircular\n\t\t\t\t\t\tcompact\n\t\t\t\t\t\tsize=\"mini\"\n\t\t\t\t\t\ticon=\"time\"onClick={() => this.timeline.show(entry.start - this.parser.pull.timestamp, entry.end - this.parser.pull.timestamp)}>\n\t\t\t\t\t</Button> {this.parser.formatEpochTimestamp(entry.start)}\n\t\t\t\t\t</Trans>\n\t\t\t\t</Table.Cell>\n\t\t\t</Table.Row>\n\t\t\t{\n\t\t\t\tthis.tryGetAdditionalUseRow(defensive, entry.start)\n\t\t\t}\n\t\t</>\n\t}\n\n\tprivate getAdditionalUsageData(defensive: Action, timestamp: number = this.parser.pull.timestamp): {chargesBeforeNextUse: number, availableTimestamp: number, useByTimestamp: number} {\n\t\tlet availableTimestamp: number, currentCharges\n\n\t\tif (timestamp === this.parser.pull.timestamp) {\n\t\t\tavailableTimestamp = this.parser.pull.timestamp\n\t\t\tcurrentCharges = defensive.charges || 1\n\t\t} else {\n\t\t\tconst chargesAvailableEvent = this.cooldowns.chargeHistory(defensive).find(charges => charges.timestamp >= timestamp && charges.current > 0)\n\t\t\tavailableTimestamp = chargesAvailableEvent?.timestamp || (this.parser.pull.duration + this.parser.pull.timestamp)\n\t\t\tcurrentCharges = chargesAvailableEvent?.current || 0\n\t\t}\n\n\t\tconst cooldown = defensive.cooldown || this.parser.pull.duration\n\t\tconst nextEntry = this.getUses(defensive).find(historyEntry => historyEntry.start > timestamp)\n\t\tconst useByTimestamp = nextEntry != null ? (nextEntry.start - cooldown) : (this.parser.pull.timestamp + this.parser.pull.duration)\n\n\t\tif (useByTimestamp <= availableTimestamp) {\n\t\t\treturn {chargesBeforeNextUse: 0, availableTimestamp, useByTimestamp}\n\t\t}\n\n\t\treturn {chargesBeforeNextUse: currentCharges + Math.floor((useByTimestamp - availableTimestamp) / cooldown), availableTimestamp, useByTimestamp}\n\t}\n\n\tprivate tryGetAdditionalUseRow(defensive: Action, timestamp: number = this.parser.pull.timestamp): ReactNode {\n\t\tconst {chargesBeforeNextUse, availableTimestamp, useByTimestamp} = this.getAdditionalUsageData(defensive, timestamp)\n\n\t\tif (chargesBeforeNextUse === 0) {\n\t\t\treturn <></>\n\t\t}\n\n\t\treturn <Table.Row>\n\t\t\t<Table.Cell>\n\t\t\t\t<Trans id=\"core.defensives.table.extra-usage-row.text\"><Plural value={chargesBeforeNextUse} one=\"1 extra use\" other=\"# extra uses\"/> available between <Button\n\t\t\t\t\tcircular\n\t\t\t\t\tcompact\n\t\t\t\t\tsize=\"mini\"\n\t\t\t\t\ticon=\"time\"onClick={() => this.timeline.show(availableTimestamp - this.parser.pull.timestamp, useByTimestamp - this.parser.pull.timestamp)}>\n\t\t\t\t</Button> {this.parser.formatEpochTimestamp(availableTimestamp)} and {this.parser.formatEpochTimestamp(useByTimestamp)}\n\t\t\t\t</Trans>\n\t\t\t</Table.Cell>\n\t\t</Table.Row>\n\t}\n}\n","import {MessageDescriptor} from '@lingui/core'\nimport {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport TransMarkdown from 'components/ui/TransMarkdown'\nimport {BASE_GCD} from 'data/CONSTANTS'\nimport React from 'react'\nimport {Report} from 'report'\nimport {Analyser} from '../Analyser'\nimport {dependency} from '../Injectable'\nimport {Data} from './Data'\nimport {SpeedAdjustments} from './SpeedAdjustments'\nimport {SimpleStatistic, Statistics} from './Statistics'\n\nconst estimateHelp: Record<Report['meta']['source'] | '__all', MessageDescriptor> = {\n\t__all: t('core.gcd.no-statistics.v2')`This GCD recast is an *estimate*, and may be incorrect. If it is reporting a GCD recast *longer* than reality, you likely need to focus on keeping your GCD rolling.`,\n\tlegacyFflogs: t('core.gcd.estimate-help.fflogs')`Precise attribute values are only available from FF Logs for the player who logged the report in ACT.`,\n}\n\nexport class GlobalCooldown extends Analyser {\n\tstatic override handle = 'gcd'\n\n\t@dependency private data!: Data\n\t@dependency private statistics!: Statistics\n\t@dependency private speedAdjustments!: SpeedAdjustments\n\n\toverride initialise() {\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\t/**\n\t * Get the base recast time of the parsed actor's GCD cooldown group, in milliseconds.\n\t * The value returned from this function _may_ be an estimate - check {@link GlobalCooldown.isEstimated}\n\t * to see if it is.\n\t */\n\tpublic getDuration() {\n\t\treturn this.speedAdjustments.getAdjustedDuration({duration: BASE_GCD})\n\t}\n\n\t/** Returns whether the GCD duration calculated by this module is an estimate. */\n\tpublic isEstimated() {\n\t\treturn this.speedAdjustments.isAdjustmentEstimated()\n\t}\n\n\tprivate onComplete() {\n\t\tconst estimated = this.isEstimated()\n\n\t\tthis.statistics.add(new SimpleStatistic({\n\t\t\ttitle: estimated\n\t\t\t\t? <Trans id=\"core.gcd.estimated-gcd\">Estimated GCD</Trans>\n\t\t\t\t: <Trans id=\"core.gcd.gcd\">GCD Recast</Trans>,\n\t\t\ticon: this.data.actions.ATTACK.icon,\n\t\t\tvalue: this.parser.formatDuration(this.getDuration()),\n\t\t\tinfo: estimated ? <>\n\t\t\t\t<TransMarkdown source={estimateHelp.__all}/>\n\t\t\t\t<TransMarkdown source={estimateHelp[this.parser.report.meta.source]}/>\n\t\t\t</> : undefined,\n\t\t}))\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {ActionLink, DataLink} from 'components/ui/DbLink'\nimport {Action, getPotencyWithMods, getBasePotency} from 'data/ACTIONS'\nimport {BonusModifier} from 'data/ACTIONS/type'\nimport {Event, Events} from 'event'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport Checklist, {Requirement, Rule} from 'parser/core/modules/Checklist'\nimport DISPLAY_ORDER from 'parser/core/modules/DISPLAY_ORDER'\nimport {Timeline} from 'parser/core/modules/Timeline'\nimport React from 'react'\nimport {Button, Table} from 'semantic-ui-react'\nimport {Analyser} from '../Analyser'\nimport {Data} from './Data'\n\nexport interface PositionalResult {\n\tpositional: Action,\n\thits: Array<Events['damage']>,\n\tmisses: Array<Events['damage']>\n}\n\nconst NO_BONUS_PERCENT = 0\n\nexport abstract class Positionals extends Analyser {\n\t@dependency protected data!: Data\n\t@dependency private checklist!: Checklist\n\t@dependency private timeline!: Timeline\n\n\tstatic override handle = 'positionals'\n\tstatic override title = t('core.positionals.title')`Positionals`\n\tstatic override displayOrder = DISPLAY_ORDER.POSITIONALS\n\n\tprivate positionalResults: PositionalResult[] = []\n\n\t/**\n\t * Jobs MUST provide a list of their positional actions\n\t *\n\t * TODO: This should just be a filter on all actions for the job for\n\t * any actions they have with positional potencies.\n\t */\n\tprotected abstract positionals: Action[]\n\n\toverride initialise() {\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>().source(this.parser.actor.id).type('damage')\n\t\t\t\t.cause(this.data.matchCauseActionId(this.positionals.map(positional => positional.id))), this.onCast)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onCast(event: Events['damage']) {\n\t\tif (event.cause.type !== 'action') {\n\t\t\treturn\n\t\t}\n\t\tconst action = this.data.getAction(event.cause.action)\n\t\tif (action == null) {\n\t\t\treturn\n\t\t}\n\t\tconst positional = this.positionals.find(positional => positional === action)\n\t\tif (positional == null) {\n\t\t\treturn\n\t\t}\n\n\t\tconst positionalResult = this.getOrCreatePositionalResult(positional)\n\n\t\t// All positionals are single target skills, so getting the 0 index\n\t\t// should be all we need to do here.\n\t\tif (this.positionalHit(positional, event.targets[0].bonusPercent)) {\n\t\t\tpositionalResult.hits.push(event)\n\t\t} else {\n\t\t\tpositionalResult.misses.push(event)\n\t\t}\n\t}\n\n\tprivate getOrCreatePositionalResult(positional: Action) {\n\t\tlet positionalResult = this.positionalResults.find(result => result.positional === positional)\n\t\tif (positionalResult == null) {\n\t\t\tpositionalResult = {\n\t\t\t\tpositional,\n\t\t\t\thits: [],\n\t\t\t\tmisses: [],\n\t\t\t}\n\t\t\tthis.positionalResults.push(positionalResult)\n\t\t}\n\t\treturn positionalResult\n\t}\n\n\t// The \"hit\" version of this function needs to check for more\n\t// things such as DRG's 5th hit combo buff and RPR's reaver buff.\n\t// Luckily, assessing misses is easy and sufficient for the purposes\n\t// of detecting positional hits.\n\tprivate missedPositionalBonusPercents(action: Action) {\n\t\tconst missed_positional_combo_bonus_percent = this.calculateBonusPercent(\n\t\t\tgetBasePotency(action),\n\t\t\tgetPotencyWithMods(action, [BonusModifier.COMBO], []))\n\t\treturn [...new Set([NO_BONUS_PERCENT, missed_positional_combo_bonus_percent])]\n\t}\n\n\t// Currently just checks that you didn't miss. Checking for hits would\n\t// otherwise be more complex.\n\tprivate positionalHit(action: Action, bonusPercent: number) {\n\t\treturn !this.missedPositionalBonusPercents(action).includes(bonusPercent)\n\t}\n\n\t// The bonusPercent is based on the final potency number.\n\tprivate calculateBonusPercent(base: number, bonus: number) {\n\t\treturn Math.trunc(100 * (1 - base / bonus))\n\t}\n\n\tprivate relativeTimestamp(timestamp: number) {\n\t\treturn timestamp - this.parser.pull.timestamp\n\t}\n\n\tprivate createTimelineButton(timestamp: number) {\n\t\tconst relative_timestamp = this.relativeTimestamp(timestamp)\n\t\treturn <Button\n\t\t\tcircular\n\t\t\tcompact\n\t\t\ticon=\"time\"\n\t\t\tsize=\"small\"\n\t\t\tonClick={() => this.timeline.show(relative_timestamp, relative_timestamp)}\n\t\t\tcontent={this.parser.formatEpochTimestamp(timestamp)}\n\t\t/>\n\t}\n\n\tprivate onComplete() {\n\t\tif (this.positionalResults.length === 0) {\n\t\t\treturn\n\t\t}\n\t\tthis.checklist.add(new Rule({\n\t\t\tname: <Trans id=\"core.positionals.checklist.title\">Hit your positionals</Trans>,\n\t\t\tdisplayOrder: DISPLAY_ORDER.POSITIONALS,\n\t\t\tdescription: <Trans id=\"core.positionals.checklist.description\">\n\t\t\t\tMelee DPS jobs have some skills that will do more damage when used from the rear or flank.\n\t\t\t\tMake sure you use those skills in the right position to do the most damage, or\n\t\t\t\tuse <DataLink action=\"TRUE_NORTH\"/> when you are out of position.\n\t\t\t</Trans>,\n\t\t\trequirements: this.positionalResults.map(this.positionalRequirement),\n\t\t}))\n\t}\n\tprivate positionalRequirement(result: PositionalResult) {\n\t\tconst actual = result.hits.length\n\t\tconst numMisses = result.misses.length\n\t\tconst expected = actual + numMisses\n\t\tlet percent = actual / expected * 100\n\t\tif (process.env.NODE_ENV === 'production') {\n\t\t\tpercent = Math.min(percent, 100)\n\t\t}\n\t\treturn new Requirement({\n\t\t\tname: <ActionLink {...result.positional}/>,\n\t\t\tpercent: percent,\n\t\t\tweight: expected,\n\t\t\toverrideDisplay: `${actual} / ${expected} (${percent.toFixed(2)}%)`,\n\t\t})\n\t}\n\n\toverride output(): React.ReactNode {\n\t\tconst totalMisses = this.positionalResults.reduce((total, current) => total + current.misses.length, 0)\n\n\t\tif (totalMisses === 0) { return }\n\n\t\treturn <Table compact unstackable celled textAlign=\"center\">\n\t\t\t<Table.Header>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong><Trans id=\"core.ui.positionals-table.header.action\">Action</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong><Trans id=\"core.ui.positionals-table.header.hits\">Hits</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong><Trans id=\"core.ui.positionals-table.header.misses\">Misses</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{\n\t\t\t\t\tthis.positionalResults.map(result => {\n\t\t\t\t\t\tconst numHits = result.hits.length\n\t\t\t\t\t\tconst numMisses = result.misses.length\n\t\t\t\t\t\tconst success = numMisses === 0\n\t\t\t\t\t\treturn <Table.Row key={result.positional.id}>\n\t\t\t\t\t\t\t<Table.Cell style={{whiteSpace: 'nowrap'}}>\n\t\t\t\t\t\t\t\t<ActionLink {...result.positional} showName={false} />\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t<Table.Cell\n\t\t\t\t\t\t\t\ttextAlign=\"center\"\n\t\t\t\t\t\t\t\tpositive={success}\n\t\t\t\t\t\t\t\tnegative={!success}\n\t\t\t\t\t\t\t>{numHits}/{numMisses + numHits}\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t<Table.Cell textAlign=\"left\">\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tresult.misses.map(miss => {\n\t\t\t\t\t\t\t\t\t\treturn this.createTimelineButton(miss.timestamp)\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t</Table.Row>\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</Table.Body>\n\t\t</Table>\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Trans, Plural} from '@lingui/react'\nimport NormalisedMessage from 'components/ui/NormalisedMessage'\nimport Rotation from 'components/ui/Rotation'\nimport {Action} from 'data/ACTIONS'\nimport {BASE_GCD} from 'data/CONSTANTS'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport CastTime from 'parser/core/modules/CastTime'\nimport {Data} from 'parser/core/modules/Data'\nimport {Invulnerability} from 'parser/core/modules/Invulnerability'\nimport Suggestions, {TieredSuggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport React, {ReactNode} from 'react'\nimport {Accordion} from 'semantic-ui-react'\nimport {matchClosestLower} from 'utilities'\n\nconst CAST_TIME_MAX_WEAVES = {\n\t0: 2,\n\t1000: 1,\n\t2500: 0,\n}\nconst REDUCE_MAX_WEAVES_RECAST_BELOW = 1800\nconst DEFAULT_MAX_WEAVES = 2\n\nconst WEAVING_SEVERITY = {\n\t1: SEVERITY.MEDIUM,\n\t5: SEVERITY.MAJOR,\n}\n\nexport interface Weave {\n\tleadingGcdEvent?: Events['action'],\n\ttrailingGcdEvent: Events['action'],\n\tgcdTimeDiff: number,\n\tweaves: Array<Events['action']>,\n}\n\nexport class Weaving extends Analyser {\n\tstatic override handle = 'weaving'\n\n\t@dependency protected castTime!: CastTime\n\t@dependency protected data!: Data\n\t@dependency private invulnerability!: Invulnerability\n\t@dependency protected suggestions!: Suggestions\n\n\tstatic override title = t('core.weaving.title')`Weaving Issues`\n\n\tprotected suggestionIcon: string = 'https://xivapi.com/i/001000/001785.png' // WVR Focused Synth\n\n\tprotected moduleLink = (\n\t\t<a style={{cursor: 'pointer'}} onClick={() => this.parser.scrollTo(Weaving.handle)}>\n\t\t\t<NormalisedMessage message={Weaving.title}/>\n\t\t</a>\n\t)\n\tprotected suggestionContent: ReactNode = <Trans id=\"core.weaving.content\">\n\t\tAvoid weaving more actions than you have time for in a single GCD window. Doing so will delay your next GCD, reducing possible uptime. Check the {this.moduleLink} module below for more detailed analysis.\n\t</Trans>\n\n\tprotected severity = WEAVING_SEVERITY\n\n\tprivate weaves: Array<Events['action']> = []\n\tprivate ongoingCastEvent?: Events['prepare']\n\tprivate leadingGcdEvent?: Events['action']\n\tprivate trailingGcdEvent?: Events['action']\n\tprivate badWeaves: Weave[] = []\n\n\toverride initialise() {\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\n\t\tthis.addEventHook(playerFilter.type('prepare'), this.onBeginCast)\n\t\tthis.addEventHook(playerFilter.type('action'), this.onCast)\n\t\tthis.addEventHook(filter<Event>().type('complete'), this.onComplete)\n\t\tthis.addEventHook(filter<Event>().type('death'), this.clearWeave)\n\t}\n\n\tprivate onBeginCast(event: Events['prepare']) {\n\t\tthis.ongoingCastEvent = event\n\t}\n\n\tprivate onCast(event: Events['action']) {\n\t\tconst action = this.data.getAction(event.action)\n\n\t\t// If the action is an auto, just ignore it\n\t\tif (!action || action.autoAttack) {\n\t\t\treturn\n\t\t}\n\n\t\t// If it's not a GCD, just bump the weave count\n\t\tif (this.isOgcd(action)) {\n\t\t\tthis.weaves.push(event)\n\t\t\treturn\n\t\t}\n\n\t\tif (this.ongoingCastEvent && this.ongoingCastEvent.action === action.id) {\n\t\t\t// This event is the end of a GCD cast\n\t\t\tthis.trailingGcdEvent = {\n\t\t\t\t...event,\n\t\t\t\t// Override the timestamp of the GCD with when its cast began\n\t\t\t\ttimestamp: this.ongoingCastEvent.timestamp,\n\t\t\t}\n\t\t} else {\n\t\t\t// This event was an instant GCD (or log missed the cast starting)\n\t\t\tthis.trailingGcdEvent = event\n\t\t}\n\n\t\t// Always reset the ongoing cast\n\t\tthis.ongoingCastEvent = undefined\n\n\t\t// Throw the current state onto the history\n\t\tthis.saveIfBad()\n\n\t\t// Reset\n\t\tthis.leadingGcdEvent = this.trailingGcdEvent\n\t\tthis.weaves = []\n\t}\n\n\tprivate onComplete() {\n\t\t// If there's been at least one gcd, run a cleanup on any remnant data\n\t\tif (this.leadingGcdEvent) {\n\t\t\tthis.saveIfBad()\n\t\t}\n\n\t\t// Few triples is medium, any more is major\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.suggestionIcon,\n\t\t\tcontent: this.suggestionContent,\n\t\t\twhy: <Plural\n\t\t\t\tid=\"core.weaving.why\"\n\t\t\t\tvalue={this.badWeaves.length}\n\t\t\t\t_1=\"# instance of incorrect weaving\"\n\t\t\t\tother=\"# instances of incorrect weaving\"\n\t\t\t/>,\n\t\t\ttiers: this.severity,\n\t\t\tvalue: this.badWeaves.length,\n\t\t}))\n\t}\n\n\tprivate saveIfBad() {\n\t\tif (this.trailingGcdEvent == null) { return }\n\n\t\tconst leadingTimestamp = this.leadingGcdEvent?.timestamp ?? this.parser.pull.timestamp\n\t\tconst gcdTimeDiff = this.trailingGcdEvent.timestamp\n\t\t\t- leadingTimestamp\n\t\t\t- this.invulnerability.getDuration({\n\t\t\t\tstart: leadingTimestamp,\n\t\t\t\tend: this.trailingGcdEvent.timestamp,\n\t\t\t})\n\n\t\tconst weave: Weave = {\n\t\t\tleadingGcdEvent: this.leadingGcdEvent,\n\t\t\ttrailingGcdEvent: this.trailingGcdEvent,\n\t\t\tgcdTimeDiff,\n\t\t\tweaves: this.weaves,\n\t\t}\n\n\t\tif (weave.weaves.length === 0) {\n\t\t\treturn\n\t\t}\n\n\t\tif (this.isBadWeave(weave)) {\n\t\t\tthis.badWeaves.push(weave)\n\t\t}\n\t}\n\n\tprivate isOgcd(action: Action) {\n\t\treturn !action.onGcd && !action.autoAttack\n\t}\n\n\tprivate isBadWeave(weave: Weave) {\n\t\t// Calc. the no. of weaves - we're ignoring any made while the boss is untargetable, and events that happened before the pull\n\t\tconst weaveCount = weave.weaves.filter(\n\t\t\tevent => true\n\t\t\t\t&& !this.invulnerability.isActive({timestamp: event.timestamp, types: ['untargetable']})\n\t\t\t\t&& event.timestamp >= this.parser.pull.timestamp,\n\t\t).length\n\n\t\tconst recast = ((weave.leadingGcdEvent != null) ? this.castTime.recastForEvent(weave.leadingGcdEvent) : undefined) ?? BASE_GCD\n\t\t// Check the downtime-adjusted GCD time difference for this weave - do not treat multiple weaves during downtime as bad weaves\n\t\treturn weave.gcdTimeDiff > recast && weaveCount > this.getMaxWeaves(weave)\n\t}\n\n\tprivate clearWeave() {\n\t\t// prompts saving any existing weaves if they're bad, and reset\n\t\tif (this.weaves.length > 0) {\n\t\t\tthis.saveIfBad()\n\t\t}\n\n\t\t// remove existing weaves and pretend the next leadingGcdEvent is like a fresh start (which I guess it is)\n\t\tthis.weaves = []\n\t\tthis.leadingGcdEvent = undefined\n\t}\n\n\t/**\n\t * Implementing classes MAY override this in order to provide custom logic for determining the number of max weaves, given the leading GCD Event\n\t * @param event The Action Event of the leading GCD.  Will be undefined for the first GCD of the pull - default behavior is to allow 2 weaves in case of missing pre-pull action\n\t * @returns number of allowed weaves after the leading GCD before flagging as bad weaving\n\t */\n\tprotected getMaxWeaves(weave: Weave): number {\n\t\tif (weave.leadingGcdEvent == null) {\n\t\t\treturn DEFAULT_MAX_WEAVES\n\t\t}\n\n\t\tconst castTime = this.castTime.forEvent(weave.leadingGcdEvent)\n\t\tif (castTime == null)  {\n\t\t\treturn DEFAULT_MAX_WEAVES\n\t\t}\n\n\t\tconst maxWeaves = matchClosestLower(CAST_TIME_MAX_WEAVES, castTime) ?? DEFAULT_MAX_WEAVES\n\t\tconst recastTime = this.castTime.recastForEvent(weave.leadingGcdEvent) ?? BASE_GCD\n\n\t\treturn maxWeaves - (recastTime < REDUCE_MAX_WEAVES_RECAST_BELOW ? 1 : 0)\n\t}\n\n\toverride output() {\n\t\tif (this.badWeaves.length === 0) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst panels = this.badWeaves.map(item => ({\n\t\t\tkey: item.leadingGcdEvent?.timestamp ?? this.parser.pull.timestamp,\n\t\t\ttitle: {\n\t\t\t\tcontent: <>\n\t\t\t\t\t<strong>{this.parser.formatEpochTimestamp(item.leadingGcdEvent?.timestamp ?? this.parser.pull.timestamp)}</strong>\n\t\t\t\t\t&nbsp;-&nbsp;\n\t\t\t\t\t<Plural\n\t\t\t\t\t\tid=\"core.weaving.panel-count\"\n\t\t\t\t\t\tvalue={item.weaves.length}\n\t\t\t\t\t\t_1=\"# weave\"\n\t\t\t\t\t\tother=\"# weaves\"\n\t\t\t\t\t/>\n\t\t\t\t\t&nbsp;(\n\t\t\t\t\t{this.parser.formatDuration(item.gcdTimeDiff)}\n\t\t\t\t\t&nbsp;\n\t\t\t\t\t<Trans id=\"core.weaving.between-gcds\">between GCDs</Trans>\n\t\t\t\t\t)\n\t\t\t\t</>,\n\t\t\t},\n\t\t\tcontent: {\n\t\t\t\tcontent: <Rotation events={[\n\t\t\t\t\t...(item.leadingGcdEvent != null ? [item.leadingGcdEvent] : []),\n\t\t\t\t\t...item.weaves,\n\t\t\t\t]}/>,\n\t\t\t},\n\t\t}))\n\n\t\treturn <Accordion\n\t\t\texclusive={false}\n\t\t\tpanels={panels}\n\t\t\tstyled\n\t\t\tfluid\n\t\t/>\n\t}\n}\n","import {Trans} from '@lingui/react'\nimport {ActionRow, ActionTimeline as CoreActionTimeline} from 'parser/core/modules/ActionTimeline'\nimport React from 'react'\n\nexport class ActionTimeline extends CoreActionTimeline {\n\tstatic override rows: ActionRow[] = [\n\t\t...CoreActionTimeline.rows,\n\t\t{\n\t\t\t// This row displays the cooldown group of the non-kassatsu, non-TCJ, mudra cooldown\n\t\t\tcontent: 'TEN',\n\t\t\tlabel: <Trans id=\"nin.action-timeline.mudra\">Mudra</Trans>,\n\t\t},\n\t\t'KASSATSU',\n\t\t'TEN_CHI_JIN',\n\t\t'TRICK_ATTACK',\n\t\t'DREAM_WITHIN_A_DREAM',\n\t\t'BUNSHIN',\n\t\t'BHAVACAKRA',\n\t\t'MUG',\n\t\t'MEISUI',\n\t\t'HELLFROG_MEDIUM',\n\t\t'SHUKUCHI',\n\t\t'SHADE_SHIFT',\n\t]\n}\n","import ACTIONS from 'data/ACTIONS'\nimport {Combos as CoreCombos} from 'parser/core/modules/Combos'\n\nexport class Combos extends CoreCombos {\n\t// Overrides\n\toverride suggestionIcon = ACTIONS.SPINNING_EDGE.icon\n}\n","import {Defensives as CoreDefensives} from 'parser/core/modules/Defensives'\n\nexport class Defensives extends CoreDefensives {\n\tprotected override trackedDefensives = [\n\t\tthis.data.actions.SHADE_SHIFT,\n\t]\n}\n","import {Trans, Plural} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {ActionKey} from 'data/ACTIONS'\nimport {EncounterKey} from 'data/ENCOUNTERS'\nimport {Cause, Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport Checklist, {Rule, Requirement} from 'parser/core/modules/Checklist'\nimport {Data} from 'parser/core/modules/Data'\nimport {Death} from 'parser/core/modules/Death'\nimport Suggestions, {TieredSuggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport React, {Fragment} from 'react'\nimport {Icon, Message} from 'semantic-ui-react'\nimport DISPLAY_ORDER from './DISPLAY_ORDER'\n\nconst HUTON_MAX_DURATION_MILLIS = 60000 // Not in STATUSES/NIN.js because lolgauges\n\n// TODO - Revisit how this sim works in the first place because it's fucky\nconst HUTON_START_DURATION_MILLIS_HIGH = 55000\nconst HUTON_START_DURATION_MILLIS_LOW = 49000\n\nconst HUTON_EXTENSION_LONG = 30000\nconst HUTON_EXTENSION_SHORT = 10000\n\nconst HUTON_EXTENSION_MILLIS: Array<[ActionKey, number]> = [\n\t['ARMOR_CRUSH', HUTON_EXTENSION_LONG],\n\t['HAKKE_MUJINSATSU', HUTON_EXTENSION_SHORT],\n]\n\nconst DOWNTIME_DIFFERENCE_TOLERANCE = 10000 // If the downtime estimates are off by more than this, we can probably toss the low estimate\n\n// Some bosses *coughChadarnookcough* require fucky pulls that result in your Huton timer being lower than normal when the fight starts\nconst BOSS_ADJUSTMENTS: Partial<Record<EncounterKey, number>> = {\n\t// DEMON_CHADARNOOK: 15000,\n}\n\ninterface HutonEstimate {\n\tcurrent: number,\n\tclipped: number,\n\tdowntime: number,\n\tbadAcs: number,\n}\n\nexport class Huton extends Analyser {\n\tstatic override handle = 'huton'\n\n\t@dependency private checklist!: Checklist\n\t@dependency private data!: Data\n\t@dependency private death!: Death\n\t@dependency private suggestions!: Suggestions\n\n\tprivate hutonExtensionMillis = new Map(HUTON_EXTENSION_MILLIS.map(\n\t\tpair => [this.data.actions[pair[0]].id, pair[1]]\n\t))\n\n\tprivate highEstimate: HutonEstimate = {\n\t\tcurrent: HUTON_START_DURATION_MILLIS_HIGH - (BOSS_ADJUSTMENTS[this.parser.pull.encounter.key ?? 'TRASH'] || 0),\n\t\tclipped: 0,\n\t\tdowntime: 0,\n\t\tbadAcs: 0,\n\t}\n\tprivate lowEstimate: HutonEstimate = {\n\t\tcurrent: HUTON_START_DURATION_MILLIS_LOW - (BOSS_ADJUSTMENTS[this.parser.pull.encounter.key ?? 'TRASH'] || 0),\n\t\tclipped: 0,\n\t\tdowntime: 0,\n\t\tbadAcs: 0,\n\t}\n\tprivate lastEventTime: number = this.parser.pull.timestamp // This one is shared\n\n\toverride initialise() {\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\t\tconst pets = this.parser.pull.actors.filter(actor => actor.owner === this.parser.actor).map(actor => actor.id)\n\t\tthis.addEventHook(playerFilter.type('action').action(oneOf([this.data.actions.HUTON.id, this.data.actions.HURAIJIN.id])), this.onHutonCast)\n\t\tthis.addEventHook(playerFilter.type('combo').action(oneOf(HUTON_EXTENSION_MILLIS.map(pair => this.data.actions[pair[0]].id))), this.onHutonCombo)\n\t\tthis.addEventHook(filter<Event>()\n\t\t\t.source(oneOf(pets))\n\t\t\t.type('damage')\n\t\t\t.cause(filter<Cause>().action(this.data.actions.PHANTOM_KAMAITACHI_BUNSHIN.id)), this.onKamaitachi)\n\t\tthis.addEventHook({type: 'death', actor: this.parser.actor.id}, this.onDeath)\n\t\tthis.addEventHook({type: 'raise', actor: this.parser.actor.id}, this.onRaise)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate handleHutonRecast(estimate: HutonEstimate, elapsedTime: number) {\n\t\tif (estimate.current === 0) {\n\t\t\testimate.downtime += elapsedTime\n\t\t}\n\n\t\testimate.current = HUTON_MAX_DURATION_MILLIS\n\t}\n\n\tprivate onHutonCast(event: Events['action']) {\n\t\tconst elapsedTime = (event.timestamp - this.lastEventTime)\n\t\tthis.handleHutonRecast(this.highEstimate, elapsedTime)\n\t\tthis.handleHutonRecast(this.lowEstimate, elapsedTime)\n\t\tthis.lastEventTime = event.timestamp\n\t}\n\n\tprivate handleHutonExtension(estimate: HutonEstimate, actionId: number, amount: number, elapsedTime: number) {\n\t\tlet newDuration = estimate.current - elapsedTime\n\t\tif (newDuration <= 0) {\n\t\t\testimate.current = 0\n\t\t\testimate.downtime -= newDuration // Since it's negative, this is basically addition\n\t\t\tif (actionId === this.data.actions.ARMOR_CRUSH.id) {\n\t\t\t\t// Only flag actual Armor Crushes for the badAcs property\n\t\t\t\testimate.badAcs++\n\t\t\t}\n\t\t} else {\n\t\t\tnewDuration += amount\n\t\t\testimate.clipped += Math.max(newDuration - HUTON_MAX_DURATION_MILLIS, 0)\n\t\t\testimate.current = Math.min(newDuration, HUTON_MAX_DURATION_MILLIS)\n\t\t}\n\t}\n\n\tprivate onHutonCombo(event: Events['combo']) {\n\t\tconst elapsedTime = (event.timestamp - this.lastEventTime)\n\t\tconst action = this.data.getAction(event.action)\n\t\tif (action == null) { return }\n\n\t\t// The .get() should never be undefined but we must appease the ts lint gods\n\t\tconst extension = this.hutonExtensionMillis.get(action.id) ?? 0\n\t\tthis.handleHutonExtension(this.highEstimate, action.id, extension, elapsedTime)\n\t\tthis.handleHutonExtension(this.lowEstimate, action.id, extension, elapsedTime)\n\t\tthis.lastEventTime = event.timestamp\n\t}\n\n\tprivate onKamaitachi(event: Events['damage']) {\n\t\tconst elapsedTime = (event.timestamp - this.lastEventTime)\n\t\tthis.handleHutonExtension(this.highEstimate, this.data.actions.PHANTOM_KAMAITACHI_BUNSHIN.id, HUTON_EXTENSION_SHORT, elapsedTime)\n\t\tthis.handleHutonExtension(this.lowEstimate, this.data.actions.PHANTOM_KAMAITACHI_BUNSHIN.id, HUTON_EXTENSION_SHORT, elapsedTime)\n\t\tthis.lastEventTime = event.timestamp\n\t}\n\n\tprivate onDeath() {\n\t\t// RIP\n\t\tthis.highEstimate.current = 0\n\t\tthis.lowEstimate.current = 0\n\t}\n\n\tprivate onRaise(event: Events['raise']) {\n\t\t// So floor time doesn't count against Huton uptime\n\t\tthis.lastEventTime = event.timestamp\n\t}\n\n\tprivate getHutonAverages() {\n\t\tif (this.lowEstimate.downtime - this.highEstimate.downtime > DOWNTIME_DIFFERENCE_TOLERANCE) {\n\t\t\t// If the estimates are too far apart, the low one was probably bad, so we can just return the high one as-is\n\t\t\treturn {\n\t\t\t\tclipped: this.highEstimate.clipped,\n\t\t\t\tdowntime: this.highEstimate.downtime,\n\t\t\t\tbadAcs: this.highEstimate.badAcs,\n\t\t\t}\n\t\t}\n\n\t\t// Otherwise, average the results\n\t\treturn {\n\t\t\tclipped: Math.round((this.highEstimate.clipped + this.lowEstimate.clipped) / 2),\n\t\t\tdowntime: Math.round((this.highEstimate.downtime + this.lowEstimate.downtime) / 2),\n\t\t\tbadAcs: Math.round((this.highEstimate.badAcs + this.lowEstimate.badAcs) / 2),\n\t\t}\n\t}\n\n\tprivate onComplete() {\n\t\tconst {clipped, downtime, badAcs} = this.getHutonAverages()\n\t\tconst duration = this.parser.currentDuration - this.death.deadTime\n\t\tconst uptime = ((duration - downtime) / duration) * 100\n\t\tthis.checklist.add(new Rule({\n\t\t\tname: <Trans id=\"nin.huton.checklist.name\">Keep Huton up</Trans>,\n\t\t\tdescription: <Fragment>\n\t\t\t\t<Trans id=\"nin.huton.checklist.description\"><ActionLink action=\"HUTON\"/> provides you with a 15% attack speed increase and as such is a <em>huge</em> part of a NIN's personal DPS. Do your best not to let it drop, and recover it as quickly as possible if it does.</Trans>\n\t\t\t\t<Message warning icon>\n\t\t\t\t\t<Icon name=\"warning sign\"/>\n\t\t\t\t\t<Message.Content>\n\t\t\t\t\t\t<Trans id=\"nin.huton.checklist.description.warning\">As Huton is now a gauge instead of a buff, please bear in mind that this is an estimate, not an exact value. This also applies to any Huton-related suggestions below.</Trans>\n\t\t\t\t\t</Message.Content>\n\t\t\t\t</Message>\n\t\t\t</Fragment>,\n\t\t\tdisplayOrder: DISPLAY_ORDER.HUTON,\n\t\t\trequirements: [\n\t\t\t\tnew Requirement({\n\t\t\t\t\tname: <Trans id=\"nin.huton.checklist.requirement.name\"><ActionLink action=\"HUTON\"/> uptime</Trans>,\n\t\t\t\t\tpercent: () => uptime,\n\t\t\t\t}),\n\t\t\t],\n\t\t\ttarget: 99,\n\t\t}))\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.HUTON.icon,\n\t\t\tcontent: <Trans id=\"nin.huton.suggestions.clipping.content\">\n\t\t\t\tAvoid using <ActionLink action=\"ARMOR_CRUSH\"/> when <ActionLink action=\"HUTON\"/> has more than 30 seconds left on its duration. The excess time is wasted, so using <ActionLink action=\"AEOLIAN_EDGE\"/> is typically the better option.\n\t\t\t</Trans>,\n\t\t\ttiers: {\n\t\t\t\t15000: SEVERITY.MINOR,\n\t\t\t\t60000: SEVERITY.MEDIUM,\n\t\t\t},\n\t\t\tvalue: clipped,\n\t\t\twhy: <Trans id=\"nin.huton.suggestions.clipping.why\">\n\t\t\t\tYou clipped {this.parser.formatDuration(clipped)} of Huton with early Armor Crushes.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.ARMOR_CRUSH.icon,\n\t\t\tcontent: <Trans id=\"nin.huton.suggestions.futile-ac.content\">\n\t\t\t\tAvoid using <ActionLink action=\"ARMOR_CRUSH\"/> when <ActionLink action=\"HUTON\"/> is down, as it provides no benefit and does less DPS than your other combo finishers.\n\t\t\t</Trans>,\n\t\t\ttiers: {\n\t\t\t\t1: SEVERITY.MINOR,\n\t\t\t\t2: SEVERITY.MEDIUM,\n\t\t\t},\n\t\t\tvalue: badAcs,\n\t\t\twhy: <Trans id=\"nin.huton.suggestions.futile-ac.why\">\n\t\t\t\tYou used Armor Crush <Plural value={badAcs} one=\"# time\" other=\"# times\"/> when Huton was down.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n}\n","export default {\n\tHUTON: 1,\n\tSHADOW_FANG: 2,\n}\n","import CastTime from 'parser/core/modules/CastTime'\n\nconst HUTON_MODIFIER = 0.85\n\n// This is a TEMPORARY workaround to the lack of a status for Huton, only until the Huton module can be ported to Analyser (requires Combos to be ported)\n//   Move this to the Huton module so it synthesizes the CastTime adjustment after it is ported\nexport class HutonCastTime extends CastTime {\n\tprivate pomIndex: number | null = null\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tthis.setPercentageAdjustment('all', HUTON_MODIFIER, 'both')\n\t}\n}\n","import {Trans, Plural} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport {Data} from 'parser/core/modules/Data'\nimport Suggestions, {Suggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\nexport class Kassatsu extends Analyser {\n\tstatic override handle = 'kassatsu'\n\n\t@dependency private actors!: Actors\n\t@dependency private data!: Data\n\t@dependency private suggestions!: Suggestions\n\n\tprivate kassatsuSpent: boolean = false\n\tprivate kassatsuWastes: number = 0\n\tprivate kassatsuUses: {[key: number]: number} = {\n\t\t[this.data.actions.FUMA_SHURIKEN.id]: 0,\n\t\t[this.data.actions.GOKA_MEKKYAKU.id]: 0,\n\t\t[this.data.actions.RAITON.id]: 0,\n\t\t[this.data.actions.HYOSHO_RANRYU.id]: 0,\n\t\t[this.data.actions.HUTON.id]: 0,\n\t\t[this.data.actions.DOTON.id]: 0,\n\t\t[this.data.actions.SUITON.id]: 0,\n\t\t[this.data.actions.RABBIT_MEDIUM.id]: 0,\n\t}\n\n\toverride initialise() {\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\t\tthis.addEventHook(playerFilter.type('action').action(oneOf(Object.keys(this.kassatsuUses).map(Number))), this.onNinjutsuCast)\n\t\tthis.addEventHook(playerFilter.type('statusRemove').status(this.data.statuses.KASSATSU.id), this.onRemoveKassatsu)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onNinjutsuCast(event: Events['action']) {\n\t\tconst abilityId = event.action\n\t\tif (this.actors.current.hasStatus(this.data.statuses.KASSATSU.id)) {\n\t\t\tthis.kassatsuUses[abilityId]++\n\t\t\tthis.kassatsuSpent = true\n\t\t}\n\t}\n\n\tprivate onRemoveKassatsu() {\n\t\tif (!this.kassatsuSpent) {\n\t\t\tthis.kassatsuWastes++\n\t\t}\n\n\t\t// Reset the flag for the next time it's cast\n\t\tthis.kassatsuSpent = false\n\t}\n\n\tprivate onComplete() {\n\t\tif (this.kassatsuWastes > 0) {\n\t\t\tthis.suggestions.add(new Suggestion({\n\t\t\t\ticon: this.data.actions.KASSATSU.icon,\n\t\t\t\tcontent: <Trans id=\"nin.kassatsu.suggestions.waste.content\">\n\t\t\t\t\tBe careful not to let <ActionLink action=\"KASSATSU\"/> fall off, as it wastes a 30% potency buff and means that you're delaying your Ninjutsu casts significantly.\n\t\t\t\t</Trans>,\n\t\t\t\tseverity: SEVERITY.MAJOR,\n\t\t\t\twhy: <Trans id=\"nin.kassatsu.suggestions.waste.why\">\n\t\t\t\t\tYou allowed Kassatsu to fall off <Plural value={this.kassatsuWastes} one=\"# time\" other=\"# times\"/>.\n\t\t\t\t</Trans>,\n\t\t\t}))\n\t\t}\n\n\t\tif (this.kassatsuUses[this.data.actions.HUTON.id] > 0) {\n\t\t\tthis.suggestions.add(new Suggestion({\n\t\t\t\ticon: this.data.actions.HUTON.icon,\n\t\t\t\tcontent: <Trans id=\"nin.kassatsu.suggestions.huton.content\">\n\t\t\t\t\tAvoid using <ActionLink action=\"HUTON\"/> under <ActionLink action=\"KASSATSU\"/>, as it does no damage and completely wastes the 30% potency buff Kassatsu provides.\n\t\t\t\t</Trans>,\n\t\t\t\tseverity: SEVERITY.MAJOR,\n\t\t\t\twhy: <Trans id=\"nin.kassatsu.suggestions.huton.why\">\n\t\t\t\t\tYou cast Huton <Plural value={this.kassatsuUses[this.data.actions.HUTON.id]} one=\"# time\" other=\"# times\"/> under Kassatsu.\n\t\t\t\t</Trans>,\n\t\t\t}))\n\t\t}\n\n\t\tconst generalBads = this.kassatsuUses[this.data.actions.FUMA_SHURIKEN.id] + this.kassatsuUses[this.data.actions.RAITON.id] + this.kassatsuUses[this.data.actions.DOTON.id]\n\t\tif (generalBads > 0) {\n\t\t\tthis.suggestions.add(new Suggestion({\n\t\t\t\ticon: this.data.actions.FUMA_SHURIKEN.icon,\n\t\t\t\tcontent: <Trans id=\"nin.kassatsu.suggestions.generalbads.content\">\n\t\t\t\t\tAvoid using <ActionLink action=\"FUMA_SHURIKEN\"/>, <ActionLink action=\"RAITON\"/>, and <ActionLink action=\"DOTON\"/> under <ActionLink action=\"KASSATSU\"/>. For raw damage, <ActionLink action=\"HYOSHO_RANRYU\"/> and <ActionLink action=\"GOKA_MEKKYAKU\"/> should always be used in single-target and AoE situations respectively.\n\t\t\t\t</Trans>,\n\t\t\t\tseverity: SEVERITY.MAJOR,\n\t\t\t\twhy: <Trans id=\"nin.kassatsu.suggestions.generalbads.why\">\n\t\t\t\t\tYou cast standard damaging Ninjutsu <Plural value={generalBads} one=\"# time\" other=\"# times\"/> under Kassatsu.\n\t\t\t\t</Trans>,\n\t\t\t}))\n\t\t}\n\n\t\tif (this.kassatsuUses[this.data.actions.SUITON.id] > 0) {\n\t\t\tthis.suggestions.add(new Suggestion({\n\t\t\t\ticon: this.data.actions.SUITON.icon,\n\t\t\t\tcontent: <Trans id=\"nin.kassatsu.suggestions.suiton.content\">\n\t\t\t\t\tAvoid using <ActionLink action=\"SUITON\"/> under <ActionLink action=\"KASSATSU\"/> unless using it to set up for a critically important <ActionLink action=\"TRICK_ATTACK\"/>. It's generally best to use it on <ActionLink action=\"HYOSHO_RANRYU\"/> while Trick Attack is up, as its cooldown should align it with every window.\n\t\t\t\t</Trans>,\n\t\t\t\tseverity: SEVERITY.MEDIUM,\n\t\t\t\twhy: <Trans id=\"nin.kassatsu.suggestions.suiton.why\">\n\t\t\t\t\tYou cast Suiton <Plural value={this.kassatsuUses[this.data.actions.SUITON.id]} one=\"# time\" other=\"# times\"/> under Kassatsu.\n\t\t\t\t</Trans>,\n\t\t\t}))\n\t\t}\n\n\t\tif (this.kassatsuUses[this.data.actions.RABBIT_MEDIUM.id] > 0) {\n\t\t\tthis.suggestions.add(new Suggestion({\n\t\t\t\ticon: this.data.actions.RABBIT_MEDIUM.icon,\n\t\t\t\tcontent: <Trans id=\"nin.kassatsu.suggestions.rabbit.content\">\n\t\t\t\t\tBe especially careful not to flub your mudras under <ActionLink action=\"KASSATSU\"/>, as <ActionLink action=\"RABBIT_MEDIUM\"/> does no damage and completely wastes the 30% potency buff Kassatsu provides.\n\t\t\t\t</Trans>,\n\t\t\t\tseverity: SEVERITY.MAJOR,\n\t\t\t\twhy: <Trans id=\"nin.kassatsu.suggestions.rabbit.why\">\n\t\t\t\t\tYou cast Rabbit Medium <Plural value={this.kassatsuUses[this.data.actions.RABBIT_MEDIUM.id]} one=\"# time\" other=\"# times\"/> under Kassatsu.\n\t\t\t\t</Trans>,\n\t\t\t}))\n\t\t}\n\t}\n}\n","import {Trans, Plural} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport {Data} from 'parser/core/modules/Data'\nimport Suggestions, {TieredSuggestion, Suggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\nconst DOTON_TICK_TARGET = 6\nconst JUSTIFIABLE_DOTON_TICKS = 10\n\ninterface DotonCast {\n\ttcj: boolean,\n\tticks: number[],\n\tprepull: boolean,\n}\n\nexport class Ninjutsu extends Analyser {\n\tstatic override handle = 'ninjutsu'\n\n\t@dependency private actors!: Actors\n\t@dependency private data!: Data\n\t@dependency private suggestions!: Suggestions\n\n\tprivate hyotonCount: number = 0\n\tprivate rabbitCount: number = 0\n\tprivate current?: DotonCast\n\tprivate history: DotonCast[] = []\n\n\toverride initialise() {\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\t\tthis.addEventHook(playerFilter.type('action').action(oneOf([this.data.actions.HYOTON.id, this.data.actions.HYOTON_TCJ.id])), () => { this.hyotonCount++ })\n\t\tthis.addEventHook(playerFilter.type('action').action(this.data.actions.RABBIT_MEDIUM.id), () => { this.rabbitCount++ })\n\t\tthis.addEventHook(playerFilter.type('action').action(oneOf([this.data.actions.DOTON.id, this.data.actions.DOTON_TCJ.id])), this.onDotonCast)\n\t\tthis.addEventHook(playerFilter.type('damage').cause(this.data.matchCauseStatus(['DOTON'])), event => { this.current?.ticks.push(event.targets.length ?? 0) })\n\t\tthis.addEventHook(playerFilter.type('statusRemove').status(this.data.statuses.DOTON.id), this.finishDotonWindow)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onDotonCast(event: Events['action']) {\n\t\tthis.finishDotonWindow()\n\n\t\tthis.current = {\n\t\t\ttcj: this.actors.current.hasStatus(this.data.statuses.TEN_CHI_JIN.id),\n\t\t\tticks: [],\n\t\t\tprepull: event.timestamp < this.parser.pull.timestamp,\n\t\t}\n\t}\n\n\tprivate finishDotonWindow() {\n\t\tif (this.current == null) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.history.push(this.current)\n\t\tthis.current = undefined\n\t}\n\n\tprivate appraiseDotonCasts() {\n\t\tconst result = {\n\t\t\tbadTcjs: 0, // Single-target TCJ Dotons (do not do this)\n\t\t\tbadAoes: 0, // AoE Dotons that fell short of 6 ticks (Katon will be more damage)\n\t\t\tbadStds: 0, // Single-target regular Dotons (also do not do this)\n\t\t}\n\n\t\tthis.history.forEach(cast => {\n\t\t\tif (cast.tcj && cast.ticks.every(tick => tick === 1)) {\n\t\t\t\t// If it's a fully single-target TCJ, flag it\n\t\t\t\tresult.badTcjs++\n\t\t\t} else if (cast.ticks.every(tick => tick > 1)) {\n\t\t\t\t// If it's a fully multi-target Doton that misses at least 2 ticks, flag it\n\t\t\t\tif (cast.ticks.length < DOTON_TICK_TARGET) {\n\t\t\t\t\tresult.badAoes++\n\t\t\t\t}\n\t\t\t} else if (!cast.prepull && cast.ticks.reduce((accum, value) => accum + value, 0) < JUSTIFIABLE_DOTON_TICKS) {\n\t\t\t\t// If it's a partial or entirely single-target and it doesn't reach the hit threshold for a good Doton, flag it\n\t\t\t\t// Note: Fully single-target Dotons will never reach this threshold\n\t\t\t\tresult.badStds++\n\t\t\t}\n\t\t})\n\n\t\treturn result\n\t}\n\n\tprivate onComplete() {\n\t\tthis.finishDotonWindow()\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.HYOTON.icon,\n\t\t\tcontent: <Trans id=\"nin.ninjutsu.suggestions.hyoton.content\">\n\t\t\t\tAvoid using <ActionLink action=\"HYOTON\"/>, as it's the weakest of the mudra combinations and should typically never be used in raid content.\n\t\t\t</Trans>,\n\t\t\ttiers: {\n\t\t\t\t1: SEVERITY.MINOR, // Probably a fat finger\n\t\t\t\t2: SEVERITY.MEDIUM, // Probably deliberate\n\t\t\t},\n\t\t\tvalue: this.hyotonCount,\n\t\t\twhy: <Trans id=\"nin.ninjutsu.suggestions.hyoton.why\">\n\t\t\t\tYou cast Hyoton <Plural value={this.hyotonCount} one=\"# time\" other=\"# times\"/>.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.RABBIT_MEDIUM.icon,\n\t\t\tcontent: <Trans id=\"nin.ninjutsu.suggestions.rabbit.content\">\n\t\t\t\tBe careful not to flub your mudras, as using <ActionLink action=\"RABBIT_MEDIUM\"/> can cost you considerable DPS by reducing the number of <ActionLink action=\"TRICK_ATTACK\"/>s you can do during the fight.\n\t\t\t</Trans>,\n\t\t\ttiers: {\n\t\t\t\t1: SEVERITY.MEDIUM, // You were having a bad day, mudra lag, etc.\n\t\t\t\t3: SEVERITY.MAJOR, // Holy shit get better internet\n\t\t\t},\n\t\t\tvalue: this.rabbitCount,\n\t\t\twhy: <Trans id=\"nin.ninjutsu.suggestions.rabbit.why\">\n\t\t\t\tYou cast Rabbit Medium <Plural value={this.rabbitCount} one=\"# time\" other=\"# times\"/>.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\tconst {badTcjs, badAoes, badStds} = this.appraiseDotonCasts()\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.DOTON.icon,\n\t\t\tcontent: <Trans id=\"nin.ninjutsu.suggestions.tcj-doton.content\">\n\t\t\t\tAvoid using <ActionLink action=\"DOTON\"/> under <ActionLink action=\"TEN_CHI_JIN\"/> unless you're up against multiple targets. On a single target, using the <ActionLink action=\"SUITON\"/> combo will do equivalent or better damage and keep it aligned with <ActionLink action=\"MEISUI\"/>.\n\t\t\t</Trans>,\n\t\t\ttiers: {\n\t\t\t\t1: SEVERITY.MEDIUM,\n\t\t\t\t2: SEVERITY.MAJOR,\n\t\t\t},\n\t\t\tvalue: badTcjs,\n\t\t\twhy: <Trans id=\"nin.ninjutsu.suggestions.tcj-doton.why\">\n\t\t\t\tYou cast a single-target Doton under Ten Chi Jin <Plural value={badTcjs} one=\"# time\" other=\"# times\"/>.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\tif (badAoes > 0) {\n\t\t\tthis.suggestions.add(new Suggestion({\n\t\t\t\ticon: this.data.actions.DOTON.icon,\n\t\t\t\tcontent: <Trans id=\"nin.ninjutsu.suggestions.aoe-doton.content\">\n\t\t\t\t\t<ActionLink action=\"DOTON\"/> requires at least {DOTON_TICK_TARGET} ticks to be worthwhile in an AoE setting. Use <ActionLink action=\"KATON\"/> instead against adds that will die quickly.\n\t\t\t\t</Trans>,\n\t\t\t\tseverity: SEVERITY.MINOR,\n\t\t\t\twhy: <Trans id=\"nin.ninjutsu.suggestions.aoe-doton.why\">\n\t\t\t\t\tYou cast an unoptimized Doton cast <Plural value={badAoes} one=\"# time\" other=\"# times\"/>.\n\t\t\t\t</Trans>,\n\t\t\t}))\n\t\t}\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.DOTON.icon,\n\t\t\tcontent: <Trans id=\"nin.ninjutsu.suggestions.st-doton.content\">\n\t\t\t\tAvoid using <ActionLink action=\"DOTON\"/> on single targets, as it does less damage than <ActionLink action=\"RAITON\"/> if any ticks miss and uses more mudras, resulting in more GCD delay for no gain.\n\t\t\t</Trans>,\n\t\t\ttiers: {\n\t\t\t\t1: SEVERITY.MINOR,\n\t\t\t\t2: SEVERITY.MEDIUM,\n\t\t\t\t3: SEVERITY.MAJOR,\n\t\t\t},\n\t\t\tvalue: badStds,\n\t\t\twhy: <Trans id=\"nin.ninjutsu.suggestions.st-doton.why\">\n\t\t\t\tYou cast a single-target Doton <Plural value={badStds} one=\"# time\" other=\"# times\"/>.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Trans, Plural} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {JOBS} from 'data/JOBS'\nimport {Cause, Event, Events} from 'event'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {CounterGauge, Gauge as CoreGauge} from 'parser/core/modules/Gauge'\nimport Suggestions, {TieredSuggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport React from 'react'\nimport {isSuccessfulHit} from 'utilities'\n\ntype GaugeModifier = Partial<Record<Event['type'], number>>\n\n// Constants\nconst BUNSHIN_GAIN = 5\nconst BUNSHIN_GAIN_KAMAITACHI = 10\nconst HELLFROG_TARGET_MINIMUM = 3\n\nconst OVERCAP_SEVERITY = {\n\t20: SEVERITY.MINOR,\n\t50: SEVERITY.MAJOR,\n}\nconst FROG_SEVERITY = {\n\t1: SEVERITY.MEDIUM,\n}\n\nexport class Ninki extends CoreGauge {\n\tstatic override title = t('nin.ninki.title')`Ninki Gauge`\n\n\t@dependency private suggestions!: Suggestions\n\n\tprivate ninkiGauge = this.add(new CounterGauge({\n\t\tgraph: {\n\t\t\tlabel: <Trans id=\"nin.ninki.resource.label\">Ninki</Trans>,\n\t\t\tcolor: JOBS.NINJA.colour,\n\t\t},\n\t}))\n\n\tprivate ninkiFilters = {\n\t\taction: [\n\t\t\tthis.data.actions.BHAVACAKRA.id,\n\t\t\tthis.data.actions.HELLFROG_MEDIUM.id,\n\t\t\tthis.data.actions.BUNSHIN.id,\n\t\t\tthis.data.actions.MEISUI.id,\n\t\t],\n\t\tcombo: [\n\t\t\tthis.data.actions.SPINNING_EDGE.id,\n\t\t\tthis.data.actions.GUST_SLASH.id,\n\t\t\tthis.data.actions.AEOLIAN_EDGE.id,\n\t\t\tthis.data.actions.ARMOR_CRUSH.id,\n\t\t\tthis.data.actions.DEATH_BLOSSOM.id,\n\t\t\tthis.data.actions.HAKKE_MUJINSATSU.id,\n\t\t],\n\t\tdamage: [\n\t\t\tthis.data.actions.HURAIJIN.id,\n\t\t\tthis.data.actions.FORKED_RAIJU.id,\n\t\t\tthis.data.actions.FLEETING_RAIJU.id,\n\t\t\tthis.data.actions.THROWING_DAGGER.id,\n\t\t\tthis.data.actions.MUG.id,\n\t\t],\n\t}\n\n\tprivate ninkiModifiers = new Map<number, GaugeModifier>([\n\t\t// Builders\n\t\t[this.data.actions.SPINNING_EDGE.id, {combo: 5}],\n\t\t[this.data.actions.GUST_SLASH.id, {combo: 5}],\n\t\t[this.data.actions.AEOLIAN_EDGE.id, {combo: 15}],\n\t\t[this.data.actions.ARMOR_CRUSH.id, {combo: 15}],\n\t\t[this.data.actions.DEATH_BLOSSOM.id, {combo: 5}],\n\t\t[this.data.actions.HAKKE_MUJINSATSU.id, {combo: 5}],\n\t\t[this.data.actions.HURAIJIN.id, {damage: 5}],\n\t\t[this.data.actions.FORKED_RAIJU.id, {damage: 5}],\n\t\t[this.data.actions.FLEETING_RAIJU.id, {damage: 5}],\n\t\t[this.data.actions.THROWING_DAGGER.id, {damage: 5}],\n\t\t[this.data.actions.MUG.id, {damage: 40}],\n\t\t[this.data.actions.MEISUI.id, {action: 50}],\n\t\t// Spenders\n\t\t[this.data.actions.BHAVACAKRA.id, {action: -50}],\n\t\t[this.data.actions.HELLFROG_MEDIUM.id, {action: -50}],\n\t\t[this.data.actions.BUNSHIN.id, {action: -50}],\n\t])\n\n\tprivate erroneousFrogs: number = 0 // This is my new band name\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\t\tconst pets = this.parser.pull.actors.filter(actor => actor.owner === this.parser.actor).map(actor => actor.id)\n\t\tthis.addEventHook(playerFilter.type('action').action(oneOf(this.ninkiFilters.action)), this.onGaugeModifier)\n\t\tthis.addEventHook(playerFilter.type('combo').action(oneOf(this.ninkiFilters.combo)), this.onGaugeModifier)\n\t\tthis.addEventHook(playerFilter.type('damage').cause(filter<Cause>().action(oneOf(this.ninkiFilters.damage))), this.onDamage)\n\t\tthis.addEventHook(filter<Event>().source(oneOf(pets)).type('damage'), this.onBunshinHit)\n\t\tthis.addEventHook(playerFilter.type('damage').cause(filter<Cause>().action(this.data.actions.HELLFROG_MEDIUM.id)), this.onHellfrog)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onBunshinHit(event: Events['damage']) {\n\t\tif (event.cause.type === 'action' && event.cause.action === this.data.actions.PHANTOM_KAMAITACHI_BUNSHIN.id) {\n\t\t\tthis.ninkiGauge.modify(BUNSHIN_GAIN_KAMAITACHI)\n\t\t} else {\n\t\t\tthis.ninkiGauge.modify(BUNSHIN_GAIN)\n\t\t}\n\t}\n\n\tprivate onDamage(event: Events['damage']) {\n\t\tif (!isSuccessfulHit(event) || event.cause.type !== 'action') {\n\t\t\treturn\n\t\t}\n\n\t\tconst modifier = this.ninkiModifiers.get(event.cause.action)\n\t\tif (modifier != null) {\n\t\t\tconst amount = modifier[event.type] ?? 0\n\t\t\tthis.ninkiGauge.modify(amount)\n\t\t}\n\t}\n\n\tprivate onGaugeModifier(event: Events['action' | 'combo']) {\n\t\tconst modifier = this.ninkiModifiers.get(event.action)\n\t\tif (modifier != null) {\n\t\t\tconst amount = modifier[event.type] ?? 0\n\t\t\tthis.ninkiGauge.modify(amount)\n\t\t}\n\t}\n\n\tprivate onHellfrog(event: Events['damage']) {\n\t\tif (event.targets.length < HELLFROG_TARGET_MINIMUM) {\n\t\t\t// If we have a Hellfrog event with fewer than 3 targets, it should've been a Bhava instead\n\t\t\tthis.erroneousFrogs++\n\t\t}\n\t}\n\n\tprivate onComplete() {\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: 'https://xivapi.com/i/005000/005411.png',\n\t\t\tcontent: <Trans id=\"nin.ninki.suggestions.waste.content\">\n\t\t\t\tAvoid using <ActionLink action=\"MUG\"/> and <ActionLink action=\"MEISUI\"/> when above 40 Ninki and holding your Ninki spenders when near or at cap (with a few small exceptions) in order to maximize the number of spenders you can use over the course of a fight.\n\t\t\t</Trans>,\n\t\t\ttiers: OVERCAP_SEVERITY,\n\t\t\tvalue: this.ninkiGauge.overCap,\n\t\t\twhy: <Trans id=\"nin.ninki.suggestions.waste.why\">\n\t\t\t\tOvercapping caused you to lose {this.ninkiGauge.overCap} Ninki over the fight.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.HELLFROG_MEDIUM.icon,\n\t\t\tcontent: <Trans id=\"nin.ninki.suggestions.frog.content\">\n\t\t\t\tAvoid using <ActionLink action=\"HELLFROG_MEDIUM\"/> when you have fewer than three targets, as <ActionLink action=\"BHAVACAKRA\"/> is otherwise a potency gain.\n\t\t\t</Trans>,\n\t\t\ttiers: FROG_SEVERITY,\n\t\t\tvalue: this.erroneousFrogs,\n\t\t\twhy: <Trans id=\"nin.ninki.suggestions.frog.why\">\n\t\t\t\tYou used Hellfrog Medium <Plural value={this.erroneousFrogs} one=\"# time\" other=\"# times\"/> when other spenders were available.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n}\n","import {Events} from 'event'\nimport {CooldownDowntime} from 'parser/core/modules/CooldownDowntime'\n\nconst KASSATSU_FIRST_USE_OFFSET = 1000 // After opening Suiton\nconst MUG_FIRST_USE_OFFSET = 6000 // After second combo GCD\nconst BUNSHIN_FIRST_USE_OFFSET = 7000 // After second combo GCD (second weave)\nconst TRICK_FIRST_USE_OFFSET = 10000 // After fourth combo GCD\nconst DWAD_FIRST_USE_OFFSET = 12250 // After SF\nconst TCJ_FIRST_USE_OFFSET = 17250 // After two Ninjutsu\nconst MEISUI_FIRST_USE_OFFSET = 20750 // After TCJ\n\nexport class OGCDDowntime extends CooldownDowntime {\n\toverride trackedCds = [\n\t\t{\n\t\t\tcooldowns: [this.data.actions.KASSATSU],\n\t\t\tfirstUseOffset: KASSATSU_FIRST_USE_OFFSET,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.MUG],\n\t\t\tfirstUseOffset: MUG_FIRST_USE_OFFSET,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.BUNSHIN],\n\t\t\tfirstUseOffset: BUNSHIN_FIRST_USE_OFFSET,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.TRICK_ATTACK],\n\t\t\tfirstUseOffset: TRICK_FIRST_USE_OFFSET,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.DREAM_WITHIN_A_DREAM],\n\t\t\tfirstUseOffset: DWAD_FIRST_USE_OFFSET,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.TEN_CHI_JIN],\n\t\t\tfirstUseOffset: TCJ_FIRST_USE_OFFSET,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.MEISUI],\n\t\t\tfirstUseOffset: MEISUI_FIRST_USE_OFFSET,\n\t\t},\n\t]\n\n\tprivate dreamTimestamps: number[] = []\n\n\toverride countUsage(event: Events['action']) {\n\t\tif (event.action !== this.data.actions.DREAM_WITHIN_A_DREAM.id) {\n\t\t\treturn true\n\t\t}\n\n\t\tif (this.dreamTimestamps.indexOf(event.timestamp) > -1) {\n\t\t\treturn false\n\t\t}\n\n\t\tthis.dreamTimestamps.push(event.timestamp)\n\t\treturn true\n\t}\n}\n","import {Positionals as CorePositionals} from 'parser/core/modules/Positionals'\n\nexport class Positionals extends CorePositionals {\n\tpositionals = [\n\t\tthis.data.actions.ARMOR_CRUSH,\n\t\tthis.data.actions.TRICK_ATTACK,\n\t\tthis.data.actions.AEOLIAN_EDGE,\n\t]\n}\n","import {Trans, Plural} from '@lingui/react'\nimport {StatusLink} from 'components/ui/DbLink'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport {Data} from 'parser/core/modules/Data'\nimport Suggestions, {TieredSuggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\nexport class Raiju extends Analyser {\n\tstatic override handle = 'raiju'\n\n\t@dependency private actors!: Actors\n\t@dependency private data!: Data\n\t@dependency private suggestions!: Suggestions\n\n\tprivate currentStacks: number = 0\n\tprivate droppedStacks: number = 0\n\n\tprivate breakingGcds = [\n\t\tthis.data.actions.SPINNING_EDGE.id,\n\t\tthis.data.actions.GUST_SLASH.id,\n\t\tthis.data.actions.AEOLIAN_EDGE.id,\n\t\tthis.data.actions.ARMOR_CRUSH.id,\n\t\tthis.data.actions.DEATH_BLOSSOM.id,\n\t\tthis.data.actions.HAKKE_MUJINSATSU.id,\n\t\tthis.data.actions.HURAIJIN.id,\n\t]\n\n\toverride initialise() {\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\t\tthis.addEventHook(playerFilter.type('statusApply').status(this.data.statuses.RAIJU_READY.id), this.onRaijuReady)\n\t\tthis.addEventHook(playerFilter.type('statusRemove').status(this.data.statuses.RAIJU_READY.id), () => this.currentStacks = 0)\n\t\tthis.addEventHook(playerFilter.type('action').action(oneOf(this.breakingGcds)), this.onBreakingGcd)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onRaijuReady(event: Events['statusApply']) {\n\t\tthis.currentStacks = event.data ?? 1\n\t}\n\n\tprivate onBreakingGcd() {\n\t\tthis.droppedStacks += this.currentStacks\n\t\tthis.currentStacks = 0\n\t}\n\n\tprivate onComplete() {\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.FLEETING_RAIJU.icon,\n\t\t\tcontent: <Trans id=\"nin.raiju.suggestions.dropped.content\">\n\t\t\t\tAvoid using any of your non-Raiju melee GCDs while you have stacks of <StatusLink status=\"RAIJU_READY\"/>, as it will cause the stacks to fall off.\n\t\t\t</Trans>,\n\t\t\ttiers: {\n\t\t\t\t1: SEVERITY.MAJOR,\n\t\t\t},\n\t\t\tvalue: this.droppedStacks,\n\t\t\twhy: <Trans id=\"nin.raiju.suggestions.dropped.why\">\n\t\t\t\tYou dropped <Plural value={this.droppedStacks} one=\"# stack\" other=\"# stacks\"/> of Raiju Ready.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n}\n","import {Trans, Plural} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {ActionKey} from 'data/ACTIONS'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {EventHook} from 'parser/core/Dispatcher'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Data} from 'parser/core/modules/Data'\nimport Downtime from 'parser/core/modules/Downtime'\nimport Suggestions, {TieredSuggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport React from 'react'\nimport {matchClosestHigher} from 'utilities'\n\nconst OPTIMAL_GCD_COUNT = 4 // Opener should be Suiton > AE combo before Trick\n\nconst MUDRAS: ActionKey[] = [\n\t'TEN',\n\t'TEN_KASSATSU',\n\t'CHI',\n\t'CHI_KASSATSU',\n\t'JIN',\n\t'JIN_KASSATSU',\n]\n\nexport class TrickAttackUsage extends Analyser {\n\tstatic override handle = 'taUsage'\n\n\t@dependency private data!: Data\n\t@dependency private downtime!: Downtime\n\t@dependency private suggestions!: Suggestions\n\n\tprivate mudraActions: number[] = []\n\n\tprivate taCasts: number[] = []\n\tprivate lostTime: number = 0\n\tprivate gcdCount: number = 0\n\tprivate castHook?: EventHook<Events['action']>\n\n\toverride initialise() {\n\t\tthis.mudraActions = MUDRAS.map(k => this.data.actions[k].id)\n\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\t\t// Hook to track casts before the first Trick for the opener timing suggestion\n\t\tthis.castHook = this.addEventHook(playerFilter.type('action'), this.onCast)\n\t\tthis.addEventHook(playerFilter.type('action').action(this.data.actions.TRICK_ATTACK.id), this.onTrickAttack)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onCast(event: Events['action']) {\n\t\tconst action = this.data.getAction(event.action)\n\t\tif (event.timestamp >= this.parser.pull.timestamp && action?.onGcd && !this.mudraActions.includes(action.id)) {\n\t\t\t// Don't count the individual mudras as GCDs for this - they'll make the count screw if Suiton wasn't set up pre-pull\n\t\t\tthis.gcdCount++\n\t\t}\n\t}\n\n\tprivate onTrickAttack(event: Events['action']) {\n\t\tif (this.castHook != null) {\n\t\t\tthis.removeEventHook(this.castHook)\n\t\t\tthis.castHook = undefined\n\t\t}\n\n\t\tif (this.taCasts.length > 0) {\n\t\t\tconst lastCast = this.taCasts[this.taCasts.length - 1]\n\t\t\tconst taAvailable = lastCast + this.data.actions.TRICK_ATTACK.cooldown\n\t\t\tconst downtime = this.downtime.getDowntime(taAvailable, event.timestamp)\n\t\t\tthis.lostTime += Math.max((event.timestamp - taAvailable) - downtime, 0)\n\t\t}\n\n\t\tthis.taCasts.push(event.timestamp)\n\t}\n\n\tprivate onComplete() {\n\t\tif (this.taCasts.length > 0) {\n\t\t\tconst lastCast = this.taCasts[this.taCasts.length - 1]\n\t\t\t// lostTime is only the time they were actually holding it off CD, but we want to add in the CD time of the final cast for\n\t\t\t// calculating how many theoretical casts were lost. For example, 20s of holding + last cast 40s before the end of the fight\n\t\t\t// would mean that they could've squeezed in an extra cast with perfect timing.\n\t\t\tconst lostCasts = Math.floor((this.lostTime + (this.parser.currentEpochTimestamp - lastCast)) / this.data.actions.TRICK_ATTACK.cooldown)\n\t\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\t\ticon: this.data.actions.TRICK_ATTACK.icon,\n\t\t\t\tcontent: <Trans id=\"nin.ta-usage.suggestions.missed.content\">\n\t\t\t\t\tAvoid holding <ActionLink action=\"TRICK_ATTACK\"/> for extended periods of time. It's typically ideal to use it as close to on cooldown as possible in order to keep it aligned with raid buffs, as well as maximizing the number of uses per fight.\n\t\t\t\t</Trans>,\n\t\t\t\tvalue: lostCasts,\n\t\t\t\ttiers: {\n\t\t\t\t\t1: SEVERITY.MEDIUM,\n\t\t\t\t\t2: SEVERITY.MAJOR,\n\t\t\t\t},\n\t\t\t\twhy: <Trans id=\"nin.ta-usage.suggestions.missed.why\">\n\t\t\t\t\tYou delayed Trick Attack for a cumulative {this.parser.formatDuration(this.lostTime)}, costing you <Plural value={lostCasts} one=\"# potential use\" other=\"# potential uses\"/>.\n\t\t\t\t</Trans>,\n\t\t\t}))\n\n\t\t\t// Suppressing this suggestion for any 6.1+ parses, since Trick isn't a raid buff anymore and it's not really worth updating/keeping around for Mug\n\t\t\tif (this.parser.patch.before('6.1')) {\n\t\t\t\tconst distanceFromOptimal = Math.abs(OPTIMAL_GCD_COUNT - this.gcdCount)\n\t\t\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\t\t\ticon: this.data.actions.TRICK_ATTACK.icon,\n\t\t\t\t\tcontent: <Trans id=\"nin.ta-usage.suggestions.opener.content\">\n\t\t\t\t\t\tAvoid unconventional timings for your first <ActionLink action=\"TRICK_ATTACK\"/> of the fight in order to line it up raid buffs. In most openers, Trick Attack should be weaved in approximately 8-9 seconds into the fight.\n\t\t\t\t\t</Trans>,\n\t\t\t\t\tvalue: distanceFromOptimal,\n\t\t\t\t\ttiers: {\n\t\t\t\t\t\t1: SEVERITY.MEDIUM,\n\t\t\t\t\t\t2: SEVERITY.MAJOR,\n\t\t\t\t\t},\n\t\t\t\t\twhy: <Trans id=\"nin.ta-usage.suggestions.opener.why\">\n\t\t\t\t\t\tYour first Trick Attack was <Plural value={this.gcdCount} one=\"# GCD\" other=\"# GCDs\"/> into your opener.\n\t\t\t\t\t</Trans>,\n\t\t\t\t}))\n\t\t\t}\n\t\t}\n\n\t\t// WHY ARE YOU EVEN PLAYING THIS JOB\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.TRICK_ATTACK.icon,\n\t\t\tcontent: <Trans id=\"nin.ta-usage.suggestions.none.content\">\n\t\t\t\t<ActionLink action=\"TRICK_ATTACK\"/> is a very powerful personal buff and should be used on cooldown, or as close to it as possible depending on the flow of the fight.\n\t\t\t</Trans>,\n\t\t\tvalue: this.taCasts.length,\n\t\t\ttiers: {\n\t\t\t\t0: SEVERITY.MAJOR,\n\t\t\t},\n\t\t\tmatcher: matchClosestHigher,\n\t\t\twhy: <Trans id=\"nin.ta-usage.suggestions.none.why\">\n\t\t\t\tYou didn't use Trick Attack once the entire fight.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Trans, Plural} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {ActionKey} from 'data/ACTIONS'\nimport {dependency} from 'parser/core/Injectable'\nimport {BuffWindow, EvaluatedAction, ExpectedActionsEvaluator, ExpectedGcdCountEvaluator, LimitedActionsEvaluator, NotesEvaluator, TrackedAction} from 'parser/core/modules/ActionWindow'\nimport {HistoryEntry} from 'parser/core/modules/ActionWindow/History'\nimport {GlobalCooldown} from 'parser/core/modules/GlobalCooldown'\nimport {SEVERITY} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\n// TCJ windows should have 5-6 Ninjutsu + 2-3 (or 3-4, with good ping) weaponskills, non-TCJ windows should have 3 Ninjutsu + 4 weaponskills\nconst BASE_GCDS_PER_WINDOW = 7\n\n// For opener detection - first Trick should be 8-9s into the fight, with a bit of wiggle room for late starts\nconst FIRST_TRICK_BUFFER = 12000\n\nconst MUDRAS: ActionKey[] = [\n\t'TEN',\n\t'TEN_KASSATSU',\n\t'CHI',\n\t'CHI_KASSATSU',\n\t'JIN',\n\t'JIN_KASSATSU',\n]\n\nclass TCJEvaluator extends NotesEvaluator {\n\n\t// Because this class is not an Analyser, it cannot use Data directly\n\t// to get the id for Ten Chi Jin, so it has to take it in here.\n\tprivate tcjId: number\n\n\tconstructor(tcjId: number) {\n\t\tsuper()\n\t\tthis.tcjId = tcjId\n\t}\n\n\theader = {\n\t\theader: <Trans id =\"nin.taWindow.chart.notes.header\">TCJ Used</Trans>,\n\t\taccessor: 'tcjused',\n\t}\n\n\toverride generateNotes(window: HistoryEntry<EvaluatedAction[]>) {\n\t\t// TODO - Add a note in here about Meisui-buffed Bhava, maybe?\n\t\treturn window.data.find(cast => cast.action.id === this.tcjId) ?\n\t\t\t<Trans id=\"nin.taWindow.chart.notes.yes\">Yes</Trans> :\n\t\t\t<Trans id=\"nin.taWindow.chart.notes.no\">No</Trans>\n\t}\n}\n\nexport class TrickAttackWindow extends BuffWindow {\n\tstatic override handle = 'taWindow'\n\tstatic override title = t('nin.taWindow.title')`Trick Attack Windows`\n\n\t@dependency globalCooldown!: GlobalCooldown\n\n\t// The Trick Attack debuff changed in 6.1, so we need to track a different one depending on the patch\n\toverride buffStatus = this.parser.patch.before('6.1') ? this.data.statuses.TRICK_ATTACK_VULNERABILITY_UP : this.data.statuses.TRICK_ATTACK\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tthis.ignoreActions(MUDRAS.map(k => this.data.actions[k].id))\n\n\t\tconst suggestionIcon = this.data.actions.TRICK_ATTACK.icon\n\t\tconst suggestionWindowName = <ActionLink action=\"TRICK_ATTACK\" showIcon={false}/>\n\t\tthis.addEvaluator(new ExpectedGcdCountEvaluator({\n\t\t\texpectedGcds: BASE_GCDS_PER_WINDOW,\n\t\t\tglobalCooldown: this.globalCooldown,\n\t\t\thasStacks: false,\n\t\t\tsuggestionIcon,\n\t\t\tsuggestionContent: <Trans id=\"nin.taWindow.suggestions.gcds.content\">\n\t\t\t\tWhile the exact number of GCDs per window will vary depending on whether <ActionLink action=\"TEN_CHI_JIN\"/> is up, every <ActionLink action=\"TRICK_ATTACK\"/> window should contain at least <Plural value={BASE_GCDS_PER_WINDOW} one=\"# GCD\" other=\"# GCDs\" />.\n\t\t\t</Trans>,\n\t\t\tsuggestionWindowName,\n\t\t\tseverityTiers: {\n\t\t\t\t1: SEVERITY.MEDIUM,\n\t\t\t\t2: SEVERITY.MAJOR,\n\t\t\t},\n\t\t\tadjustCount: this.adjustExpectedGcdCount.bind(this),\n\t\t}))\n\n\t\tthis.addEvaluator(new ExpectedActionsEvaluator({\n\t\t\texpectedActions: [\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.HYOSHO_RANRYU,\n\t\t\t\t\texpectedPerWindow: 1,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.RAITON,\n\t\t\t\t\texpectedPerWindow: 2,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.DREAM_WITHIN_A_DREAM,\n\t\t\t\t\texpectedPerWindow: 1,\n\t\t\t\t},\n\t\t\t],\n\t\t\tsuggestionIcon,\n\t\t\tsuggestionContent: <Trans id=\"nin.taWindow.suggestions.trackedactions.content\">\n\t\t\t\tEvery <ActionLink action=\"TRICK_ATTACK\"/> window should contain <ActionLink action=\"HYOSHO_RANRYU\"/>, 2 <ActionLink action=\"RAITON\"/> casts, and <ActionLink action=\"DREAM_WITHIN_A_DREAM\"/> in order to maximize damage.\n\t\t\t</Trans>,\n\t\t\tsuggestionWindowName,\n\t\t\tseverityTiers: {\n\t\t\t\t1: SEVERITY.MEDIUM,\n\t\t\t\t3: SEVERITY.MAJOR,\n\t\t\t},\n\t\t\tadjustCount: this.adjustExpectedRaitonCount.bind(this),\n\t\t}))\n\n\t\tthis.addEvaluator(new LimitedActionsEvaluator({\n\t\t\texpectedActions: [\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.ARMOR_CRUSH,\n\t\t\t\t\texpectedPerWindow: 0,\n\t\t\t\t},\n\t\t\t],\n\t\t\tsuggestionIcon: this.data.actions.ARMOR_CRUSH.icon,\n\t\t\tsuggestionContent: <Trans id=\"nin.taWindow.suggestions.badtrackedactions.content\">\n\t\t\t\tAvoid using <ActionLink action=\"ARMOR_CRUSH\"/> under <ActionLink action=\"TRICK_ATTACK\"/> unless <ActionLink action=\"HUTON\"/> is about to fall off or you can only hit the flank positional, as <ActionLink action=\"AEOLIAN_EDGE\"/> is otherwise a higher potency finisher.\n\t\t\t</Trans>,\n\t\t\tsuggestionWindowName,\n\t\t\tseverityTiers: {\n\t\t\t\t1: SEVERITY.MINOR,\n\t\t\t},\n\t\t}))\n\n\t\tthis.addEvaluator(new TCJEvaluator(this.data.actions.TEN_CHI_JIN.id))\n\t}\n\n\tprivate adjustExpectedGcdCount(window: HistoryEntry<EvaluatedAction[]>) {\n\t\treturn window.data.find(cast => cast.action.id === this.data.actions.TEN_CHI_JIN.id) ? 1 : 0\n\t}\n\n\tprivate adjustExpectedRaitonCount(window: HistoryEntry<EvaluatedAction[]>, action: TrackedAction) {\n\t\tconst bufferedWindowStart = window.start - FIRST_TRICK_BUFFER\n\n\t\tif (action.action.id === this.data.actions.RAITON.id) {\n\t\t\t// We push one Raiton outside the Trick window in the opener to fit an extra Bhava\n\t\t\tif (bufferedWindowStart <= this.parser.pull.timestamp) {\n\t\t\t\treturn -1\n\t\t\t}\n\t\t}\n\n\t\treturn 0\n\t}\n}\n","import {Weaving as CoreWeaving, Weave} from 'parser/core/modules/Weaving'\n\nexport class Weaving extends CoreWeaving {\n\toverride getMaxWeaves(weave: Weave) {\n\t\tlet dreams = 0\n\n\t\tfor (let i = 0; i < weave.weaves.length; i++) {\n\t\t\tif (weave.weaves[i].action === this.data.actions.DREAM_WITHIN_A_DREAM.id) {\n\t\t\t\tdreams++\n\t\t\t}\n\t\t}\n\n\t\t// If duplicate DWaD events are seen, don't penalize the extra events as bad weaves - the data source generated duplicate events that we should ignore\n\t\treturn super.getMaxWeaves(weave) + Math.max(0, dreams - 1)\n\t}\n}\n","import {ActionTimeline} from './ActionTimeline'\nimport {Combos} from './Combos'\nimport {Defensives} from './Defensives'\nimport {Huton} from './Huton'\nimport {HutonCastTime} from './HutonCastTime'\nimport {Kassatsu} from './Kassatsu'\nimport {Ninjutsu} from './Ninjutsu'\nimport {Ninki} from './Ninki'\nimport {OGCDDowntime} from './OGCDDowntime'\nimport {Positionals} from './Positionals'\nimport {Raiju} from './Raiju'\nimport {TrickAttackUsage} from './TrickAttackUsage'\nimport {TrickAttackWindow} from './TrickAttackWindow'\nimport {Weaving} from './Weaving'\n\nexport default [\n\tActionTimeline,\n\tCombos,\n\tDefensives,\n\tHuton,\n\tHutonCastTime,\n\tKassatsu,\n\tNinjutsu,\n\tNinki,\n\tPositionals,\n\tOGCDDowntime,\n\tRaiju,\n\tTrickAttackUsage,\n\tTrickAttackWindow,\n\tWeaving,\n]\n","require('../../modules/es.math.trunc');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Math.trunc;\n","var $ = require('../internals/export');\n\nvar ceil = Math.ceil;\nvar floor = Math.floor;\n\n// `Math.trunc` method\n// https://tc39.es/ecma262/#sec-math.trunc\n$({ target: 'Math', stat: true }, {\n  trunc: function trunc(it) {\n    return (it > 0 ? floor : ceil)(it);\n  }\n});\n","var parent = require('../../es/math/trunc');\n\nmodule.exports = parent;\n"],"names":["module","exports","ItemDepth","ActionTimeline","CastTime","Cooldowns","Data","Timeline","resolvedRows","groupRows","action","this","addRow","content","constructor","rows","config","resolvedConfig","resolveConfig","push","addEventHook","onComplete","populatedGroups","row","populateRow","forEach","specifier","cooldowns","groups","group","add","allGroups","has","finalConfig","Array","isArray","ensureArray","existingRow","get","isDefined","firstContent","label","Trans","id","data","actions","name","cooldownHistory","timeline","ContainerRow","order","collapse","set","addCooldownItems","addChargeItems","chargeHistory","history","entry","duration","getCooldownDuration","start","parser","pull","timestamp","end","addItem","SimpleItem","className","item","delta","ActionItem","depth","ACTION","ChargeGainItem","CHARGE_GAIN","endReason","CooldownEndReason","castTime","forAction","Math","max","Analyser","handle","debug","dependency","Content","styles","Icon","BaseItem","DEFENSIVE_ROLE_ACTIONS","Defensives","CooldownDowntime","trackedDefensives","headerContent","JOBS","actor","job","role","key","roleAction","defensive","getUses","length","totalAdditionalUses","acc","usage","getAdditionalUsageData","chargesBeforeNextUse","getUsageCount","Fragment","icon","exclusive","styled","fluid","panels","index","title","getMaxUses","compact","unstackable","celled","tryGetAdditionalUseRow","getUsageRow","formatEpochTimestamp","circular","size","onClick","show","availableTimestamp","currentCharges","charges","chargesAvailableEvent","current","cooldown","nextEntry","historyEntry","useByTimestamp","floor","displayOrder","DISPLAY_ORDER","cooldownDowntime","estimateHelp","__all","legacyFflogs","GlobalCooldown","Statistics","SpeedAdjustments","speedAdjustments","getAdjustedDuration","BASE_GCD","isAdjustmentEstimated","estimated","isEstimated","statistics","SimpleStatistic","ATTACK","value","formatDuration","getDuration","info","source","report","meta","undefined","Positionals","Checklist","positionalResults","positionals","filter","type","cause","matchCauseActionId","positional","onCast","event","getAction","positionalResult","getOrCreatePositionalResult","positionalHit","targets","bonusPercent","hits","misses","result","missed_positional_combo_bonus_percent","calculateBonusPercent","getBasePotency","getPotencyWithMods","BonusModifier","missedPositionalBonusPercents","base","bonus","relative_timestamp","relativeTimestamp","checklist","Rule","description","requirements","positionalRequirement","actual","expected","percent","Requirement","weight","overrideDisplay","toFixed","total","textAlign","numHits","numMisses","success","style","whiteSpace","showName","positive","negative","miss","createTimelineButton","CAST_TIME_MAX_WEAVES","WEAVING_SEVERITY","SEVERITY","Weaving","Invulnerability","Suggestions","suggestionIcon","moduleLink","cursor","scrollTo","message","suggestionContent","severity","weaves","ongoingCastEvent","leadingGcdEvent","trailingGcdEvent","badWeaves","playerFilter","onBeginCast","clearWeave","autoAttack","isOgcd","saveIfBad","suggestions","TieredSuggestion","why","tiers","leadingTimestamp","gcdTimeDiff","invulnerability","weave","isBadWeave","onGcd","weaveCount","isActive","types","recast","recastForEvent","getMaxWeaves","forEvent","matchClosestLower","events","CoreActionTimeline","Combos","ACTIONS","CoreCombos","SHADE_SHIFT","CoreDefensives","HUTON_MAX_DURATION_MILLIS","HUTON_EXTENSION_SHORT","HUTON_EXTENSION_MILLIS","BOSS_ADJUSTMENTS","Huton","Death","hutonExtensionMillis","pair","highEstimate","encounter","clipped","downtime","badAcs","lowEstimate","lastEventTime","pets","actors","owner","oneOf","HUTON","HURAIJIN","onHutonCast","onHutonCombo","PHANTOM_KAMAITACHI_BUNSHIN","onKamaitachi","onDeath","onRaise","estimate","elapsedTime","handleHutonRecast","actionId","amount","newDuration","ARMOR_CRUSH","min","extension","handleHutonExtension","round","getHutonAverages","currentDuration","death","deadTime","uptime","Message","warning","target","HutonCastTime","pomIndex","setPercentageAdjustment","Kassatsu","Actors","kassatsuSpent","kassatsuWastes","kassatsuUses","FUMA_SHURIKEN","GOKA_MEKKYAKU","RAITON","HYOSHO_RANRYU","DOTON","SUITON","RABBIT_MEDIUM","Number","onNinjutsuCast","status","statuses","KASSATSU","onRemoveKassatsu","abilityId","hasStatus","Suggestion","generalBads","Ninjutsu","hyotonCount","rabbitCount","HYOTON","HYOTON_TCJ","DOTON_TCJ","onDotonCast","matchCauseStatus","ticks","finishDotonWindow","tcj","TEN_CHI_JIN","prepull","badTcjs","badAoes","badStds","cast","every","tick","accum","appraiseDotonCasts","DOTON_TICK_TARGET","OVERCAP_SEVERITY","FROG_SEVERITY","Ninki","ninkiGauge","CounterGauge","graph","color","ninkiFilters","BHAVACAKRA","HELLFROG_MEDIUM","BUNSHIN","MEISUI","combo","SPINNING_EDGE","GUST_SLASH","AEOLIAN_EDGE","DEATH_BLOSSOM","HAKKE_MUJINSATSU","damage","FORKED_RAIJU","FLEETING_RAIJU","THROWING_DAGGER","MUG","ninkiModifiers","erroneousFrogs","onGaugeModifier","onDamage","onBunshinHit","onHellfrog","modify","isSuccessfulHit","modifier","overCap","CoreGauge","OGCDDowntime","trackedCds","firstUseOffset","TRICK_ATTACK","DREAM_WITHIN_A_DREAM","dreamTimestamps","CorePositionals","Raiju","currentStacks","droppedStacks","breakingGcds","RAIJU_READY","onRaijuReady","onBreakingGcd","MUDRAS","TrickAttackUsage","Downtime","mudraActions","taCasts","lostTime","gcdCount","castHook","k","onTrickAttack","removeEventHook","taAvailable","getDowntime","lastCast","lostCasts","currentEpochTimestamp","patch","before","distanceFromOptimal","abs","matcher","matchClosestHigher","TCJEvaluator","tcjId","header","accessor","window","NotesEvaluator","TrickAttackWindow","buffStatus","TRICK_ATTACK_VULNERABILITY_UP","ignoreActions","suggestionWindowName","showIcon","addEvaluator","ExpectedGcdCountEvaluator","expectedGcds","globalCooldown","hasStacks","BASE_GCDS_PER_WINDOW","severityTiers","adjustCount","adjustExpectedGcdCount","bind","ExpectedActionsEvaluator","expectedActions","expectedPerWindow","adjustExpectedRaitonCount","LimitedActionsEvaluator","bufferedWindowStart","BuffWindow","dreams","i","CoreWeaving","path","trunc","$","ceil","stat","it","parent"],"sourceRoot":""}