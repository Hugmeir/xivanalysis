{"version":3,"file":"assets/jobs-rpr.63a895a5.js","mappings":"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","sources":["webpack://@xivanalysis/client/./node_modules/@babel/runtime-corejs3/core-js-stable/math/trunc.js","webpack://@xivanalysis/client/./src/parser/core/modules/ActionTimeline/ActionTimeline.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/ActionTimeline/ActionTimeline.module.css?2f05","webpack://@xivanalysis/client/./src/parser/core/modules/CastTime.ts","webpack://@xivanalysis/client/./src/parser/core/modules/Positionals.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/Statuses.ts","webpack://@xivanalysis/client/./src/parser/core/modules/Tincture.ts","webpack://@xivanalysis/client/./src/parser/core/modules/Weaving.tsx","webpack://@xivanalysis/client/./src/parser/jobs/rpr/modules/ActionTimeline.tsx","webpack://@xivanalysis/client/./src/parser/jobs/rpr/modules/AoE.ts","webpack://@xivanalysis/client/./src/parser/jobs/rpr/modules/DISPLAY_ORDER.ts","webpack://@xivanalysis/client/./src/parser/jobs/rpr/constants.ts","webpack://@xivanalysis/client/./src/parser/jobs/rpr/modules/ArcaneCircle.tsx","webpack://@xivanalysis/client/./src/parser/jobs/rpr/modules/Combos.ts","webpack://@xivanalysis/client/./src/parser/jobs/rpr/modules/CooldownDowntime.ts","webpack://@xivanalysis/client/./src/parser/jobs/rpr/modules/DeathGauge.tsx","webpack://@xivanalysis/client/./src/parser/jobs/rpr/modules/DeathsDesign.tsx","webpack://@xivanalysis/client/./src/parser/jobs/rpr/modules/Defensives.ts","webpack://@xivanalysis/client/./src/parser/jobs/rpr/modules/Enshroud.tsx","webpack://@xivanalysis/client/./src/parser/jobs/rpr/modules/HarvestMoon.tsx","webpack://@xivanalysis/client/./src/parser/jobs/rpr/modules/OtherGauges.tsx","webpack://@xivanalysis/client/./src/parser/jobs/rpr/modules/Positionals.ts","webpack://@xivanalysis/client/./src/parser/jobs/rpr/modules/Procs.tsx","webpack://@xivanalysis/client/./src/parser/jobs/rpr/modules/Reaver.tsx","webpack://@xivanalysis/client/./src/parser/jobs/rpr/modules/Tincture.tsx","webpack://@xivanalysis/client/./src/parser/jobs/rpr/modules/Weaving.tsx","webpack://@xivanalysis/client/./src/parser/jobs/rpr/modules/index.ts","webpack://@xivanalysis/client/./node_modules/core-js-pure/es/math/trunc.js","webpack://@xivanalysis/client/./node_modules/core-js-pure/modules/es.math.trunc.js","webpack://@xivanalysis/client/./node_modules/core-js-pure/stable/math/trunc.js"],"sourcesContent":["module.exports = require(\"core-js-pure/stable/math/trunc\");","import {Trans} from '@lingui/react'\nimport {Action, ActionKey} from 'data/ACTIONS'\nimport {Analyser} from 'parser/core/Analyser'\nimport {dependency} from 'parser/core/Injectable'\nimport CastTime from 'parser/core/modules/CastTime'\nimport {ChargeHistoryEntry, CooldownEndReason, CooldownGroup, CooldownHistoryEntry, Cooldowns, SelectionSpecifier} from 'parser/core/modules/Cooldowns'\nimport {Data} from 'parser/core/modules/Data'\nimport {ActionItem, BaseItem, ContainerRow, SimpleItem, Timeline} from 'parser/core/modules/Timeline'\nimport React, {ReactNode} from 'react'\nimport {Icon} from 'semantic-ui-react'\nimport {ensureArray, isDefined} from 'utilities'\nimport styles from './ActionTimeline.module.css'\n\nconst ANIMATION_LOCK = 100\n\n// We're excluding the Action interface as it's unessecary for this config format, and complicates the discrimination later.\ntype RowSpecifierEntry = Exclude<SelectionSpecifier, Action>\n\n/**\n * One or more actions, action keys, or cooldown group IDs. The special-case\n * value \"GCD\" is available for selection of the GCD cooldown group.\n */\nexport type RowSpecifier = RowSpecifierEntry | RowSpecifierEntry[]\n\n/** Advanced configuration options for a row. */\nexport interface ActionRowConfig {\n\t/** Specifier(s) for items that should be displayed in this row. */\n\tcontent: RowSpecifier\n\t/** Label to display for the row. */\n\tlabel?: ReactNode\n\t/** Order of the row within the timeline. */\n\torder?: number\n}\n\n/** Configuration for a single row. */\nexport type ActionRow = RowSpecifier | ActionRowConfig\n\n// Internal row config used within the module\ntype InternalRowConfig =\n\t& Omit<ActionRowConfig, 'content'>\n\t& {content: readonly SelectionSpecifier[]}\n\nenum ItemDepth {\n\tCHARGE_GAIN = 0,\n\tACTION = 1,\n}\n\nexport class ActionTimeline extends Analyser {\n\tstatic override handle = 'actionTimeline'\n\tstatic override debug = false\n\n\t/**\n\t * Configuration for the rows generated by this module. Any cooldown groups\n\t * not represented in this configuration will be added to automatically\n\t * generated rows in order of use.\n\t */\n\tstatic rows: ActionRow[] = [\n\t\t{content: 'GCD', order: -97},\n\t]\n\n\t@dependency private castTime!: CastTime\n\t@dependency private cooldowns!: Cooldowns\n\t@dependency private data!: Data\n\t@dependency private timeline!: Timeline\n\n\tprivate resolvedRows: InternalRowConfig[] = []\n\tprivate groupRows = new Map<CooldownGroup, ContainerRow>()\n\n\t/** Retrieve the timeline row representing the specified action. */\n\tgetRow(action: ActionKey | Action) {\n\t\treturn this.addRow({content: [action]})\n\t}\n\n\toverride initialise() {\n\t\t// Add rows for all the configured entries\n\t\tfor (const config of (this.constructor as typeof ActionTimeline).rows) {\n\t\t\tconst resolvedConfig = this.resolveConfig(config)\n\t\t\tthis.resolvedRows.push(resolvedConfig)\n\t\t\tthis.addRow(resolvedConfig)\n\t\t}\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onComplete() {\n\t\t// Track the groups with configured rows so backfill doesn't duplicate\n\t\tconst populatedGroups = new Set<number>()\n\n\t\t// Add rows for all the configured entries\n\t\tfor (const config of this.resolvedRows) {\n\t\t\tconst row = this.addRow(config)\n\t\t\tthis.populateRow(row, config)\n\t\t\tconfig.content.forEach(specifier =>\n\t\t\t\tthis.cooldowns.groups(specifier).forEach(group => populatedGroups.add(group))\n\t\t\t)\n\t\t}\n\n\t\t// Figure out what groups have not been explicitly configured and build rows for them\n\t\tthis.cooldowns.allGroups()\n\t\t\t.filter(group => !populatedGroups.has(group))\n\t\t\t.forEach(group => {\n\t\t\t\tconst config = {content: [group]}\n\t\t\t\tconst row = this.addRow(config)\n\t\t\t\tthis.populateRow(row, config)\n\t\t\t})\n\t}\n\n\tprivate resolveConfig(config: ActionRow): InternalRowConfig {\n\t\t// Standardise the simple config into the main config shape\n\t\tlet finalConfig = config\n\t\tif (typeof finalConfig !== 'object' || Array.isArray(finalConfig)) {\n\t\t\tfinalConfig = {content: finalConfig}\n\t\t}\n\t\treturn {\n\t\t\t...finalConfig,\n\t\t\tcontent: ensureArray(finalConfig.content),\n\t\t}\n\t}\n\n\tprivate addRow(config: InternalRowConfig) {\n\t\t// If there's already a row for one of the specifiers, use it\n\t\tconst groups = config.content.flatMap(specifier => this.cooldowns.groups(specifier))\n\t\tconst existingRow = groups\n\t\t\t.map(group => this.groupRows.get(group))\n\t\t\t.find(isDefined)\n\t\tif (existingRow != null) {\n\t\t\treturn existingRow\n\t\t}\n\n\t\t// Using an IIFE because pattern matching isn't in the spec yet\n\t\tconst firstContent = config.content[0]\n\t\tconst label = (() => {\n\t\t\tif (config.label != null) { return config.label }\n\t\t\tif (firstContent === 'GCD')  { return <Trans id=\"core.action-timeline.label.gcd\">GCD</Trans> }\n\t\t\tif (typeof firstContent === 'string') { return this.data.actions[firstContent].name }\n\t\t\tif (typeof firstContent === 'number') { return this.cooldowns.cooldownHistory(firstContent)[0]?.action.name }\n\t\t\treturn firstContent.name\n\t\t})()\n\n\t\t// Build the row and save it to the groups for this config\n\t\t// TODO: collision handling?\n\t\tconst row = this.timeline.addRow(new ContainerRow({\n\t\t\tlabel,\n\t\t\torder: config.order,\n\t\t\tcollapse: true,\n\t\t}))\n\t\tgroups.forEach(group => this.groupRows.set(group, row))\n\n\t\treturn row\n\t}\n\n\tprivate populateRow(row: ContainerRow, {content}: InternalRowConfig) {\n\t\t// Add all the items\n\t\tthis.addCooldownItems(row, content.flatMap(specifier => this.cooldowns.cooldownHistory(specifier)))\n\t\tthis.addChargeItems(row, content.flatMap(specifier => this.cooldowns.chargeHistory(specifier)))\n\t}\n\n\tprivate addCooldownItems(row: ContainerRow, history: CooldownHistoryEntry[]) {\n\t\tfor (const entry of history) {\n\t\t\tconst duration = this.getCooldownDuration(entry)\n\n\t\t\t// TODO: with the adjusted cast time we might get some overlaps, should we try to avoid that?]\n\t\t\t// TODO: Add interrupt visuals. CD2 only records interrupts within the bounds of a cooldown, so we'll need to track it in some manner for long-cast actions.\n\t\t\tconst start = entry.start - this.parser.pull.timestamp\n\t\t\tconst end = start + duration\n\t\t\trow.addItem(new SimpleItem({\n\t\t\t\tstart,\n\t\t\t\tend,\n\t\t\t\tcontent: <div className={styles.cooldown}/>,\n\t\t\t}))\n\t\t}\n\t}\n\n\tprivate addChargeItems(row: ContainerRow, history: ChargeHistoryEntry[]) {\n\t\tfor (const entry of history) {\n\t\t\tconst item = entry.delta < 0\n\t\t\t\t? new ActionItem({\n\t\t\t\t\tdepth: ItemDepth.ACTION,\n\t\t\t\t\tstart: entry.timestamp - this.parser.pull.timestamp,\n\t\t\t\t\taction: entry.action,\n\t\t\t\t})\n\t\t\t\t: new ChargeGainItem({\n\t\t\t\t\tdepth: ItemDepth.CHARGE_GAIN,\n\t\t\t\t\tstart: entry.timestamp - this.parser.pull.timestamp,\n\t\t\t\t})\n\t\t\trow.addItem(item)\n\t\t}\n\t}\n\n\tprivate getCooldownDuration(entry: CooldownHistoryEntry) {\n\t\tlet duration = entry.end - entry.start\n\n\t\t// If the cooldown expired naturally, it _may_ have a cast time greater than its cooldown.\n\t\tif (entry.endReason === CooldownEndReason.EXPIRED) {\n\t\t\tconst castTime = this.castTime.forAction(entry.action.id, entry.start) ?? 0\n\n\t\t\t// We add the animation lock constant to the cast time to mimic the game's\n\t\t\t// behaviour - also sometimes known as \"caster tax\".\n\t\t\tduration = Math.max(duration, castTime + ANIMATION_LOCK)\n\t\t}\n\n\t\treturn duration\n\t}\n}\n\nclass ChargeGainItem extends BaseItem {\n\tContent = () => (\n\t\t<div className={styles.chargeGain}>\n\t\t\t<Icon name=\"angle double up\" className={styles.icon}/>\n\t\t</div>\n\t)\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"backgroundColour\":\"rgba(213, 221, 246, .4)\",\"chargeColor\":\"color(rgba(213, 221, 246, .4) a(100%) l(-20%))\",\"cooldown\":\"ActionTimeline-module_cooldown__3u1x3\",\"chargeGain\":\"ActionTimeline-module_chargeGain__3-Of9\",\"icon\":\"ActionTimeline-module_icon__8OvsF\"};","import {Event, Events} from 'event'\nimport {Analyser} from '../Analyser'\nimport {filter} from '../filter'\nimport {dependency} from '../Injectable'\nimport {Data} from './Data'\nimport {SpeedAdjustments} from './SpeedAdjustments'\n\nconst MIN_RECAST_TIME = 1500\n\ntype AffectsWhichTime =\n\t| 'cast'\n\t| 'recast'\n\t| 'both'\n\nexport interface CastTimeAdjustment {\n\tactions: number[] | 'all',\n\ttype: 'time' | 'percentage'\n\tadjustment: number,\n\taffectsWhich: AffectsWhichTime,\n\tstart: number,\n\tend?: number\n}\n\nexport default class CastTime extends Analyser {\n\tstatic override handle = 'castTime'\n\n\t@dependency data!: Data\n\t@dependency speedAdjustments!: SpeedAdjustments\n\n\tprivate castTimes: CastTimeAdjustment[] = []\n\tprivate scIndex: number | null = null\n\n\toverride initialise() {\n\t\t// Only going to deal with SC here, job-specific can do it themselves\n\t\tconst switftCastFilter = filter<Event>()\n\t\t\t.target(this.parser.actor.id)\n\t\t\t.status(this.data.statuses.SWIFTCAST.id)\n\n\t\tthis.addEventHook(switftCastFilter.type('statusApply'), this.onApplySwiftcast)\n\t\tthis.addEventHook(switftCastFilter.type('statusRemove'), this.onRemoveSwiftcast)\n\t}\n\n\tprivate onApplySwiftcast(): void {\n\t\tthis.scIndex = this.setInstantCastAdjustment()\n\t}\n\n\tprivate onRemoveSwiftcast(): void {\n\t\tthis.reset(this.scIndex)\n\t\tthis.scIndex = null\n\t}\n\n\t// TODO: Update signatures to use objects instead of param vomit, separate PR tho\n\t/**\n\t * Sets a cast time adjustment for a flat time amount per cast (See: Lightspeed, Dreadwyrm Trance, etc.)\n\t * @param actions The actions this adjustment applies to. Either an array of IDs, or the string 'all'\n\t * @param adjustment The amount of time that cast times are adjustmented by\n\t * @param start The beginning of the adjustment time range. Defaults to the current epoch timestamp\n\t * @param end The end of the adjustment time range. May be left null if the end of the range is not yet known\n\t * @returns The index number within the cast time adjustments collection, can be used to reset/end this adjustment later\n\t */\n\tpublic setTimeAdjustment(actions: number[] | 'all', adjustment: number, start: number = this.parser.currentEpochTimestamp, end?: number): number {\n\t\treturn this.set({actions, adjustment, start, end, type: 'time', affectsWhich: 'cast'})\n\t}\n\n\t/**\n\t * Shorthand function for setting casts to instant (ie. Swiftcast, Triplecast)\n\t * @param actions The actions this adjustment applies to. Either an array of IDs, or the string 'all'. Defaults to 'all'\n\t * @param start The beginning of the adjustment time range. Defaults to the current epoch timestamp\n\t * @param end The end of the adjustment time range. May be left null if the end of the range is not yet known\n\t * @returns The end of the adjustment time range. May be left null if the end of the range is not yet known\n\t */\n\tpublic setInstantCastAdjustment(actions: number[] | 'all' = 'all', start: number = this.parser.currentEpochTimestamp, end?: number): number {\n\t\treturn this.setPercentageAdjustment(actions, 0, 'cast', start, end)\n\t}\n\n\t/**\n\t * Sets a cast time adjustment for a percentage change per cast (See: Swiftcast, RDM's Doublecast trait, Ley Lines, etc.)\n\t * @param actions The actions this adjustment applies to. Either an array of IDs, or the string 'all'\n\t * @param adjustment The percentage multiplier to adjust the cast time to (ie 0 for instant cast, 0.85 for Ley Lines, 1.25 for a 25% slow)\n\t * @param affectsWhich Does this percentage change affect the recast time, cast time, or both? Defaults to cast time\n\t * @param start The beginning of the adjustment time range. Defaults to the current epoch timestamp\n\t * @param end The end of the adjustment time range. May be left null if the end of the range is not yet known\n\t * @returns The index number within the cast time adjustments collection, can be used to reset/end this adjustment later\n\t */\n\tpublic setPercentageAdjustment(actions: number[] | 'all', adjustment: number, affectsWhich: AffectsWhichTime = 'cast', start: number = this.parser.currentEpochTimestamp, end?: number): number {\n\t\treturn this.set({actions, adjustment, affectsWhich, start, end, type: 'percentage'})\n\t}\n\tprivate set(adjustment: CastTimeAdjustment): number {\n\t\tconst newLength = this.castTimes.push(adjustment)\n\n\t\treturn newLength - 1\n\t}\n\n\t/**\n\t * Sets the 'end' property of the specified cast time reduction range\n\t * @param id The index within the cast times adjustment collection (provided by the set functions)\n\t * @param timestamp The timestamp at which the reduction range ended. Defaults to the current epoch timestamp\n\t */\n\tpublic reset(id: number | null, timestamp = this.parser.currentEpochTimestamp): void {\n\t\tif (id == null) { return }\n\t\tconst ct = this.castTimes[id]\n\t\tif (!ct) { return }\n\t\tct.end = timestamp\n\t}\n\n\t/**\n\t * Returns the effective cast time for the specified event\n\t * @param event The event in question\n\t * @returns The actual cast time, either as the default, or the modified time if any modifiers were in effect. Returns undefined if the action cannot be determined, or has no default cast time\n\t */\n\tpublic forEvent(event: Events['action'] | Events['prepare']): number | undefined {\n\t\treturn this.forAction(event.action, event.timestamp)\n\t}\n\n\t/**\n\t * Returns the effective recast time for the specified event\n\t * @param event The event in question\n\t * @returns The actual recast time, either as the default, or the modified time if any modifiers were in effect. Returns undefined i fthe action cannot be determined, or has no gcdRecast/cooldown property defined\n\t */\n\tpublic recastForEvent(event: Events['action'] | Events['prepare']): number | undefined {\n\t\treturn this.recastForAction(event.action, event.timestamp)\n\t}\n\n\t/**\n\t * Returns the effective cast time for the specified action at the specified point in time\n\t * @param actionId The action in question\n\t * @param timestamp The timestamp in question\n\t * @returns The actual cast time, either as the default, or the modified time if any modifiers were in effect. Returns undefined if the action cannot be determined, or has no default cast time\n\t */\n\tpublic forAction(actionId: number, timestamp: number = this.parser.currentEpochTimestamp): number | undefined {\n\t\treturn this.getAdjustedTime(actionId, timestamp)\n\t}\n\n\t/**\n\t * Returns the effective recast time for the specified action at the specified point in time\n\t * @param actionId The action in question\n\t * @param timestamp Thetimestamp in question\n\t * @returns The actual recast time, either as the default, or the modified time if any modifiers were in effect. Returns undefined if the action cannot be determined, or has no gcdRecast/cooldown property defined\n\t */\n\tpublic recastForAction(actionId: number, timestamp: number = this.parser.currentEpochTimestamp): number | undefined {\n\t\treturn this.getAdjustedTime(actionId, timestamp, 'recast')\n\t}\n\n\t/**\n\t * Returns the adjusted time (either cast or recast) for the specified action at the specified point in time\n\t * @param actionId The action in question\n\t * @param timestamp The timestamp in question\n\t * @param forWhich Do we want the recast for this action, or the cast time? Defaults to cast time\n\t * @returns The adjusted time, if any adjustments exist at this timestamp, or the default if not. Will return undefined if the base time (recast/cooldown/cast) can't be determined\n\t */\n\tprivate getAdjustedTime(actionId: number, timestamp: number = this.parser.currentEpochTimestamp, forWhich: AffectsWhichTime = 'cast'): number | undefined {\n\t\t// Get any cast time modifiers active when the event took place\n\t\tconst matchingTimes = this.castTimes.filter(ct =>\n\t\t\t(ct.actions === 'all' || ct.actions.includes(actionId)) &&\n\t\t\tct.start <= timestamp &&\n\t\t\t(ct.end == null || ct.end >= timestamp) &&\n\t\t\t(ct.affectsWhich === 'both' || ct.affectsWhich === forWhich),\n\t\t)\n\n\t\tconst action = this.data.getAction(actionId)\n\t\tif (action == null) {\n\t\t\treturn undefined\n\t\t}\n\t\tlet defaultTime = forWhich === 'recast'\n\t\t\t? (action.gcdRecast != null ? action.gcdRecast : action.cooldown)\n\t\t\t: action.castTime\n\n\t\t// If the default comes back undefined, or already at or below the minimum action time (including instants), no adjustments to perform\n\t\tif (defaultTime == null || forWhich === 'recast' && defaultTime <= MIN_RECAST_TIME) {\n\t\t\treturn defaultTime\n\t\t}\n\n\t\tif (action.speedAttribute != null) {\n\t\t\tdefaultTime = this.speedAdjustments.getAdjustedDuration({\n\t\t\t\tduration: defaultTime,\n\t\t\t\tattribute: action.speedAttribute,\n\t\t\t})\n\t\t}\n\n\t\tlet flatReduction=0\n\t\tlet flatIncrease=0\n\t\tlet percentageAdjustment=1\n\n\t\tmatchingTimes.forEach(ct => {\n\t\t\tif (ct.type === 'time') {\n\t\t\t\t// Find the largest flat cast time reduction value\n\t\t\t\tif (ct.adjustment < 0 && ct.adjustment < flatReduction) {\n\t\t\t\t\tflatReduction = ct.adjustment\n\t\t\t\t}\n\t\t\t\t// Find the largest flat cast time increase value\n\t\t\t\tif (ct.adjustment > 0 && ct.adjustment > flatIncrease)  {\n\t\t\t\t\tflatIncrease = ct.adjustment\n\t\t\t\t}\n\t\t\t} else if (ct.type === 'percentage') {\n\t\t\t\t// Get the total percentage adjustment\n\t\t\t\tpercentageAdjustment *= ct.adjustment\n\t\t\t}\n\t\t})\n\n\t\t// Calculate the final cast time based on the flat and percentage reductions we've found\n\t\tconst flatAdjustedTime = Math.max(defaultTime + flatIncrease + flatReduction, 0) // Yes, plus flatReduction because it's already a negative value\n\t\tif (forWhich === 'recast' && flatAdjustedTime <= MIN_RECAST_TIME) {\n\t\t\t// Flat reductions reduced value below minimum action time, percentage adjustments will not be effective\n\t\t\treturn MIN_RECAST_TIME\n\t\t}\n\n\t\tif (percentageAdjustment === 0) {\n\t\t\t// Adjusted to instant\n\t\t\treturn 0\n\t\t}\n\n\t\t// Apply percentage speed modifiers, subject to clamping at the minimum action time\n\t\tlet adjustedTime = flatAdjustedTime * percentageAdjustment\n\t\tif (forWhich === 'recast') {\n\t\t\tadjustedTime = Math.max(adjustedTime, MIN_RECAST_TIME)\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-magic-numbers\n\t\treturn Math.floor(adjustedTime / 10) * 10 // adjustments are rounded down to the nearest 10ms in game\n\n\t\t/**\n\t\t * In the absence of easily-acquired slows to test with, I'm going to assume this is the right way to calculate this:\n\t\t * - Lightspeed/DWT even with slow should still have normal 2.5s casts be instant\n\t\t * - Swiftcast/Triple/Dualcast with slow should still be instant\n\t\t * Unsure what the actual interaction between slow and a non-instant percentage change like Ley Lines or a > 2.5s cast with Lightspeed/DWT (aka Raise) would be with a slow\n\t\t * We're also not tracking any slow statuses so this is probably overkill but hey, maybe Reaper or Sage will have a slow-myself-down-to-hit-harder mechanic .-.\n\t\t */\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {ActionLink, DataLink} from 'components/ui/DbLink'\nimport {Action, getPotencyWithMods, getBasePotency} from 'data/ACTIONS'\nimport {BonusModifier} from 'data/ACTIONS/type'\nimport {Event, Events} from 'event'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport Checklist, {Requirement, Rule} from 'parser/core/modules/Checklist'\nimport DISPLAY_ORDER from 'parser/core/modules/DISPLAY_ORDER'\nimport {Timeline} from 'parser/core/modules/Timeline'\nimport React from 'react'\nimport {Button, Table} from 'semantic-ui-react'\nimport {Analyser} from '../Analyser'\nimport {Data} from './Data'\n\nexport interface PositionalResult {\n\tpositional: Action,\n\thits: Array<Events['damage']>,\n\tmisses: Array<Events['damage']>\n}\n\nconst NO_BONUS_PERCENT = 0\n\nexport abstract class Positionals extends Analyser {\n\t@dependency protected data!: Data\n\t@dependency private checklist!: Checklist\n\t@dependency private timeline!: Timeline\n\n\tstatic override handle = 'positionals'\n\tstatic override title = t('core.positionals.title')`Positionals`\n\tstatic override displayOrder = DISPLAY_ORDER.POSITIONALS\n\n\tprivate positionalResults: PositionalResult[] = []\n\n\t/**\n\t * Jobs MUST provide a list of their positional actions\n\t *\n\t * TODO: This should just be a filter on all actions for the job for\n\t * any actions they have with positional potencies.\n\t */\n\tprotected abstract positionals: Action[]\n\n\toverride initialise() {\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>().source(this.parser.actor.id).type('damage')\n\t\t\t\t.cause(this.data.matchCauseActionId(this.positionals.map(positional => positional.id))), this.onCast)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onCast(event: Events['damage']) {\n\t\tif (event.cause.type !== 'action') {\n\t\t\treturn\n\t\t}\n\t\tconst action = this.data.getAction(event.cause.action)\n\t\tif (action == null) {\n\t\t\treturn\n\t\t}\n\t\tconst positional = this.positionals.find(positional => positional === action)\n\t\tif (positional == null) {\n\t\t\treturn\n\t\t}\n\n\t\tconst positionalResult = this.getOrCreatePositionalResult(positional)\n\n\t\t// All positionals are single target skills, so getting the 0 index\n\t\t// should be all we need to do here.\n\t\tif (this.positionalHit(positional, event.targets[0].bonusPercent)) {\n\t\t\tpositionalResult.hits.push(event)\n\t\t} else {\n\t\t\tpositionalResult.misses.push(event)\n\t\t}\n\t}\n\n\tprivate getOrCreatePositionalResult(positional: Action) {\n\t\tlet positionalResult = this.positionalResults.find(result => result.positional === positional)\n\t\tif (positionalResult == null) {\n\t\t\tpositionalResult = {\n\t\t\t\tpositional,\n\t\t\t\thits: [],\n\t\t\t\tmisses: [],\n\t\t\t}\n\t\t\tthis.positionalResults.push(positionalResult)\n\t\t}\n\t\treturn positionalResult\n\t}\n\n\t// The \"hit\" version of this function needs to check for more\n\t// things such as DRG's 5th hit combo buff and RPR's reaver buff.\n\t// Luckily, assessing misses is easy and sufficient for the purposes\n\t// of detecting positional hits.\n\tprivate missedPositionalBonusPercents(action: Action) {\n\t\tconst missed_positional_combo_bonus_percent = this.calculateBonusPercent(\n\t\t\tgetBasePotency(action),\n\t\t\tgetPotencyWithMods(action, [BonusModifier.COMBO], []))\n\t\treturn [...new Set([NO_BONUS_PERCENT, missed_positional_combo_bonus_percent])]\n\t}\n\n\t// Currently just checks that you didn't miss. Checking for hits would\n\t// otherwise be more complex.\n\tprivate positionalHit(action: Action, bonusPercent: number) {\n\t\treturn !this.missedPositionalBonusPercents(action).includes(bonusPercent)\n\t}\n\n\t// The bonusPercent is based on the final potency number.\n\tprivate calculateBonusPercent(base: number, bonus: number) {\n\t\treturn Math.trunc(100 * (1 - base / bonus))\n\t}\n\n\tprivate relativeTimestamp(timestamp: number) {\n\t\treturn timestamp - this.parser.pull.timestamp\n\t}\n\n\tprivate createTimelineButton(timestamp: number) {\n\t\tconst relative_timestamp = this.relativeTimestamp(timestamp)\n\t\treturn <Button\n\t\t\tcircular\n\t\t\tcompact\n\t\t\ticon=\"time\"\n\t\t\tsize=\"small\"\n\t\t\tonClick={() => this.timeline.show(relative_timestamp, relative_timestamp)}\n\t\t\tcontent={this.parser.formatEpochTimestamp(timestamp)}\n\t\t/>\n\t}\n\n\tprivate onComplete() {\n\t\tif (this.positionalResults.length === 0) {\n\t\t\treturn\n\t\t}\n\t\tthis.checklist.add(new Rule({\n\t\t\tname: <Trans id=\"core.positionals.checklist.title\">Hit your positionals</Trans>,\n\t\t\tdisplayOrder: DISPLAY_ORDER.POSITIONALS,\n\t\t\tdescription: <Trans id=\"core.positionals.checklist.description\">\n\t\t\t\tMelee DPS jobs have some skills that will do more damage when used from the rear or flank.\n\t\t\t\tMake sure you use those skills in the right position to do the most damage, or\n\t\t\t\tuse <DataLink action=\"TRUE_NORTH\"/> when you are out of position.\n\t\t\t</Trans>,\n\t\t\trequirements: this.positionalResults.map(this.positionalRequirement),\n\t\t}))\n\t}\n\tprivate positionalRequirement(result: PositionalResult) {\n\t\tconst actual = result.hits.length\n\t\tconst numMisses = result.misses.length\n\t\tconst expected = actual + numMisses\n\t\tlet percent = actual / expected * 100\n\t\tif (process.env.NODE_ENV === 'production') {\n\t\t\tpercent = Math.min(percent, 100)\n\t\t}\n\t\treturn new Requirement({\n\t\t\tname: <ActionLink {...result.positional}/>,\n\t\t\tpercent: percent,\n\t\t\tweight: expected,\n\t\t\toverrideDisplay: `${actual} / ${expected} (${percent.toFixed(2)}%)`,\n\t\t})\n\t}\n\n\toverride output(): React.ReactNode {\n\t\tconst totalMisses = this.positionalResults.reduce((total, current) => total + current.misses.length, 0)\n\n\t\tif (totalMisses === 0) { return }\n\n\t\treturn <Table compact unstackable celled textAlign=\"center\">\n\t\t\t<Table.Header>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong><Trans id=\"core.ui.positionals-table.header.action\">Action</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong><Trans id=\"core.ui.positionals-table.header.hits\">Hits</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong><Trans id=\"core.ui.positionals-table.header.misses\">Misses</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{\n\t\t\t\t\tthis.positionalResults.map(result => {\n\t\t\t\t\t\tconst numHits = result.hits.length\n\t\t\t\t\t\tconst numMisses = result.misses.length\n\t\t\t\t\t\tconst success = numMisses === 0\n\t\t\t\t\t\treturn <Table.Row key={result.positional.id}>\n\t\t\t\t\t\t\t<Table.Cell style={{whiteSpace: 'nowrap'}}>\n\t\t\t\t\t\t\t\t<ActionLink {...result.positional} showName={false} />\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t<Table.Cell\n\t\t\t\t\t\t\t\ttextAlign=\"center\"\n\t\t\t\t\t\t\t\tpositive={success}\n\t\t\t\t\t\t\t\tnegative={!success}\n\t\t\t\t\t\t\t>{numHits}/{numMisses + numHits}\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t<Table.Cell textAlign=\"left\">\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tresult.misses.map(miss => {\n\t\t\t\t\t\t\t\t\t\treturn this.createTimelineButton(miss.timestamp)\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t</Table.Row>\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</Table.Body>\n\t\t</Table>\n\t}\n}\n","import {Status, StatusKey} from 'data/STATUSES'\nimport {Events} from 'event'\nimport {ensureArray} from 'utilities'\nimport {Analyser} from '../Analyser'\nimport {dependency} from '../Injectable'\nimport {Actor, StatusEvent} from './Actors'\nimport {Data} from './Data'\nimport {Invulnerability} from './Invulnerability'\n\ninterface Edge {\n\tside: 'apply' | 'remove'\n\ttimestamp: number\n}\n\nexport class Statuses extends Analyser {\n\tstatic override handle = 'statuses'\n\tstatic override debug = false\n\n\t@dependency private readonly data!: Data\n\t@dependency private readonly invulnerability!: Invulnerability\n\n\t/**\n\t * Calculate the total uptime of the specified status across allspecified actors.\n\t * @param statusSpecifier Status to calculate uptime of.\n\t * @param targetSpecifier Target(s) that should be checked for the status.\n\t * @param source Source of statuses to filter by. Defaults to the parsed actor.\n\t */\n\tgetUptime(\n\t\tstatusSpecifier: StatusKey | Status,\n\t\ttargetSpecifier: Actor | Actor[],\n\t\tsource = this.parser.actor\n\t) {\n\t\t// Resolve arguments.\n\t\tconst status = typeof statusSpecifier === 'string'\n\t\t\t? this.data.statuses[statusSpecifier]\n\t\t\t: statusSpecifier\n\n\t\tconst targets = ensureArray(targetSpecifier)\n\n\t\t// Collect all the status history for the specified status/target/source combo.\n\t\tconst edges = targets.flatMap(target => this.edgesForActor(\n\t\t\ttarget,\n\t\t\ttarget.statusHistory.get(status.id)?.get(source.id) ?? []\n\t\t))\n\n\t\t// Edges are mapped from multiple potential targets; interlace by sorting by timestamp.\n\t\tedges.sort((a, b) => a.timestamp - b.timestamp)\n\n\t\t// Sum time when any of the specified targets had the status.\n\t\tconst meta = {uptime: 0, depth: 0, application: 0}\n\t\tfor (const edge of edges) {\n\t\t\tif (edge.side === 'apply') {\n\t\t\t\tif (meta.depth === 0) {\n\t\t\t\t\tmeta.application = edge.timestamp\n\t\t\t\t}\n\t\t\t\tmeta.depth ++\n\n\t\t\t} else {\n\t\t\t\tmeta.depth --\n\t\t\t\tif (meta.depth === 0) {\n\t\t\t\t\tmeta.uptime += edge.timestamp - meta.application\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.debug(`Status ${status.name} ${edge.side} at ${this.ft(edge.timestamp)}, depth=${meta.depth}`)\n\t\t}\n\n\t\treturn meta.uptime\n\t}\n\n\tprivate edgesForActor(target: Actor, events: StatusEvent[]) {\n\t\t// We can safely assume status events from an actor will alternate between apply and remove.\n\t\tconst edges: Edge[] = []\n\t\tlet apply: Events['statusApply'] | undefined\n\t\tlet refresh: Events['statusApply'] | undefined\n\n\t\tfor (const event of events) {\n\t\t\t// Track the initial application and refreshes.\n\t\t\tif (event.type === 'statusApply') {\n\t\t\t\tapply ??= event\n\t\t\t\trefresh = event\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif (apply == null) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Window has been closed, merge any edges in.\n\t\t\tedges.push(...this.splitRangeForInvulns(\n\t\t\t\ttarget,\n\t\t\t\tapply.timestamp,\n\t\t\t\tevent.timestamp\n\t\t\t))\n\t\t\tapply = undefined\n\t\t}\n\n\t\t// If we've got a dangling apply, build edges for it.\n\t\tif (apply != null) {\n\t\t\t// Try to find a reasonable remove time for the status, if it has a duration.  Cap to the end of the fight.\n\t\t\tconst statusDuration = this.data.getStatus(apply.status)?.duration\n\t\t\tconst remove = statusDuration == null\n\t\t\t\t? this.parser.currentEpochTimestamp\n\t\t\t\t: Math.min((refresh ?? apply).timestamp + statusDuration, this.parser.currentEpochTimestamp)\n\n\t\t\tedges.push(...this.splitRangeForInvulns(\n\t\t\t\ttarget,\n\t\t\t\tapply.timestamp,\n\t\t\t\tremove,\n\t\t\t))\n\t\t}\n\n\t\treturn edges\n\t}\n\n\tprivate splitRangeForInvulns(target: Actor, apply: number, remove: number): Edge[] {\n\t\tlet range = {apply, remove}\n\t\tconst finalRanges = [range]\n\n\t\t// Get the invuln windows that occured during this range\n\t\tconst invulns = this.invulnerability.getWindows({\n\t\t\tstart: apply,\n\t\t\tend: remove,\n\t\t\tactorFilter: actor => actor.kind === target.kind,\n\t\t\ttypes: ['invulnerable'],\n\t\t})\n\n\t\tfor (const invuln of invulns) {\n\t\t\t// Invuln clipped start of range.\n\t\t\tif (invuln.start < range.apply && invuln.end >= range.apply) {\n\t\t\t\tthis.debug(`Start clip, [${this.ft(range.apply)},${this.ft(range.remove)}] -> [${this.ft(invuln.end)},${this.ft(range.remove)}]`)\n\n\t\t\t\trange.apply = invuln.end\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Invuln clipped end of range.\n\t\t\tif (invuln.start <= range.remove && invuln.end > range.remove) {\n\t\t\t\tthis.debug(`End clip, [${this.ft(range.apply)},${this.ft(range.remove)}] -> [${this.ft(range.apply)},${this.ft(invuln.start)}]`)\n\n\t\t\t\trange.remove = invuln.start\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Everything else should be a range split, sanity check.\n\t\t\tif (invuln.start < range.apply || invuln.end > range.remove) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tthis.debug(`Split [${this.ft(range.apply)},${this.ft(range.remove)}] -> [${this.ft(range.apply)},${this.ft(invuln.start)}], [${this.ft(invuln.end)},${this.ft(range.remove)}]`)\n\n\t\t\t// Split the range into two around the invuln.\n\t\t\tconst previousRange = range\n\t\t\trange = {...range}\n\t\t\tfinalRanges.push(range)\n\n\t\t\tpreviousRange.remove = invuln.start\n\t\t\trange.apply = invuln.end\n\t\t}\n\n\t\t// Map the ranges into edges.\n\t\treturn finalRanges.flatMap(range => [\n\t\t\t{side: 'apply', timestamp: range.apply},\n\t\t\t{side: 'remove', timestamp: range.remove},\n\t\t] as const)\n\t}\n\n\t// Small utility for formatting timestamps, as we do it a _lot_ in debug messages\n\tprivate ft = (timestamp: number) => this.parser.formatEpochTimestamp(timestamp, 1)\n}\n","import {t} from '@lingui/macro'\nimport {BuffWindow} from './ActionWindow/windows/BuffWindow'\n\nexport class Tincture extends BuffWindow {\n\tstatic override handle = 'tincture'\n\tstatic override title = t('core.tincture.title')`Tinctures`\n\n\tbuffStatus = this.data.statuses.MEDICATED\n\n\t// No initialise since only the table display is desired without\n\t// any evaluation as to expected actions.\n}\n","import {t} from '@lingui/macro'\nimport {Trans, Plural} from '@lingui/react'\nimport NormalisedMessage from 'components/ui/NormalisedMessage'\nimport Rotation from 'components/ui/Rotation'\nimport {Action} from 'data/ACTIONS'\nimport {BASE_GCD} from 'data/CONSTANTS'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport CastTime from 'parser/core/modules/CastTime'\nimport {Data} from 'parser/core/modules/Data'\nimport {Invulnerability} from 'parser/core/modules/Invulnerability'\nimport Suggestions, {TieredSuggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport React, {ReactNode} from 'react'\nimport {Accordion} from 'semantic-ui-react'\nimport {matchClosestLower} from 'utilities'\n\nconst CAST_TIME_MAX_WEAVES = {\n\t0: 2,\n\t1000: 1,\n\t2500: 0,\n}\nconst REDUCE_MAX_WEAVES_RECAST_BELOW = 1800\nconst DEFAULT_MAX_WEAVES = 2\n\nconst WEAVING_SEVERITY = {\n\t1: SEVERITY.MEDIUM,\n\t5: SEVERITY.MAJOR,\n}\n\nexport interface Weave {\n\tleadingGcdEvent?: Events['action'],\n\ttrailingGcdEvent: Events['action'],\n\tgcdTimeDiff: number,\n\tweaves: Array<Events['action']>,\n}\n\nexport class Weaving extends Analyser {\n\tstatic override handle = 'weaving'\n\n\t@dependency protected castTime!: CastTime\n\t@dependency protected data!: Data\n\t@dependency private invulnerability!: Invulnerability\n\t@dependency protected suggestions!: Suggestions\n\n\tstatic override title = t('core.weaving.title')`Weaving Issues`\n\n\tprotected suggestionIcon: string = 'https://xivapi.com/i/001000/001785.png' // WVR Focused Synth\n\n\tprotected moduleLink = (\n\t\t<a style={{cursor: 'pointer'}} onClick={() => this.parser.scrollTo(Weaving.handle)}>\n\t\t\t<NormalisedMessage message={Weaving.title}/>\n\t\t</a>\n\t)\n\tprotected suggestionContent: ReactNode = <Trans id=\"core.weaving.content\">\n\t\tAvoid weaving more actions than you have time for in a single GCD window. Doing so will delay your next GCD, reducing possible uptime. Check the {this.moduleLink} module below for more detailed analysis.\n\t</Trans>\n\n\tprotected severity = WEAVING_SEVERITY\n\n\tprivate weaves: Array<Events['action']> = []\n\tprivate ongoingCastEvent?: Events['prepare']\n\tprivate leadingGcdEvent?: Events['action']\n\tprivate trailingGcdEvent?: Events['action']\n\tprivate badWeaves: Weave[] = []\n\n\toverride initialise() {\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\n\t\tthis.addEventHook(playerFilter.type('prepare'), this.onBeginCast)\n\t\tthis.addEventHook(playerFilter.type('action'), this.onCast)\n\t\tthis.addEventHook(filter<Event>().type('complete'), this.onComplete)\n\t\tthis.addEventHook(filter<Event>().type('death'), this.clearWeave)\n\t}\n\n\tprivate onBeginCast(event: Events['prepare']) {\n\t\tthis.ongoingCastEvent = event\n\t}\n\n\tprivate onCast(event: Events['action']) {\n\t\tconst action = this.data.getAction(event.action)\n\n\t\t// If the action is an auto, just ignore it\n\t\tif (!action || action.autoAttack) {\n\t\t\treturn\n\t\t}\n\n\t\t// If it's not a GCD, just bump the weave count\n\t\tif (this.isOgcd(action)) {\n\t\t\tthis.weaves.push(event)\n\t\t\treturn\n\t\t}\n\n\t\tif (this.ongoingCastEvent && this.ongoingCastEvent.action === action.id) {\n\t\t\t// This event is the end of a GCD cast\n\t\t\tthis.trailingGcdEvent = {\n\t\t\t\t...event,\n\t\t\t\t// Override the timestamp of the GCD with when its cast began\n\t\t\t\ttimestamp: this.ongoingCastEvent.timestamp,\n\t\t\t}\n\t\t} else {\n\t\t\t// This event was an instant GCD (or log missed the cast starting)\n\t\t\tthis.trailingGcdEvent = event\n\t\t}\n\n\t\t// Always reset the ongoing cast\n\t\tthis.ongoingCastEvent = undefined\n\n\t\t// Throw the current state onto the history\n\t\tthis.saveIfBad()\n\n\t\t// Reset\n\t\tthis.leadingGcdEvent = this.trailingGcdEvent\n\t\tthis.weaves = []\n\t}\n\n\tprivate onComplete() {\n\t\t// If there's been at least one gcd, run a cleanup on any remnant data\n\t\tif (this.leadingGcdEvent) {\n\t\t\tthis.saveIfBad()\n\t\t}\n\n\t\t// Few triples is medium, any more is major\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.suggestionIcon,\n\t\t\tcontent: this.suggestionContent,\n\t\t\twhy: <Plural\n\t\t\t\tid=\"core.weaving.why\"\n\t\t\t\tvalue={this.badWeaves.length}\n\t\t\t\t_1=\"# instance of incorrect weaving\"\n\t\t\t\tother=\"# instances of incorrect weaving\"\n\t\t\t/>,\n\t\t\ttiers: this.severity,\n\t\t\tvalue: this.badWeaves.length,\n\t\t}))\n\t}\n\n\tprivate saveIfBad() {\n\t\tif (this.trailingGcdEvent == null) { return }\n\n\t\tconst leadingTimestamp = this.leadingGcdEvent?.timestamp ?? this.parser.pull.timestamp\n\t\tconst gcdTimeDiff = this.trailingGcdEvent.timestamp\n\t\t\t- leadingTimestamp\n\t\t\t- this.invulnerability.getDuration({\n\t\t\t\tstart: leadingTimestamp,\n\t\t\t\tend: this.trailingGcdEvent.timestamp,\n\t\t\t})\n\n\t\tconst weave: Weave = {\n\t\t\tleadingGcdEvent: this.leadingGcdEvent,\n\t\t\ttrailingGcdEvent: this.trailingGcdEvent,\n\t\t\tgcdTimeDiff,\n\t\t\tweaves: this.weaves,\n\t\t}\n\n\t\tif (weave.weaves.length === 0) {\n\t\t\treturn\n\t\t}\n\n\t\tif (this.isBadWeave(weave)) {\n\t\t\tthis.badWeaves.push(weave)\n\t\t}\n\t}\n\n\tprivate isOgcd(action: Action) {\n\t\treturn !action.onGcd && !action.autoAttack\n\t}\n\n\tprivate isBadWeave(weave: Weave) {\n\t\t// Calc. the no. of weaves - we're ignoring any made while the boss is untargetable, and events that happened before the pull\n\t\tconst weaveCount = weave.weaves.filter(\n\t\t\tevent => true\n\t\t\t\t&& !this.invulnerability.isActive({timestamp: event.timestamp, types: ['untargetable']})\n\t\t\t\t&& event.timestamp >= this.parser.pull.timestamp,\n\t\t).length\n\n\t\tconst recast = ((weave.leadingGcdEvent != null) ? this.castTime.recastForEvent(weave.leadingGcdEvent) : undefined) ?? BASE_GCD\n\t\t// Check the downtime-adjusted GCD time difference for this weave - do not treat multiple weaves during downtime as bad weaves\n\t\treturn weave.gcdTimeDiff > recast && weaveCount > this.getMaxWeaves(weave)\n\t}\n\n\tprivate clearWeave() {\n\t\t// prompts saving any existing weaves if they're bad, and reset\n\t\tif (this.weaves.length > 0) {\n\t\t\tthis.saveIfBad()\n\t\t}\n\n\t\t// remove existing weaves and pretend the next leadingGcdEvent is like a fresh start (which I guess it is)\n\t\tthis.weaves = []\n\t\tthis.leadingGcdEvent = undefined\n\t}\n\n\t/**\n\t * Implementing classes MAY override this in order to provide custom logic for determining the number of max weaves, given the leading GCD Event\n\t * @param event The Action Event of the leading GCD.  Will be undefined for the first GCD of the pull - default behavior is to allow 2 weaves in case of missing pre-pull action\n\t * @returns number of allowed weaves after the leading GCD before flagging as bad weaving\n\t */\n\tprotected getMaxWeaves(weave: Weave): number {\n\t\tif (weave.leadingGcdEvent == null) {\n\t\t\treturn DEFAULT_MAX_WEAVES\n\t\t}\n\n\t\tconst castTime = this.castTime.forEvent(weave.leadingGcdEvent)\n\t\tif (castTime == null)  {\n\t\t\treturn DEFAULT_MAX_WEAVES\n\t\t}\n\n\t\tconst maxWeaves = matchClosestLower(CAST_TIME_MAX_WEAVES, castTime) ?? DEFAULT_MAX_WEAVES\n\t\tconst recastTime = this.castTime.recastForEvent(weave.leadingGcdEvent) ?? BASE_GCD\n\n\t\treturn maxWeaves - (recastTime < REDUCE_MAX_WEAVES_RECAST_BELOW ? 1 : 0)\n\t}\n\n\toverride output() {\n\t\tif (this.badWeaves.length === 0) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst panels = this.badWeaves.map(item => ({\n\t\t\tkey: item.leadingGcdEvent?.timestamp ?? this.parser.pull.timestamp,\n\t\t\ttitle: {\n\t\t\t\tcontent: <>\n\t\t\t\t\t<strong>{this.parser.formatEpochTimestamp(item.leadingGcdEvent?.timestamp ?? this.parser.pull.timestamp)}</strong>\n\t\t\t\t\t&nbsp;-&nbsp;\n\t\t\t\t\t<Plural\n\t\t\t\t\t\tid=\"core.weaving.panel-count\"\n\t\t\t\t\t\tvalue={item.weaves.length}\n\t\t\t\t\t\t_1=\"# weave\"\n\t\t\t\t\t\tother=\"# weaves\"\n\t\t\t\t\t/>\n\t\t\t\t\t&nbsp;(\n\t\t\t\t\t{this.parser.formatDuration(item.gcdTimeDiff)}\n\t\t\t\t\t&nbsp;\n\t\t\t\t\t<Trans id=\"core.weaving.between-gcds\">between GCDs</Trans>\n\t\t\t\t\t)\n\t\t\t\t</>,\n\t\t\t},\n\t\t\tcontent: {\n\t\t\t\tcontent: <Rotation events={[\n\t\t\t\t\t...(item.leadingGcdEvent != null ? [item.leadingGcdEvent] : []),\n\t\t\t\t\t...item.weaves,\n\t\t\t\t]}/>,\n\t\t\t},\n\t\t}))\n\n\t\treturn <Accordion\n\t\t\texclusive={false}\n\t\t\tpanels={panels}\n\t\t\tstyled\n\t\t\tfluid\n\t\t/>\n\t}\n}\n","import {Trans} from '@lingui/react'\nimport {ActionRow, ActionTimeline as CoreActionTimeline} from 'parser/core/modules/ActionTimeline'\nimport React from 'react'\n\nexport class ActionTimeline extends CoreActionTimeline {\n\tstatic override rows: ActionRow[] = [\n\t\t...CoreActionTimeline.rows,\n\n\t\t'ARCANE_CIRCLE',\n\t\t'ENSHROUD',\n\t\t{\n\t\t\tlabel: <Trans id=\"rpr.actiontimeline.lemure\">Lemure</Trans>,\n\t\t\tcontent: ['LEMURES_SLICE', 'LEMURES_SCYTHE'],\n\t\t},\n\t\t{\n\t\t\tlabel: <Trans id=\"rpr.actiontimeline.bloodstalk\">Blood Stalk</Trans>,\n\t\t\tcontent: ['BLOOD_STALK', 'GRIM_SWATHE', 'UNVEILED_GALLOWS', 'UNVEILED_GIBBET'],\n\t\t},\n\t\t'GLUTTONY',\n\t\t{\n\t\t\t// Ingress and Egress share a CDG - we don't need to specify both to combine.\n\t\t\tlabel: <Trans id=\"rpr.actiontimeline.movement\">Movement</Trans>,\n\t\t\tcontent: ['HELLS_INGRESS', 'REGRESS'],\n\t\t},\n\t\t'ARCANE_CREST',\n\t]\n}\n","import {AoEUsages} from 'parser/core/modules/AoEUsages'\nimport {DISPLAY_ORDER} from './DISPLAY_ORDER'\n\nexport class AoE extends AoEUsages {\n\tstatic override displayOrder = DISPLAY_ORDER.AOE\n\n\tsuggestionIcon = this.data.actions.SPINNING_SCYTHE.icon\n\n\ttrackedActions = [\n\t\t{\n\t\t\taoeAction: this.data.actions.SPINNING_SCYTHE,\n\t\t\tstActions: [this.data.actions.SLICE],\n\t\t\tminTargets: 3,\n\t\t}, {\n\t\t\taoeAction: this.data.actions.SOUL_SCYTHE,\n\t\t\tstActions: [this.data.actions.SOUL_SLICE],\n\t\t\tminTargets: 3,\n\t\t}, {\n\t\t\taoeAction: this.data.actions.WHORL_OF_DEATH,\n\t\t\tstActions: [this.data.actions.SHADOW_OF_DEATH],\n\t\t\tminTargets: 3,\n\t\t},\n\t\t{\n\t\t\taoeAction: this.data.actions.GRIM_SWATHE,\n\t\t\tstActions: [this.data.actions.BLOOD_STALK],\n\t\t\tminTargets: 3,\n\t\t},\n\t\t{\n\t\t\taoeAction: this.data.actions.GUILLOTINE,\n\t\t\tstActions: [this.data.actions.GALLOWS, this.data.actions.GIBBET],\n\t\t\tminTargets: 3,\n\t\t},\n\t\t{\n\t\t\taoeAction: this.data.actions.LEMURES_SCYTHE,\n\t\t\tstActions: [this.data.actions.LEMURES_SLICE],\n\t\t\tminTargets: 2,\n\t\t},\n\t\t{\n\t\t\taoeAction: this.data.actions.GRIM_REAPING,\n\t\t\tstActions: [this.data.actions.VOID_REAPING, this.data.actions.CROSS_REAPING],\n\t\t\tminTargets: 3,\n\t\t},\n\t]\n}\n","export const DISPLAY_ORDER = {\n\tIMMORTAL_SACRIFICE: 1,\n\tARCANE_CIRCLE: 2,\n\tENSHROUD: 3,\n\n\t// Super low priority, some of these override default ordering\n\tAOE: 50,\n\tCOMBOS: 51,\n\tPOSITIONALS: 52,\n\tWEAVING: 53,\n\tINTERRUPTS: 54,\n\tTINCTURES: 55,\n}\n","// A tincture or Arcane Circle window within the first 15s is an opener with lighter expectations\nexport const OPENER_BUFFER = 15000\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {RaidBuffWindow, EvaluatedAction, ExpectedActionsEvaluator, TrackedAction} from 'parser/core/modules/ActionWindow'\nimport {HistoryEntry} from 'parser/core/modules/ActionWindow/History'\nimport {SEVERITY} from 'parser/core/modules/Suggestions'\nimport React from 'react'\nimport {OPENER_BUFFER} from '../constants'\nimport {DISPLAY_ORDER} from './DISPLAY_ORDER'\n\n// The minimum AC length to hard require a Communio\nconst COMMUNIO_BUFFER = 8000\n\nconst SEVERITIES = {\n\t1: SEVERITY.MINOR,\n\t3: SEVERITY.MEDIUM,\n\t5: SEVERITY.MAJOR,\n}\n\nexport class ArcaneCircle extends RaidBuffWindow {\n\tstatic override handle = 'arcaneCircle'\n\tstatic override title = t('rpr.arcanecircle.title')`Arcane Circle`\n\tstatic override displayOrder = DISPLAY_ORDER.ARCANE_CIRCLE\n\n\toverride buffStatus = this.data.statuses.ARCANE_CIRCLE\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tthis.addEvaluator(new ExpectedActionsEvaluator({\n\t\t\texpectedActions: [\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.COMMUNIO,\n\t\t\t\t\texpectedPerWindow: 2,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.PLENTIFUL_HARVEST,\n\t\t\t\t\texpectedPerWindow: 1,\n\t\t\t\t},\n\t\t\t],\n\t\t\tsuggestionIcon: this.data.actions.ARCANE_CIRCLE.icon,\n\t\t\tsuggestionContent: <Trans id=\"rpr.arcanecircle.suggestions.content\">\n\t\t\t\tEach <ActionLink action=\"ARCANE_CIRCLE\"/> window should contain 2 uses of <ActionLink action=\"COMMUNIO\"/>\n\t\t\t\tand 1 use of <ActionLink action=\"PLENTIFUL_HARVEST\"/>. In your opener, only 1 <ActionLink showIcon={false} action=\"COMMUNIO\"/> is expected.\n\t\t\t</Trans>,\n\t\t\tsuggestionWindowName: <ActionLink action=\"ARCANE_CIRCLE\" showIcon={false} />,\n\t\t\tseverityTiers: SEVERITIES,\n\t\t\tadjustCount: this.adjustCount.bind(this),\n\t\t}))\n\t}\n\n\tprivate adjustCount(window: HistoryEntry<EvaluatedAction[]>, action: TrackedAction): number {\n\t\tconst fightTimeRemaining = (this.parser.pull.timestamp + this.parser.pull.duration) - window.start\n\n\t\tif (this.isRushedEndOfPullWindow(window)) {\n\t\t\tif (fightTimeRemaining < COMMUNIO_BUFFER) {\n\t\t\t\tswitch (action.action) {\n\t\t\t\tcase this.data.actions.COMMUNIO:\n\t\t\t\t\t// I hate this linter bypass, but -2 is technically magic and is weird as a const\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-magic-numbers\n\t\t\t\t\treturn -2\n\n\t\t\t\tcase this.data.actions.PLENTIFUL_HARVEST:\n\t\t\t\t\treturn -1\n\n\t\t\t\tdefault:\n\t\t\t\t\treturn 0\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// We have enough time for 1 Communio, but not both\n\t\t\tif (action.action === this.data.actions.COMMUNIO) {\n\t\t\t\treturn -1\n\t\t\t}\n\t\t}\n\n\t\t// If it's not Communio, we don't care at this point\n\t\tif (action.action !== this.data.actions.COMMUNIO) { return 0 }\n\n\t\treturn (window.start - OPENER_BUFFER <= this.parser.pull.timestamp) ? -1 : 0\n\t}\n}\n","import {Combos as CoreCombos} from 'parser/core/modules/Combos'\nimport {DISPLAY_ORDER} from './DISPLAY_ORDER'\n\nexport class Combos extends CoreCombos {\n\tstatic override displayOrder = DISPLAY_ORDER.COMBOS\n\n\toverride suggestionIcon = this.data.actions.WAXING_SLICE.icon\n}\n","import {CooldownDowntime as CoreCooldownDowntime} from 'parser/core/modules/CooldownDowntime'\n\nexport class CooldownDowntime extends CoreCooldownDowntime {\n\ttrackedCds = [\n\t\t{\n\t\t\tcooldowns: [this.data.actions.ARCANE_CIRCLE],\n\t\t\t// JP opener is after 2nd GCD\n\t\t\tfirstUseOffset: 5000,\n\t\t},\n\n\t\t{\n\t\t\tcooldowns: [this.data.actions.SOUL_SLICE, this.data.actions.SOUL_SCYTHE],\n\t\t\t// Both openers use this as 2nd GCD\n\t\t\tfirstUseOffset: 4000,\n\t\t},\n\n\t\t{\n\t\t\tcooldowns: [this.data.actions.GLUTTONY],\n\t\t\t// Delayed Gluttony opener is just before 10th GCD\n\t\t\tfirstUseOffset: 22500,\n\t\t},\n\t]\n}\n","import {Trans} from '@lingui/react'\nimport Color from 'color'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {ActionKey} from 'data/ACTIONS'\nimport {JOBS} from 'data/JOBS'\nimport {Event, Events} from 'event'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport BrokenLog from 'parser/core/modules/BrokenLog'\nimport {CounterGauge, Gauge as CoreGauge} from 'parser/core/modules/Gauge'\nimport React from 'react'\n\nconst GAUGE_FADE = 0.25\n\nconst MAX_STACKS = 5\n\n// Lemure Shroud, the blue pips\nconst LEMURE_MOD = 1\n\nconst LEMURE_ACTIONS: ActionKey[] = [\n\t'VOID_REAPING',\n\t'CROSS_REAPING',\n\t'GRIM_REAPING',\n\t'COMMUNIO',\n]\n\n// Void Shroud, the purple pips\nconst VOID_COST = 2\n\nconst VOID_ACTIONS: ActionKey[] = [\n\t'LEMURES_SLICE',\n\t'LEMURES_SCYTHE',\n]\n\nexport class DeathGauge extends CoreGauge {\n\tstatic override handle = 'deathGauge'\n\n\t@dependency private actors!: Actors\n\t@dependency private brokenLog!: BrokenLog\n\n\t// Lemure's Shroud\n\t// We initialise to zero because without Enshroud you can't get more\n\t// History correction is enabled:\n\t//   you cannot rely on point-in-time gauge values and need the history in onComplete for any consuming modules\n\tprivate lemureShroud = this.add(new CounterGauge({\n\t\tmaximum: 0,\n\t\tcorrectHistory: true,\n\t\tgraph: {label: 'Lemure Shroud', color: Color(JOBS.PALADIN.colour).fade(GAUGE_FADE), collapse: true},\n\t}))\n\n\t// Void Shroud\n\t// We initialise to zero because without Lemure you can't get more\n\t// History correction is enabled:\n\t//   you cannot rely on point-in-time gauge values and need the history in onComplete for any consuming modules\n\tprivate voidShroud = this.add(new CounterGauge({\n\t\tmaximum: 0,\n\t\tcorrectHistory: true,\n\t\tgraph: {label: 'Void Shroud', color: Color(JOBS.REAPER.colour).fade(GAUGE_FADE), collapse: true},\n\t}))\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\n\t\tthis.addEventHook(playerFilter.type('statusApply').status(this.data.statuses.ENSHROUDED.id), this.onEnshroud)\n\t\tthis.addEventHook(playerFilter.type('statusRemove').status(this.data.statuses.ENSHROUDED.id), this.onDeshroud)\n\t\tthis.addEventHook(playerFilter.type('action').action(this.data.matchActionId(LEMURE_ACTIONS)), this.onLemure)\n\t\tthis.addEventHook(playerFilter.type('action').action(this.data.matchActionId(VOID_ACTIONS)), this.onVoid)\n\n\t\t// This is effectively emptying the gauge at end of fight for history\n\t\tthis.addEventHook('complete', this.onDeshroud)\n\t}\n\n\tprivate onEnshroud() {\n\t\t// Pre-fill Lemure stacks to max, using generate as that's what the tooltip says it does internally\n\t\tthis.lemureShroud.setMaximum(MAX_STACKS)\n\t\tthis.lemureShroud.generate(MAX_STACKS)\n\n\t\t// Technically this can be 5 but your window would end if it did\n\t\tthis.voidShroud.setMaximum(MAX_STACKS - 1)\n\t}\n\n\tprivate onDeshroud() {\n\t\t// Flush Lemure\n\t\tthis.lemureShroud.reset()\n\t\tthis.lemureShroud.setMaximum(0)\n\n\t\t// Flush Void\n\t\tthis.voidShroud.reset()\n\t\tthis.voidShroud.setMaximum(0)\n\t}\n\n\tprivate onLemure(event: Events['action']) {\n\t\tconst action = this.data.getAction(event.action)\n\n\t\t// Sanity check\n\t\tif (action == null || !this.actors.current.hasStatus(this.data.statuses.ENSHROUDED.id)) { return }\n\n\t\t// Communio gets special handling since it eats everything you have\n\t\tif (action.id === this.data.actions.COMMUNIO.id && this.lemureShroud.value > 0) {\n\t\t\t// Use set so we can lodge this reset as a spend rather than a reset\n\t\t\tthis.lemureShroud.set(0, 'spend')\n\t\t\treturn\n\t\t}\n\n\t\t// Adjust the gauges - Lemure spend actions generate Void\n\t\tthis.lemureShroud.spend(LEMURE_MOD)\n\t\tthis.voidShroud.generate(LEMURE_MOD)\n\n\t\t// Sanity check more - core gauge doesn't know that these are really a single shared gauge\n\t\t// We don't need to check this in Void actions because they only consume gauge, not generate\n\t\tif (this.lemureShroud.value + this.voidShroud.value > MAX_STACKS) {\n\t\t\tthis.brokenLog.trigger(this, 'rpr.gauge.lemure.outofbounds',\n\t\t\t\t<Trans id=\"rpr.gauge.lemure.outofbounds.reason\">\n\t\t\t\t\t<ActionLink {...action}/> can't be executed with {this.lemureShroud.value} stacks of Lemure's Shroud and {this.voidShroud.value} stacks of Void Shroud as this would go over the shared gauge max.\n\t\t\t\t</Trans>\n\t\t\t)\n\t\t}\n\t}\n\n\tprivate onVoid() {\n\t\tif (this.actors.current.hasStatus(this.data.statuses.ENSHROUDED.id)) {\n\t\t\tthis.voidShroud.spend(VOID_COST)\n\t\t}\n\t}\n}\n","import {Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Analyser} from 'parser/core/Analyser'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport Checklist, {Requirement, TARGET, TieredRule} from 'parser/core/modules/Checklist'\nimport {Data} from 'parser/core/modules/Data'\nimport {Invulnerability} from 'parser/core/modules/Invulnerability'\nimport {Statuses} from 'parser/core/modules/Statuses'\nimport React from 'react'\n\nconst SEVERITIES = {\n\t95: TARGET.SUCCESS,\n}\n\nexport class DeathsDesign extends Analyser {\n\tstatic override handle = 'deathsdesign'\n\n\t@dependency private actors!: Actors\n\t@dependency private checklist!: Checklist\n\t@dependency private data!: Data\n\t@dependency private invulnerability!: Invulnerability\n\t@dependency private statuses!: Statuses\n\n\toverride initialise() {\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate getUptimePercent() {\n\t\tconst uptime = this.statuses.getUptime(this.data.statuses.DEATHS_DESIGN, this.actors.foes)\n\t\tconst duration = this.parser.pull.duration - this.invulnerability.getDuration({types: ['invulnerable']})\n\t\treturn (uptime / duration) * 100\n\t}\n\n\tprivate onComplete() {\n\t\tthis.checklist.add(new TieredRule({\n\t\t\tname: <Trans id=\"rpr.deathsdesign.rule.name\">\n\t\t\t\tKeep <DataLink status=\"DEATHS_DESIGN\"/> up\n\t\t\t</Trans>,\n\t\t\tdescription: <Trans id=\"rpr.deathsdesign.rule.description\">\n\t\t\t\tDeath's Design increases all damage you deal to the target by 10%. Aim to keep this debuff up at all times.\n\t\t\t</Trans>,\n\t\t\ttiers: SEVERITIES,\n\t\t\trequirements: [\n\t\t\t\tnew Requirement({\n\t\t\t\t\tname: <Trans id=\"rpr.deathsdesign.requirement.uptime.name\"><DataLink status=\"DEATHS_DESIGN\"/> uptime</Trans>,\n\t\t\t\t\tpercent: () => this.getUptimePercent(),\n\t\t\t\t}),\n\t\t\t],\n\t\t}))\n\t}\n}\n","import {Defensives as CoreDefensives} from 'parser/core/modules/Defensives'\n\nexport class Defensives extends CoreDefensives {\n\tprotected override trackedDefensives = [\n\t\tthis.data.actions.ARCANE_CREST,\n\t]\n}\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {RotationTargetOutcome} from 'components/ui/RotationTable'\nimport {Action, ActionKey} from 'data/ACTIONS'\nimport {BuffWindow, ExpectedActionGroupsEvaluator, EvaluatedAction, NotesEvaluator, TrackedActionGroup} from 'parser/core/modules/ActionWindow'\nimport {HistoryEntry} from 'parser/core/modules/ActionWindow/History'\nimport {Data} from 'parser/core/modules/Data'\nimport {SEVERITY} from 'parser/core/modules/Suggestions'\nimport React from 'react'\nimport {Icon} from 'semantic-ui-react'\nimport {DISPLAY_ORDER} from './DISPLAY_ORDER'\n\nconst REAPINGS_PER_SHROUD = 4\n\nconst SEVERITIES = {\n\t1: SEVERITY.MINOR,\n\t3: SEVERITY.MEDIUM,\n\t5: SEVERITY.MAJOR,\n}\n\nconst SHROUD_ACTIONS: ActionKey[] = [\n\t'CROSS_REAPING',\n\t'VOID_REAPING',\n\t'GRIM_REAPING',\n\t'LEMURES_SLICE',\n\t'LEMURES_SCYTHE',\n\t'COMMUNIO',\n]\n\nclass EnhancedReapingEvaluator extends NotesEvaluator {\n\n\theader = {\n\t\theader: <Trans id=\"rpr.enshroud.enhanced.header\">Alternated Reapings</Trans>,\n\t\taccessor: 'enhanced',\n\t}\n\n\tprivate data: Data\n\n\tconstructor(data: Data) {\n\t\tsuper()\n\t\tthis.data = data\n\t}\n\n\toverride generateNotes(window: HistoryEntry<EvaluatedAction[]>): JSX.Element {\n\t\treturn this.didReapingsAlternate(window) ?\n\t\t\t<Icon name=\"checkmark\" className=\"text-success\"/> :\n\t\t\t<Icon name=\"remove\" className=\"text-error\"/>\n\t}\n\n\tprivate didReapingsAlternate(window: HistoryEntry<EvaluatedAction[]>): boolean {\n\t\tlet lastReaping: Action | undefined = undefined\n\n\t\tfor (const action of window.data) {\n\t\t\tif (action.action === this.data.actions.VOID_REAPING || action.action === this.data.actions.CROSS_REAPING) {\n\t\t\t\tif (lastReaping === action.action) { return false }\n\t\t\t\tlastReaping = action.action\n\t\t\t}\n\t\t}\n\n\t\treturn true\n\t}\n}\n\nexport class Enshroud extends BuffWindow {\n\tstatic override handle = 'enshroud'\n\tstatic override title = t('rpr.enshroud.title')`Enshroud`\n\tstatic override displayOrder = DISPLAY_ORDER.ENSHROUD\n\n\toverride buffStatus = this.data.statuses.ENSHROUDED\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tthis.trackOnlyActions(SHROUD_ACTIONS.map(a => this.data.actions[a].id))\n\n\t\tthis.addEvaluator(new ExpectedActionGroupsEvaluator({\n\t\t\texpectedActionGroups: [\n\t\t\t\t{\n\t\t\t\t\tactions: [\n\t\t\t\t\t\tthis.data.actions.CROSS_REAPING,\n\t\t\t\t\t\tthis.data.actions.VOID_REAPING,\n\t\t\t\t\t\tthis.data.actions.GRIM_REAPING,\n\t\t\t\t\t],\n\t\t\t\t\texpectedPerWindow: REAPINGS_PER_SHROUD,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tactions: [\n\t\t\t\t\t\tthis.data.actions.LEMURES_SLICE,\n\t\t\t\t\t\tthis.data.actions.LEMURES_SCYTHE,\n\t\t\t\t\t],\n\t\t\t\t\texpectedPerWindow: 2,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tactions: [\n\t\t\t\t\t\tthis.data.actions.COMMUNIO,\n\t\t\t\t\t],\n\t\t\t\t\texpectedPerWindow: 1,\n\t\t\t\t},\n\t\t\t],\n\t\t\tsuggestionIcon: this.data.actions.ENSHROUD.icon,\n\t\t\tsuggestionContent: <Trans id=\"rpr.enshroud.suggestions.content\">\n\t\t\t\tEach <ActionLink action=\"ENSHROUD\"/> window should contain 2 uses each of <ActionLink action=\"CROSS_REAPING\"/>, <ActionLink action=\"VOID_REAPING\"/>,\n\t\t\t\tand <ActionLink action=\"LEMURES_SLICE\"/> (or their AoE equivalents), and 1 use of <ActionLink action=\"COMMUNIO\"/>.\n\t\t\t</Trans>,\n\t\t\tsuggestionWindowName: <ActionLink action=\"ENSHROUD\" showIcon={false} />,\n\t\t\tseverityTiers: SEVERITIES,\n\t\t\tadjustOutcome: this.adjustOutcome.bind(this),\n\t\t}))\n\n\t\tthis.addEvaluator(new EnhancedReapingEvaluator(this.data))\n\t}\n\n\tprivate adjustOutcome(window: HistoryEntry<EvaluatedAction[]>, action: TrackedActionGroup) {\n\t\tif (action.actions[0] !== this.data.actions.CROSS_REAPING) { return undefined }\n\n\t\treturn (actual: number, expected?: number) => {\n\t\t\t// Going over the expected count of reapings is bad since that means you will lose the Communio.\n\t\t\treturn (actual === expected) ? RotationTargetOutcome.POSITIVE : RotationTargetOutcome.NEGATIVE\n\t\t}\n\t}\n\n}\n","import {Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Event} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport Checklist, {Requirement, Rule} from 'parser/core/modules/Checklist'\nimport {Data} from 'parser/core/modules/Data'\nimport {Invulnerability} from 'parser/core/modules/Invulnerability'\nimport {UnableToAct} from 'parser/core/modules/UnableToAct'\nimport React from 'react'\n\nconst SOULSOW_BUFFER = 1000\n\nexport class HarvestMoon extends Analyser {\n\tstatic override handle = 'harvestMoon'\n\n\t@dependency private checklist!: Checklist\n\t@dependency private data!: Data\n\t@dependency private invulnerability!: Invulnerability\n\t@dependency private unableToAct!: UnableToAct\n\n\tprivate moons = 0\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.source(this.parser.actor.id)\n\t\t\t\t.type('action')\n\t\t\t\t.action(this.data.actions.HARVEST_MOON.id),\n\t\t\t() => this.moons++\n\t\t)\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate getExpectedUses(): number {\n\t\tconst ADJUSTED_CAST = this.data.actions.SOULSOW.castTime + SOULSOW_BUFFER\n\t\tconst invulnWindows = this.invulnerability.getWindows().filter((window) => window.end - window.start >= ADJUSTED_CAST)\n\n\t\tif (this.unableToAct.getDuration({start: this.parser.pull.timestamp, end: this.parser.pull.timestamp + this.parser.pull.duration}) > 0) {\n\t\t\treturn invulnWindows.filter(window => this.canChargeMoon(window)).length + 1\n\t\t}\n\n\t\treturn invulnWindows.length + 1\n\t}\n\n\tprivate canChargeMoon(inputWindow: {start: number, end: number}): boolean {\n\t\tconst ADJUSTED_CAST_TIME = this.data.actions.SOULSOW.castTime + SOULSOW_BUFFER\n\n\t\t// Find the earliest unable to act window that falls within the input window\n\t\tconst unableToActWindow = this.unableToAct.getWindows(inputWindow)[0]\n\n\t\t// If there are no unable to act windows left before the end of the input window, this UTA will be undefined\n\t\t// Check if our input window is long enough\n\t\tif (unableToActWindow == null) {\n\t\t\treturn inputWindow.end - inputWindow.start >= ADJUSTED_CAST_TIME\n\t\t}\n\n\t\t// Even if the input window was too short, check if there's a large enough time between the input window and UTA\n\t\tif (unableToActWindow.start - inputWindow.start >= ADJUSTED_CAST_TIME) {\n\t\t\treturn true\n\t\t}\n\n\t\t// Recurse the method, shrinking the window to the space between the end of the unable to act window and the end of the input window\n\t\treturn this.canChargeMoon({start: unableToActWindow.end, end: inputWindow.end})\n\t}\n\n\tprivate onComplete() {\n\t\tconst expectedUses = this.getExpectedUses()\n\t\tconst harvestsUsedPercent = this.getUsedPercentage(expectedUses)\n\n\t\tthis.checklist.add(new Rule({\n\t\t\tname: <Trans id=\"rpr.harvestmoon.checklist.title\">\n\t\t\t\tUse <DataLink action=\"SOULSOW\"/> and <DataLink action=\"HARVEST_MOON\"/>\n\t\t\t</Trans>,\n\t\t\tdescription: <Trans id=\"rpr.harvestmoon.checklist.description\">\n\t\t\t\t<DataLink action=\"HARVEST_MOON\"/> is one of your highest damage abilities.\n\t\t\t\tAim to use <DataLink action=\"SOULSOW\"/> pre-pull to guarantee at least one <DataLink showIcon={false} action=\"HARVEST_MOON\"/> in the fight.\n\t\t\t\tIf any downtime is long enough to cast <DataLink action=\"SOULSOW\"/> again, you can get additional uses of <DataLink showIcon={false} action=\"HARVEST_MOON\"/>.\n\t\t\t</Trans>,\n\t\t\trequirements: [\n\t\t\t\tnew Requirement({\n\t\t\t\t\tname: <Trans id=\"rpr.harvestmoon.checklist.requirement.name\">\n\t\t\t\t\t\t<DataLink action=\"HARVEST_MOON\" /> uses\n\t\t\t\t\t</Trans>,\n\t\t\t\t\toverrideDisplay: `${this.moons} / ${expectedUses} (${harvestsUsedPercent}%)`,\n\t\t\t\t\tpercent: harvestsUsedPercent,\n\t\t\t\t}),\n\t\t\t],\n\t\t\ttarget: 100,\n\t\t}))\n\t}\n\n\tprivate getUsedPercentage(expected: number): string {\n\t\treturn (this.moons / expected * 100).toFixed(2)\n\t}\n}\n","import {Trans} from '@lingui/react'\nimport Color from 'color'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Action, ActionKey} from 'data/ACTIONS'\nimport {JOBS} from 'data/JOBS'\nimport {Event, Events} from 'event'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport {CounterGauge, Gauge as CoreGauge} from 'parser/core/modules/Gauge'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\ntype GaugeModifier = Partial<Record<Event['type'], number>>\n\nconst SUGGESTION_TIERS = {\n\t10: SEVERITY.MINOR,\n\t30: SEVERITY.MEDIUM,\n\t50: SEVERITY.MAJOR,\n}\n\nconst SHROUD_ACTIONS: ActionKey[] = [\n\t'GIBBET',\n\t'GALLOWS',\n\t'GUILLOTINE',\n\t'PLENTIFUL_HARVEST',\n\t'ENSHROUD',\n]\n\nconst GAUGE_FADE = 0.25\n\nconst DESIGN_GAIN = 10\nconst BASE_SHROUD_MOD = 10\nconst HIGH_SHROUD_MOD = 50\n\nexport class OtherGauges extends CoreGauge {\n\tstatic override handle = 'otherGauges'\n\n\t@dependency private actors!: Actors\n\t@dependency private suggestions!: Suggestions\n\n\t// Initialise our gauges - default max is 100 so yolo it is\n\tprivate soulGauge = this.add(new CounterGauge({\n\t\tgraph: {label: 'Soul Gauge', color: Color(JOBS.WARRIOR.colour).fade(GAUGE_FADE), collapse: true},\n\t}))\n\n\tprivate shroudGauge = this.add(new CounterGauge({\n\t\tgraph: {label: 'Shroud Gauge', color: Color(JOBS.BLUE_MAGE.colour).fade(GAUGE_FADE), collapse: true},\n\t}))\n\n\tprivate soulGaugeModifiers = new Map<Action['id'], GaugeModifier>([\n\t\t// Builders - other than Design since it's a status\n\t\t[this.data.actions.SLICE.id, {action: 10}],\n\t\t[this.data.actions.WAXING_SLICE.id, {combo: 10}],\n\t\t[this.data.actions.INFERNAL_SLICE.id, {combo: 10}],\n\t\t[this.data.actions.SPINNING_SCYTHE.id, {action: 10}],\n\t\t[this.data.actions.NIGHTMARE_SCYTHE.id, {combo: 10}],\n\t\t[this.data.actions.SOUL_SLICE.id, {action: 50}],\n\t\t[this.data.actions.SOUL_SCYTHE.id, {action: 50}],\n\t\t// Spenders\n\t\t[this.data.actions.BLOOD_STALK.id, {action: -50}],\n\t\t[this.data.actions.GRIM_SWATHE.id, {action: -50}],\n\t\t[this.data.actions.UNVEILED_GIBBET.id, {action: -50}],\n\t\t[this.data.actions.UNVEILED_GALLOWS.id, {action: -50}],\n\t\t[this.data.actions.GLUTTONY.id, {action: -50}],\n\t])\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\t\tconst foeFilter = filter<Event>().actor(oneOf(this.actors.foes.map(a => a.id)))\n\n\t\t// Soul Gauge\n\t\tconst soulActions = Array.from(this.soulGaugeModifiers.keys())\n\t\tthis.addEventHook(playerFilter.type(oneOf(['action', 'combo'])).action(oneOf(soulActions)), this.onSoulModifier)\n\t\tthis.addEventHook(foeFilter.type('death'), this.onFoeDeath)\n\n\t\t// Shroud Gauge\n\t\tthis.addEventHook(playerFilter.type('action').action(this.data.matchActionId(SHROUD_ACTIONS)), this.onShroudModifier)\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onFoeDeath(event: Events['death']) {\n\t\t// We effectively check if they had the status 100ms before death, since it drops with death\n\t\tif (this.actors.get(event.actor).at(event.timestamp - 100).hasStatus(this.data.statuses.DEATHS_DESIGN.id)) {\n\t\t\tthis.soulGauge.generate(DESIGN_GAIN)\n\t\t}\n\t}\n\n\tprivate onSoulModifier(event: Events['action' | 'combo']) {\n\t\tconst modifier = this.soulGaugeModifiers.get(event.action)\n\n\t\tif (modifier != null) {\n\t\t\tconst amount = modifier[event.type] ?? 0\n\t\t\tthis.soulGauge.modify(amount)\n\t\t}\n\t}\n\n\tprivate onShroudModifier(event: Events['action']) {\n\t\tconst action = this.data.getAction(event.action)\n\t\tif (action == null) { return }\n\n\t\tswitch (action.id) {\n\t\tcase this.data.actions.ENSHROUD.id:\n\t\t\tthis.shroudGauge.spend(HIGH_SHROUD_MOD)\n\t\t\tbreak\n\n\t\tcase this.data.actions.PLENTIFUL_HARVEST.id:\n\t\t\tthis.shroudGauge.generate(HIGH_SHROUD_MOD)\n\t\t\tbreak\n\n\t\tdefault:\n\t\t\tthis.shroudGauge.generate(BASE_SHROUD_MOD)\n\t\t}\n\t}\n\n\tprivate onComplete() {\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.SOUL_SLICE.icon,\n\t\t\tcontent: <Trans id=\"rpr.gauge.soul.suggestions.overcap.content\">\n\t\t\t\t\tAvoid letting your Soul gauge overcap. The wasted resources cost you Shroud generation which you need for your highest damage skills.\n\t\t\t</Trans>,\n\t\t\twhy: <Trans id=\"rpr.gauge.soul.suggestions.overcap.why\">\n\t\t\t\t{this.soulGauge.overCap} Souls lost to overcapping Soul gauge.\n\t\t\t</Trans>,\n\t\t\ttiers: SUGGESTION_TIERS,\n\t\t\tvalue: this.soulGauge.overCap,\n\t\t}))\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.PLENTIFUL_HARVEST.icon,\n\t\t\tcontent: <Trans id=\"rpr.gauge.shroud.suggestions.overcap.content\">\n\t\t\t\t\tAvoid letting your Shroud gauge overcap as it can cost you uses of <DataLink action=\"ENSHROUD\"/> over the fight.\n\t\t\t</Trans>,\n\t\t\twhy: <Trans id=\"rpr.gauge.shroud.suggestions.overcap.why\">\n\t\t\t\t{this.shroudGauge.overCap} Shrouds lost to overcapping Shroud gauge.\n\t\t\t</Trans>,\n\t\t\ttiers: SUGGESTION_TIERS,\n\t\t\tvalue: this.shroudGauge.overCap,\n\t\t}))\n\t}\n}\n","import {Positionals as CorePositionals} from 'parser/core/modules/Positionals'\nimport {DISPLAY_ORDER} from './DISPLAY_ORDER'\n\nexport class Positionals extends CorePositionals {\n\tstatic override displayOrder = DISPLAY_ORDER.POSITIONALS\n\n\tpositionals = [\n\t\tthis.data.actions.GIBBET,\n\t\tthis.data.actions.GALLOWS,\n\t]\n}\n","import {t} from '@lingui/macro'\nimport {Trans, Plural} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Event} from 'event'\nimport {filter} from 'parser/core/filter'\nimport {Procs as CoreProcs} from 'parser/core/modules/Procs'\nimport {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\nconst SEVERITIES = {\n\tEXPIRED: {\n\t\t1: SEVERITY.MEDIUM,\n\t\t2: SEVERITY.MAJOR,\n\t},\n\tOVERWRITTEN: {\n\t\t1: SEVERITY.MINOR,\n\t\t5: SEVERITY.MEDIUM,\n\t},\n}\n\nconst LOST_PROC_POTENCY = 60\n\nexport class Procs extends CoreProcs {\n\tstatic override title = t('rpr.procs.title')`Enhanced Procs`\n\tstatic override debug = false\n\n\tprivate badStalks: number = 0\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\t// Additionally count Blood Stalk uses so we can find lost potency to Unveiled\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.source(this.parser.actor.id)\n\t\t\t\t.type('action')\n\t\t\t\t.action(this.data.actions.BLOOD_STALK.id),\n\t\t\t() => this.badStalks++\n\t\t)\n\t}\n\n\toverride showProcTimelineRow = false\n\n\ttrackedProcs = [\n\t\t{\n\t\t\tprocStatus: this.data.statuses.ENHANCED_GALLOWS,\n\t\t\tconsumeActions: [this.data.actions.GALLOWS],\n\t\t},\n\t\t{\n\t\t\tprocStatus: this.data.statuses.ENHANCED_GIBBET,\n\t\t\tconsumeActions: [this.data.actions.GIBBET],\n\t\t},\n\t\t{\n\t\t\tprocStatus: this.data.statuses.ENHANCED_CROSS_REAPING,\n\t\t\tconsumeActions: [this.data.actions.CROSS_REAPING],\n\t\t},\n\t\t{\n\t\t\tprocStatus: this.data.statuses.ENHANCED_VOID_REAPING,\n\t\t\tconsumeActions: [this.data.actions.VOID_REAPING],\n\t\t},\n\t]\n\n\tprotected override addJobSpecificSuggestions() {\n\t\tconst overwrittenGibbet = this.getOverwriteCountForStatus(this.data.statuses.ENHANCED_GIBBET.id)\n\t\tconst overwrittenGallows = this.getOverwriteCountForStatus(this.data.statuses.ENHANCED_GALLOWS.id)\n\n\t\tconst expiredGibbet = this.getDropCountForStatus(this.data.statuses.ENHANCED_GIBBET.id)\n\t\tconst expiredGallows = this.getDropCountForStatus(this.data.statuses.ENHANCED_GALLOWS.id)\n\t\tconst badGibbetStalks = this.badStalks - expiredGibbet\n\t\tconst badGallowsStalks = this.badStalks - expiredGallows\n\n\t\t// Sanity check, this might get weird if there's a naked Blood Stalk at the start of the fight for a borked Gluttony tho, fix later\n\t\tif (badGibbetStalks + badGallowsStalks !== this.badStalks) {\n\t\t\tthis.debug(`Mismatched bloodstalks to lost enhanced procs: ${this.badStalks} stalks: Gibbet ${badGibbetStalks} + Gallows ${badGallowsStalks}`)\n\t\t}\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.GIBBET.icon,\n\t\t\tcontent: <Trans id=\"rpr.procs.suggestions.overwritten.gibbet.content\">\n\t\t\t\tAvoid overwriting Enhanced <DataLink showIcon={false}  action=\"GIBBET\"/> with an unenhanced <DataLink showIcon={false}  action=\"GALLOWS\"/>.\n\t\t\t\tEach overwrite is the same as losing a positional, and quickly adds up.\n\t\t\t</Trans>,\n\t\t\ttiers: SEVERITIES.OVERWRITTEN,\n\t\t\tvalue: overwrittenGibbet,\n\t\t\twhy: <Trans id=\"rpr.procs.suggestions.overwritten.gibbet.why\">\n\t\t\t\t{overwrittenGibbet * LOST_PROC_POTENCY} potency lost due to overwriting procs.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.GALLOWS.icon,\n\t\t\tcontent: <Trans id=\"rpr.procs.suggestions.overwritten.gallows.content\">\n\t\t\t\tAvoid overwriting Enhanced <DataLink showIcon={false} action=\"GALLOWS\"/> with an unenhanced <DataLink showIcon={false} action=\"GIBBET\"/>.\n\t\t\t\tEach overwrite is the same as losing a positional, and quickly adds up.\n\t\t\t</Trans>,\n\t\t\ttiers: SEVERITIES.OVERWRITTEN,\n\t\t\tvalue: overwrittenGallows,\n\t\t\twhy: <Trans id=\"rpr.procs.suggestions.overwritten.gallows.why\">\n\t\t\t\t{overwrittenGallows * LOST_PROC_POTENCY} potency lost due to overwriting procs.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.GIBBET.icon,\n\t\t\tcontent: <Trans id=\"rpr.procs.suggestions.expired.gibbet.content\">\n\t\t\t\tAvoid letting Enhanced  <DataLink showIcon={false}  action=\"GIBBET\"/> expire. On top of the lost potency itself,\n\t\t\t\tyou're also losing the potency from <DataLink action=\"UNVEILED_GALLOWS\"/> if <DataLink action=\"GLUTTONY\"/> hasn't given you extra stacks of <DataLink status=\"SOUL_REAVER\"/>.\n\t\t\t</Trans>,\n\t\t\ttiers: SEVERITIES.EXPIRED,\n\t\t\tvalue: expiredGibbet,\n\t\t\twhy: <Trans id=\"rpr.procs.suggestions.expired.gibbet.why\">\n\t\t\t\t{(expiredGibbet + badGibbetStalks) * LOST_PROC_POTENCY} potency lost to letting <Plural value={expiredGibbet} one=\"an Enhanced Gibbet proc\" other=\"Enhanced Gibbet procs\" /> expire.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.GALLOWS.icon,\n\t\t\tcontent: <Trans id=\"rpr.procs.suggestions.expired.gallows.content\">\n\t\t\t\tAvoid letting Enhanced  <DataLink showIcon={false}  action=\"GALLOWS\"/> expire. On top of the lost potency itself,\n\t\t\t\tyou're also losing the potency from <DataLink action=\"UNVEILED_GIBBET\"/> if <DataLink action=\"GLUTTONY\"/> hasn't given you extra stacks of <DataLink status=\"SOUL_REAVER\"/>.\n\t\t\t</Trans>,\n\t\t\ttiers: SEVERITIES.EXPIRED,\n\t\t\tvalue: expiredGallows,\n\t\t\twhy: <Trans id=\"rpr.procs.suggestions.expired.gallows.why\">\n\t\t\t\t{(expiredGallows + badGallowsStalks) * LOST_PROC_POTENCY} potency lost to letting <Plural value={expiredGallows} one=\"an Enhanced Gallows proc\" other=\"Enhanced Gallows procs\" /> expire.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n}\n","import {Plural, Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {ActionKey} from 'data/ACTIONS'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport {Data} from 'parser/core/modules/Data'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\nconst SEVERITIES = {\n\t1: SEVERITY.MEDIUM,\n\t2: SEVERITY.MAJOR,\n}\n\nconst STACK_BUILDERS: ActionKey [] = [\n\t'GLUTTONY',\n\t'BLOOD_STALK',\n\t'GRIM_SWATHE',\n\t'UNVEILED_GALLOWS',\n\t'UNVEILED_GIBBET',\n]\n\n// These drop EVERY Reaver stack when used\nconst STACK_DROPPERS: ActionKey [] = [\n\t'SLICE',\n\t'WAXING_SLICE',\n\t'INFERNAL_SLICE',\n\t'SHADOW_OF_DEATH',\n\t'WHORL_OF_DEATH',\n\t'SOUL_SLICE',\n\t'SOUL_SCYTHE',\n\t'SOULSOW',\n\t'HARVEST_MOON',\n\t'HARPE',\n\t'NIGHTMARE_SCYTHE',\n\t'SPINNING_SCYTHE',\n\t'PLENTIFUL_HARVEST',\n]\n\nconst STACK_CONSUMERS: ActionKey [] = [\n\t'GALLOWS',\n\t'GIBBET',\n\t'GUILLOTINE',\n]\n\nconst BASE_GAIN = 1 // Soul consuming moves grant 1 reaver\nconst HIGH_GAIN = 2 // Gluttony grants 2 reavers\n\nexport class Reaver extends Analyser {\n\tstatic override handle = 'reaver'\n\n\t@dependency private data!: Data\n\t@dependency private suggestions!: Suggestions\n\t@dependency private actors!: Actors\n\n\t//Trackers\n\tprivate droppedReavers = 0\n\tprivate currentReaverStacks = 0\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\n\t\tthis.addEventHook(playerFilter.type('action').action(this.data.matchActionId(STACK_BUILDERS)), this.onGain)\n\t\tthis.addEventHook(playerFilter.type('action').action(this.data.matchActionId(STACK_CONSUMERS)), this.onUse)\n\t\tthis.addEventHook(playerFilter.type('action').action(this.data.matchActionId(STACK_DROPPERS)), this.dropStacks)\n\t\tthis.addEventHook(filter<Event>().type('death').actor(this.parser.actor.id), this.dropStacks)\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\n\t}\n\n\tprivate onGain(event: Events['action']) : void {\n\t\t// Overwriting existing stacks\n\t\tif (this.actors.current.hasStatus(this.data.statuses.SOUL_REAVER.id)) {\n\t\t\tthis.dropStacks()\n\t\t}\n\n\t\tthis.currentReaverStacks = (event.action === this.data.actions.GLUTTONY.id) ? HIGH_GAIN : BASE_GAIN\n\t}\n\n\tprivate onUse() {\n\t\tif (this.actors.current.hasStatus(this.data.statuses.SOUL_REAVER.id)) {\n\t\t\tthis.currentReaverStacks--\n\t\t}\n\t}\n\n\tprivate dropStacks() {\n\t\tthis.droppedReavers += this.currentReaverStacks\n\t\tthis.currentReaverStacks = 0\n\t}\n\n\tprivate onComplete() {\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.GLUTTONY.icon,\n\t\t\tcontent: <Trans id = \"rpr.reaver.suggestion.dropped.content\">\n\t\t\t\tAvoid dropping <DataLink status=\"SOUL_REAVER\"/> by using <DataLink action=\"GALLOWS\"/>, <DataLink action=\"GIBBET\"/>, or <DataLink action=\"GUILLOTINE\"/>.\n\t\t\t\tThese actions have high damage and grant you 10 Shroud gauge, giving you more chances to use <DataLink action=\"ENSHROUD\"/> over the course of a fight.\n\t\t\t</Trans>,\n\t\t\ttiers: SEVERITIES,\n\t\t\twhy: <Trans id =\"rpr.reaver.suggestion.dropped.why\">\n\t\t\t\t\tYou lost <Plural value={this.droppedReavers} one=\"# stack\" other=\"# stacks\"/> over the course of the fight.\n\t\t\t</Trans>,\n\t\t\tvalue: this.droppedReavers,\n\t\t}))\n\t}\n}\n","import {Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {ActionKey} from 'data/ACTIONS'\nimport {EvaluatedAction, ExpectedActionsEvaluator} from 'parser/core/modules/ActionWindow'\nimport {HistoryEntry} from 'parser/core/modules/ActionWindow/History'\nimport {SEVERITY} from 'parser/core/modules/Suggestions'\nimport {Tincture as CoreTincture} from 'parser/core/modules/Tincture'\nimport React from 'react'\nimport {OPENER_BUFFER} from '../constants'\nimport {DISPLAY_ORDER} from './DISPLAY_ORDER'\n\nconst COMMUNIO_SEVERITY = {\n\t1: SEVERITY.MINOR,\n\t2: SEVERITY.MEDIUM,\n}\n\n// Remove support actions from the table to avoid clutter\nconst IGNORED_ACTIONS: ActionKey[] = [\n\t'ARCANE_CREST',\n\t'ARMS_LENGTH',\n\t'BLOODBATH',\n\t'FEINT',\n\t'HELLS_EGRESS',\n\t'HELLS_INGRESS',\n\t'REGRESS',\n\t'SECOND_WIND',\n]\n\nexport class Tincture extends CoreTincture {\n\tstatic override displayOrder = DISPLAY_ORDER.TINCTURES\n\n\tprivate adjustExpectedActionCount = (window: HistoryEntry<EvaluatedAction[]>) => {\n\t\tif (window.start - OPENER_BUFFER <= this.parser.pull.timestamp) {\n\t\t\t// We can only do one Communio in the opener\n\t\t\treturn -1\n\t\t}\n\t\treturn 0\n\t}\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tthis.ignoreActions(IGNORED_ACTIONS.map(key => this.data.actions[key].id))\n\n\t\tthis.addEvaluator(new ExpectedActionsEvaluator({\n\t\t\texpectedActions: [\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.COMMUNIO,\n\t\t\t\t\texpectedPerWindow: 2,\n\t\t\t\t},\n\t\t\t],\n\t\t\tsuggestionIcon: this.data.actions.INFUSION_STR.icon,\n\t\t\tsuggestionContent: <Trans id=\"rpr.tincture.suggestions.trackedActions.content\">\n\t\t\t\tTry to fit two uses of <DataLink action=\"COMMUNIO\"/> while under the effects of a Tincture.\n\t\t\t</Trans>,\n\t\t\tsuggestionWindowName: <DataLink action=\"INFUSION_STR\" showIcon={false}/>,\n\t\t\tseverityTiers: COMMUNIO_SEVERITY,\n\t\t\tadjustCount: this.adjustExpectedActionCount,\n\t\t}))\n\t}\n}\n","import {Weaving as CoreWeaving} from 'parser/core/modules/Weaving'\nimport {DISPLAY_ORDER} from './DISPLAY_ORDER'\n\nexport class Weaving extends CoreWeaving {\n\tstatic override displayOrder = DISPLAY_ORDER.WEAVING\n}\n","import {ActionTimeline} from './ActionTimeline'\nimport {AoE} from './AoE'\nimport {ArcaneCircle} from './ArcaneCircle'\nimport {Combos} from './Combos'\nimport {CooldownDowntime} from './CooldownDowntime'\nimport {DeathGauge} from './DeathGauge'\nimport {DeathsDesign} from './DeathsDesign'\nimport {Defensives} from './Defensives'\nimport {Enshroud} from './Enshroud'\nimport {HarvestMoon} from './HarvestMoon'\nimport {OtherGauges} from './OtherGauges'\nimport {Positionals} from './Positionals'\nimport {Procs} from './Procs'\nimport {Reaver} from './Reaver'\nimport {Tincture} from './Tincture'\nimport {Weaving} from './Weaving'\n\nexport default [\n\tActionTimeline,\n\tAoE,\n\tArcaneCircle,\n\tCombos,\n\tCooldownDowntime,\n\tDeathsDesign,\n\tDeathGauge,\n\tDefensives,\n\tEnshroud,\n\tHarvestMoon,\n\tOtherGauges,\n\tPositionals,\n\tProcs,\n\tReaver,\n\tTincture,\n\tWeaving,\n]\n","require('../../modules/es.math.trunc');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Math.trunc;\n","var $ = require('../internals/export');\n\nvar ceil = Math.ceil;\nvar floor = Math.floor;\n\n// `Math.trunc` method\n// https://tc39.es/ecma262/#sec-math.trunc\n$({ target: 'Math', stat: true }, {\n  trunc: function trunc(it) {\n    return (it > 0 ? floor : ceil)(it);\n  }\n});\n","var parent = require('../../es/math/trunc');\n\nmodule.exports = parent;\n"],"names":["module","exports","ItemDepth","ActionTimeline","CastTime","Cooldowns","Data","Timeline","resolvedRows","groupRows","action","this","addRow","content","constructor","rows","config","resolvedConfig","resolveConfig","push","addEventHook","onComplete","populatedGroups","row","populateRow","forEach","specifier","cooldowns","groups","group","add","allGroups","has","finalConfig","Array","isArray","ensureArray","existingRow","get","isDefined","firstContent","label","Trans","id","data","actions","name","cooldownHistory","timeline","ContainerRow","order","collapse","set","addCooldownItems","addChargeItems","chargeHistory","history","entry","duration","getCooldownDuration","start","parser","pull","timestamp","end","addItem","SimpleItem","className","item","delta","ActionItem","depth","ACTION","ChargeGainItem","CHARGE_GAIN","endReason","CooldownEndReason","castTime","forAction","Math","max","Analyser","handle","debug","dependency","Content","styles","Icon","BaseItem","MIN_RECAST_TIME","SpeedAdjustments","castTimes","scIndex","switftCastFilter","filter","target","actor","status","statuses","SWIFTCAST","type","onApplySwiftcast","onRemoveSwiftcast","setInstantCastAdjustment","reset","adjustment","currentEpochTimestamp","affectsWhich","setPercentageAdjustment","ct","event","recastForAction","actionId","getAdjustedTime","forWhich","matchingTimes","getAction","defaultTime","gcdRecast","cooldown","speedAttribute","speedAdjustments","getAdjustedDuration","attribute","flatReduction","flatIncrease","percentageAdjustment","flatAdjustedTime","adjustedTime","floor","Positionals","Checklist","positionalResults","positionals","source","cause","matchCauseActionId","positional","onCast","positionalResult","getOrCreatePositionalResult","positionalHit","targets","bonusPercent","hits","misses","result","missed_positional_combo_bonus_percent","calculateBonusPercent","getBasePotency","getPotencyWithMods","BonusModifier","missedPositionalBonusPercents","base","bonus","relative_timestamp","relativeTimestamp","circular","compact","icon","size","onClick","show","formatEpochTimestamp","length","checklist","Rule","displayOrder","DISPLAY_ORDER","description","requirements","positionalRequirement","actual","expected","percent","Requirement","weight","overrideDisplay","toFixed","total","current","unstackable","celled","textAlign","numHits","numMisses","success","style","whiteSpace","showName","positive","negative","miss","createTimelineButton","title","Statuses","Invulnerability","ft","statusSpecifier","targetSpecifier","edges","edgesForActor","statusHistory","a","b","meta","uptime","application","edge","side","events","apply","refresh","splitRangeForInvulns","undefined","statusDuration","getStatus","remove","min","range","finalRanges","invulns","invulnerability","getWindows","actorFilter","kind","types","invuln","previousRange","Tincture","buffStatus","MEDICATED","BuffWindow","CAST_TIME_MAX_WEAVES","WEAVING_SEVERITY","SEVERITY","Weaving","Suggestions","suggestionIcon","moduleLink","cursor","scrollTo","message","suggestionContent","severity","weaves","ongoingCastEvent","leadingGcdEvent","trailingGcdEvent","badWeaves","playerFilter","onBeginCast","clearWeave","autoAttack","isOgcd","saveIfBad","suggestions","TieredSuggestion","why","tiers","value","leadingTimestamp","gcdTimeDiff","getDuration","weave","isBadWeave","onGcd","weaveCount","isActive","recast","recastForEvent","BASE_GCD","getMaxWeaves","forEvent","matchClosestLower","panels","key","formatDuration","exclusive","styled","fluid","CoreActionTimeline","AoE","SPINNING_SCYTHE","trackedActions","aoeAction","stActions","SLICE","minTargets","SOUL_SCYTHE","SOUL_SLICE","WHORL_OF_DEATH","SHADOW_OF_DEATH","GRIM_SWATHE","BLOOD_STALK","GUILLOTINE","GALLOWS","GIBBET","LEMURES_SCYTHE","LEMURES_SLICE","GRIM_REAPING","VOID_REAPING","CROSS_REAPING","AoEUsages","OPENER_BUFFER","SEVERITIES","ArcaneCircle","ARCANE_CIRCLE","addEvaluator","ExpectedActionsEvaluator","expectedActions","COMMUNIO","expectedPerWindow","PLENTIFUL_HARVEST","showIcon","suggestionWindowName","severityTiers","adjustCount","bind","window","fightTimeRemaining","isRushedEndOfPullWindow","RaidBuffWindow","Combos","WAXING_SLICE","CoreCombos","CooldownDowntime","trackedCds","firstUseOffset","GLUTTONY","CoreCooldownDowntime","GAUGE_FADE","LEMURE_ACTIONS","VOID_ACTIONS","DeathGauge","Actors","BrokenLog","lemureShroud","CounterGauge","maximum","correctHistory","graph","color","Color","JOBS","fade","voidShroud","ENSHROUDED","onEnshroud","onDeshroud","matchActionId","onLemure","onVoid","setMaximum","generate","MAX_STACKS","actors","hasStatus","spend","brokenLog","trigger","CoreGauge","TARGET","DeathsDesign","getUptime","DEATHS_DESIGN","foes","TieredRule","getUptimePercent","Defensives","trackedDefensives","ARCANE_CREST","CoreDefensives","SHROUD_ACTIONS","EnhancedReapingEvaluator","header","accessor","didReapingsAlternate","lastReaping","NotesEvaluator","Enshroud","trackOnlyActions","ExpectedActionGroupsEvaluator","expectedActionGroups","ENSHROUD","adjustOutcome","RotationTargetOutcome","HarvestMoon","UnableToAct","moons","HARVEST_MOON","ADJUSTED_CAST","SOULSOW","invulnWindows","unableToAct","canChargeMoon","inputWindow","ADJUSTED_CAST_TIME","unableToActWindow","expectedUses","getExpectedUses","harvestsUsedPercent","getUsedPercentage","SUGGESTION_TIERS","OtherGauges","soulGauge","shroudGauge","soulGaugeModifiers","combo","INFERNAL_SLICE","NIGHTMARE_SCYTHE","UNVEILED_GIBBET","UNVEILED_GALLOWS","foeFilter","oneOf","soulActions","onSoulModifier","onFoeDeath","onShroudModifier","at","modifier","amount","modify","overCap","CorePositionals","EXPIRED","OVERWRITTEN","Procs","badStalks","showProcTimelineRow","trackedProcs","procStatus","ENHANCED_GALLOWS","consumeActions","ENHANCED_GIBBET","ENHANCED_CROSS_REAPING","ENHANCED_VOID_REAPING","overwrittenGibbet","getOverwriteCountForStatus","overwrittenGallows","expiredGibbet","getDropCountForStatus","expiredGallows","badGibbetStalks","badGallowsStalks","CoreProcs","STACK_BUILDERS","STACK_DROPPERS","STACK_CONSUMERS","Reaver","droppedReavers","currentReaverStacks","onGain","onUse","dropStacks","SOUL_REAVER","COMMUNIO_SEVERITY","IGNORED_ACTIONS","adjustExpectedActionCount","ignoreActions","INFUSION_STR","CoreTincture","CoreWeaving","path","trunc","$","ceil","stat","it","parent"],"sourceRoot":""}