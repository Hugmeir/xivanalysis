{"version":3,"file":"assets/3222.6ff3074c.js","mappings":"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","sources":["webpack://@xivanalysis/client/./src/parser/core/modules/CastTime.ts","webpack://@xivanalysis/client/./src/parser/core/modules/Statistics/AbstractStatistic.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/Statistics/Statistics.module.css?07c2","webpack://@xivanalysis/client/./src/parser/core/modules/Statistics/StatisticComponent.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/Statistics/Statistics.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/Statistics/SimpleStatistic.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/Statistics/SimpleStatistic.module.css?19a6","webpack://@xivanalysis/client/./src/parser/core/modules/Statistics/PieChartStatistic.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/Statistics/PieChartStatistic.module.css?6b34"],"sourcesContent":["import {Event, Events} from 'event'\nimport {Analyser} from '../Analyser'\nimport {filter} from '../filter'\nimport {dependency} from '../Injectable'\nimport {Data} from './Data'\nimport {SpeedAdjustments} from './SpeedAdjustments'\n\nconst MIN_RECAST_TIME = 1500\n\ntype AffectsWhichTime =\n\t| 'cast'\n\t| 'recast'\n\t| 'both'\n\nexport interface CastTimeAdjustment {\n\tactions: number[] | 'all',\n\ttype: 'time' | 'percentage'\n\tadjustment: number,\n\taffectsWhich: AffectsWhichTime,\n\tstart: number,\n\tend?: number\n}\n\nexport default class CastTime extends Analyser {\n\tstatic override handle = 'castTime'\n\n\t@dependency data!: Data\n\t@dependency speedAdjustments!: SpeedAdjustments\n\n\tprivate castTimes: CastTimeAdjustment[] = []\n\tprivate scIndex: number | null = null\n\n\toverride initialise() {\n\t\t// Only going to deal with SC here, job-specific can do it themselves\n\t\tconst switftCastFilter = filter<Event>()\n\t\t\t.target(this.parser.actor.id)\n\t\t\t.status(this.data.statuses.SWIFTCAST.id)\n\n\t\tthis.addEventHook(switftCastFilter.type('statusApply'), this.onApplySwiftcast)\n\t\tthis.addEventHook(switftCastFilter.type('statusRemove'), this.onRemoveSwiftcast)\n\t}\n\n\tprivate onApplySwiftcast(): void {\n\t\tthis.scIndex = this.setInstantCastAdjustment()\n\t}\n\n\tprivate onRemoveSwiftcast(): void {\n\t\tthis.reset(this.scIndex)\n\t\tthis.scIndex = null\n\t}\n\n\t// TODO: Update signatures to use objects instead of param vomit, separate PR tho\n\t/**\n\t * Sets a cast time adjustment for a flat time amount per cast (See: Lightspeed, Dreadwyrm Trance, etc.)\n\t * @param actions The actions this adjustment applies to. Either an array of IDs, or the string 'all'\n\t * @param adjustment The amount of time that cast times are adjustmented by\n\t * @param start The beginning of the adjustment time range. Defaults to the current epoch timestamp\n\t * @param end The end of the adjustment time range. May be left null if the end of the range is not yet known\n\t * @returns The index number within the cast time adjustments collection, can be used to reset/end this adjustment later\n\t */\n\tpublic setTimeAdjustment(actions: number[] | 'all', adjustment: number, start: number = this.parser.currentEpochTimestamp, end?: number): number {\n\t\treturn this.set({actions, adjustment, start, end, type: 'time', affectsWhich: 'cast'})\n\t}\n\n\t/**\n\t * Shorthand function for setting casts to instant (ie. Swiftcast, Triplecast)\n\t * @param actions The actions this adjustment applies to. Either an array of IDs, or the string 'all'. Defaults to 'all'\n\t * @param start The beginning of the adjustment time range. Defaults to the current epoch timestamp\n\t * @param end The end of the adjustment time range. May be left null if the end of the range is not yet known\n\t * @returns The end of the adjustment time range. May be left null if the end of the range is not yet known\n\t */\n\tpublic setInstantCastAdjustment(actions: number[] | 'all' = 'all', start: number = this.parser.currentEpochTimestamp, end?: number): number {\n\t\treturn this.setPercentageAdjustment(actions, 0, 'cast', start, end)\n\t}\n\n\t/**\n\t * Sets a cast time adjustment for a percentage change per cast (See: Swiftcast, RDM's Doublecast trait, Ley Lines, etc.)\n\t * @param actions The actions this adjustment applies to. Either an array of IDs, or the string 'all'\n\t * @param adjustment The percentage multiplier to adjust the cast time to (ie 0 for instant cast, 0.85 for Ley Lines, 1.25 for a 25% slow)\n\t * @param affectsWhich Does this percentage change affect the recast time, cast time, or both? Defaults to cast time\n\t * @param start The beginning of the adjustment time range. Defaults to the current epoch timestamp\n\t * @param end The end of the adjustment time range. May be left null if the end of the range is not yet known\n\t * @returns The index number within the cast time adjustments collection, can be used to reset/end this adjustment later\n\t */\n\tpublic setPercentageAdjustment(actions: number[] | 'all', adjustment: number, affectsWhich: AffectsWhichTime = 'cast', start: number = this.parser.currentEpochTimestamp, end?: number): number {\n\t\treturn this.set({actions, adjustment, affectsWhich, start, end, type: 'percentage'})\n\t}\n\tprivate set(adjustment: CastTimeAdjustment): number {\n\t\tconst newLength = this.castTimes.push(adjustment)\n\n\t\treturn newLength - 1\n\t}\n\n\t/**\n\t * Sets the 'end' property of the specified cast time reduction range\n\t * @param id The index within the cast times adjustment collection (provided by the set functions)\n\t * @param timestamp The timestamp at which the reduction range ended. Defaults to the current epoch timestamp\n\t */\n\tpublic reset(id: number | null, timestamp = this.parser.currentEpochTimestamp): void {\n\t\tif (id == null) { return }\n\t\tconst ct = this.castTimes[id]\n\t\tif (!ct) { return }\n\t\tct.end = timestamp\n\t}\n\n\t/**\n\t * Returns the effective cast time for the specified event\n\t * @param event The event in question\n\t * @returns The actual cast time, either as the default, or the modified time if any modifiers were in effect. Returns undefined if the action cannot be determined, or has no default cast time\n\t */\n\tpublic forEvent(event: Events['action'] | Events['prepare']): number | undefined {\n\t\treturn this.forAction(event.action, event.timestamp)\n\t}\n\n\t/**\n\t * Returns the effective recast time for the specified event\n\t * @param event The event in question\n\t * @returns The actual recast time, either as the default, or the modified time if any modifiers were in effect. Returns undefined i fthe action cannot be determined, or has no gcdRecast/cooldown property defined\n\t */\n\tpublic recastForEvent(event: Events['action'] | Events['prepare']): number | undefined {\n\t\treturn this.recastForAction(event.action, event.timestamp)\n\t}\n\n\t/**\n\t * Returns the effective cast time for the specified action at the specified point in time\n\t * @param actionId The action in question\n\t * @param timestamp The timestamp in question\n\t * @returns The actual cast time, either as the default, or the modified time if any modifiers were in effect. Returns undefined if the action cannot be determined, or has no default cast time\n\t */\n\tpublic forAction(actionId: number, timestamp: number = this.parser.currentEpochTimestamp): number | undefined {\n\t\treturn this.getAdjustedTime(actionId, timestamp)\n\t}\n\n\t/**\n\t * Returns the effective recast time for the specified action at the specified point in time\n\t * @param actionId The action in question\n\t * @param timestamp Thetimestamp in question\n\t * @returns The actual recast time, either as the default, or the modified time if any modifiers were in effect. Returns undefined if the action cannot be determined, or has no gcdRecast/cooldown property defined\n\t */\n\tpublic recastForAction(actionId: number, timestamp: number = this.parser.currentEpochTimestamp): number | undefined {\n\t\treturn this.getAdjustedTime(actionId, timestamp, 'recast')\n\t}\n\n\t/**\n\t * Returns the adjusted time (either cast or recast) for the specified action at the specified point in time\n\t * @param actionId The action in question\n\t * @param timestamp The timestamp in question\n\t * @param forWhich Do we want the recast for this action, or the cast time? Defaults to cast time\n\t * @returns The adjusted time, if any adjustments exist at this timestamp, or the default if not. Will return undefined if the base time (recast/cooldown/cast) can't be determined\n\t */\n\tprivate getAdjustedTime(actionId: number, timestamp: number = this.parser.currentEpochTimestamp, forWhich: AffectsWhichTime = 'cast'): number | undefined {\n\t\t// Get any cast time modifiers active when the event took place\n\t\tconst matchingTimes = this.castTimes.filter(ct =>\n\t\t\t(ct.actions === 'all' || ct.actions.includes(actionId)) &&\n\t\t\tct.start <= timestamp &&\n\t\t\t(ct.end == null || ct.end >= timestamp) &&\n\t\t\t(ct.affectsWhich === 'both' || ct.affectsWhich === forWhich),\n\t\t)\n\n\t\tconst action = this.data.getAction(actionId)\n\t\tif (action == null) {\n\t\t\treturn undefined\n\t\t}\n\t\tlet defaultTime = forWhich === 'recast'\n\t\t\t? (action.gcdRecast != null ? action.gcdRecast : action.cooldown)\n\t\t\t: action.castTime\n\n\t\t// If the default comes back undefined, or already at or below the minimum action time (including instants), no adjustments to perform\n\t\tif (defaultTime == null || forWhich === 'recast' && defaultTime <= MIN_RECAST_TIME) {\n\t\t\treturn defaultTime\n\t\t}\n\n\t\tif (action.speedAttribute != null) {\n\t\t\tdefaultTime = this.speedAdjustments.getAdjustedDuration({\n\t\t\t\tduration: defaultTime,\n\t\t\t\tattribute: action.speedAttribute,\n\t\t\t})\n\t\t}\n\n\t\tlet flatReduction=0\n\t\tlet flatIncrease=0\n\t\tlet percentageAdjustment=1\n\n\t\tmatchingTimes.forEach(ct => {\n\t\t\tif (ct.type === 'time') {\n\t\t\t\t// Find the largest flat cast time reduction value\n\t\t\t\tif (ct.adjustment < 0 && ct.adjustment < flatReduction) {\n\t\t\t\t\tflatReduction = ct.adjustment\n\t\t\t\t}\n\t\t\t\t// Find the largest flat cast time increase value\n\t\t\t\tif (ct.adjustment > 0 && ct.adjustment > flatIncrease)  {\n\t\t\t\t\tflatIncrease = ct.adjustment\n\t\t\t\t}\n\t\t\t} else if (ct.type === 'percentage') {\n\t\t\t\t// Get the total percentage adjustment\n\t\t\t\tpercentageAdjustment *= ct.adjustment\n\t\t\t}\n\t\t})\n\n\t\t// Calculate the final cast time based on the flat and percentage reductions we've found\n\t\tconst flatAdjustedTime = Math.max(defaultTime + flatIncrease + flatReduction, 0) // Yes, plus flatReduction because it's already a negative value\n\t\tif (forWhich === 'recast' && flatAdjustedTime <= MIN_RECAST_TIME) {\n\t\t\t// Flat reductions reduced value below minimum action time, percentage adjustments will not be effective\n\t\t\treturn MIN_RECAST_TIME\n\t\t}\n\n\t\tif (percentageAdjustment === 0) {\n\t\t\t// Adjusted to instant\n\t\t\treturn 0\n\t\t}\n\n\t\t// Apply percentage speed modifiers, subject to clamping at the minimum action time\n\t\tlet adjustedTime = flatAdjustedTime * percentageAdjustment\n\t\tif (forWhich === 'recast') {\n\t\t\tadjustedTime = Math.max(adjustedTime, MIN_RECAST_TIME)\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-magic-numbers\n\t\treturn Math.floor(adjustedTime / 10) * 10 // adjustments are rounded down to the nearest 10ms in game\n\n\t\t/**\n\t\t * In the absence of easily-acquired slows to test with, I'm going to assume this is the right way to calculate this:\n\t\t * - Lightspeed/DWT even with slow should still have normal 2.5s casts be instant\n\t\t * - Swiftcast/Triple/Dualcast with slow should still be instant\n\t\t * Unsure what the actual interaction between slow and a non-instant percentage change like Ley Lines or a > 2.5s cast with Lightspeed/DWT (aka Raise) would be with a slow\n\t\t * We're also not tracking any slow statuses so this is probably overkill but hey, maybe Reaper or Sage will have a slow-myself-down-to-hit-harder mechanic .-.\n\t\t */\n\t}\n}\n","import React from 'react'\nimport {ColumnSpan, Statistic} from './Statistics'\n\nexport interface AbstractStatisticOptions {\n\tinfo?: React.ReactNode\n\twidth?: ColumnSpan\n\theight?: number\n}\n\nexport abstract class AbstractStatistic implements Statistic {\n\tabstract Content: React.ComponentType\n\n\tInfo?: React.ComponentType\n\twidth?: ColumnSpan\n\theight?: number\n\n\tconstructor(opts: AbstractStatisticOptions) {\n\t\tthis.width = opts.width\n\t\tthis.height = opts.height\n\n\t\tif (opts.info) {\n\t\t\tthis.Info = () => <>{opts.info}</>\n\t\t}\n\t}\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"gutter\":\"20px\",\"sm\":\"(min-width: 576px)\",\"lg\":\"(min-width: 992px)\",\"xl\":\"(min-width: 1340px)\",\"themeBackground\":\"var(--background)\",\"themeBlue\":\"#2185d0\",\"statistics\":\"Statistics-module_statistics__1Bk5V\",\"statistic\":\"Statistics-module_statistic__2-U_7\",\"span1\":\"Statistics-module_span1__1YnR2\",\"span2\":\"Statistics-module_span2__11j6f\",\"span3\":\"Statistics-module_span3__1qvL5\",\"span4\":\"Statistics-module_span4__1k2Iu\",\"info\":\"Statistics-module_info__123Ar\",\"infoIcon\":\"Statistics-module_infoIcon__95qnY\"};","import classNames from 'classnames'\nimport React from 'react'\nimport {Icon, Popup} from 'semantic-ui-react'\nimport {ColumnSpan, Statistic} from './Statistics'\nimport styles from './Statistics.module.css'\n\nconst spanClassMap: Record<ColumnSpan, keyof typeof styles> = {\n\t1: 'span1',\n\t2: 'span2',\n\t3: 'span3',\n\t4: 'span4',\n}\n\ninterface Props {\n\tstatistic: Statistic\n}\n\nexport class StatisticComponent extends React.PureComponent<Props> {\n\toverride render() {\n\t\tconst {statistic} = this.props\n\t\tconst colSpanClass = spanClassMap[statistic.width || 1]\n\n\t\tconst content = (\n\t\t\t<div\n\t\t\t\tclassName={classNames(\n\t\t\t\t\tstyles.statistic,\n\t\t\t\t\tstyles[colSpanClass],\n\t\t\t\t)}\n\t\t\t\tstyle={{gridRowEnd: `span ${statistic.height || 1}`}}\n\t\t\t>\n\t\t\t\t<statistic.Content/>\n\n\t\t\t\t{statistic.Info && (\n\t\t\t\t\t<div className={styles.info}>\n\t\t\t\t\t\t<Icon name=\"info\" className={styles.infoIcon}/>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t)\n\n\t\tif (!statistic.Info) {\n\t\t\treturn content\n\t\t}\n\n\t\treturn <Popup\n\t\t\ttrigger={content}\n\t\t\tcontent={<statistic.Info/>}\n\t\t\tposition=\"bottom center\"\n\t\t\twide=\"very\"\n\t\t/>\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Analyser, DisplayMode} from 'parser/core/Analyser'\nimport React from 'react'\nimport DISPLAY_ORDER from '../DISPLAY_ORDER'\nimport {StatisticComponent} from './StatisticComponent'\nimport styles from './Statistics.module.css'\n\n// eslint-disable-next-line @typescript-eslint/no-magic-numbers\nexport type ColumnSpan = 1 | 2 | 3 | 4\n\nexport interface Statistic {\n\tContent: React.ComponentType\n\tInfo?: React.ComponentType\n\twidth?: ColumnSpan\n\theight?: number\n}\n\nexport class Statistics extends Analyser {\n\tstatic override handle = 'statistics'\n\tstatic override title = t('core.statistics.title')`Statistics`\n\tstatic override displayOrder = DISPLAY_ORDER.STATISTICS\n\tstatic override displayMode = DisplayMode.RAW\n\n\tprivate statistics: Statistic[] = []\n\n\tadd(statistic: Statistic) {\n\t\tthis.statistics.push(statistic)\n\t}\n\n\toverride output() {\n\t\tif (!this.statistics.length) {\n\t\t\treturn false\n\t\t}\n\n\t\treturn (\n\t\t\t<div className={styles.statistics}>\n\t\t\t\t{this.statistics.map((statistic, i) => (\n\t\t\t\t\t<StatisticComponent key={i} statistic={statistic}/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t)\n\t}\n}\n","import React from 'react'\nimport {AbstractStatistic, AbstractStatisticOptions} from './AbstractStatistic'\nimport styles from './SimpleStatistic.module.css'\n\nexport class SimpleStatistic extends AbstractStatistic {\n\tprivate title: React.ReactNode\n\tprivate icon?: string\n\tprivate value: React.ReactNode\n\n\tconstructor(opts: {\n\t\ttitle: React.ReactNode,\n\t\ticon?: string,\n\t\tvalue: React.ReactNode,\n\t} & AbstractStatisticOptions) {\n\t\tsuper(opts)\n\n\t\tthis.title = opts.title\n\t\tthis.icon = opts.icon\n\t\tthis.value = opts.value\n\t}\n\n\tContent = () => (\n\t\t<div className={styles.simpleStatistic}>\n\t\t\t<div className={styles.titleWrapper}>\n\t\t\t\t{this.icon && <img src={this.icon} className={styles.icon}/>}\n\t\t\t\t<div className={styles.title}>{this.title}</div>\n\t\t\t</div>\n\t\t\t<div className={styles.value}>{this.value}</div>\n\t\t</div>\n\t)\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"gutter\":\"20px\",\"simpleStatistic\":\"SimpleStatistic-module_simpleStatistic__2uROS\",\"titleWrapper\":\"SimpleStatistic-module_titleWrapper__BBWB4\",\"icon\":\"SimpleStatistic-module_icon__1E0wK\",\"title\":\"SimpleStatistic-module_title__1UZdX\",\"value\":\"SimpleStatistic-module_value__2UUte\"};","import {merge} from 'lodash'\nimport React from 'react'\nimport {Pie} from 'react-chartjs-2'\nimport {AbstractStatistic, AbstractStatisticOptions} from './AbstractStatistic'\nimport styles from './PieChartStatistic.module.css'\n\nconst DEFAULT_PIE_STAT_WIDTH = 2\nconst CHART_SIZE = 80\nconst DEFAULT_CHART_OPTIONS = {\n\tresponsive: false,\n\tlegend: {display: false},\n\ttooltips: {enabled: false},\n}\nconst MISSING_COLOUR_FALLBACK = '#888'\n\ninterface FixedLengthArray<T, L extends number> extends ReadonlyArray<T> {\n\t0: T\n\tlength: L\n}\n\nexport type DataSet<T, L extends number> = Array<DataPoint<T, L>>\n\nexport interface DataPoint<T, L extends number> {\n\tvalue: number\n\tcolor?: string,\n\tcolumns: FixedLengthArray<T, L>\n}\n\nexport class PieChartStatistic<L extends number> extends AbstractStatistic {\n\tprivate readonly headings: FixedLengthArray<React.ReactNode, L>\n\tprivate readonly data: DataSet<React.ReactNode, L>\n\tprivate readonly options: Chart.ChartOptions\n\n\tconstructor(opts: {\n\t\theadings: FixedLengthArray<React.ReactNode, L>,\n\t\tdata: DataSet<React.ReactNode, L>,\n\t\toptions?: Chart.ChartOptions,\n\t} & AbstractStatisticOptions) {\n\t\tsuper({\n\t\t\t...opts,\n\t\t\twidth: opts.width || DEFAULT_PIE_STAT_WIDTH,\n\t\t})\n\n\t\tthis.headings = opts.headings\n\t\tthis.data = opts.data\n\t\tthis.options = merge(DEFAULT_CHART_OPTIONS, opts.options)\n\t}\n\n\tprivate get chartData() {\n\t\tconst dataset = this.data.reduce(\n\t\t\t(carry, point) => {\n\t\t\t\tcarry.data.push(point.value)\n\t\t\t\tcarry.backgroundColor.push(point.color || MISSING_COLOUR_FALLBACK)\n\t\t\t\treturn carry\n\t\t\t},\n\t\t\t{data: [], backgroundColor: []} as {data: number[], backgroundColor: string[]},\n\t\t)\n\t\treturn {\n\t\t\tdatasets: [dataset],\n\t\t}\n\t}\n\n\tContent = () => <>\n\t\t<div className={styles.chartWrapper}>\n\t\t\t<Pie\n\t\t\t\twidth={CHART_SIZE}\n\t\t\t\theight={CHART_SIZE}\n\t\t\t\tdata={this.chartData}\n\t\t\t\toptions={this.options}\n\t\t\t/>\n\t\t</div>\n\t\t<table className={styles.legend}>\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th></th>\n\t\t\t\t\t{this.headings.map((heading, index) => (\n\t\t\t\t\t\t<th key={index}>{heading}</th>\n\t\t\t\t\t))}\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t{this.data.map((point, index) => (\n\t\t\t\t\t<tr key={index}>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tclassName={styles.swatch}\n\t\t\t\t\t\t\t\tstyle={{backgroundColor: point.color || MISSING_COLOUR_FALLBACK}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t{point.columns.map((value, index) => (\n\t\t\t\t\t\t\t<td key={index}>{value}</td>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</tr>\n\t\t\t\t))}\n\t\t\t</tbody>\n\t\t</table>\n\t</>\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"chartWrapper\":\"PieChartStatistic-module_chartWrapper__1TgDl\",\"legend\":\"PieChartStatistic-module_legend__2r-Ln\",\"swatch\":\"PieChartStatistic-module_swatch__3GvsV\"};"],"names":["MIN_RECAST_TIME","CastTime","Data","SpeedAdjustments","castTimes","scIndex","switftCastFilter","filter","target","this","parser","actor","id","status","data","statuses","SWIFTCAST","addEventHook","type","onApplySwiftcast","onRemoveSwiftcast","setInstantCastAdjustment","reset","actions","adjustment","start","currentEpochTimestamp","end","set","affectsWhich","setPercentageAdjustment","push","timestamp","ct","event","forAction","action","recastForAction","actionId","getAdjustedTime","forWhich","matchingTimes","getAction","defaultTime","gcdRecast","cooldown","castTime","speedAttribute","speedAdjustments","getAdjustedDuration","duration","attribute","flatReduction","flatIncrease","percentageAdjustment","forEach","flatAdjustedTime","Math","max","adjustedTime","floor","Analyser","handle","dependency","AbstractStatistic","opts","Content","Info","width","height","info","spanClassMap","StatisticComponent","statistic","props","colSpanClass","content","className","classNames","styles","style","gridRowEnd","Icon","name","Popup","trigger","position","wide","React","Statistics","statistics","length","i","title","displayOrder","DISPLAY_ORDER","displayMode","DisplayMode","SimpleStatistic","icon","value","src","DEFAULT_CHART_OPTIONS","responsive","legend","display","tooltips","enabled","MISSING_COLOUR_FALLBACK","PieChartStatistic","headings","options","chartData","heading","index","point","backgroundColor","color","columns","datasets","carry"],"sourceRoot":""}